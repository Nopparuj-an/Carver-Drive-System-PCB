
Carver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b90  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08008ca0  08008ca0  00018ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009164  08009164  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009164  08009164  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009164  08009164  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800916c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001e4  08009350  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  08009350  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001998a  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000400d  00000000  00000000  00039bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000a83e  00000000  00000000  0003dbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f00  00000000  00000000  00048428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fe1  00000000  00000000  00049328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a8a2  00000000  00000000  0004a309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f488  00000000  00000000  00064bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000942cf  00000000  00000000  00084033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004574  00000000  00000000  00118304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0011c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c88 	.word	0x08008c88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008c88 	.word	0x08008c88

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <IO_init_ADC_DMA>:
	var->Sense_48V = map(ADC_buffer[2], 0, 4096, 0, 48);

}

void IO_init_ADC_DMA(){
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, 4);
 80011e0:	2204      	movs	r2, #4
 80011e2:	4902      	ldr	r1, [pc, #8]	; (80011ec <IO_init_ADC_DMA+0xc>)
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <IO_init_ADC_DMA+0x10>)
 80011e6:	f001 ba33 	b.w	8002650 <HAL_ADC_Start_DMA>
 80011ea:	bf00      	nop
 80011ec:	20000200 	.word	0x20000200
 80011f0:	200002f8 	.word	0x200002f8

080011f4 <map>:
}

float map(float value, int32_t m, int32_t n, int32_t x, int32_t y){
 80011f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011f8:	4680      	mov	r8, r0
	float return_value;
	return_value = (value - m) / (n - m) * (y - x) + x;
 80011fa:	4618      	mov	r0, r3
float map(float value, int32_t m, int32_t n, int32_t x, int32_t y){
 80011fc:	461c      	mov	r4, r3
 80011fe:	4691      	mov	r9, r2
 8001200:	460d      	mov	r5, r1
	return_value = (value - m) / (n - m) * (y - x) + x;
 8001202:	f7ff fd75 	bl	8000cf0 <__aeabi_i2f>
 8001206:	4606      	mov	r6, r0
 8001208:	4628      	mov	r0, r5
 800120a:	f7ff fd71 	bl	8000cf0 <__aeabi_i2f>
 800120e:	4601      	mov	r1, r0
 8001210:	4640      	mov	r0, r8
 8001212:	f7ff fcb7 	bl	8000b84 <__aeabi_fsub>
 8001216:	4680      	mov	r8, r0
 8001218:	eba9 0005 	sub.w	r0, r9, r5
 800121c:	f7ff fd68 	bl	8000cf0 <__aeabi_i2f>
 8001220:	4601      	mov	r1, r0
 8001222:	4640      	mov	r0, r8
 8001224:	f7ff fe6c 	bl	8000f00 <__aeabi_fdiv>
float map(float value, int32_t m, int32_t n, int32_t x, int32_t y){
 8001228:	9f08      	ldr	r7, [sp, #32]
	return_value = (value - m) / (n - m) * (y - x) + x;
 800122a:	4605      	mov	r5, r0
 800122c:	1b38      	subs	r0, r7, r4
 800122e:	f7ff fd5f 	bl	8000cf0 <__aeabi_i2f>
 8001232:	4601      	mov	r1, r0
 8001234:	4628      	mov	r0, r5
 8001236:	f7ff fdaf 	bl	8000d98 <__aeabi_fmul>
 800123a:	4631      	mov	r1, r6
 800123c:	f7ff fca4 	bl	8000b88 <__addsf3>
 8001240:	4605      	mov	r5, r0
	if(return_value > y){
 8001242:	4638      	mov	r0, r7
 8001244:	f7ff fd54 	bl	8000cf0 <__aeabi_i2f>
 8001248:	4629      	mov	r1, r5
 800124a:	4604      	mov	r4, r0
 800124c:	f7ff ff42 	bl	80010d4 <__aeabi_fcmplt>
 8001250:	b928      	cbnz	r0, 800125e <map+0x6a>
		return_value = y;
	}else if(return_value < x){
 8001252:	4629      	mov	r1, r5
 8001254:	4630      	mov	r0, r6
 8001256:	f7ff ff5b 	bl	8001110 <__aeabi_fcmpgt>
 800125a:	b118      	cbz	r0, 8001264 <map+0x70>
		return_value = x;
 800125c:	4634      	mov	r4, r6
	}
	return return_value;
}
 800125e:	4620      	mov	r0, r4
 8001260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return_value = (value - m) / (n - m) * (y - x) + x;
 8001264:	462c      	mov	r4, r5
	return return_value;
 8001266:	e7fa      	b.n	800125e <map+0x6a>

08001268 <IO_read_write>:
void IO_read_write(IOtypedef *var) {
 8001268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint8_t AUTO_CMD = HAL_GPIO_ReadPin(AUTO_CMD_GPIO_Port, AUTO_CMD_Pin);
 800126c:	2101      	movs	r1, #1
void IO_read_write(IOtypedef *var) {
 800126e:	4604      	mov	r4, r0
	uint8_t AUTO_CMD = HAL_GPIO_ReadPin(AUTO_CMD_GPIO_Port, AUTO_CMD_Pin);
 8001270:	4849      	ldr	r0, [pc, #292]	; (8001398 <IO_read_write+0x130>)
 8001272:	f001 fdcb 	bl	8002e0c <HAL_GPIO_ReadPin>
 8001276:	4605      	mov	r5, r0
	uint8_t MANUAL_CMD = HAL_GPIO_ReadPin(MANUAL_CMD_GPIO_Port, MANUAL_CMD_Pin);
 8001278:	2102      	movs	r1, #2
 800127a:	4847      	ldr	r0, [pc, #284]	; (8001398 <IO_read_write+0x130>)
 800127c:	f001 fdc6 	bl	8002e0c <HAL_GPIO_ReadPin>
	if ((AUTO_CMD && MANUAL_CMD) || (!AUTO_CMD && !MANUAL_CMD)) {
 8001280:	b115      	cbz	r5, 8001288 <IO_read_write+0x20>
 8001282:	fab0 f580 	clz	r5, r0
 8001286:	096d      	lsrs	r5, r5, #5
	uint8_t P = HAL_GPIO_ReadPin(Gear_P_GPIO_Port, Gear_P_Pin);
 8001288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		var->DrivingMode = MODE_MANUAL;
 800128c:	7025      	strb	r5, [r4, #0]
	uint8_t P = HAL_GPIO_ReadPin(Gear_P_GPIO_Port, Gear_P_Pin);
 800128e:	4843      	ldr	r0, [pc, #268]	; (800139c <IO_read_write+0x134>)
 8001290:	f001 fdbc 	bl	8002e0c <HAL_GPIO_ReadPin>
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	uint8_t P = HAL_GPIO_ReadPin(Gear_P_GPIO_Port, Gear_P_Pin);
 8001298:	4607      	mov	r7, r0
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 800129a:	4840      	ldr	r0, [pc, #256]	; (800139c <IO_read_write+0x134>)
 800129c:	f001 fdb6 	bl	8002e0c <HAL_GPIO_ReadPin>
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 80012a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 80012a4:	4606      	mov	r6, r0
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 80012a6:	483d      	ldr	r0, [pc, #244]	; (800139c <IO_read_write+0x134>)
 80012a8:	f001 fdb0 	bl	8002e0c <HAL_GPIO_ReadPin>
	uint8_t D = HAL_GPIO_ReadPin(Gear_D_GPIO_Port, Gear_D_Pin);
 80012ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 80012b0:	4605      	mov	r5, r0
	uint8_t D = HAL_GPIO_ReadPin(Gear_D_GPIO_Port, Gear_D_Pin);
 80012b2:	483a      	ldr	r0, [pc, #232]	; (800139c <IO_read_write+0x134>)
 80012b4:	f001 fdaa 	bl	8002e0c <HAL_GPIO_ReadPin>
	if (P + R + N + D == 1) {
 80012b8:	19bb      	adds	r3, r7, r6
 80012ba:	442b      	add	r3, r5
 80012bc:	4403      	add	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d103      	bne.n	80012ca <IO_read_write+0x62>
		if (P) {
 80012c2:	2f00      	cmp	r7, #0
 80012c4:	d05b      	beq.n	800137e <IO_read_write+0x116>
			var->Gear = GEAR_P;
 80012c6:	2300      	movs	r3, #0
			var->Gear = GEAR_D;
 80012c8:	7063      	strb	r3, [r4, #1]
	var->DrivingDirection = (!(int8_t)HAL_GPIO_ReadPin(DIR_SIG_GPIO_Port, DIR_SIG_Pin) * 2) - 1;
 80012ca:	2102      	movs	r1, #2
 80012cc:	4833      	ldr	r0, [pc, #204]	; (800139c <IO_read_write+0x134>)
 80012ce:	f001 fd9d 	bl	8002e0c <HAL_GPIO_ReadPin>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	bf0c      	ite	eq
 80012d6:	2301      	moveq	r3, #1
 80012d8:	f04f 33ff 	movne.w	r3, #4294967295
	var->BrakeStatus = HAL_GPIO_ReadPin(BRAKE_SIG_GPIO_Port, BRAKE_SIG_Pin);
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
	var->DrivingDirection = (!(int8_t)HAL_GPIO_ReadPin(DIR_SIG_GPIO_Port, DIR_SIG_Pin) * 2) - 1;
 80012e0:	70a3      	strb	r3, [r4, #2]
	var->BrakeStatus = HAL_GPIO_ReadPin(BRAKE_SIG_GPIO_Port, BRAKE_SIG_Pin);
 80012e2:	482e      	ldr	r0, [pc, #184]	; (800139c <IO_read_write+0x134>)
 80012e4:	f001 fd92 	bl	8002e0c <HAL_GPIO_ReadPin>
 80012e8:	70e0      	strb	r0, [r4, #3]
	if (HAL_GetTick() - next_run > 0) {
 80012ea:	f001 f831 	bl	8002350 <HAL_GetTick>
 80012ee:	4f2c      	ldr	r7, [pc, #176]	; (80013a0 <IO_read_write+0x138>)
 80012f0:	4e2c      	ldr	r6, [pc, #176]	; (80013a4 <IO_read_write+0x13c>)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	4d2c      	ldr	r5, [pc, #176]	; (80013a8 <IO_read_write+0x140>)
 80012f6:	4298      	cmp	r0, r3
 80012f8:	d01e      	beq.n	8001338 <IO_read_write+0xd0>
		next_run = HAL_GetTick() + 1;
 80012fa:	f001 f829 	bl	8002350 <HAL_GetTick>
 80012fe:	3001      	adds	r0, #1
 8001300:	6038      	str	r0, [r7, #0]
		filtered_Value_Poten = (1.0 - alpha) * filtered_Value_Poten + alpha * ADC_buffer[1];
 8001302:	8868      	ldrh	r0, [r5, #2]
 8001304:	f7ff fcf4 	bl	8000cf0 <__aeabi_i2f>
 8001308:	4928      	ldr	r1, [pc, #160]	; (80013ac <IO_read_write+0x144>)
 800130a:	f7ff fd45 	bl	8000d98 <__aeabi_fmul>
 800130e:	f7ff f895 	bl	800043c <__aeabi_f2d>
 8001312:	4680      	mov	r8, r0
 8001314:	6830      	ldr	r0, [r6, #0]
 8001316:	4689      	mov	r9, r1
 8001318:	f7ff f890 	bl	800043c <__aeabi_f2d>
 800131c:	a31c      	add	r3, pc, #112	; (adr r3, 8001390 <IO_read_write+0x128>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff f8e3 	bl	80004ec <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4640      	mov	r0, r8
 800132c:	4649      	mov	r1, r9
 800132e:	f7fe ff27 	bl	8000180 <__adddf3>
 8001332:	f7ff fbd3 	bl	8000adc <__aeabi_d2f>
 8001336:	6030      	str	r0, [r6, #0]
	var->Throttle =  filtered_Value_Poten * var->DrivingDirection;
 8001338:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800133c:	f7ff fcd8 	bl	8000cf0 <__aeabi_i2f>
 8001340:	6831      	ldr	r1, [r6, #0]
 8001342:	f7ff fd29 	bl	8000d98 <__aeabi_fmul>
 8001346:	6060      	str	r0, [r4, #4]
	var->Sense_24V = map(ADC_buffer[0], 0, 4096, 0, 24);
 8001348:	8828      	ldrh	r0, [r5, #0]
 800134a:	f7ff fccd 	bl	8000ce8 <__aeabi_ui2f>
 800134e:	2318      	movs	r3, #24
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff ff4b 	bl	80011f4 <map>
 800135e:	60e0      	str	r0, [r4, #12]
	var->Sense_48V = map(ADC_buffer[2], 0, 4096, 0, 48);
 8001360:	88a8      	ldrh	r0, [r5, #4]
 8001362:	f7ff fcc1 	bl	8000ce8 <__aeabi_ui2f>
 8001366:	2330      	movs	r3, #48	; 0x30
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff ff3f 	bl	80011f4 <map>
 8001376:	60a0      	str	r0, [r4, #8]
}
 8001378:	b003      	add	sp, #12
 800137a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (R) {
 800137e:	2e00      	cmp	r6, #0
 8001380:	d1a2      	bne.n	80012c8 <IO_read_write+0x60>
		} else if (N) {
 8001382:	b10d      	cbz	r5, 8001388 <IO_read_write+0x120>
			var->Gear = GEAR_N;
 8001384:	2302      	movs	r3, #2
 8001386:	e79f      	b.n	80012c8 <IO_read_write+0x60>
		} else if (D) {
 8001388:	2800      	cmp	r0, #0
 800138a:	d09e      	beq.n	80012ca <IO_read_write+0x62>
			var->Gear = GEAR_D;
 800138c:	2303      	movs	r3, #3
 800138e:	e79b      	b.n	80012c8 <IO_read_write+0x60>
 8001390:	fc000000 	.word	0xfc000000
 8001394:	3fec6d7b 	.word	0x3fec6d7b
 8001398:	40010800 	.word	0x40010800
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	2000020c 	.word	0x2000020c
 80013a4:	20000208 	.word	0x20000208
 80013a8:	20000200 	.word	0x20000200
 80013ac:	3de4a101 	.word	0x3de4a101

080013b0 <UART_PC_Set>:
int rxIndex = 0;

// FUNCTIONS ======================================================================================

void UART_PC_Set(UART_HandleTypeDef *huart) {
	PChuart = huart;
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <UART_PC_Set+0xc>)
	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	4902      	ldr	r1, [pc, #8]	; (80013c0 <UART_PC_Set+0x10>)
	PChuart = huart;
 80013b6:	6018      	str	r0, [r3, #0]
	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
 80013b8:	f002 bf93 	b.w	80042e2 <HAL_UART_Receive_IT>
 80013bc:	20000214 	.word	0x20000214
 80013c0:	20000210 	.word	0x20000210

080013c4 <ProcessCommand>:
	}

	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
}

void ProcessCommand(const char *command) {
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *token;
	int paramIndex = 0;

	// Split the command into parameters
	token = strtok((char*) command, " ");
 80013c6:	491d      	ldr	r1, [pc, #116]	; (800143c <ProcessCommand+0x78>)
 80013c8:	f004 f868 	bl	800549c <strtok>
	int paramIndex = 0;
 80013cc:	2400      	movs	r4, #0
	token = strtok((char*) command, " ");
 80013ce:	4601      	mov	r1, r0
	while (token != NULL && paramIndex < MAX_PARAMS_COUNT) {
		strncpy(rxParameters[paramIndex], token, MAX_PARAM_SIZE - 1);
		rxParameters[paramIndex][MAX_PARAM_SIZE - 1] = '\0'; // Ensure null-termination
 80013d0:	4626      	mov	r6, r4
 80013d2:	4d1b      	ldr	r5, [pc, #108]	; (8001440 <ProcessCommand+0x7c>)
		paramIndex++;
		token = strtok(NULL, " ");
 80013d4:	4f19      	ldr	r7, [pc, #100]	; (800143c <ProcessCommand+0x78>)
	while (token != NULL && paramIndex < MAX_PARAMS_COUNT) {
 80013d6:	b109      	cbz	r1, 80013dc <ProcessCommand+0x18>
 80013d8:	2c05      	cmp	r4, #5
 80013da:	d10e      	bne.n	80013fa <ProcessCommand+0x36>
	}

	// Compare the command and perform actions
	if (strcmp(rxParameters[0], "1") == 0) {
 80013dc:	4919      	ldr	r1, [pc, #100]	; (8001444 <ProcessCommand+0x80>)
 80013de:	4818      	ldr	r0, [pc, #96]	; (8001440 <ProcessCommand+0x7c>)
 80013e0:	f7fe feb6 	bl	8000150 <strcmp>
 80013e4:	b9b0      	cbnz	r0, 8001414 <ProcessCommand+0x50>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80013ee:	f500 3088 	add.w	r0, r0, #69632	; 0x11000

//	sprintf(output, "PARAMETERS %d\r\n", paramIndex);
//	HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
//	sprintf(output, "%s %s %s %s %s\r\n", rxParameters[0], rxParameters[1], rxParameters[2], rxParameters[3], rxParameters[4]);
//	HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
}
 80013f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80013f6:	f001 bd14 	b.w	8002e22 <HAL_GPIO_TogglePin>
		strncpy(rxParameters[paramIndex], token, MAX_PARAM_SIZE - 1);
 80013fa:	2213      	movs	r2, #19
 80013fc:	4628      	mov	r0, r5
 80013fe:	f004 f83a 	bl	8005476 <strncpy>
		token = strtok(NULL, " ");
 8001402:	4639      	mov	r1, r7
 8001404:	2000      	movs	r0, #0
		rxParameters[paramIndex][MAX_PARAM_SIZE - 1] = '\0'; // Ensure null-termination
 8001406:	74ee      	strb	r6, [r5, #19]
		token = strtok(NULL, " ");
 8001408:	f004 f848 	bl	800549c <strtok>
		paramIndex++;
 800140c:	3401      	adds	r4, #1
		token = strtok(NULL, " ");
 800140e:	4601      	mov	r1, r0
 8001410:	3514      	adds	r5, #20
 8001412:	e7e0      	b.n	80013d6 <ProcessCommand+0x12>
	} else if (strcmp(rxParameters[0], "RELAY") == 0) {
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <ProcessCommand+0x84>)
 8001416:	480a      	ldr	r0, [pc, #40]	; (8001440 <ProcessCommand+0x7c>)
 8001418:	f7fe fe9a 	bl	8000150 <strcmp>
 800141c:	b918      	cbnz	r0, 8001426 <ProcessCommand+0x62>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800141e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001422:	480a      	ldr	r0, [pc, #40]	; (800144c <ProcessCommand+0x88>)
 8001424:	e7e5      	b.n	80013f2 <ProcessCommand+0x2e>
	} else if (strcmp(rxParameters[0], "STE") == 0) {
 8001426:	490a      	ldr	r1, [pc, #40]	; (8001450 <ProcessCommand+0x8c>)
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <ProcessCommand+0x7c>)
 800142a:	f7fe fe91 	bl	8000150 <strcmp>
 800142e:	b920      	cbnz	r0, 800143a <ProcessCommand+0x76>
		IOVar.SteeringSetpoint = atoi(rxParameters[1]);
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <ProcessCommand+0x90>)
 8001432:	f002 ffc4 	bl	80043be <atoi>
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <ProcessCommand+0x94>)
 8001438:	6118      	str	r0, [r3, #16]
}
 800143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800143c:	080090ec 	.word	0x080090ec
 8001440:	20000294 	.word	0x20000294
 8001444:	08008ca0 	.word	0x08008ca0
 8001448:	08008ca2 	.word	0x08008ca2
 800144c:	40010c00 	.word	0x40010c00
 8001450:	08008ca8 	.word	0x08008ca8
 8001454:	200002a8 	.word	0x200002a8
 8001458:	200003c0 	.word	0x200003c0

0800145c <UART_PC_Callback>:
void UART_PC_Callback(UART_HandleTypeDef *huart) {
 800145c:	b570      	push	{r4, r5, r6, lr}
 800145e:	4605      	mov	r5, r0
	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
 8001460:	4c13      	ldr	r4, [pc, #76]	; (80014b0 <UART_PC_Callback+0x54>)
 8001462:	4e14      	ldr	r6, [pc, #80]	; (80014b4 <UART_PC_Callback+0x58>)
 8001464:	2201      	movs	r2, #1
 8001466:	4631      	mov	r1, r6
 8001468:	6820      	ldr	r0, [r4, #0]
 800146a:	f002 ff3a 	bl	80042e2 <HAL_UART_Receive_IT>
	if (huart != PChuart) {
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	42ab      	cmp	r3, r5
 8001472:	d11c      	bne.n	80014ae <UART_PC_Callback+0x52>
	if (PCRxBuffer[0] == '\r') {
 8001474:	7832      	ldrb	r2, [r6, #0]
 8001476:	2a0d      	cmp	r2, #13
 8001478:	d00b      	beq.n	8001492 <UART_PC_Callback+0x36>
		if (rxIndex > 0) {
 800147a:	4d0f      	ldr	r5, [pc, #60]	; (80014b8 <UART_PC_Callback+0x5c>)
	} else if (PCRxBuffer[0] == '\n') {
 800147c:	2a0a      	cmp	r2, #10
		if (rxIndex > 0) {
 800147e:	682b      	ldr	r3, [r5, #0]
	} else if (PCRxBuffer[0] == '\n') {
 8001480:	d10e      	bne.n	80014a0 <UART_PC_Callback+0x44>
		if (rxIndex > 0) {
 8001482:	2b00      	cmp	r3, #0
 8001484:	dd05      	ble.n	8001492 <UART_PC_Callback+0x36>
			rxCommand[rxIndex] = '\0'; // Null-terminate the command string
 8001486:	2600      	movs	r6, #0
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <UART_PC_Callback+0x60>)
 800148a:	54c6      	strb	r6, [r0, r3]
			ProcessCommand(rxCommand);
 800148c:	f7ff ff9a 	bl	80013c4 <ProcessCommand>
			rxIndex = 0;
 8001490:	602e      	str	r6, [r5, #0]
	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
 8001492:	6820      	ldr	r0, [r4, #0]
 8001494:	2201      	movs	r2, #1
}
 8001496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
 800149a:	4906      	ldr	r1, [pc, #24]	; (80014b4 <UART_PC_Callback+0x58>)
 800149c:	f002 bf21 	b.w	80042e2 <HAL_UART_Receive_IT>
		if (rxIndex < MAX_CMD_SIZE - 1) {
 80014a0:	2b30      	cmp	r3, #48	; 0x30
			rxCommand[rxIndex] = PCRxBuffer[0];
 80014a2:	bfdf      	itttt	le
 80014a4:	4905      	ldrle	r1, [pc, #20]	; (80014bc <UART_PC_Callback+0x60>)
 80014a6:	54ca      	strble	r2, [r1, r3]
			rxIndex++;
 80014a8:	3301      	addle	r3, #1
 80014aa:	602b      	strle	r3, [r5, #0]
 80014ac:	e7f1      	b.n	8001492 <UART_PC_Callback+0x36>
}
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
 80014b0:	20000214 	.word	0x20000214
 80014b4:	20000210 	.word	0x20000210
 80014b8:	20000290 	.word	0x20000290
 80014bc:	2000025e 	.word	0x2000025e

080014c0 <UART_PC_Streamer>:

void UART_PC_Streamer(IOtypedef *var) {
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	4605      	mov	r5, r0
	case 1: // Torque control signal
		snprintf(output, sizeof(output), "TRQ %.2f\n", var->Throttle);
		HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
		break;
	case 2: // Steering Raw Angle
		snprintf(output, sizeof(output), "STE %ld\n", var->SteeringAngleRaw);
 80014c4:	4c0b      	ldr	r4, [pc, #44]	; (80014f4 <UART_PC_Streamer+0x34>)
	if (HAL_GetTick() - next_run < 0) {
 80014c6:	f000 ff43 	bl	8002350 <HAL_GetTick>
	next_run = HAL_GetTick() + 20;
 80014ca:	f000 ff41 	bl	8002350 <HAL_GetTick>
		snprintf(output, sizeof(output), "STE %ld\n", var->SteeringAngleRaw);
 80014ce:	696b      	ldr	r3, [r5, #20]
 80014d0:	2146      	movs	r1, #70	; 0x46
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <UART_PC_Streamer+0x38>)
 80014d4:	4620      	mov	r0, r4
 80014d6:	f003 ff2f 	bl	8005338 <sniprintf>
		HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
 80014da:	4620      	mov	r0, r4
 80014dc:	f7fe fe42 	bl	8000164 <strlen>
 80014e0:	b282      	uxth	r2, r0
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <UART_PC_Streamer+0x3c>)
 80014e4:	4621      	mov	r1, r4
	case 3:
		break;
	default:
		break;
	}
}
 80014e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	6800      	ldr	r0, [r0, #0]
 80014f0:	f002 bc13 	b.w	8003d1a <HAL_UART_Transmit>
 80014f4:	20000218 	.word	0x20000218
 80014f8:	08008cac 	.word	0x08008cac
 80014fc:	20000214 	.word	0x20000214

08001500 <MX_ADC1_Init>:

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001500:	4824      	ldr	r0, [pc, #144]	; (8001594 <MX_ADC1_Init+0x94>)
 8001502:	4a25      	ldr	r2, [pc, #148]	; (8001598 <MX_ADC1_Init+0x98>)
{
 8001504:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8001506:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001508:	f44f 7280 	mov.w	r2, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 800150c:	2300      	movs	r3, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 800150e:	2401      	movs	r4, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8001510:	2504      	movs	r5, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001512:	6082      	str	r2, [r0, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001514:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
{
 8001518:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800151a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800151e:	9303      	str	r3, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001520:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001522:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001524:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001526:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001528:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800152a:	f001 f945 	bl	80027b8 <HAL_ADC_Init>
 800152e:	b108      	cbz	r0, 8001534 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8001530:	f000 fb64 	bl	8001bfc <Error_Handler>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001534:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <MX_ADC1_Init+0x94>)
 8001538:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800153a:	e9cd 5401 	strd	r5, r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800153e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	f000 ffcc 	bl	80024dc <HAL_ADC_ConfigChannel>
 8001544:	b108      	cbz	r0, 800154a <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8001546:	f000 fb59 	bl	8001bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800154a:	2005      	movs	r0, #5
 800154c:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154e:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001550:	e9cd 0301 	strd	r0, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001554:	480f      	ldr	r0, [pc, #60]	; (8001594 <MX_ADC1_Init+0x94>)
 8001556:	f000 ffc1 	bl	80024dc <HAL_ADC_ConfigChannel>
 800155a:	b108      	cbz	r0, 8001560 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 800155c:	f000 fb4e 	bl	8001bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001560:	2106      	movs	r1, #6
 8001562:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001564:	480b      	ldr	r0, [pc, #44]	; (8001594 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001566:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156a:	a901      	add	r1, sp, #4
 800156c:	f000 ffb6 	bl	80024dc <HAL_ADC_ConfigChannel>
 8001570:	b108      	cbz	r0, 8001576 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8001572:	f000 fb43 	bl	8001bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001576:	2304      	movs	r3, #4
 8001578:	2207      	movs	r2, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_ADC1_Init+0x94>)
 800157c:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001580:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001584:	f000 ffaa 	bl	80024dc <HAL_ADC_ConfigChannel>
 8001588:	b108      	cbz	r0, 800158e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800158a:	f000 fb37 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800158e:	b005      	add	sp, #20
 8001590:	bd30      	pop	{r4, r5, pc}
 8001592:	bf00      	nop
 8001594:	200002f8 	.word	0x200002f8
 8001598:	40012400 	.word	0x40012400

0800159c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800159c:	b530      	push	{r4, r5, lr}
 800159e:	4605      	mov	r5, r0
 80015a0:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	2210      	movs	r2, #16
 80015a4:	2100      	movs	r1, #0
 80015a6:	a802      	add	r0, sp, #8
 80015a8:	f003 ff5d 	bl	8005466 <memset>
  if(adcHandle->Instance==ADC1)
 80015ac:	682a      	ldr	r2, [r5, #0]
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_ADC_MspInit+0x98>)
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d13c      	bne.n	800162e <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80015b8:	699a      	ldr	r2, [r3, #24]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_24VSENSE_Pin|ADC_POTEN_SIG_Pin|ADC_48VSENSE_Pin|ADC_BRAKE_CUR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	481f      	ldr	r0, [pc, #124]	; (8001638 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c0:	619a      	str	r2, [r3, #24]
 80015c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015c6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015d0:	4c1a      	ldr	r4, [pc, #104]	; (800163c <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	f042 0204 	orr.w	r2, r2, #4
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015da:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f001 fb35 	bl	8002c58 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ee:	2080      	movs	r0, #128	; 0x80
 80015f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f4:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015f6:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015fa:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80015fe:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001600:	490f      	ldr	r1, [pc, #60]	; (8001640 <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001602:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001604:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001608:	e9c4 c205 	strd	ip, r2, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800160c:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800160e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001610:	f001 f9b6 	bl	8002980 <HAL_DMA_Init>
 8001614:	b108      	cbz	r0, 800161a <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001616:	f000 faf1 	bl	8001bfc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 800161a:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800161c:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2103      	movs	r1, #3
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001622:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8001624:	f001 f95a 	bl	80028dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001628:	2012      	movs	r0, #18
 800162a:	f001 f987 	bl	800293c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800162e:	b007      	add	sp, #28
 8001630:	bd30      	pop	{r4, r5, pc}
 8001632:	bf00      	nop
 8001634:	40012400 	.word	0x40012400
 8001638:	40010800 	.word	0x40010800
 800163c:	20000328 	.word	0x20000328
 8001640:	40020008 	.word	0x40020008

08001644 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_DMA_Init+0x4c>)
{
 8001646:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001648:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800164a:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800164c:	f042 0201 	orr.w	r2, r2, #1
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001654:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800165c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001660:	f001 f93c 	bl	80028dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001664:	200b      	movs	r0, #11
 8001666:	f001 f969 	bl	800293c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2102      	movs	r1, #2
 800166e:	200c      	movs	r0, #12
 8001670:	f001 f934 	bl	80028dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001674:	200c      	movs	r0, #12
 8001676:	f001 f961 	bl	800293c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2010      	movs	r0, #16
 800167e:	4611      	mov	r1, r2
 8001680:	f001 f92c 	bl	80028dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001684:	2010      	movs	r0, #16

}
 8001686:	b003      	add	sp, #12
 8001688:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800168c:	f001 b956 	b.w	800293c <HAL_NVIC_EnableIRQ>
 8001690:	40021000 	.word	0x40021000

08001694 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	2210      	movs	r2, #16
{
 8001696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800169a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	eb0d 0002 	add.w	r0, sp, r2
 80016a0:	2100      	movs	r1, #0
 80016a2:	f003 fee0 	bl	8005466 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	4b3c      	ldr	r3, [pc, #240]	; (8001798 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016a8:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800179c <MX_GPIO_Init+0x108>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80016ae:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80017a0 <MX_GPIO_Init+0x10c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	f042 0210 	orr.w	r2, r2, #16
 80016b6:	619a      	str	r2, [r3, #24]
 80016b8:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRAKE_DIR_Pin|GPIO_PIN_6|GPIO_PIN_7|STEERING_RELAY_Pin, GPIO_PIN_RESET);
 80016ba:	4d3a      	ldr	r5, [pc, #232]	; (80017a4 <MX_GPIO_Init+0x110>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016bc:	f002 0210 	and.w	r2, r2, #16
 80016c0:	9200      	str	r2, [sp, #0]
 80016c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016c6:	4648      	mov	r0, r9
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	f042 0220 	orr.w	r2, r2, #32
 80016cc:	619a      	str	r2, [r3, #24]
 80016ce:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d4:	f002 0220 	and.w	r2, r2, #32
 80016d8:	9201      	str	r2, [sp, #4]
 80016da:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	f042 0204 	orr.w	r2, r2, #4
 80016e4:	619a      	str	r2, [r3, #24]
 80016e6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	f002 0204 	and.w	r2, r2, #4
 80016ee:	9202      	str	r2, [sp, #8]
 80016f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	f042 0208 	orr.w	r2, r2, #8
 80016fa:	619a      	str	r2, [r3, #24]
 80016fc:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	9303      	str	r3, [sp, #12]
 8001706:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001708:	f001 fb86 	bl	8002e18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800170c:	4640      	mov	r0, r8
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001714:	f001 fb80 	bl	8002e18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, BRAKE_DIR_Pin|GPIO_PIN_6|GPIO_PIN_7|STEERING_RELAY_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	4628      	mov	r0, r5
 800171c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001720:	f001 fb7a 	bl	8002e18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001728:	4648      	mov	r0, r9
 800172a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001734:	f001 fa90 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AUTO_CMD_Pin|MANUAL_CMD_Pin;
 8001738:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	4640      	mov	r0, r8
 800173c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f001 fa88 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMER_SIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(EMER_SIG_GPIO_Port, &GPIO_InitStruct);
 800174a:	4628      	mov	r0, r5
 800174c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pin = EMER_SIG_Pin;
 8001752:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(EMER_SIG_GPIO_Port, &GPIO_InitStruct);
 8001754:	f001 fa80 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB2 PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_SIG_Pin|GPIO_PIN_2|Gear_P_Pin|Gear_R_Pin
 8001758:	f24f 2306 	movw	r3, #61958	; 0xf206
                          |Gear_N_Pin|Gear_D_Pin|BRAKE_SIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	4628      	mov	r0, r5
 800175e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001760:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f001 fa77 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	4640      	mov	r0, r8
 8001770:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f001 fa6d 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB6 PB7 PBPin */
  GPIO_InitStruct.Pin = BRAKE_DIR_Pin|GPIO_PIN_6|GPIO_PIN_7|STEERING_RELAY_Pin;
 800177e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	4628      	mov	r0, r5
 8001784:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f001 fa63 	bl	8002c58 <HAL_GPIO_Init>

}
 8001792:	b009      	add	sp, #36	; 0x24
 8001794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	40011000 	.word	0x40011000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00
 80017a8:	10210000 	.word	0x10210000

080017ac <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017ac:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017ae:	480b      	ldr	r0, [pc, #44]	; (80017dc <MX_I2C2_Init+0x30>)
  hi2c2.Init.ClockSpeed = 100000;
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <MX_I2C2_Init+0x34>)
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_I2C2_Init+0x38>)
 80017b4:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b8:	2300      	movs	r3, #0
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 80017be:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c2:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ca:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017cc:	f001 fb32 	bl	8002e34 <HAL_I2C_Init>
 80017d0:	b118      	cbz	r0, 80017da <MX_I2C2_Init+0x2e>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017d6:	f000 ba11 	b.w	8001bfc <Error_Handler>
}
 80017da:	bd08      	pop	{r3, pc}
 80017dc:	2000036c 	.word	0x2000036c
 80017e0:	40005800 	.word	0x40005800
 80017e4:	000186a0 	.word	0x000186a0

080017e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e8:	b510      	push	{r4, lr}
 80017ea:	4604      	mov	r4, r0
 80017ec:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	2210      	movs	r2, #16
 80017f0:	2100      	movs	r1, #0
 80017f2:	a802      	add	r0, sp, #8
 80017f4:	f003 fe37 	bl	8005466 <memset>
  if(i2cHandle->Instance==I2C2)
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_I2C_MspInit+0x58>)
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d11d      	bne.n	800183c <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	4c10      	ldr	r4, [pc, #64]	; (8001844 <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	480f      	ldr	r0, [pc, #60]	; (8001848 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	61a3      	str	r3, [r4, #24]
 8001810:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181c:	2312      	movs	r3, #18
 800181e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f001 fa17 	bl	8002c58 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800182a:	69e3      	ldr	r3, [r4, #28]
 800182c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001830:	61e3      	str	r3, [r4, #28]
 8001832:	69e3      	ldr	r3, [r4, #28]
 8001834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800183c:	b006      	add	sp, #24
 800183e:	bd10      	pop	{r4, pc}
 8001840:	40005800 	.word	0x40005800
 8001844:	40021000 	.word	0x40021000
 8001848:	40010c00 	.word	0x40010c00

0800184c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800184c:	b510      	push	{r4, lr}
 800184e:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001850:	2214      	movs	r2, #20
 8001852:	2100      	movs	r1, #0
 8001854:	a80c      	add	r0, sp, #48	; 0x30
 8001856:	f003 fe06 	bl	8005466 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800185a:	2214      	movs	r2, #20
 800185c:	2100      	movs	r1, #0
 800185e:	eb0d 0002 	add.w	r0, sp, r2
 8001862:	f003 fe00 	bl	8005466 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001866:	2210      	movs	r2, #16
 8001868:	2100      	movs	r1, #0
 800186a:	a801      	add	r0, sp, #4
 800186c:	f003 fdfb 	bl	8005466 <memset>
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001870:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001876:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001878:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800187c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001880:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001884:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001886:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001888:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800188a:	f001 fb7b 	bl	8002f84 <HAL_RCC_OscConfig>
 800188e:	b108      	cbz	r0, 8001894 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001892:	e7fe      	b.n	8001892 <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001894:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001896:	e9cd 3405 	strd	r3, r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800189a:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189e:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a0:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80018a4:	4621      	mov	r1, r4
 80018a6:	a805      	add	r0, sp, #20
 80018a8:	f001 fd2e 	bl	8003308 <HAL_RCC_ClockConfig>
 80018ac:	b108      	cbz	r0, 80018b2 <SystemClock_Config+0x66>
 80018ae:	b672      	cpsid	i
	while (1) {
 80018b0:	e7fe      	b.n	80018b0 <SystemClock_Config+0x64>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80018b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80018b6:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018b8:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80018ba:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80018bc:	f001 fde0 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 80018c0:	b108      	cbz	r0, 80018c6 <SystemClock_Config+0x7a>
 80018c2:	b672      	cpsid	i
	while (1) {
 80018c4:	e7fe      	b.n	80018c4 <SystemClock_Config+0x78>
}
 80018c6:	b014      	add	sp, #80	; 0x50
 80018c8:	bd10      	pop	{r4, pc}
	...

080018cc <HAL_UART_RxCpltCallback>:
	if (huart == &huart1) {
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <HAL_UART_RxCpltCallback+0xc>)
 80018ce:	4283      	cmp	r3, r0
 80018d0:	d101      	bne.n	80018d6 <HAL_UART_RxCpltCallback+0xa>
		UART_PC_Callback(huart);
 80018d2:	f7ff bdc3 	b.w	800145c <UART_PC_Callback>
}
 80018d6:	4770      	bx	lr
 80018d8:	2000055c 	.word	0x2000055c

080018dc <check_parity>:
	if (response == 0)
 80018dc:	b320      	cbz	r0, 8001928 <check_parity+0x4c>
	int odd_checkbit = !(((response >> 1) & 0x01) ^ ((response >> 3) & 0x01) ^ ((response >> 5) & 0x01) ^ ((response >> 7) & 0x01)
 80018de:	08c3      	lsrs	r3, r0, #3
 80018e0:	ea83 0350 	eor.w	r3, r3, r0, lsr #1
 80018e4:	ea83 1350 	eor.w	r3, r3, r0, lsr #5
 80018e8:	ea83 13d0 	eor.w	r3, r3, r0, lsr #7
			^ ((response >> 9) & 0x01) ^ ((response >> 11) & 0x01) ^ ((response >> 13) & 0x01));
 80018ec:	ea83 2350 	eor.w	r3, r3, r0, lsr #9
 80018f0:	ea83 23d0 	eor.w	r3, r3, r0, lsr #11
 80018f4:	ea83 3350 	eor.w	r3, r3, r0, lsr #13
	if (odd_checkbit != k1)
 80018f8:	43db      	mvns	r3, r3
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	ebb3 3fd0 	cmp.w	r3, r0, lsr #15
 8001902:	d110      	bne.n	8001926 <check_parity+0x4a>
	int even_checkbit = !(((response >> 0) & 0x01) ^ ((response >> 2) & 0x01) ^ ((response >> 4) & 0x01) ^ ((response >> 6) & 0x01)
 8001904:	0883      	lsrs	r3, r0, #2
		return 0;
 8001906:	ea83 3390 	eor.w	r3, r3, r0, lsr #14
 800190a:	4043      	eors	r3, r0
 800190c:	ea83 1310 	eor.w	r3, r3, r0, lsr #4
 8001910:	ea83 1390 	eor.w	r3, r3, r0, lsr #6
 8001914:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
 8001918:	ea83 2390 	eor.w	r3, r3, r0, lsr #10
 800191c:	ea83 3310 	eor.w	r3, r3, r0, lsr #12
 8001920:	f003 0001 	and.w	r0, r3, #1
 8001924:	4770      	bx	lr
 8001926:	2000      	movs	r0, #0
}
 8001928:	4770      	bx	lr
	...

0800192c <amt21_get_pos>:
	uint8_t cmd[1] = { AMT21_READ_POS };
 800192c:	23d4      	movs	r3, #212	; 0xd4
int16_t amt21_get_pos() {
 800192e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // send
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001936:	481d      	ldr	r0, [pc, #116]	; (80019ac <amt21_get_pos+0x80>)
	uint8_t cmd[1] = { AMT21_READ_POS };
 8001938:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // send
 800193c:	f001 fa6c 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, cmd, 1, 100);
 8001940:	2364      	movs	r3, #100	; 0x64
 8001942:	2201      	movs	r2, #1
 8001944:	a901      	add	r1, sp, #4
 8001946:	481a      	ldr	r0, [pc, #104]	; (80019b0 <amt21_get_pos+0x84>)
 8001948:	f002 f9e7 	bl	8003d1a <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) RxBuffer, 2);
 800194c:	4c19      	ldr	r4, [pc, #100]	; (80019b4 <amt21_get_pos+0x88>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // receive
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001954:	4815      	ldr	r0, [pc, #84]	; (80019ac <amt21_get_pos+0x80>)
 8001956:	f001 fa5f 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_UART_DMAStop(&huart2); // clear UART RX
 800195a:	4815      	ldr	r0, [pc, #84]	; (80019b0 <amt21_get_pos+0x84>)
 800195c:	f002 fa28 	bl	8003db0 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) RxBuffer, 2);
 8001960:	2202      	movs	r2, #2
 8001962:	4621      	mov	r1, r4
 8001964:	4812      	ldr	r0, [pc, #72]	; (80019b0 <amt21_get_pos+0x84>)
 8001966:	f002 fd19 	bl	800439c <HAL_UART_Receive_DMA>
	uint16_t pos = ((RxBuffer[1] << 8) | RxBuffer[0]);
 800196a:	8822      	ldrh	r2, [r4, #0]
	if (check_parity(pos)) {
 800196c:	4912      	ldr	r1, [pc, #72]	; (80019b8 <amt21_get_pos+0x8c>)
 800196e:	4610      	mov	r0, r2
 8001970:	f7ff ffb4 	bl	80018dc <check_parity>
 8001974:	4d11      	ldr	r5, [pc, #68]	; (80019bc <amt21_get_pos+0x90>)
 8001976:	b1a8      	cbz	r0, 80019a4 <amt21_get_pos+0x78>
		if (L_pos > 12000) {
 8001978:	f642 60e0 	movw	r0, #12000	; 0x2ee0
		L_pos = 16384 - L_pos;
 800197c:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8001980:	f5c2 4380 	rsb	r3, r2, #16384	; 0x4000
 8001984:	b29b      	uxth	r3, r3
		if (L_pos > 12000) {
 8001986:	4283      	cmp	r3, r0
		L_pos = 16384 - L_pos;
 8001988:	bf98      	it	ls
 800198a:	800b      	strhls	r3, [r1, #0]
		RxBuffer[0] = 0;
 800198c:	f04f 0300 	mov.w	r3, #0
			L_pos -= 16384;
 8001990:	bf84      	itt	hi
 8001992:	4252      	neghi	r2, r2
 8001994:	800a      	strhhi	r2, [r1, #0]
		RxBuffer[0] = 0;
 8001996:	7023      	strb	r3, [r4, #0]
		RxBuffer[1] = 0;
 8001998:	7063      	strb	r3, [r4, #1]
}
 800199a:	f9b1 0000 	ldrsh.w	r0, [r1]
		encoder_error = 0;
 800199e:	602b      	str	r3, [r5, #0]
}
 80019a0:	b003      	add	sp, #12
 80019a2:	bd30      	pop	{r4, r5, pc}
		encoder_error++;
 80019a4:	682b      	ldr	r3, [r5, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	e7f7      	b.n	800199a <amt21_get_pos+0x6e>
 80019aa:	bf00      	nop
 80019ac:	40010800 	.word	0x40010800
 80019b0:	200005a4 	.word	0x200005a4
 80019b4:	200003e0 	.word	0x200003e0
 80019b8:	20000008 	.word	0x20000008
 80019bc:	200003e4 	.word	0x200003e4

080019c0 <amt21_set_zero_pos>:
	uint8_t cmd[2] = { AMT21_EXT_CMD, AMT21_SET_ZERO };
 80019c0:	f645 63d6 	movw	r3, #24278	; 0x5ed6
void amt21_set_zero_pos() {
 80019c4:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80019c6:	4c0d      	ldr	r4, [pc, #52]	; (80019fc <amt21_set_zero_pos+0x3c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	4620      	mov	r0, r4
 80019cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	uint8_t cmd[2] = { AMT21_EXT_CMD, AMT21_SET_ZERO };
 80019d0:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80019d4:	f001 fa20 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, cmd, 2, 1000);
 80019d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019dc:	a901      	add	r1, sp, #4
 80019de:	2202      	movs	r2, #2
 80019e0:	4807      	ldr	r0, [pc, #28]	; (8001a00 <amt21_set_zero_pos+0x40>)
 80019e2:	f002 f99a 	bl	8003d1a <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ec:	4620      	mov	r0, r4
 80019ee:	f001 fa13 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80019f2:	2014      	movs	r0, #20
 80019f4:	f000 fcb2 	bl	800235c <HAL_Delay>
}
 80019f8:	b002      	add	sp, #8
 80019fa:	bd10      	pop	{r4, pc}
 80019fc:	40010800 	.word	0x40010800
 8001a00:	200005a4 	.word	0x200005a4

08001a04 <setMotor>:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <setMotor+0x1c>)
	if (PWM >= 0) {
 8001a06:	2800      	cmp	r0, #0
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8001a08:	681b      	ldr	r3, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -1 * PWM);
 8001a0a:	bfb5      	itete	lt
 8001a0c:	4240      	neglt	r0, r0
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8001a0e:	6358      	strge	r0, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -1 * PWM);
 8001a10:	6358      	strlt	r0, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001a12:	2201      	movge	r2, #1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001a14:	bfb8      	it	lt
 8001a16:	2200      	movlt	r2, #0
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	4802      	ldr	r0, [pc, #8]	; (8001a24 <setMotor+0x20>)
 8001a1c:	f001 b9fc 	b.w	8002e18 <HAL_GPIO_WritePin>
 8001a20:	20000488 	.word	0x20000488
 8001a24:	40010c00 	.word	0x40010c00

08001a28 <controller>:
int16_t controller(int pos_current) {
 8001a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (pos_current > 11500 || pos_current < -10) {
 8001a2c:	f642 43f6 	movw	r3, #11510	; 0x2cf6
 8001a30:	f100 020a 	add.w	r2, r0, #10
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d861      	bhi.n	8001afc <controller+0xd4>
	if (IOVar.DrivingMode == MODE_AUTO) {
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <controller+0xd8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d159      	bne.n	8001af4 <controller+0xcc>
		int error_pos = pos_setpoint - pos_current;
 8001a40:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <controller+0xdc>)
		error_summa += error_pos * control_dt;
 8001a42:	4f31      	ldr	r7, [pc, #196]	; (8001b08 <controller+0xe0>)
		int error_pos = pos_setpoint - pos_current;
 8001a44:	681c      	ldr	r4, [r3, #0]
 8001a46:	1a24      	subs	r4, r4, r0
		int error_delta = error_pos / control_dt;
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff f951 	bl	8000cf0 <__aeabi_i2f>
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <controller+0xe4>)
 8001a50:	4605      	mov	r5, r0
		error_summa += error_pos * control_dt;
 8001a52:	6838      	ldr	r0, [r7, #0]
		int error_delta = error_pos / control_dt;
 8001a54:	f8d3 9000 	ldr.w	r9, [r3]
		error_summa += error_pos * control_dt;
 8001a58:	f7ff f94a 	bl	8000cf0 <__aeabi_i2f>
 8001a5c:	4649      	mov	r1, r9
 8001a5e:	4606      	mov	r6, r0
 8001a60:	4628      	mov	r0, r5
 8001a62:	f7ff f999 	bl	8000d98 <__aeabi_fmul>
 8001a66:	4601      	mov	r1, r0
 8001a68:	4630      	mov	r0, r6
 8001a6a:	f7ff f88d 	bl	8000b88 <__addsf3>
 8001a6e:	f7ff fb59 	bl	8001124 <__aeabi_f2iz>
		u = Kp * error_pos + Kd * error_delta + Ki * error_summa;
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <controller+0xe8>)
		if (error_pos <= 3 && error_pos >= -3) {
 8001a74:	3403      	adds	r4, #3
		u = Kp * error_pos + Kd * error_delta + Ki * error_summa;
 8001a76:	f8d3 a000 	ldr.w	sl, [r3]
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <controller+0xec>)
		if (error_pos <= 3 && error_pos >= -3) {
 8001a7c:	2c06      	cmp	r4, #6
		u = Kp * error_pos + Kd * error_delta + Ki * error_summa;
 8001a7e:	f8d3 b000 	ldr.w	fp, [r3]
 8001a82:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <controller+0xf0>)
		error_summa += error_pos * control_dt;
 8001a84:	4606      	mov	r6, r0
		u = Kp * error_pos + Kd * error_delta + Ki * error_summa;
 8001a86:	f8d3 8000 	ldr.w	r8, [r3]
		error_summa += error_pos * control_dt;
 8001a8a:	6038      	str	r0, [r7, #0]
		if (error_pos <= 3 && error_pos >= -3) {
 8001a8c:	d803      	bhi.n	8001a96 <controller+0x6e>
			error_summa = 0;
 8001a8e:	2000      	movs	r0, #0
 8001a90:	6038      	str	r0, [r7, #0]
}
 8001a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int error_delta = error_pos / control_dt;
 8001a96:	4649      	mov	r1, r9
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f7ff fa31 	bl	8000f00 <__aeabi_fdiv>
 8001a9e:	f7ff fb41 	bl	8001124 <__aeabi_f2iz>
		u = Kp * error_pos + Kd * error_delta + Ki * error_summa;
 8001aa2:	f7ff f925 	bl	8000cf0 <__aeabi_i2f>
 8001aa6:	4659      	mov	r1, fp
 8001aa8:	f7ff f976 	bl	8000d98 <__aeabi_fmul>
 8001aac:	4651      	mov	r1, sl
 8001aae:	4604      	mov	r4, r0
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f7ff f971 	bl	8000d98 <__aeabi_fmul>
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff f865 	bl	8000b88 <__addsf3>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f7ff f915 	bl	8000cf0 <__aeabi_i2f>
 8001ac6:	4641      	mov	r1, r8
 8001ac8:	f7ff f966 	bl	8000d98 <__aeabi_fmul>
 8001acc:	4601      	mov	r1, r0
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f7ff f85a 	bl	8000b88 <__addsf3>
		if (u >= 3000) {
 8001ad4:	4911      	ldr	r1, [pc, #68]	; (8001b1c <controller+0xf4>)
		u = Kp * error_pos + Kd * error_delta + Ki * error_summa;
 8001ad6:	4604      	mov	r4, r0
		if (u >= 3000) {
 8001ad8:	f7ff fb10 	bl	80010fc <__aeabi_fcmpge>
 8001adc:	b960      	cbnz	r0, 8001af8 <controller+0xd0>
		} else if (u <= -3000) {
 8001ade:	4620      	mov	r0, r4
 8001ae0:	490f      	ldr	r1, [pc, #60]	; (8001b20 <controller+0xf8>)
 8001ae2:	f7ff fb01 	bl	80010e8 <__aeabi_fcmple>
 8001ae6:	b100      	cbz	r0, 8001aea <controller+0xc2>
			u = -3000;
 8001ae8:	4c0d      	ldr	r4, [pc, #52]	; (8001b20 <controller+0xf8>)
	return u;
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fb1a 	bl	8001124 <__aeabi_f2iz>
 8001af0:	b200      	sxth	r0, r0
 8001af2:	e7ce      	b.n	8001a92 <controller+0x6a>
	float u = 0;
 8001af4:	2400      	movs	r4, #0
 8001af6:	e7f8      	b.n	8001aea <controller+0xc2>
			u = 3000;
 8001af8:	4c08      	ldr	r4, [pc, #32]	; (8001b1c <controller+0xf4>)
 8001afa:	e7f6      	b.n	8001aea <controller+0xc2>
		return 0;
 8001afc:	2000      	movs	r0, #0
 8001afe:	e7c8      	b.n	8001a92 <controller+0x6a>
 8001b00:	200003c0 	.word	0x200003c0
 8001b04:	200003ec 	.word	0x200003ec
 8001b08:	200003e8 	.word	0x200003e8
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	20000004 	.word	0x20000004
 8001b14:	200003d8 	.word	0x200003d8
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	453b8000 	.word	0x453b8000
 8001b20:	c53b8000 	.word	0xc53b8000

08001b24 <main>:
int main(void) {
 8001b24:	b580      	push	{r7, lr}
	HAL_Init();
 8001b26:	f000 fbf5 	bl	8002314 <HAL_Init>
	SystemClock_Config();
 8001b2a:	f7ff fe8f 	bl	800184c <SystemClock_Config>
	MX_GPIO_Init();
 8001b2e:	f7ff fdb1 	bl	8001694 <MX_GPIO_Init>
	MX_DMA_Init();
 8001b32:	f7ff fd87 	bl	8001644 <MX_DMA_Init>
	MX_TIM1_Init();
 8001b36:	f000 f9e3 	bl	8001f00 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8001b3a:	f000 fadb 	bl	80020f4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001b3e:	f000 faf5 	bl	800212c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001b42:	f7ff fcdd 	bl	8001500 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001b46:	f000 fa85 	bl	8002054 <MX_TIM3_Init>
	MX_I2C2_Init();
 8001b4a:	f7ff fe2f 	bl	80017ac <MX_I2C2_Init>
	MX_TIM2_Init();
 8001b4e:	f000 fa41 	bl	8001fd4 <MX_TIM2_Init>
	UART_PC_Set(&huart1);
 8001b52:	4821      	ldr	r0, [pc, #132]	; (8001bd8 <main+0xb4>)
 8001b54:	f7ff fc2c 	bl	80013b0 <UART_PC_Set>
	IO_init_ADC_DMA();
 8001b58:	f7ff fb42 	bl	80011e0 <IO_init_ADC_DMA>
	HAL_TIM_Base_Start(&htim2); //Motor
 8001b5c:	481f      	ldr	r0, [pc, #124]	; (8001bdc <main+0xb8>)
 8001b5e:	f001 fd7d 	bl	800365c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //LPWM
 8001b62:	2100      	movs	r1, #0
 8001b64:	481d      	ldr	r0, [pc, #116]	; (8001bdc <main+0xb8>)
 8001b66:	f001 ffb5 	bl	8003ad4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //RPWM
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	481b      	ldr	r0, [pc, #108]	; (8001bdc <main+0xb8>)
 8001b6e:	f001 ffb1 	bl	8003ad4 <HAL_TIM_PWM_Start>
	setMotor(0);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff ff46 	bl	8001a04 <setMotor>
	IOVar.SteeringSetpoint = 3950;
 8001b78:	f640 736e 	movw	r3, #3950	; 0xf6e
 8001b7c:	4c18      	ldr	r4, [pc, #96]	; (8001be0 <main+0xbc>)
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 8001b7e:	2104      	movs	r1, #4
 8001b80:	4818      	ldr	r0, [pc, #96]	; (8001be4 <main+0xc0>)
	IOVar.SteeringSetpoint = 3950;
 8001b82:	6123      	str	r3, [r4, #16]
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 8001b84:	f001 f942 	bl	8002e0c <HAL_GPIO_ReadPin>
 8001b88:	b108      	cbz	r0, 8001b8e <main+0x6a>
		amt21_set_zero_pos();
 8001b8a:	f7ff ff19 	bl	80019c0 <amt21_set_zero_pos>
		IO_read_write(&IOVar);
 8001b8e:	4e14      	ldr	r6, [pc, #80]	; (8001be0 <main+0xbc>)
		pos_setpoint = IOVar.SteeringSetpoint;
 8001b90:	4f15      	ldr	r7, [pc, #84]	; (8001be8 <main+0xc4>)
		if (HAL_GetTick() >= timestamp) {
 8001b92:	4d16      	ldr	r5, [pc, #88]	; (8001bec <main+0xc8>)
		IO_read_write(&IOVar);
 8001b94:	4630      	mov	r0, r6
 8001b96:	f7ff fb67 	bl	8001268 <IO_read_write>
		UART_PC_Streamer(&IOVar);
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	f7ff fc90 	bl	80014c0 <UART_PC_Streamer>
		pos_setpoint = IOVar.SteeringSetpoint;
 8001ba0:	6923      	ldr	r3, [r4, #16]
 8001ba2:	603b      	str	r3, [r7, #0]
		if (HAL_GetTick() >= timestamp) {
 8001ba4:	f000 fbd4 	bl	8002350 <HAL_GetTick>
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	4298      	cmp	r0, r3
 8001bac:	d3f2      	bcc.n	8001b94 <main+0x70>
			timestamp = HAL_GetTick() + 2;
 8001bae:	f000 fbcf 	bl	8002350 <HAL_GetTick>
 8001bb2:	3002      	adds	r0, #2
 8001bb4:	6028      	str	r0, [r5, #0]
			Rawpos = amt21_get_pos();
 8001bb6:	f7ff feb9 	bl	800192c <amt21_get_pos>
 8001bba:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <main+0xcc>)
			IOVar.SteeringAngleRaw = Rawpos;
 8001bbc:	6160      	str	r0, [r4, #20]
			Rawpos = amt21_get_pos();
 8001bbe:	6010      	str	r0, [r2, #0]
			pwm = controller(Rawpos);
 8001bc0:	f7ff ff32 	bl	8001a28 <controller>
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <main+0xd0>)
 8001bc6:	6018      	str	r0, [r3, #0]
			if (encoder_error < 10) {
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <main+0xd4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b09      	cmp	r3, #9
				setMotor(0);
 8001bce:	bf88      	it	hi
 8001bd0:	2000      	movhi	r0, #0
 8001bd2:	f7ff ff17 	bl	8001a04 <setMotor>
 8001bd6:	e7dd      	b.n	8001b94 <main+0x70>
 8001bd8:	2000055c 	.word	0x2000055c
 8001bdc:	20000488 	.word	0x20000488
 8001be0:	200003c0 	.word	0x200003c0
 8001be4:	40010c00 	.word	0x40010c00
 8001be8:	200003ec 	.word	0x200003ec
 8001bec:	200003f4 	.word	0x200003f4
 8001bf0:	200003dc 	.word	0x200003dc
 8001bf4:	200003f0 	.word	0x200003f0
 8001bf8:	200003e4 	.word	0x200003e4

08001bfc <Error_Handler>:
 8001bfc:	b672      	cpsid	i
	while (1) {
 8001bfe:	e7fe      	b.n	8001bfe <Error_Handler+0x2>

08001c00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_MspInit+0x3c>)
{
 8001c02:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	619a      	str	r2, [r3, #24]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	f002 0201 	and.w	r2, r2, #1
 8001c12:	9200      	str	r2, [sp, #0]
 8001c14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c1c:	61da      	str	r2, [r3, #28]
 8001c1e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c2a:	6853      	ldr	r3, [r2, #4]
 8001c2c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c36:	b002      	add	sp, #8
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000

08001c44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <NMI_Handler>

08001c46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler>

08001c48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler>

08001c4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <BusFault_Handler>

08001c4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler>

08001c4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4e:	4770      	bx	lr

08001c50 <DebugMon_Handler>:
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 bb70 	b.w	8002338 <HAL_IncTick>

08001c58 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c58:	4801      	ldr	r0, [pc, #4]	; (8001c60 <DMA1_Channel1_IRQHandler+0x8>)
 8001c5a:	f000 bf69 	b.w	8002b30 <HAL_DMA_IRQHandler>
 8001c5e:	bf00      	nop
 8001c60:	20000328 	.word	0x20000328

08001c64 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001c64:	4801      	ldr	r0, [pc, #4]	; (8001c6c <DMA1_Channel2_IRQHandler+0x8>)
 8001c66:	f000 bf63 	b.w	8002b30 <HAL_DMA_IRQHandler>
 8001c6a:	bf00      	nop
 8001c6c:	200003fc 	.word	0x200003fc

08001c70 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c70:	4801      	ldr	r0, [pc, #4]	; (8001c78 <DMA1_Channel6_IRQHandler+0x8>)
 8001c72:	f000 bf5d 	b.w	8002b30 <HAL_DMA_IRQHandler>
 8001c76:	bf00      	nop
 8001c78:	20000518 	.word	0x20000518

08001c7c <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c7c:	4801      	ldr	r0, [pc, #4]	; (8001c84 <ADC1_2_IRQHandler+0x8>)
 8001c7e:	f000 bbae 	b.w	80023de <HAL_ADC_IRQHandler>
 8001c82:	bf00      	nop
 8001c84:	200002f8 	.word	0x200002f8

08001c88 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c88:	4801      	ldr	r0, [pc, #4]	; (8001c90 <USART1_IRQHandler+0x8>)
 8001c8a:	f002 b9c7 	b.w	800401c <HAL_UART_IRQHandler>
 8001c8e:	bf00      	nop
 8001c90:	2000055c 	.word	0x2000055c

08001c94 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c94:	4801      	ldr	r0, [pc, #4]	; (8001c9c <USART2_IRQHandler+0x8>)
 8001c96:	f002 b9c1 	b.w	800401c <HAL_UART_IRQHandler>
 8001c9a:	bf00      	nop
 8001c9c:	200005a4 	.word	0x200005a4

08001ca0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	4770      	bx	lr

08001ca4 <_kill>:

int _kill(int pid, int sig)
{
 8001ca4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ca6:	f003 fc9f 	bl	80055e8 <__errno>
 8001caa:	2316      	movs	r3, #22
 8001cac:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001cae:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb2:	bd08      	pop	{r3, pc}

08001cb4 <_exit>:

void _exit (int status)
{
 8001cb4:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001cb6:	f003 fc97 	bl	80055e8 <__errno>
 8001cba:	2316      	movs	r3, #22
 8001cbc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001cbe:	e7fe      	b.n	8001cbe <_exit+0xa>

08001cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	460d      	mov	r5, r1
 8001cc4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	460e      	mov	r6, r1
 8001cc8:	1b73      	subs	r3, r6, r5
 8001cca:	429c      	cmp	r4, r3
 8001ccc:	dc01      	bgt.n	8001cd2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001cce:	4620      	mov	r0, r4
 8001cd0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001cd2:	f3af 8000 	nop.w
 8001cd6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	e7f5      	b.n	8001cc8 <_read+0x8>

08001cdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	460d      	mov	r5, r1
 8001ce0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	460e      	mov	r6, r1
 8001ce4:	1b73      	subs	r3, r6, r5
 8001ce6:	429c      	cmp	r4, r3
 8001ce8:	dc01      	bgt.n	8001cee <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8001cea:	4620      	mov	r0, r4
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8001cee:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001cf2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	e7f5      	b.n	8001ce4 <_write+0x8>

08001cf8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	4770      	bx	lr

08001cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8001d02:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001d04:	604b      	str	r3, [r1, #4]
}
 8001d06:	4770      	bx	lr

08001d08 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001d08:	2001      	movs	r0, #1
 8001d0a:	4770      	bx	lr

08001d0c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	4770      	bx	lr

08001d10 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d10:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <_sbrk+0x30>)
{
 8001d12:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001d14:	6811      	ldr	r1, [r2, #0]
{
 8001d16:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001d18:	b909      	cbnz	r1, 8001d1e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001d1a:	490a      	ldr	r1, [pc, #40]	; (8001d44 <_sbrk+0x34>)
 8001d1c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1e:	6810      	ldr	r0, [r2, #0]
 8001d20:	4909      	ldr	r1, [pc, #36]	; (8001d48 <_sbrk+0x38>)
 8001d22:	4c0a      	ldr	r4, [pc, #40]	; (8001d4c <_sbrk+0x3c>)
 8001d24:	4403      	add	r3, r0
 8001d26:	1b09      	subs	r1, r1, r4
 8001d28:	428b      	cmp	r3, r1
 8001d2a:	d906      	bls.n	8001d3a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001d2c:	f003 fc5c 	bl	80055e8 <__errno>
 8001d30:	230c      	movs	r3, #12
 8001d32:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001d38:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001d3a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001d3c:	e7fc      	b.n	8001d38 <_sbrk+0x28>
 8001d3e:	bf00      	nop
 8001d40:	200003f8 	.word	0x200003f8
 8001d44:	20000740 	.word	0x20000740
 8001d48:	20005000 	.word	0x20005000
 8001d4c:	00000400 	.word	0x00000400

08001d50 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d54:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(tim_baseHandle->Instance==TIM1)
 8001d56:	6803      	ldr	r3, [r0, #0]
 8001d58:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <HAL_TIM_Base_MspInit+0x70>)
{
 8001d5a:	4605      	mov	r5, r0
  if(tim_baseHandle->Instance==TIM1)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d123      	bne.n	8001da8 <HAL_TIM_Base_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_TIM_Base_MspInit+0x74>)

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001d62:	4c1a      	ldr	r4, [pc, #104]	; (8001dcc <HAL_TIM_Base_MspInit+0x78>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d64:	699a      	ldr	r2, [r3, #24]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d66:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d6c:	619a      	str	r2, [r3, #24]
 8001d6e:	699b      	ldr	r3, [r3, #24]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d70:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_TIM_Base_MspInit+0x7c>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d84:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d8c:	4620      	mov	r0, r4
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001d8e:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d92:	60a3      	str	r3, [r4, #8]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d94:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d96:	f000 fdf3 	bl	8002980 <HAL_DMA_Init>
 8001d9a:	b108      	cbz	r0, 8001da0 <HAL_TIM_Base_MspInit+0x4c>
    {
      Error_Handler();
 8001d9c:	f7ff ff2e 	bl	8001bfc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001da0:	626c      	str	r4, [r5, #36]	; 0x24
 8001da2:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001da4:	b003      	add	sp, #12
 8001da6:	bd30      	pop	{r4, r5, pc}
  else if(tim_baseHandle->Instance==TIM3)
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_TIM_Base_MspInit+0x80>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d1fa      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_TIM_Base_MspInit+0x74>)
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	f042 0202 	orr.w	r2, r2, #2
 8001db6:	61da      	str	r2, [r3, #28]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	9b01      	ldr	r3, [sp, #4]
}
 8001dc2:	e7ef      	b.n	8001da4 <HAL_TIM_Base_MspInit+0x50>
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	200003fc 	.word	0x200003fc
 8001dd0:	4002001c 	.word	0x4002001c
 8001dd4:	40000400 	.word	0x40000400

08001dd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 8001dd8:	6803      	ldr	r3, [r0, #0]
{
 8001dda:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM2)
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de0:	d10a      	bne.n	8001df8 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001de6:	69da      	ldr	r2, [r3, #28]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	61da      	str	r2, [r3, #28]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001df8:	b002      	add	sp, #8
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dfc:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	2510      	movs	r5, #16
{
 8001e00:	4604      	mov	r4, r0
 8001e02:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	462a      	mov	r2, r5
 8001e06:	2100      	movs	r1, #0
 8001e08:	eb0d 0005 	add.w	r0, sp, r5
 8001e0c:	f003 fb2b 	bl	8005466 <memset>
  if(timHandle->Instance==TIM1)
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	4a35      	ldr	r2, [pc, #212]	; (8001ee8 <HAL_TIM_MspPostInit+0xec>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d116      	bne.n	8001e46 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_TIM_MspPostInit+0xf0>)
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_WS2812_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	4835      	ldr	r0, [pc, #212]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	f042 0204 	orr.w	r2, r2, #4
 8001e26:	619a      	str	r2, [r3, #24]
 8001e28:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f000 ff0b 	bl	8002c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e42:	b009      	add	sp, #36	; 0x24
 8001e44:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM2)
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4a:	d12f      	bne.n	8001eac <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001e50:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	f042 0204 	orr.w	r2, r2, #4
 8001e58:	619a      	str	r2, [r3, #24]
 8001e5a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	4824      	ldr	r0, [pc, #144]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	f002 0204 	and.w	r2, r2, #4
 8001e62:	9201      	str	r2, [sp, #4]
 8001e64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	619a      	str	r2, [r3, #24]
 8001e70:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	9302      	str	r3, [sp, #8]
 8001e7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e80:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f000 fee8 	bl	8002c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e88:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	481a      	ldr	r0, [pc, #104]	; (8001ef4 <HAL_TIM_MspPostInit+0xf8>)
 8001e8c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f000 fee0 	bl	8002c58 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001e98:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <HAL_TIM_MspPostInit+0xfc>)
 8001e9a:	6853      	ldr	r3, [r2, #4]
 8001e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001ea8:	6053      	str	r3, [r2, #4]
}
 8001eaa:	e7ca      	b.n	8001e42 <HAL_TIM_MspPostInit+0x46>
  else if(timHandle->Instance==TIM3)
 8001eac:	4a13      	ldr	r2, [pc, #76]	; (8001efc <HAL_TIM_MspPostInit+0x100>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d1c7      	bne.n	8001e42 <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_TIM_MspPostInit+0xf0>)
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	480f      	ldr	r0, [pc, #60]	; (8001ef4 <HAL_TIM_MspPostInit+0xf8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	6999      	ldr	r1, [r3, #24]
 8001eb8:	f041 0108 	orr.w	r1, r1, #8
 8001ebc:	6199      	str	r1, [r3, #24]
 8001ebe:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	9303      	str	r3, [sp, #12]
 8001ec8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = BRAKE_PWM_Pin;
 8001ecc:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f000 fec1 	bl	8002c58 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_TIM_MspPostInit+0xfc>)
 8001ed8:	6853      	ldr	r3, [r2, #4]
 8001eda:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ede:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ee2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ee6:	e7df      	b.n	8001ea8 <HAL_TIM_MspPostInit+0xac>
 8001ee8:	40012c00 	.word	0x40012c00
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	40010c00 	.word	0x40010c00
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40000400 	.word	0x40000400

08001f00 <MX_TIM1_Init>:
{
 8001f00:	b510      	push	{r4, lr}
 8001f02:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f04:	2210      	movs	r2, #16
 8001f06:	2100      	movs	r1, #0
 8001f08:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0a:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0c:	f003 faab 	bl	8005466 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f10:	221c      	movs	r2, #28
 8001f12:	4621      	mov	r1, r4
 8001f14:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1c:	f003 faa3 	bl	8005466 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f20:	2220      	movs	r2, #32
 8001f22:	4621      	mov	r1, r4
 8001f24:	a80e      	add	r0, sp, #56	; 0x38
 8001f26:	f003 fa9e 	bl	8005466 <memset>
  htim1.Instance = TIM1;
 8001f2a:	4828      	ldr	r0, [pc, #160]	; (8001fcc <MX_TIM1_Init+0xcc>)
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <MX_TIM1_Init+0xd0>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim1.Init.Prescaler = 0;
 8001f32:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 65535;
 8001f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3a:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3c:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f40:	f001 fbea 	bl	8003718 <HAL_TIM_Base_Init>
 8001f44:	b108      	cbz	r0, 8001f4a <MX_TIM1_Init+0x4a>
    Error_Handler();
 8001f46:	f7ff fe59 	bl	8001bfc <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f4e:	481f      	ldr	r0, [pc, #124]	; (8001fcc <MX_TIM1_Init+0xcc>)
 8001f50:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f52:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f54:	f001 fcc7 	bl	80038e6 <HAL_TIM_ConfigClockSource>
 8001f58:	b108      	cbz	r0, 8001f5e <MX_TIM1_Init+0x5e>
    Error_Handler();
 8001f5a:	f7ff fe4f 	bl	8001bfc <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f5e:	481b      	ldr	r0, [pc, #108]	; (8001fcc <MX_TIM1_Init+0xcc>)
 8001f60:	f001 fc06 	bl	8003770 <HAL_TIM_PWM_Init>
 8001f64:	b108      	cbz	r0, 8001f6a <MX_TIM1_Init+0x6a>
    Error_Handler();
 8001f66:	f7ff fe49 	bl	8001bfc <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6a:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6c:	4817      	ldr	r0, [pc, #92]	; (8001fcc <MX_TIM1_Init+0xcc>)
 8001f6e:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f74:	f001 fdb0 	bl	8003ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f78:	b108      	cbz	r0, 8001f7e <MX_TIM1_Init+0x7e>
    Error_Handler();
 8001f7a:	f7ff fe3f 	bl	8001bfc <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f80:	2200      	movs	r2, #0
 8001f82:	4812      	ldr	r0, [pc, #72]	; (8001fcc <MX_TIM1_Init+0xcc>)
 8001f84:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8001f86:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f8a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f8e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f92:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f94:	f001 fc44 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8001f98:	b108      	cbz	r0, 8001f9e <MX_TIM1_Init+0x9e>
    Error_Handler();
 8001f9a:	f7ff fe2f 	bl	8001bfc <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f9e:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fa4:	4809      	ldr	r0, [pc, #36]	; (8001fcc <MX_TIM1_Init+0xcc>)
 8001fa6:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fa8:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fac:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fb0:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fb2:	9213      	str	r2, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fb4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fb6:	f001 fdbd 	bl	8003b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fba:	b108      	cbz	r0, 8001fc0 <MX_TIM1_Init+0xc0>
    Error_Handler();
 8001fbc:	f7ff fe1e 	bl	8001bfc <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <MX_TIM1_Init+0xcc>)
 8001fc2:	f7ff ff1b 	bl	8001dfc <HAL_TIM_MspPostInit>
}
 8001fc6:	b016      	add	sp, #88	; 0x58
 8001fc8:	bd10      	pop	{r4, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000440 	.word	0x20000440
 8001fd0:	40012c00 	.word	0x40012c00

08001fd4 <MX_TIM2_Init>:
{
 8001fd4:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd6:	2400      	movs	r4, #0
{
 8001fd8:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fda:	221c      	movs	r2, #28
 8001fdc:	4621      	mov	r1, r4
 8001fde:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe0:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe4:	f003 fa3f 	bl	8005466 <memset>
  htim2.Init.Prescaler = 9;
 8001fe8:	2309      	movs	r3, #9
 8001fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8001fee:	4818      	ldr	r0, [pc, #96]	; (8002050 <MX_TIM2_Init+0x7c>)
  htim2.Init.Prescaler = 9;
 8001ff0:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.Period = 8999;
 8001ff4:	f242 3327 	movw	r3, #8999	; 0x2327
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002000:	f001 fbb6 	bl	8003770 <HAL_TIM_PWM_Init>
 8002004:	b108      	cbz	r0, 800200a <MX_TIM2_Init+0x36>
    Error_Handler();
 8002006:	f7ff fdf9 	bl	8001bfc <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800200a:	4811      	ldr	r0, [pc, #68]	; (8002050 <MX_TIM2_Init+0x7c>)
 800200c:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200e:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002012:	f001 fd61 	bl	8003ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002016:	b108      	cbz	r0, 800201c <MX_TIM2_Init+0x48>
    Error_Handler();
 8002018:	f7ff fdf0 	bl	8001bfc <Error_Handler>
  sConfigOC.Pulse = 0;
 800201c:	2200      	movs	r2, #0
 800201e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002020:	480b      	ldr	r0, [pc, #44]	; (8002050 <MX_TIM2_Init+0x7c>)
 8002022:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 0;
 8002024:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002028:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202a:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202c:	f001 fbf8 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8002030:	b108      	cbz	r0, 8002036 <MX_TIM2_Init+0x62>
    Error_Handler();
 8002032:	f7ff fde3 	bl	8001bfc <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002036:	2204      	movs	r2, #4
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_TIM2_Init+0x7c>)
 800203a:	a903      	add	r1, sp, #12
 800203c:	f001 fbf0 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8002040:	b108      	cbz	r0, 8002046 <MX_TIM2_Init+0x72>
    Error_Handler();
 8002042:	f7ff fddb 	bl	8001bfc <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8002046:	4802      	ldr	r0, [pc, #8]	; (8002050 <MX_TIM2_Init+0x7c>)
 8002048:	f7ff fed8 	bl	8001dfc <HAL_TIM_MspPostInit>
}
 800204c:	b00a      	add	sp, #40	; 0x28
 800204e:	bd10      	pop	{r4, pc}
 8002050:	20000488 	.word	0x20000488

08002054 <MX_TIM3_Init>:
{
 8002054:	b510      	push	{r4, lr}
 8002056:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002058:	2210      	movs	r2, #16
 800205a:	2100      	movs	r1, #0
 800205c:	a803      	add	r0, sp, #12
 800205e:	f003 fa02 	bl	8005466 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002062:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002064:	221c      	movs	r2, #28
 8002066:	4621      	mov	r1, r4
 8002068:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002070:	f003 f9f9 	bl	8005466 <memset>
  htim3.Instance = TIM3;
 8002074:	481d      	ldr	r0, [pc, #116]	; (80020ec <MX_TIM3_Init+0x98>)
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <MX_TIM3_Init+0x9c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 800207a:	e9c0 3400 	strd	r3, r4, [r0]
  htim3.Init.Period = 65535;
 800207e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002082:	6184      	str	r4, [r0, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002084:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002088:	f001 fb46 	bl	8003718 <HAL_TIM_Base_Init>
 800208c:	b108      	cbz	r0, 8002092 <MX_TIM3_Init+0x3e>
    Error_Handler();
 800208e:	f7ff fdb5 	bl	8001bfc <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002096:	4815      	ldr	r0, [pc, #84]	; (80020ec <MX_TIM3_Init+0x98>)
 8002098:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800209c:	f001 fc23 	bl	80038e6 <HAL_TIM_ConfigClockSource>
 80020a0:	b108      	cbz	r0, 80020a6 <MX_TIM3_Init+0x52>
    Error_Handler();
 80020a2:	f7ff fdab 	bl	8001bfc <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020a6:	4811      	ldr	r0, [pc, #68]	; (80020ec <MX_TIM3_Init+0x98>)
 80020a8:	f001 fb62 	bl	8003770 <HAL_TIM_PWM_Init>
 80020ac:	b108      	cbz	r0, 80020b2 <MX_TIM3_Init+0x5e>
    Error_Handler();
 80020ae:	f7ff fda5 	bl	8001bfc <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <MX_TIM3_Init+0x98>)
 80020b6:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020bc:	f001 fd0c 	bl	8003ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80020c0:	b108      	cbz	r0, 80020c6 <MX_TIM3_Init+0x72>
    Error_Handler();
 80020c2:	f7ff fd9b 	bl	8001bfc <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020c8:	2200      	movs	r2, #0
 80020ca:	4808      	ldr	r0, [pc, #32]	; (80020ec <MX_TIM3_Init+0x98>)
 80020cc:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 80020ce:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d2:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d4:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d6:	f001 fba3 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 80020da:	b108      	cbz	r0, 80020e0 <MX_TIM3_Init+0x8c>
    Error_Handler();
 80020dc:	f7ff fd8e 	bl	8001bfc <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <MX_TIM3_Init+0x98>)
 80020e2:	f7ff fe8b 	bl	8001dfc <HAL_TIM_MspPostInit>
}
 80020e6:	b00e      	add	sp, #56	; 0x38
 80020e8:	bd10      	pop	{r4, pc}
 80020ea:	bf00      	nop
 80020ec:	200004d0 	.word	0x200004d0
 80020f0:	40000400 	.word	0x40000400

080020f4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020f4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020f6:	480a      	ldr	r0, [pc, #40]	; (8002120 <MX_USART1_UART_Init+0x2c>)
  huart1.Init.BaudRate = 250000;
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <MX_USART1_UART_Init+0x30>)
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_USART1_UART_Init+0x34>)
 80020fc:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002100:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002102:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002104:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002108:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800210c:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800210e:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002110:	f001 fdd4 	bl	8003cbc <HAL_UART_Init>
 8002114:	b118      	cbz	r0, 800211e <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800211a:	f7ff bd6f 	b.w	8001bfc <Error_Handler>
}
 800211e:	bd08      	pop	{r3, pc}
 8002120:	2000055c 	.word	0x2000055c
 8002124:	40013800 	.word	0x40013800
 8002128:	0003d090 	.word	0x0003d090

0800212c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800212c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800212e:	480a      	ldr	r0, [pc, #40]	; (8002158 <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate = 2000000;
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <MX_USART2_UART_Init+0x30>)
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <MX_USART2_UART_Init+0x34>)
 8002134:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002138:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213a:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800213c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002140:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002144:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002146:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002148:	f001 fdb8 	bl	8003cbc <HAL_UART_Init>
 800214c:	b118      	cbz	r0, 8002156 <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800214e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002152:	f7ff bd53 	b.w	8001bfc <Error_Handler>
}
 8002156:	bd08      	pop	{r3, pc}
 8002158:	200005a4 	.word	0x200005a4
 800215c:	40004400 	.word	0x40004400
 8002160:	001e8480 	.word	0x001e8480

08002164 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	2210      	movs	r2, #16
{
 8002166:	b570      	push	{r4, r5, r6, lr}
 8002168:	4606      	mov	r6, r0
 800216a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	eb0d 0002 	add.w	r0, sp, r2
 8002170:	2100      	movs	r1, #0
 8002172:	f003 f978 	bl	8005466 <memset>
  if(uartHandle->Instance==USART1)
 8002176:	6833      	ldr	r3, [r6, #0]
 8002178:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_UART_MspInit+0x104>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d131      	bne.n	80021e2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800217e:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_UART_MspInit+0x108>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8002184:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	483a      	ldr	r0, [pc, #232]	; (8002270 <HAL_UART_MspInit+0x10c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800218c:	619a      	str	r2, [r3, #24]
 800218e:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002190:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002192:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002196:	9200      	str	r2, [sp, #0]
 8002198:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	f042 0204 	orr.w	r2, r2, #4
 80021a0:	619a      	str	r2, [r3, #24]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f000 fd4e 	bl	8002c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	482b      	ldr	r0, [pc, #172]	; (8002270 <HAL_UART_MspInit+0x10c>)
 80021c2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f000 fd45 	bl	8002c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80021ce:	2025      	movs	r0, #37	; 0x25
 80021d0:	4622      	mov	r2, r4
 80021d2:	2101      	movs	r1, #1
 80021d4:	f000 fb82 	bl	80028dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021d8:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021da:	f000 fbaf 	bl	800293c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021de:	b008      	add	sp, #32
 80021e0:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 80021e2:	4a24      	ldr	r2, [pc, #144]	; (8002274 <HAL_UART_MspInit+0x110>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d1fa      	bne.n	80021de <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_UART_MspInit+0x108>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	4821      	ldr	r0, [pc, #132]	; (8002270 <HAL_UART_MspInit+0x10c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ec:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021f4:	61da      	str	r2, [r3, #28]
 80021f6:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f8:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80021fa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80021fe:	9202      	str	r2, [sp, #8]
 8002200:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	699a      	ldr	r2, [r3, #24]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002204:	4c1c      	ldr	r4, [pc, #112]	; (8002278 <HAL_UART_MspInit+0x114>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	f042 0204 	orr.w	r2, r2, #4
 800220a:	619a      	str	r2, [r3, #24]
 800220c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	9303      	str	r3, [sp, #12]
 8002216:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f000 fd19 	bl	8002c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002226:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	4811      	ldr	r0, [pc, #68]	; (8002270 <HAL_UART_MspInit+0x10c>)
 800222a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800222c:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f000 fd11 	bl	8002c58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_UART_MspInit+0x118>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002238:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800223a:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800223e:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002240:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002244:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002248:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800224a:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800224c:	f000 fb98 	bl	8002980 <HAL_DMA_Init>
 8002250:	b108      	cbz	r0, 8002256 <HAL_UART_MspInit+0xf2>
      Error_Handler();
 8002252:	f7ff fcd3 	bl	8001bfc <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2026      	movs	r0, #38	; 0x26
 800225a:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800225c:	63f4      	str	r4, [r6, #60]	; 0x3c
 800225e:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002260:	f000 fb3c 	bl	80028dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002264:	2026      	movs	r0, #38	; 0x26
 8002266:	e7b8      	b.n	80021da <HAL_UART_MspInit+0x76>
 8002268:	40013800 	.word	0x40013800
 800226c:	40021000 	.word	0x40021000
 8002270:	40010800 	.word	0x40010800
 8002274:	40004400 	.word	0x40004400
 8002278:	20000518 	.word	0x20000518
 800227c:	4002006c 	.word	0x4002006c

08002280 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002280:	f7ff fd66 	bl	8001d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002284:	480b      	ldr	r0, [pc, #44]	; (80022b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002286:	490c      	ldr	r1, [pc, #48]	; (80022b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002288:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800229c:	4c09      	ldr	r4, [pc, #36]	; (80022c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022aa:	f003 f9a3 	bl	80055f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ae:	f7ff fc39 	bl	8001b24 <main>
  bx lr
 80022b2:	4770      	bx	lr
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80022bc:	0800916c 	.word	0x0800916c
  ldr r2, =_sbss
 80022c0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80022c4:	2000073c 	.word	0x2000073c

080022c8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <CAN1_RX1_IRQHandler>
	...

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_InitTick+0x3c>)
{
 80022d0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80022dc:	4a0b      	ldr	r2, [pc, #44]	; (800230c <HAL_InitTick+0x40>)
 80022de:	6810      	ldr	r0, [r2, #0]
 80022e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80022e4:	f000 fb38 	bl	8002958 <HAL_SYSTICK_Config>
 80022e8:	4604      	mov	r4, r0
 80022ea:	b958      	cbnz	r0, 8002304 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ec:	2d0f      	cmp	r5, #15
 80022ee:	d809      	bhi.n	8002304 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f0:	4602      	mov	r2, r0
 80022f2:	4629      	mov	r1, r5
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f000 faf0 	bl	80028dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fc:	4620      	mov	r0, r4
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_InitTick+0x44>)
 8002300:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002302:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002304:	2001      	movs	r0, #1
 8002306:	e7fc      	b.n	8002302 <HAL_InitTick+0x36>
 8002308:	20000014 	.word	0x20000014
 800230c:	20000010 	.word	0x20000010
 8002310:	20000018 	.word	0x20000018

08002314 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002314:	4a07      	ldr	r2, [pc, #28]	; (8002334 <HAL_Init+0x20>)
{
 8002316:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231c:	f043 0310 	orr.w	r3, r3, #16
 8002320:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002322:	f000 fac9 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002326:	200f      	movs	r0, #15
 8002328:	f7ff ffd0 	bl	80022cc <HAL_InitTick>
  HAL_MspInit();
 800232c:	f7ff fc68 	bl	8001c00 <HAL_MspInit>
}
 8002330:	2000      	movs	r0, #0
 8002332:	bd08      	pop	{r3, pc}
 8002334:	40022000 	.word	0x40022000

08002338 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002338:	4a03      	ldr	r2, [pc, #12]	; (8002348 <HAL_IncTick+0x10>)
 800233a:	4b04      	ldr	r3, [pc, #16]	; (800234c <HAL_IncTick+0x14>)
 800233c:	6811      	ldr	r1, [r2, #0]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	440b      	add	r3, r1
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200005ec 	.word	0x200005ec
 800234c:	20000014 	.word	0x20000014

08002350 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002350:	4b01      	ldr	r3, [pc, #4]	; (8002358 <HAL_GetTick+0x8>)
 8002352:	6818      	ldr	r0, [r3, #0]
}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200005ec 	.word	0x200005ec

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff fff6 	bl	8002350 <HAL_GetTick>
 8002364:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002366:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002368:	bf1e      	ittt	ne
 800236a:	4b04      	ldrne	r3, [pc, #16]	; (800237c <HAL_Delay+0x20>)
 800236c:	781b      	ldrbne	r3, [r3, #0]
 800236e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002370:	f7ff ffee 	bl	8002350 <HAL_GetTick>
 8002374:	1b43      	subs	r3, r0, r5
 8002376:	42a3      	cmp	r3, r4
 8002378:	d3fa      	bcc.n	8002370 <HAL_Delay+0x14>
  {
  }
}
 800237a:	bd38      	pop	{r3, r4, r5, pc}
 800237c:	20000014 	.word	0x20000014

08002380 <HAL_ADC_ConvCpltCallback>:
 8002380:	4770      	bx	lr

08002382 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002382:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002384:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002388:	f012 0f50 	tst.w	r2, #80	; 0x50
 800238c:	d11b      	bne.n	80023c6 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800238e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	6892      	ldr	r2, [r2, #8]
 800239a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800239e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80023a2:	d10c      	bne.n	80023be <ADC_DMAConvCplt+0x3c>
 80023a4:	7b1a      	ldrb	r2, [r3, #12]
 80023a6:	b952      	cbnz	r2, 80023be <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b2:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b4:	bf5e      	ittt	pl
 80023b6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80023b8:	f042 0201 	orrpl.w	r2, r2, #1
 80023bc:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ffde 	bl	8002380 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023c4:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023c6:	6a1b      	ldr	r3, [r3, #32]
}
 80023c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4718      	bx	r3

080023d0 <HAL_ADC_ConvHalfCpltCallback>:
 80023d0:	4770      	bx	lr

080023d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023d2:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80023d6:	f7ff fffb 	bl	80023d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023da:	bd08      	pop	{r3, pc}

080023dc <HAL_ADC_LevelOutOfWindowCallback>:
 80023dc:	4770      	bx	lr

080023de <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 80023de:	6803      	ldr	r3, [r0, #0]
{
 80023e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80023e2:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80023e4:	685e      	ldr	r6, [r3, #4]
{
 80023e6:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80023e8:	06b0      	lsls	r0, r6, #26
 80023ea:	d526      	bpl.n	800243a <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80023ec:	07a9      	lsls	r1, r5, #30
 80023ee:	d524      	bpl.n	800243a <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023f2:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023f4:	bf5e      	ittt	pl
 80023f6:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80023f8:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80023fc:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002404:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002408:	d110      	bne.n	800242c <HAL_ADC_IRQHandler+0x4e>
 800240a:	7b22      	ldrb	r2, [r4, #12]
 800240c:	b972      	cbnz	r2, 800242c <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	f022 0220 	bic.w	r2, r2, #32
 8002414:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800241c:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800241e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002420:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002422:	bf5e      	ittt	pl
 8002424:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8002426:	f043 0301 	orrpl.w	r3, r3, #1
 800242a:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 800242c:	4620      	mov	r0, r4
 800242e:	f7ff ffa7 	bl	8002380 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002432:	f06f 0212 	mvn.w	r2, #18
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800243a:	0631      	lsls	r1, r6, #24
 800243c:	d530      	bpl.n	80024a0 <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800243e:	076a      	lsls	r2, r5, #29
 8002440:	d52e      	bpl.n	80024a0 <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002444:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002446:	bf5e      	ittt	pl
 8002448:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800244a:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 800244e:	62a3      	strpl	r3, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8002458:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 800245c:	d00a      	beq.n	8002474 <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800245e:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002460:	0550      	lsls	r0, r2, #21
 8002462:	d416      	bmi.n	8002492 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800246a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800246e:	d110      	bne.n	8002492 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002470:	7b22      	ldrb	r2, [r4, #12]
 8002472:	b972      	cbnz	r2, 8002492 <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800247c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800247e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002482:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002484:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002486:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002488:	bf5e      	ittt	pl
 800248a:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800248c:	f043 0301 	orrpl.w	r3, r3, #1
 8002490:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002492:	4620      	mov	r0, r4
 8002494:	f000 fa0e 	bl	80028b4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002498:	f06f 020c 	mvn.w	r2, #12
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80024a0:	0672      	lsls	r2, r6, #25
 80024a2:	d50c      	bpl.n	80024be <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80024a4:	07eb      	lsls	r3, r5, #31
 80024a6:	d50a      	bpl.n	80024be <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024aa:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024b2:	f7ff ff93 	bl	80023dc <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024b6:	f06f 0201 	mvn.w	r2, #1
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	601a      	str	r2, [r3, #0]
}
 80024be:	bd70      	pop	{r4, r5, r6, pc}

080024c0 <HAL_ADC_ErrorCallback>:
 80024c0:	4770      	bx	lr

080024c2 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80024c4:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024cc:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024d6:	f7ff fff3 	bl	80024c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024da:	bd08      	pop	{r3, pc}

080024dc <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80024dc:	2300      	movs	r3, #0
{ 
 80024de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80024e0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80024e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80024e6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d06c      	beq.n	80025c6 <HAL_ADC_ConfigChannel+0xea>
 80024ec:	2301      	movs	r3, #1
 80024ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80024f2:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024f4:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 80024f6:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024f8:	6808      	ldr	r0, [r1, #0]
 80024fa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 80024fe:	d822      	bhi.n	8002546 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002500:	261f      	movs	r6, #31
 8002502:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8002504:	3b05      	subs	r3, #5
 8002506:	409e      	lsls	r6, r3
 8002508:	ea25 0506 	bic.w	r5, r5, r6
 800250c:	fa00 f303 	lsl.w	r3, r0, r3
 8002510:	432b      	orrs	r3, r5
 8002512:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002514:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002516:	688b      	ldr	r3, [r1, #8]
 8002518:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 800251c:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002520:	d929      	bls.n	8002576 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002522:	68d6      	ldr	r6, [r2, #12]
 8002524:	3d1e      	subs	r5, #30
 8002526:	40a9      	lsls	r1, r5
 8002528:	ea26 0101 	bic.w	r1, r6, r1
 800252c:	40ab      	lsls	r3, r5
 800252e:	430b      	orrs	r3, r1
 8002530:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002532:	f1a0 0310 	sub.w	r3, r0, #16
 8002536:	2b01      	cmp	r3, #1
 8002538:	d925      	bls.n	8002586 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800253c:	2300      	movs	r3, #0
 800253e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002542:	b002      	add	sp, #8
 8002544:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002546:	2d0c      	cmp	r5, #12
 8002548:	f04f 051f 	mov.w	r5, #31
 800254c:	d809      	bhi.n	8002562 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800254e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002550:	3b23      	subs	r3, #35	; 0x23
 8002552:	409d      	lsls	r5, r3
 8002554:	ea26 0505 	bic.w	r5, r6, r5
 8002558:	fa00 f303 	lsl.w	r3, r0, r3
 800255c:	432b      	orrs	r3, r5
 800255e:	6313      	str	r3, [r2, #48]	; 0x30
 8002560:	e7d8      	b.n	8002514 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002562:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8002564:	3b41      	subs	r3, #65	; 0x41
 8002566:	409d      	lsls	r5, r3
 8002568:	ea26 0505 	bic.w	r5, r6, r5
 800256c:	fa00 f303 	lsl.w	r3, r0, r3
 8002570:	432b      	orrs	r3, r5
 8002572:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002574:	e7ce      	b.n	8002514 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002576:	6910      	ldr	r0, [r2, #16]
 8002578:	40a9      	lsls	r1, r5
 800257a:	ea20 0101 	bic.w	r1, r0, r1
 800257e:	40ab      	lsls	r3, r5
 8002580:	430b      	orrs	r3, r1
 8002582:	6113      	str	r3, [r2, #16]
 8002584:	e7d9      	b.n	800253a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_ADC_ConfigChannel+0xf0>)
 8002588:	429a      	cmp	r2, r3
 800258a:	d116      	bne.n	80025ba <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800258c:	6893      	ldr	r3, [r2, #8]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	d4d3      	bmi.n	800253a <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002592:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002594:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002596:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800259a:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800259c:	d1cd      	bne.n	800253a <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_ADC_ConfigChannel+0xf4>)
 80025a0:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_ADC_ConfigChannel+0xf8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80025a8:	220a      	movs	r2, #10
 80025aa:	4353      	muls	r3, r2
            wait_loop_index--;
 80025ac:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80025ae:	9b01      	ldr	r3, [sp, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0c2      	beq.n	800253a <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80025b4:	9b01      	ldr	r3, [sp, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	e7f8      	b.n	80025ac <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80025bc:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025be:	f043 0320 	orr.w	r3, r3, #32
 80025c2:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80025c4:	e7ba      	b.n	800253c <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80025c6:	2002      	movs	r0, #2
 80025c8:	e7bb      	b.n	8002542 <HAL_ADC_ConfigChannel+0x66>
 80025ca:	bf00      	nop
 80025cc:	40012400 	.word	0x40012400
 80025d0:	20000010 	.word	0x20000010
 80025d4:	000f4240 	.word	0x000f4240

080025d8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80025d8:	2300      	movs	r3, #0
{
 80025da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80025dc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025de:	6803      	ldr	r3, [r0, #0]
{
 80025e0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	07d2      	lsls	r2, r2, #31
 80025e6:	d502      	bpl.n	80025ee <ADC_Enable+0x16>
  return HAL_OK;
 80025e8:	2000      	movs	r0, #0
}
 80025ea:	b003      	add	sp, #12
 80025ec:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <ADC_Enable+0x70>)
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <ADC_Enable+0x74>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002600:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002602:	9b01      	ldr	r3, [sp, #4]
 8002604:	b9e3      	cbnz	r3, 8002640 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8002606:	f7ff fea3 	bl	8002350 <HAL_GetTick>
 800260a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	07db      	lsls	r3, r3, #31
 8002612:	d4e9      	bmi.n	80025e8 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002614:	f7ff fe9c 	bl	8002350 <HAL_GetTick>
 8002618:	1b40      	subs	r0, r0, r5
 800261a:	2802      	cmp	r0, #2
 800261c:	d9f6      	bls.n	800260c <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f013 0301 	ands.w	r3, r3, #1
 8002626:	d1f1      	bne.n	800260c <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002628:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 800262a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262c:	f042 0210 	orr.w	r2, r2, #16
 8002630:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002632:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002634:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800263e:	e7d4      	b.n	80025ea <ADC_Enable+0x12>
      wait_loop_index--;
 8002640:	9b01      	ldr	r3, [sp, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	e7dc      	b.n	8002600 <ADC_Enable+0x28>
 8002646:	bf00      	nop
 8002648:	20000010 	.word	0x20000010
 800264c:	000f4240 	.word	0x000f4240

08002650 <HAL_ADC_Start_DMA>:
{
 8002650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002654:	4b40      	ldr	r3, [pc, #256]	; (8002758 <HAL_ADC_Start_DMA+0x108>)
{
 8002656:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002658:	6802      	ldr	r2, [r0, #0]
{
 800265a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800265c:	429a      	cmp	r2, r3
{
 800265e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002660:	d002      	beq.n	8002668 <HAL_ADC_Start_DMA+0x18>
 8002662:	493e      	ldr	r1, [pc, #248]	; (800275c <HAL_ADC_Start_DMA+0x10c>)
 8002664:	428a      	cmp	r2, r1
 8002666:	d103      	bne.n	8002670 <HAL_ADC_Start_DMA+0x20>
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800266e:	d16e      	bne.n	800274e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8002670:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002674:	2b01      	cmp	r3, #1
 8002676:	d06c      	beq.n	8002752 <HAL_ADC_Start_DMA+0x102>
 8002678:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800267a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800267c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002680:	f7ff ffaa 	bl	80025d8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002684:	4606      	mov	r6, r0
 8002686:	2800      	cmp	r0, #0
 8002688:	d15d      	bne.n	8002746 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800268a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800268c:	6821      	ldr	r1, [r4, #0]
 800268e:	4b33      	ldr	r3, [pc, #204]	; (800275c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8002690:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8002694:	f025 0501 	bic.w	r5, r5, #1
 8002698:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800269c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800269e:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026a0:	d104      	bne.n	80026ac <HAL_ADC_Start_DMA+0x5c>
 80026a2:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <HAL_ADC_Start_DMA+0x108>)
 80026a4:	6853      	ldr	r3, [r2, #4]
 80026a6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80026aa:	d13e      	bne.n	800272a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80026b2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026b4:	684b      	ldr	r3, [r1, #4]
 80026b6:	055a      	lsls	r2, r3, #21
 80026b8:	d505      	bpl.n	80026c6 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026c8:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ca:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026ce:	bf18      	it	ne
 80026d0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026d2:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026d4:	bf18      	it	ne
 80026d6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80026da:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80026dc:	2300      	movs	r3, #0
 80026de:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026e2:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026e4:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026e6:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <HAL_ADC_Start_DMA+0x114>)
 80026ea:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_ADC_Start_DMA+0x118>)
 80026ee:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026f0:	f06f 0302 	mvn.w	r3, #2
 80026f4:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026f8:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002704:	4643      	mov	r3, r8
 8002706:	f000 f96d 	bl	80029e4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002712:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	bf0c      	ite	eq
 800271a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800271e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	4630      	mov	r0, r6
 8002726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800272a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800272c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002730:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002732:	6853      	ldr	r3, [r2, #4]
 8002734:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002736:	bf41      	itttt	mi
 8002738:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800273a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800273e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8002742:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8002744:	e7bf      	b.n	80026c6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8002746:	2300      	movs	r3, #0
 8002748:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800274c:	e7ea      	b.n	8002724 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800274e:	2601      	movs	r6, #1
 8002750:	e7e8      	b.n	8002724 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002752:	2602      	movs	r6, #2
 8002754:	e7e6      	b.n	8002724 <HAL_ADC_Start_DMA+0xd4>
 8002756:	bf00      	nop
 8002758:	40012400 	.word	0x40012400
 800275c:	40012800 	.word	0x40012800
 8002760:	08002383 	.word	0x08002383
 8002764:	080023d3 	.word	0x080023d3
 8002768:	080024c3 	.word	0x080024c3

0800276c <ADC_ConversionStop_Disable>:
{
 800276c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800276e:	6803      	ldr	r3, [r0, #0]
{
 8002770:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	07d1      	lsls	r1, r2, #31
 8002776:	d401      	bmi.n	800277c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002778:	2000      	movs	r0, #0
}
 800277a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002784:	f7ff fde4 	bl	8002350 <HAL_GetTick>
 8002788:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	07db      	lsls	r3, r3, #31
 8002790:	d5f2      	bpl.n	8002778 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002792:	f7ff fddd 	bl	8002350 <HAL_GetTick>
 8002796:	1b40      	subs	r0, r0, r5
 8002798:	2802      	cmp	r0, #2
 800279a:	d9f6      	bls.n	800278a <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	07da      	lsls	r2, r3, #31
 80027a2:	d5f2      	bpl.n	800278a <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a8:	f043 0310 	orr.w	r3, r3, #16
 80027ac:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80027b6:	e7e0      	b.n	800277a <ADC_ConversionStop_Disable+0xe>

080027b8 <HAL_ADC_Init>:
{
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80027ba:	4604      	mov	r4, r0
 80027bc:	2800      	cmp	r0, #0
 80027be:	d06d      	beq.n	800289c <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80027c2:	b923      	cbnz	r3, 80027ce <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80027c4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80027c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80027ca:	f7fe fee7 	bl	800159c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7ff ffcc 	bl	800276c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027d6:	f013 0310 	ands.w	r3, r3, #16
 80027da:	d161      	bne.n	80028a0 <HAL_ADC_Init+0xe8>
 80027dc:	2800      	cmp	r0, #0
 80027de:	d15f      	bne.n	80028a0 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 80027e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027e2:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80027e4:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80027e8:	f022 0202 	bic.w	r2, r2, #2
 80027ec:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027f0:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027f2:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80027f4:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027f6:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027f8:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027fa:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027fe:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002802:	d036      	beq.n	8002872 <HAL_ADC_Init+0xba>
 8002804:	1e77      	subs	r7, r6, #1
 8002806:	427d      	negs	r5, r7
 8002808:	417d      	adcs	r5, r7
 800280a:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800280c:	7d27      	ldrb	r7, [r4, #20]
 800280e:	2f01      	cmp	r7, #1
 8002810:	d106      	bne.n	8002820 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002812:	bb82      	cbnz	r2, 8002876 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002814:	69a2      	ldr	r2, [r4, #24]
 8002816:	3a01      	subs	r2, #1
 8002818:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 800281c:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002820:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002822:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002826:	6857      	ldr	r7, [r2, #4]
 8002828:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 800282c:	ea45 0507 	orr.w	r5, r5, r7
 8002830:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002832:	6897      	ldr	r7, [r2, #8]
 8002834:	4d1d      	ldr	r5, [pc, #116]	; (80028ac <HAL_ADC_Init+0xf4>)
 8002836:	ea05 0507 	and.w	r5, r5, r7
 800283a:	ea45 0501 	orr.w	r5, r5, r1
 800283e:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002840:	d001      	beq.n	8002846 <HAL_ADC_Init+0x8e>
 8002842:	2e01      	cmp	r6, #1
 8002844:	d102      	bne.n	800284c <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002846:	6923      	ldr	r3, [r4, #16]
 8002848:	3b01      	subs	r3, #1
 800284a:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800284c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800284e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8002852:	432b      	orrs	r3, r5
 8002854:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002856:	6892      	ldr	r2, [r2, #8]
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_ADC_Init+0xf8>)
 800285a:	4013      	ands	r3, r2
 800285c:	4299      	cmp	r1, r3
 800285e:	d113      	bne.n	8002888 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8002860:	2300      	movs	r3, #0
 8002862:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002864:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002866:	f023 0303 	bic.w	r3, r3, #3
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002872:	4635      	mov	r5, r6
 8002874:	e7ca      	b.n	800280c <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002876:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002886:	e7cb      	b.n	8002820 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8002888:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800288a:	f023 0312 	bic.w	r3, r3, #18
 800288e:	f043 0310 	orr.w	r3, r3, #16
 8002892:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800289c:	2001      	movs	r0, #1
 800289e:	e7e7      	b.n	8002870 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028a2:	f043 0310 	orr.w	r3, r3, #16
 80028a6:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80028a8:	e7f8      	b.n	800289c <HAL_ADC_Init+0xe4>
 80028aa:	bf00      	nop
 80028ac:	ffe1f7fd 	.word	0xffe1f7fd
 80028b0:	ff1f0efe 	.word	0xff1f0efe

080028b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4907      	ldr	r1, [pc, #28]	; (80028d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028ba:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028c6:	0412      	lsls	r2, r2, #16
 80028c8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80028d4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028de:	b530      	push	{r4, r5, lr}
 80028e0:	68dc      	ldr	r4, [r3, #12]
 80028e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	bf28      	it	cs
 80028f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f8:	bf94      	ite	ls
 80028fa:	2400      	movls	r4, #0
 80028fc:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fe:	fa05 f303 	lsl.w	r3, r5, r3
 8002902:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002906:	40a5      	lsls	r5, r4
 8002908:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800290e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	bfac      	ite	ge
 8002916:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291a:	4a07      	ldrlt	r2, [pc, #28]	; (8002938 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002920:	b2db      	uxtb	r3, r3
 8002922:	bfab      	itete	ge
 8002924:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002932:	bd30      	pop	{r4, r5, pc}
 8002934:	e000ed00 	.word	0xe000ed00
 8002938:	e000ed14 	.word	0xe000ed14

0800293c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800293c:	2800      	cmp	r0, #0
 800293e:	db07      	blt.n	8002950 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002940:	2301      	movs	r3, #1
 8002942:	0941      	lsrs	r1, r0, #5
 8002944:	4a03      	ldr	r2, [pc, #12]	; (8002954 <HAL_NVIC_EnableIRQ+0x18>)
 8002946:	f000 001f 	and.w	r0, r0, #31
 800294a:	4083      	lsls	r3, r0
 800294c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	3801      	subs	r0, #1
 800295a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800295e:	d20b      	bcs.n	8002978 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002960:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	21f0      	movs	r1, #240	; 0xf0
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002968:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002970:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002972:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002974:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002976:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002978:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002980:	4603      	mov	r3, r0
{
 8002982:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8002984:	b340      	cbz	r0, 80029d8 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002986:	2114      	movs	r1, #20
 8002988:	6800      	ldr	r0, [r0, #0]
 800298a:	4a14      	ldr	r2, [pc, #80]	; (80029dc <HAL_DMA_Init+0x5c>)
 800298c:	4402      	add	r2, r0
 800298e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <HAL_DMA_Init+0x60>)
 8002998:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029a0:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 80029a4:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a6:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 80029a8:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029aa:	4322      	orrs	r2, r4
 80029ac:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029ae:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b2:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b4:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029b6:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ba:	4322      	orrs	r2, r4
 80029bc:	699c      	ldr	r4, [r3, #24]
 80029be:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c0:	69dc      	ldr	r4, [r3, #28]
 80029c2:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80029c4:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029c6:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c8:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029ca:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029cc:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029ce:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80029d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 80029d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029d8:	2001      	movs	r0, #1
 80029da:	e7fc      	b.n	80029d6 <HAL_DMA_Init+0x56>
 80029dc:	bffdfff8 	.word	0xbffdfff8
 80029e0:	40020000 	.word	0x40020000

080029e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e6:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029e8:	f890 0020 	ldrb.w	r0, [r0, #32]
 80029ec:	2801      	cmp	r0, #1
 80029ee:	d036      	beq.n	8002a5e <HAL_DMA_Start_IT+0x7a>
 80029f0:	2001      	movs	r0, #1
 80029f2:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029f6:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 80029fa:	2400      	movs	r4, #0
 80029fc:	2801      	cmp	r0, #1
 80029fe:	b2c6      	uxtb	r6, r0
 8002a00:	f04f 0002 	mov.w	r0, #2
 8002a04:	d128      	bne.n	8002a58 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a06:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0a:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a0c:	682c      	ldr	r4, [r5, #0]
 8002a0e:	6820      	ldr	r0, [r4, #0]
 8002a10:	f020 0001 	bic.w	r0, r0, #1
 8002a14:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a16:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 8002a1a:	fa06 f000 	lsl.w	r0, r6, r0
 8002a1e:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a20:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a22:	686b      	ldr	r3, [r5, #4]
 8002a24:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002a26:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a28:	bf0b      	itete	eq
 8002a2a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002a2c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002a2e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002a30:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002a32:	b14b      	cbz	r3, 8002a48 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a3c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6023      	str	r3, [r4, #0]
}
 8002a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	f023 0304 	bic.w	r3, r3, #4
 8002a4e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	f043 030a 	orr.w	r3, r3, #10
 8002a56:	e7f0      	b.n	8002a3a <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8002a58:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 8002a5c:	e7f3      	b.n	8002a46 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8002a5e:	2002      	movs	r0, #2
 8002a60:	e7f1      	b.n	8002a46 <HAL_DMA_Start_IT+0x62>

08002a62 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a62:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8002a66:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a68:	2a02      	cmp	r2, #2
 8002a6a:	d006      	beq.n	8002a7a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 8002a70:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002a78:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7a:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a7c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7e:	6811      	ldr	r1, [r2, #0]
 8002a80:	f021 010e 	bic.w	r1, r1, #14
 8002a84:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002a86:	6811      	ldr	r1, [r2, #0]
 8002a88:	f021 0101 	bic.w	r1, r1, #1
 8002a8c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a8e:	2101      	movs	r1, #1
 8002a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	6042      	str	r2, [r0, #4]
  return status; 
 8002a98:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 8002a9e:	e7e8      	b.n	8002a72 <HAL_DMA_Abort+0x10>

08002aa0 <HAL_DMA_Abort_IT>:
{  
 8002aa0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002aa2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d003      	beq.n	8002ab2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aaa:	2304      	movs	r3, #4
 8002aac:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002aae:	2001      	movs	r0, #1
}
 8002ab0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab2:	6803      	ldr	r3, [r0, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f022 020e 	bic.w	r2, r2, #14
 8002aba:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ac4:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_DMA_Abort_IT+0x88>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01f      	beq.n	8002b0a <HAL_DMA_Abort_IT+0x6a>
 8002aca:	3214      	adds	r2, #20
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d01e      	beq.n	8002b0e <HAL_DMA_Abort_IT+0x6e>
 8002ad0:	3214      	adds	r2, #20
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01d      	beq.n	8002b12 <HAL_DMA_Abort_IT+0x72>
 8002ad6:	3214      	adds	r2, #20
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_Abort_IT+0x78>
 8002adc:	3214      	adds	r2, #20
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01d      	beq.n	8002b1e <HAL_DMA_Abort_IT+0x7e>
 8002ae2:	3214      	adds	r2, #20
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	bf0c      	ite	eq
 8002ae8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002aec:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002af0:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002af2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002af4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002afc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002afe:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002b02:	b17b      	cbz	r3, 8002b24 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002b04:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	4620      	mov	r0, r4
 8002b08:	e7d2      	b.n	8002ab0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e7f0      	b.n	8002af0 <HAL_DMA_Abort_IT+0x50>
 8002b0e:	2310      	movs	r3, #16
 8002b10:	e7ee      	b.n	8002af0 <HAL_DMA_Abort_IT+0x50>
 8002b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b16:	e7eb      	b.n	8002af0 <HAL_DMA_Abort_IT+0x50>
 8002b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b1c:	e7e8      	b.n	8002af0 <HAL_DMA_Abort_IT+0x50>
 8002b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b22:	e7e5      	b.n	8002af0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	4618      	mov	r0, r3
 8002b26:	e7c3      	b.n	8002ab0 <HAL_DMA_Abort_IT+0x10>
 8002b28:	40020008 	.word	0x40020008
 8002b2c:	40020000 	.word	0x40020000

08002b30 <HAL_DMA_IRQHandler>:
{
 8002b30:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b32:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b34:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b36:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b38:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002b3a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b3c:	4095      	lsls	r5, r2
 8002b3e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002b40:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b42:	d032      	beq.n	8002baa <HAL_DMA_IRQHandler+0x7a>
 8002b44:	074d      	lsls	r5, r1, #29
 8002b46:	d530      	bpl.n	8002baa <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b4c:	bf5e      	ittt	pl
 8002b4e:	681a      	ldrpl	r2, [r3, #0]
 8002b50:	f022 0204 	bicpl.w	r2, r2, #4
 8002b54:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b56:	4a3e      	ldr	r2, [pc, #248]	; (8002c50 <HAL_DMA_IRQHandler+0x120>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d019      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x60>
 8002b5c:	3214      	adds	r2, #20
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d018      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x64>
 8002b62:	3214      	adds	r2, #20
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d017      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x68>
 8002b68:	3214      	adds	r2, #20
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d017      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x6e>
 8002b6e:	3214      	adds	r2, #20
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d017      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x74>
 8002b74:	3214      	adds	r2, #20
 8002b76:	4293      	cmp	r3, r2
 8002b78:	bf0c      	ite	eq
 8002b7a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002b7e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002b82:	4a34      	ldr	r2, [pc, #208]	; (8002c54 <HAL_DMA_IRQHandler+0x124>)
 8002b84:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002b86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d05e      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x11a>
}
 8002b8c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002b8e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b90:	2304      	movs	r3, #4
 8002b92:	e7f6      	b.n	8002b82 <HAL_DMA_IRQHandler+0x52>
 8002b94:	2340      	movs	r3, #64	; 0x40
 8002b96:	e7f4      	b.n	8002b82 <HAL_DMA_IRQHandler+0x52>
 8002b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b9c:	e7f1      	b.n	8002b82 <HAL_DMA_IRQHandler+0x52>
 8002b9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba2:	e7ee      	b.n	8002b82 <HAL_DMA_IRQHandler+0x52>
 8002ba4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ba8:	e7eb      	b.n	8002b82 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002baa:	2502      	movs	r5, #2
 8002bac:	4095      	lsls	r5, r2
 8002bae:	4225      	tst	r5, r4
 8002bb0:	d035      	beq.n	8002c1e <HAL_DMA_IRQHandler+0xee>
 8002bb2:	078d      	lsls	r5, r1, #30
 8002bb4:	d533      	bpl.n	8002c1e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	0694      	lsls	r4, r2, #26
 8002bba:	d406      	bmi.n	8002bca <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	f022 020a 	bic.w	r2, r2, #10
 8002bc2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bca:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <HAL_DMA_IRQHandler+0x120>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d019      	beq.n	8002c04 <HAL_DMA_IRQHandler+0xd4>
 8002bd0:	3214      	adds	r2, #20
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d018      	beq.n	8002c08 <HAL_DMA_IRQHandler+0xd8>
 8002bd6:	3214      	adds	r2, #20
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d017      	beq.n	8002c0c <HAL_DMA_IRQHandler+0xdc>
 8002bdc:	3214      	adds	r2, #20
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d017      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xe2>
 8002be2:	3214      	adds	r2, #20
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d017      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xe8>
 8002be8:	3214      	adds	r2, #20
 8002bea:	4293      	cmp	r3, r2
 8002bec:	bf0c      	ite	eq
 8002bee:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002bf2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002bf6:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_DMA_IRQHandler+0x124>)
 8002bf8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002c00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c02:	e7c1      	b.n	8002b88 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c04:	2302      	movs	r3, #2
 8002c06:	e7f6      	b.n	8002bf6 <HAL_DMA_IRQHandler+0xc6>
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e7f4      	b.n	8002bf6 <HAL_DMA_IRQHandler+0xc6>
 8002c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c10:	e7f1      	b.n	8002bf6 <HAL_DMA_IRQHandler+0xc6>
 8002c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c16:	e7ee      	b.n	8002bf6 <HAL_DMA_IRQHandler+0xc6>
 8002c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c1c:	e7eb      	b.n	8002bf6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c1e:	2508      	movs	r5, #8
 8002c20:	4095      	lsls	r5, r2
 8002c22:	4225      	tst	r5, r4
 8002c24:	d011      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x11a>
 8002c26:	0709      	lsls	r1, r1, #28
 8002c28:	d50f      	bpl.n	8002c4a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c2a:	6819      	ldr	r1, [r3, #0]
 8002c2c:	f021 010e 	bic.w	r1, r1, #14
 8002c30:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c32:	2301      	movs	r3, #1
 8002c34:	fa03 f202 	lsl.w	r2, r3, r2
 8002c38:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c3a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002c3c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002c40:	2300      	movs	r3, #0
 8002c42:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002c46:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c48:	e79e      	b.n	8002b88 <HAL_DMA_IRQHandler+0x58>
}
 8002c4a:	bc70      	pop	{r4, r5, r6}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40020008 	.word	0x40020008
 8002c54:	40020000 	.word	0x40020000

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c5c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002c5e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c60:	4f64      	ldr	r7, [pc, #400]	; (8002df4 <HAL_GPIO_Init+0x19c>)
 8002c62:	4b65      	ldr	r3, [pc, #404]	; (8002df8 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8002c64:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002dfc <HAL_GPIO_Init+0x1a4>
 8002c68:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002e00 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6c:	680d      	ldr	r5, [r1, #0]
 8002c6e:	fa35 f406 	lsrs.w	r4, r5, r6
 8002c72:	d102      	bne.n	8002c7a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002c74:	b003      	add	sp, #12
 8002c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002c7a:	f04f 0801 	mov.w	r8, #1
 8002c7e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002c86:	ea38 0505 	bics.w	r5, r8, r5
 8002c8a:	d17a      	bne.n	8002d82 <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 8002c8c:	684d      	ldr	r5, [r1, #4]
 8002c8e:	2d03      	cmp	r5, #3
 8002c90:	d807      	bhi.n	8002ca2 <HAL_GPIO_Init+0x4a>
 8002c92:	3d01      	subs	r5, #1
 8002c94:	2d02      	cmp	r5, #2
 8002c96:	f200 8087 	bhi.w	8002da8 <HAL_GPIO_Init+0x150>
 8002c9a:	e8df f005 	tbb	[pc, r5]
 8002c9e:	9a95      	.short	0x9a95
 8002ca0:	a0          	.byte	0xa0
 8002ca1:	00          	.byte	0x00
 8002ca2:	2d12      	cmp	r5, #18
 8002ca4:	f000 8098 	beq.w	8002dd8 <HAL_GPIO_Init+0x180>
 8002ca8:	d86d      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002caa:	2d11      	cmp	r5, #17
 8002cac:	f000 808e 	beq.w	8002dcc <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cb0:	2cff      	cmp	r4, #255	; 0xff
 8002cb2:	bf98      	it	ls
 8002cb4:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cb6:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cba:	bf88      	it	hi
 8002cbc:	f100 0a04 	addhi.w	sl, r0, #4
 8002cc0:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cc4:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cc8:	bf88      	it	hi
 8002cca:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ccc:	fa09 fb05 	lsl.w	fp, r9, r5
 8002cd0:	ea28 080b 	bic.w	r8, r8, fp
 8002cd4:	fa02 f505 	lsl.w	r5, r2, r5
 8002cd8:	ea48 0505 	orr.w	r5, r8, r5
 8002cdc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ce0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002ce4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002ce8:	d04b      	beq.n	8002d82 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cea:	69bd      	ldr	r5, [r7, #24]
 8002cec:	f026 0803 	bic.w	r8, r6, #3
 8002cf0:	f045 0501 	orr.w	r5, r5, #1
 8002cf4:	61bd      	str	r5, [r7, #24]
 8002cf6:	69bd      	ldr	r5, [r7, #24]
 8002cf8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002cfc:	f005 0501 	and.w	r5, r5, #1
 8002d00:	9501      	str	r5, [sp, #4]
 8002d02:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d06:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d0a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d0c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002d10:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d14:	fa09 f90b 	lsl.w	r9, r9, fp
 8002d18:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d1c:	4d39      	ldr	r5, [pc, #228]	; (8002e04 <HAL_GPIO_Init+0x1ac>)
 8002d1e:	42a8      	cmp	r0, r5
 8002d20:	d061      	beq.n	8002de6 <HAL_GPIO_Init+0x18e>
 8002d22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d26:	42a8      	cmp	r0, r5
 8002d28:	d05f      	beq.n	8002dea <HAL_GPIO_Init+0x192>
 8002d2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d2e:	42a8      	cmp	r0, r5
 8002d30:	d05d      	beq.n	8002dee <HAL_GPIO_Init+0x196>
 8002d32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d36:	42a8      	cmp	r0, r5
 8002d38:	bf0c      	ite	eq
 8002d3a:	2503      	moveq	r5, #3
 8002d3c:	2504      	movne	r5, #4
 8002d3e:	fa05 f50b 	lsl.w	r5, r5, fp
 8002d42:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002d46:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d4a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d50:	bf14      	ite	ne
 8002d52:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d54:	43a5      	biceq	r5, r4
 8002d56:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d58:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d5a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d5e:	bf14      	ite	ne
 8002d60:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d62:	43a5      	biceq	r5, r4
 8002d64:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002d66:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d68:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002d6c:	bf14      	ite	ne
 8002d6e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d70:	43a5      	biceq	r5, r4
 8002d72:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002d74:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d76:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002d7a:	bf14      	ite	ne
 8002d7c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d7e:	43a5      	biceq	r5, r4
 8002d80:	601d      	str	r5, [r3, #0]
	position++;
 8002d82:	3601      	adds	r6, #1
 8002d84:	e772      	b.n	8002c6c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002d86:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8002e08 <HAL_GPIO_Init+0x1b0>
 8002d8a:	454d      	cmp	r5, r9
 8002d8c:	d00c      	beq.n	8002da8 <HAL_GPIO_Init+0x150>
 8002d8e:	d817      	bhi.n	8002dc0 <HAL_GPIO_Init+0x168>
 8002d90:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002d94:	454d      	cmp	r5, r9
 8002d96:	d007      	beq.n	8002da8 <HAL_GPIO_Init+0x150>
 8002d98:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002d9c:	454d      	cmp	r5, r9
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x150>
 8002da0:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002da4:	454d      	cmp	r5, r9
 8002da6:	d183      	bne.n	8002cb0 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002da8:	688a      	ldr	r2, [r1, #8]
 8002daa:	b1d2      	cbz	r2, 8002de2 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dac:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002dae:	bf08      	it	eq
 8002db0:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db4:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002db8:	bf18      	it	ne
 8002dba:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002dbe:	e777      	b.n	8002cb0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002dc0:	4565      	cmp	r5, ip
 8002dc2:	d0f1      	beq.n	8002da8 <HAL_GPIO_Init+0x150>
 8002dc4:	4575      	cmp	r5, lr
 8002dc6:	e7ee      	b.n	8002da6 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dc8:	68ca      	ldr	r2, [r1, #12]
          break;
 8002dca:	e771      	b.n	8002cb0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dcc:	68ca      	ldr	r2, [r1, #12]
 8002dce:	3204      	adds	r2, #4
          break;
 8002dd0:	e76e      	b.n	8002cb0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dd2:	68ca      	ldr	r2, [r1, #12]
 8002dd4:	3208      	adds	r2, #8
          break;
 8002dd6:	e76b      	b.n	8002cb0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dd8:	68ca      	ldr	r2, [r1, #12]
 8002dda:	320c      	adds	r2, #12
          break;
 8002ddc:	e768      	b.n	8002cb0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002dde:	2200      	movs	r2, #0
 8002de0:	e766      	b.n	8002cb0 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002de2:	2204      	movs	r2, #4
 8002de4:	e764      	b.n	8002cb0 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002de6:	2500      	movs	r5, #0
 8002de8:	e7a9      	b.n	8002d3e <HAL_GPIO_Init+0xe6>
 8002dea:	2501      	movs	r5, #1
 8002dec:	e7a7      	b.n	8002d3e <HAL_GPIO_Init+0xe6>
 8002dee:	2502      	movs	r5, #2
 8002df0:	e7a5      	b.n	8002d3e <HAL_GPIO_Init+0xe6>
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40010400 	.word	0x40010400
 8002dfc:	10310000 	.word	0x10310000
 8002e00:	10320000 	.word	0x10320000
 8002e04:	40010800 	.word	0x40010800
 8002e08:	10220000 	.word	0x10220000

08002e0c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e0c:	6883      	ldr	r3, [r0, #8]
 8002e0e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002e10:	bf14      	ite	ne
 8002e12:	2001      	movne	r0, #1
 8002e14:	2000      	moveq	r0, #0
 8002e16:	4770      	bx	lr

08002e18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e18:	b10a      	cbz	r2, 8002e1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e1a:	6101      	str	r1, [r0, #16]
  }
}
 8002e1c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e1e:	0409      	lsls	r1, r1, #16
 8002e20:	e7fb      	b.n	8002e1a <HAL_GPIO_WritePin+0x2>

08002e22 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e22:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e24:	ea01 0203 	and.w	r2, r1, r3
 8002e28:	ea21 0103 	bic.w	r1, r1, r3
 8002e2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002e30:	6101      	str	r1, [r0, #16]
}
 8002e32:	4770      	bx	lr

08002e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e36:	4604      	mov	r4, r0
 8002e38:	b908      	cbnz	r0, 8002e3e <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8002e3a:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8002e3c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e46:	b91b      	cbnz	r3, 8002e50 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002e48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002e4c:	f7fe fccc 	bl	80017e8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e50:	2324      	movs	r3, #36	; 0x24
 8002e52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e6e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e70:	f000 fae6 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_I2C_Init+0x140>)
 8002e76:	6865      	ldr	r5, [r4, #4]
 8002e78:	429d      	cmp	r5, r3
 8002e7a:	bf94      	ite	ls
 8002e7c:	4b3e      	ldrls	r3, [pc, #248]	; (8002f78 <HAL_I2C_Init+0x144>)
 8002e7e:	4b3f      	ldrhi	r3, [pc, #252]	; (8002f7c <HAL_I2C_Init+0x148>)
 8002e80:	4298      	cmp	r0, r3
 8002e82:	bf8c      	ite	hi
 8002e84:	2300      	movhi	r3, #0
 8002e86:	2301      	movls	r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1d6      	bne.n	8002e3a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e8c:	4e39      	ldr	r6, [pc, #228]	; (8002f74 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002e8e:	4b3c      	ldr	r3, [pc, #240]	; (8002f80 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e90:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e96:	bf88      	it	hi
 8002e98:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e9c:	6822      	ldr	r2, [r4, #0]
 8002e9e:	6851      	ldr	r1, [r2, #4]
 8002ea0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002ea4:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ea8:	bf82      	ittt	hi
 8002eaa:	4373      	mulhi	r3, r6
 8002eac:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002eb0:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eb4:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	6a11      	ldr	r1, [r2, #32]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ec2:	69d1      	ldr	r1, [r2, #28]
 8002ec4:	1e43      	subs	r3, r0, #1
 8002ec6:	482b      	ldr	r0, [pc, #172]	; (8002f74 <HAL_I2C_Init+0x140>)
 8002ec8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002ecc:	4285      	cmp	r5, r0
 8002ece:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ed2:	d832      	bhi.n	8002f3a <HAL_I2C_Init+0x106>
 8002ed4:	006d      	lsls	r5, r5, #1
 8002ed6:	fbb3 f3f5 	udiv	r3, r3, r5
 8002eda:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4203      	tst	r3, r0
 8002ee2:	d042      	beq.n	8002f6a <HAL_I2C_Init+0x136>
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	4319      	orrs	r1, r3
 8002eea:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eec:	6811      	ldr	r1, [r2, #0]
 8002eee:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002ef2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002ef6:	4303      	orrs	r3, r0
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002efc:	6891      	ldr	r1, [r2, #8]
 8002efe:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002f02:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002f06:	4303      	orrs	r3, r0
 8002f08:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f10:	68d1      	ldr	r1, [r2, #12]
 8002f12:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002f16:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002f1a:	4303      	orrs	r3, r0
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002f20:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f22:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f32:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002f38:	e780      	b.n	8002e3c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f3a:	68a0      	ldr	r0, [r4, #8]
 8002f3c:	b950      	cbnz	r0, 8002f54 <HAL_I2C_Init+0x120>
 8002f3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f42:	fbb3 f3f5 	udiv	r3, r3, r5
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	b17b      	cbz	r3, 8002f6e <HAL_I2C_Init+0x13a>
 8002f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f52:	e7c9      	b.n	8002ee8 <HAL_I2C_Init+0xb4>
 8002f54:	2019      	movs	r0, #25
 8002f56:	4368      	muls	r0, r5
 8002f58:	fbb3 f3f0 	udiv	r3, r3, r0
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f62:	b123      	cbz	r3, 8002f6e <HAL_I2C_Init+0x13a>
 8002f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f68:	e7be      	b.n	8002ee8 <HAL_I2C_Init+0xb4>
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	e7bc      	b.n	8002ee8 <HAL_I2C_Init+0xb4>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e7ba      	b.n	8002ee8 <HAL_I2C_Init+0xb4>
 8002f72:	bf00      	nop
 8002f74:	000186a0 	.word	0x000186a0
 8002f78:	001e847f 	.word	0x001e847f
 8002f7c:	003d08ff 	.word	0x003d08ff
 8002f80:	000f4240 	.word	0x000f4240

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f88:	4605      	mov	r5, r0
 8002f8a:	b338      	cbz	r0, 8002fdc <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8c:	6803      	ldr	r3, [r0, #0]
 8002f8e:	07db      	lsls	r3, r3, #31
 8002f90:	d410      	bmi.n	8002fb4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f92:	682b      	ldr	r3, [r5, #0]
 8002f94:	079f      	lsls	r7, r3, #30
 8002f96:	d45e      	bmi.n	8003056 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	0719      	lsls	r1, r3, #28
 8002f9c:	f100 8095 	bmi.w	80030ca <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	075a      	lsls	r2, r3, #29
 8002fa4:	f100 80c1 	bmi.w	800312a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa8:	69e8      	ldr	r0, [r5, #28]
 8002faa:	2800      	cmp	r0, #0
 8002fac:	f040 812c 	bne.w	8003208 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	e029      	b.n	8003008 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb4:	4c90      	ldr	r4, [pc, #576]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	6863      	ldr	r3, [r4, #4]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d007      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fc0:	6863      	ldr	r3, [r4, #4]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5c>
 8002fca:	6863      	ldr	r3, [r4, #4]
 8002fcc:	03de      	lsls	r6, r3, #15
 8002fce:	d507      	bpl.n	8002fe0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	039c      	lsls	r4, r3, #14
 8002fd4:	d5dd      	bpl.n	8002f92 <HAL_RCC_OscConfig+0xe>
 8002fd6:	686b      	ldr	r3, [r5, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1da      	bne.n	8002f92 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002fdc:	2001      	movs	r0, #1
 8002fde:	e013      	b.n	8003008 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe0:	686b      	ldr	r3, [r5, #4]
 8002fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe6:	d112      	bne.n	800300e <HAL_RCC_OscConfig+0x8a>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ff0:	f7ff f9ae 	bl	8002350 <HAL_GetTick>
 8002ff4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	0398      	lsls	r0, r3, #14
 8002ffa:	d4ca      	bmi.n	8002f92 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7ff f9a8 	bl	8002350 <HAL_GetTick>
 8003000:	1b80      	subs	r0, r0, r6
 8003002:	2864      	cmp	r0, #100	; 0x64
 8003004:	d9f7      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8003006:	2003      	movs	r0, #3
}
 8003008:	b002      	add	sp, #8
 800300a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800300e:	b99b      	cbnz	r3, 8003038 <HAL_RCC_OscConfig+0xb4>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003020:	f7ff f996 	bl	8002350 <HAL_GetTick>
 8003024:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	0399      	lsls	r1, r3, #14
 800302a:	d5b2      	bpl.n	8002f92 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800302c:	f7ff f990 	bl	8002350 <HAL_GetTick>
 8003030:	1b80      	subs	r0, r0, r6
 8003032:	2864      	cmp	r0, #100	; 0x64
 8003034:	d9f7      	bls.n	8003026 <HAL_RCC_OscConfig+0xa2>
 8003036:	e7e6      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	d103      	bne.n	8003048 <HAL_RCC_OscConfig+0xc4>
 8003040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	e7cf      	b.n	8002fe8 <HAL_RCC_OscConfig+0x64>
 8003048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304c:	6023      	str	r3, [r4, #0]
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003054:	e7cb      	b.n	8002fee <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003056:	4c68      	ldr	r4, [pc, #416]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003058:	6863      	ldr	r3, [r4, #4]
 800305a:	f013 0f0c 	tst.w	r3, #12
 800305e:	d007      	beq.n	8003070 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003060:	6863      	ldr	r3, [r4, #4]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b08      	cmp	r3, #8
 8003068:	d110      	bne.n	800308c <HAL_RCC_OscConfig+0x108>
 800306a:	6863      	ldr	r3, [r4, #4]
 800306c:	03da      	lsls	r2, r3, #15
 800306e:	d40d      	bmi.n	800308c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	079b      	lsls	r3, r3, #30
 8003074:	d502      	bpl.n	800307c <HAL_RCC_OscConfig+0xf8>
 8003076:	692b      	ldr	r3, [r5, #16]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d1af      	bne.n	8002fdc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	696a      	ldr	r2, [r5, #20]
 8003080:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003084:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	e785      	b.n	8002f98 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800308c:	692a      	ldr	r2, [r5, #16]
 800308e:	4b5b      	ldr	r3, [pc, #364]	; (80031fc <HAL_RCC_OscConfig+0x278>)
 8003090:	b16a      	cbz	r2, 80030ae <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003096:	f7ff f95b 	bl	8002350 <HAL_GetTick>
 800309a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	079f      	lsls	r7, r3, #30
 80030a0:	d4ec      	bmi.n	800307c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7ff f955 	bl	8002350 <HAL_GetTick>
 80030a6:	1b80      	subs	r0, r0, r6
 80030a8:	2802      	cmp	r0, #2
 80030aa:	d9f7      	bls.n	800309c <HAL_RCC_OscConfig+0x118>
 80030ac:	e7ab      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80030ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80030b0:	f7ff f94e 	bl	8002350 <HAL_GetTick>
 80030b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	0798      	lsls	r0, r3, #30
 80030ba:	f57f af6d 	bpl.w	8002f98 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030be:	f7ff f947 	bl	8002350 <HAL_GetTick>
 80030c2:	1b80      	subs	r0, r0, r6
 80030c4:	2802      	cmp	r0, #2
 80030c6:	d9f6      	bls.n	80030b6 <HAL_RCC_OscConfig+0x132>
 80030c8:	e79d      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ca:	69aa      	ldr	r2, [r5, #24]
 80030cc:	4e4a      	ldr	r6, [pc, #296]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80030ce:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <HAL_RCC_OscConfig+0x278>)
 80030d0:	b1e2      	cbz	r2, 800310c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80030d2:	2201      	movs	r2, #1
 80030d4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80030d8:	f7ff f93a 	bl	8002350 <HAL_GetTick>
 80030dc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80030e0:	079b      	lsls	r3, r3, #30
 80030e2:	d50d      	bpl.n	8003100 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80030e8:	4b45      	ldr	r3, [pc, #276]	; (8003200 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80030f0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80030f2:	bf00      	nop
  }
  while (Delay --);
 80030f4:	9b01      	ldr	r3, [sp, #4]
 80030f6:	1e5a      	subs	r2, r3, #1
 80030f8:	9201      	str	r2, [sp, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f9      	bne.n	80030f2 <HAL_RCC_OscConfig+0x16e>
 80030fe:	e74f      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003100:	f7ff f926 	bl	8002350 <HAL_GetTick>
 8003104:	1b00      	subs	r0, r0, r4
 8003106:	2802      	cmp	r0, #2
 8003108:	d9e9      	bls.n	80030de <HAL_RCC_OscConfig+0x15a>
 800310a:	e77c      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800310c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003110:	f7ff f91e 	bl	8002350 <HAL_GetTick>
 8003114:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003116:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003118:	079f      	lsls	r7, r3, #30
 800311a:	f57f af41 	bpl.w	8002fa0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311e:	f7ff f917 	bl	8002350 <HAL_GetTick>
 8003122:	1b00      	subs	r0, r0, r4
 8003124:	2802      	cmp	r0, #2
 8003126:	d9f6      	bls.n	8003116 <HAL_RCC_OscConfig+0x192>
 8003128:	e76d      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4c33      	ldr	r4, [pc, #204]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800312c:	69e3      	ldr	r3, [r4, #28]
 800312e:	00d8      	lsls	r0, r3, #3
 8003130:	d424      	bmi.n	800317c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8003132:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003134:	69e3      	ldr	r3, [r4, #28]
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313a:	61e3      	str	r3, [r4, #28]
 800313c:	69e3      	ldr	r3, [r4, #28]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4e2f      	ldr	r6, [pc, #188]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003148:	6833      	ldr	r3, [r6, #0]
 800314a:	05d9      	lsls	r1, r3, #23
 800314c:	d518      	bpl.n	8003180 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314e:	68eb      	ldr	r3, [r5, #12]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d126      	bne.n	80031a2 <HAL_RCC_OscConfig+0x21e>
 8003154:	6a23      	ldr	r3, [r4, #32]
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800315c:	f7ff f8f8 	bl	8002350 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003164:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	6a23      	ldr	r3, [r4, #32]
 8003168:	079b      	lsls	r3, r3, #30
 800316a:	d53f      	bpl.n	80031ec <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800316c:	2f00      	cmp	r7, #0
 800316e:	f43f af1b 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003172:	69e3      	ldr	r3, [r4, #28]
 8003174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003178:	61e3      	str	r3, [r4, #28]
 800317a:	e715      	b.n	8002fa8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800317c:	2700      	movs	r7, #0
 800317e:	e7e2      	b.n	8003146 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003180:	6833      	ldr	r3, [r6, #0]
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003188:	f7ff f8e2 	bl	8002350 <HAL_GetTick>
 800318c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	6833      	ldr	r3, [r6, #0]
 8003190:	05da      	lsls	r2, r3, #23
 8003192:	d4dc      	bmi.n	800314e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003194:	f7ff f8dc 	bl	8002350 <HAL_GetTick>
 8003198:	eba0 0008 	sub.w	r0, r0, r8
 800319c:	2864      	cmp	r0, #100	; 0x64
 800319e:	d9f6      	bls.n	800318e <HAL_RCC_OscConfig+0x20a>
 80031a0:	e731      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a2:	b9ab      	cbnz	r3, 80031d0 <HAL_RCC_OscConfig+0x24c>
 80031a4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	6223      	str	r3, [r4, #32]
 80031b0:	6a23      	ldr	r3, [r4, #32]
 80031b2:	f023 0304 	bic.w	r3, r3, #4
 80031b6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80031b8:	f7ff f8ca 	bl	8002350 <HAL_GetTick>
 80031bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031be:	6a23      	ldr	r3, [r4, #32]
 80031c0:	0798      	lsls	r0, r3, #30
 80031c2:	d5d3      	bpl.n	800316c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7ff f8c4 	bl	8002350 <HAL_GetTick>
 80031c8:	1b80      	subs	r0, r0, r6
 80031ca:	4540      	cmp	r0, r8
 80031cc:	d9f7      	bls.n	80031be <HAL_RCC_OscConfig+0x23a>
 80031ce:	e71a      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	6a23      	ldr	r3, [r4, #32]
 80031d4:	d103      	bne.n	80031de <HAL_RCC_OscConfig+0x25a>
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6223      	str	r3, [r4, #32]
 80031dc:	e7ba      	b.n	8003154 <HAL_RCC_OscConfig+0x1d0>
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	6223      	str	r3, [r4, #32]
 80031e4:	6a23      	ldr	r3, [r4, #32]
 80031e6:	f023 0304 	bic.w	r3, r3, #4
 80031ea:	e7b6      	b.n	800315a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f7ff f8b0 	bl	8002350 <HAL_GetTick>
 80031f0:	1b80      	subs	r0, r0, r6
 80031f2:	4540      	cmp	r0, r8
 80031f4:	d9b7      	bls.n	8003166 <HAL_RCC_OscConfig+0x1e2>
 80031f6:	e706      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
 80031f8:	40021000 	.word	0x40021000
 80031fc:	42420000 	.word	0x42420000
 8003200:	20000010 	.word	0x20000010
 8003204:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003208:	4c2a      	ldr	r4, [pc, #168]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800320a:	6863      	ldr	r3, [r4, #4]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d03e      	beq.n	8003292 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003214:	2200      	movs	r2, #0
 8003216:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003218:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800321a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321c:	d12c      	bne.n	8003278 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800321e:	f7ff f897 	bl	8002350 <HAL_GetTick>
 8003222:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	0199      	lsls	r1, r3, #6
 8003228:	d420      	bmi.n	800326c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800322a:	6a2b      	ldr	r3, [r5, #32]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d105      	bne.n	800323e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003232:	6862      	ldr	r2, [r4, #4]
 8003234:	68a9      	ldr	r1, [r5, #8]
 8003236:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800323a:	430a      	orrs	r2, r1
 800323c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800323e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003240:	6862      	ldr	r2, [r4, #4]
 8003242:	430b      	orrs	r3, r1
 8003244:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003248:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800324a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800324c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003250:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003252:	f7ff f87d 	bl	8002350 <HAL_GetTick>
 8003256:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	019a      	lsls	r2, r3, #6
 800325c:	f53f aea8 	bmi.w	8002fb0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003260:	f7ff f876 	bl	8002350 <HAL_GetTick>
 8003264:	1b40      	subs	r0, r0, r5
 8003266:	2802      	cmp	r0, #2
 8003268:	d9f6      	bls.n	8003258 <HAL_RCC_OscConfig+0x2d4>
 800326a:	e6cc      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326c:	f7ff f870 	bl	8002350 <HAL_GetTick>
 8003270:	1b80      	subs	r0, r0, r6
 8003272:	2802      	cmp	r0, #2
 8003274:	d9d6      	bls.n	8003224 <HAL_RCC_OscConfig+0x2a0>
 8003276:	e6c6      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003278:	f7ff f86a 	bl	8002350 <HAL_GetTick>
 800327c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	f57f ae95 	bpl.w	8002fb0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7ff f863 	bl	8002350 <HAL_GetTick>
 800328a:	1b40      	subs	r0, r0, r5
 800328c:	2802      	cmp	r0, #2
 800328e:	d9f6      	bls.n	800327e <HAL_RCC_OscConfig+0x2fa>
 8003290:	e6b9      	b.n	8003006 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003292:	2801      	cmp	r0, #1
 8003294:	f43f aeb8 	beq.w	8003008 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003298:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	6a2a      	ldr	r2, [r5, #32]
 800329c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80032a0:	4291      	cmp	r1, r2
 80032a2:	f47f ae9b 	bne.w	8002fdc <HAL_RCC_OscConfig+0x58>
 80032a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ac:	4293      	cmp	r3, r2
 80032ae:	f43f ae7f 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x2c>
 80032b2:	e693      	b.n	8002fdc <HAL_RCC_OscConfig+0x58>
 80032b4:	40021000 	.word	0x40021000
 80032b8:	42420000 	.word	0x42420000

080032bc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80032bc:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x38>)
 80032be:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80032c0:	f003 010c 	and.w	r1, r3, #12
 80032c4:	2908      	cmp	r1, #8
 80032c6:	d112      	bne.n	80032ee <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c8:	480b      	ldr	r0, [pc, #44]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80032ca:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ce:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032d0:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d2:	d509      	bpl.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032d4:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032d8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032dc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032de:	4a08      	ldr	r2, [pc, #32]	; (8003300 <HAL_RCC_GetSysClockFreq+0x44>)
 80032e0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80032e6:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_GetSysClockFreq+0x48>)
 80032ea:	4358      	muls	r0, r3
 80032ec:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80032ee:	4803      	ldr	r0, [pc, #12]	; (80032fc <HAL_RCC_GetSysClockFreq+0x40>)
}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08008ccd 	.word	0x08008ccd
 80032fc:	007a1200 	.word	0x007a1200
 8003300:	08008cdd 	.word	0x08008cdd
 8003304:	003d0900 	.word	0x003d0900

08003308 <HAL_RCC_ClockConfig>:
{
 8003308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800330e:	4604      	mov	r4, r0
 8003310:	b910      	cbnz	r0, 8003318 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003312:	2001      	movs	r0, #1
}
 8003314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4a44      	ldr	r2, [pc, #272]	; (800342c <HAL_RCC_ClockConfig+0x124>)
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	428b      	cmp	r3, r1
 8003322:	d328      	bcc.n	8003376 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003324:	6821      	ldr	r1, [r4, #0]
 8003326:	078e      	lsls	r6, r1, #30
 8003328:	d430      	bmi.n	800338c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332a:	07ca      	lsls	r2, r1, #31
 800332c:	d443      	bmi.n	80033b6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800332e:	4a3f      	ldr	r2, [pc, #252]	; (800342c <HAL_RCC_ClockConfig+0x124>)
 8003330:	6813      	ldr	r3, [r2, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	42ab      	cmp	r3, r5
 8003338:	d865      	bhi.n	8003406 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	4d3c      	ldr	r5, [pc, #240]	; (8003430 <HAL_RCC_ClockConfig+0x128>)
 800333e:	f012 0f04 	tst.w	r2, #4
 8003342:	d16c      	bne.n	800341e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003344:	0713      	lsls	r3, r2, #28
 8003346:	d506      	bpl.n	8003356 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003348:	686b      	ldr	r3, [r5, #4]
 800334a:	6922      	ldr	r2, [r4, #16]
 800334c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003350:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003354:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003356:	f7ff ffb1 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800335a:	686b      	ldr	r3, [r5, #4]
 800335c:	4a35      	ldr	r2, [pc, #212]	; (8003434 <HAL_RCC_ClockConfig+0x12c>)
 800335e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	40d8      	lsrs	r0, r3
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCC_ClockConfig+0x130>)
 8003368:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800336a:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_ClockConfig+0x134>)
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	f7fe ffad 	bl	80022cc <HAL_InitTick>
  return HAL_OK;
 8003372:	2000      	movs	r0, #0
 8003374:	e7ce      	b.n	8003314 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	f023 0307 	bic.w	r3, r3, #7
 800337c:	430b      	orrs	r3, r1
 800337e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	428b      	cmp	r3, r1
 8003388:	d1c3      	bne.n	8003312 <HAL_RCC_ClockConfig+0xa>
 800338a:	e7cb      	b.n	8003324 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	4b28      	ldr	r3, [pc, #160]	; (8003430 <HAL_RCC_ClockConfig+0x128>)
 800338e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003392:	bf1e      	ittt	ne
 8003394:	685a      	ldrne	r2, [r3, #4]
 8003396:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800339a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800339e:	bf42      	ittt	mi
 80033a0:	685a      	ldrmi	r2, [r3, #4]
 80033a2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80033a6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	68a0      	ldr	r0, [r4, #8]
 80033ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80033b0:	4302      	orrs	r2, r0
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	e7b9      	b.n	800332a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b6:	6862      	ldr	r2, [r4, #4]
 80033b8:	4e1d      	ldr	r6, [pc, #116]	; (8003430 <HAL_RCC_ClockConfig+0x128>)
 80033ba:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033bc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	d11a      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	d0a5      	beq.n	8003312 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033cc:	f023 0303 	bic.w	r3, r3, #3
 80033d0:	4313      	orrs	r3, r2
 80033d2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80033d4:	f7fe ffbc 	bl	8002350 <HAL_GetTick>
 80033d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	6873      	ldr	r3, [r6, #4]
 80033dc:	6862      	ldr	r2, [r4, #4]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033e6:	d0a2      	beq.n	800332e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e8:	f7fe ffb2 	bl	8002350 <HAL_GetTick>
 80033ec:	1bc0      	subs	r0, r0, r7
 80033ee:	4540      	cmp	r0, r8
 80033f0:	d9f3      	bls.n	80033da <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80033f2:	2003      	movs	r0, #3
 80033f4:	e78e      	b.n	8003314 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f6:	2a02      	cmp	r2, #2
 80033f8:	d102      	bne.n	8003400 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033fe:	e7e1      	b.n	80033c4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003400:	f013 0f02 	tst.w	r3, #2
 8003404:	e7de      	b.n	80033c4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	6813      	ldr	r3, [r2, #0]
 8003408:	f023 0307 	bic.w	r3, r3, #7
 800340c:	432b      	orrs	r3, r5
 800340e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003410:	6813      	ldr	r3, [r2, #0]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	42ab      	cmp	r3, r5
 8003418:	f47f af7b 	bne.w	8003312 <HAL_RCC_ClockConfig+0xa>
 800341c:	e78d      	b.n	800333a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341e:	686b      	ldr	r3, [r5, #4]
 8003420:	68e1      	ldr	r1, [r4, #12]
 8003422:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003426:	430b      	orrs	r3, r1
 8003428:	606b      	str	r3, [r5, #4]
 800342a:	e78b      	b.n	8003344 <HAL_RCC_ClockConfig+0x3c>
 800342c:	40022000 	.word	0x40022000
 8003430:	40021000 	.word	0x40021000
 8003434:	08008cb5 	.word	0x08008cb5
 8003438:	20000010 	.word	0x20000010
 800343c:	20000018 	.word	0x20000018

08003440 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	4a03      	ldr	r2, [pc, #12]	; (800345c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800344e:	6810      	ldr	r0, [r2, #0]
}
 8003450:	40d8      	lsrs	r0, r3
 8003452:	4770      	bx	lr
 8003454:	40021000 	.word	0x40021000
 8003458:	08008cc5 	.word	0x08008cc5
 800345c:	20000010 	.word	0x20000010

08003460 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003462:	4a05      	ldr	r2, [pc, #20]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800346a:	5cd3      	ldrb	r3, [r2, r3]
 800346c:	4a03      	ldr	r2, [pc, #12]	; (800347c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800346e:	6810      	ldr	r0, [r2, #0]
}
 8003470:	40d8      	lsrs	r0, r3
 8003472:	4770      	bx	lr
 8003474:	40021000 	.word	0x40021000
 8003478:	08008cc5 	.word	0x08008cc5
 800347c:	20000010 	.word	0x20000010

08003480 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003480:	6803      	ldr	r3, [r0, #0]
{
 8003482:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003486:	07d9      	lsls	r1, r3, #31
{
 8003488:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800348a:	d521      	bpl.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348c:	4c36      	ldr	r4, [pc, #216]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800348e:	69e3      	ldr	r3, [r4, #28]
 8003490:	00da      	lsls	r2, r3, #3
 8003492:	d433      	bmi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003494:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	69e3      	ldr	r3, [r4, #28]
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349c:	61e3      	str	r3, [r4, #28]
 800349e:	69e3      	ldr	r3, [r4, #28]
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4f30      	ldr	r7, [pc, #192]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	05db      	lsls	r3, r3, #23
 80034ae:	d527      	bpl.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034b0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b2:	686a      	ldr	r2, [r5, #4]
 80034b4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80034b8:	d136      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ba:	6a23      	ldr	r3, [r4, #32]
 80034bc:	686a      	ldr	r2, [r5, #4]
 80034be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c2:	4313      	orrs	r3, r2
 80034c4:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034c6:	b11e      	cbz	r6, 80034d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	69e3      	ldr	r3, [r4, #28]
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ce:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d0:	6828      	ldr	r0, [r5, #0]
 80034d2:	0783      	lsls	r3, r0, #30
 80034d4:	d506      	bpl.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034d6:	4924      	ldr	r1, [pc, #144]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034d8:	68ab      	ldr	r3, [r5, #8]
 80034da:	684a      	ldr	r2, [r1, #4]
 80034dc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80034e0:	431a      	orrs	r2, r3
 80034e2:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034e4:	f010 0010 	ands.w	r0, r0, #16
 80034e8:	d01b      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ea:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034ec:	68e9      	ldr	r1, [r5, #12]
 80034ee:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034f0:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80034f6:	430b      	orrs	r3, r1
 80034f8:	6053      	str	r3, [r2, #4]
 80034fa:	e012      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 80034fc:	2600      	movs	r6, #0
 80034fe:	e7d3      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003506:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003508:	f7fe ff22 	bl	8002350 <HAL_GetTick>
 800350c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	05d8      	lsls	r0, r3, #23
 8003512:	d4cd      	bmi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003514:	f7fe ff1c 	bl	8002350 <HAL_GetTick>
 8003518:	eba0 0008 	sub.w	r0, r0, r8
 800351c:	2864      	cmp	r0, #100	; 0x64
 800351e:	d9f6      	bls.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8003520:	2003      	movs	r0, #3
}
 8003522:	b002      	add	sp, #8
 8003524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003528:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800352c:	429a      	cmp	r2, r3
 800352e:	d0c4      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003530:	2001      	movs	r0, #1
 8003532:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003534:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003536:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800353a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800353c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003540:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8003544:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003546:	07d9      	lsls	r1, r3, #31
 8003548:	d5b7      	bpl.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800354a:	f7fe ff01 	bl	8002350 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003552:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	6a23      	ldr	r3, [r4, #32]
 8003556:	079a      	lsls	r2, r3, #30
 8003558:	d4af      	bmi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe fef9 	bl	8002350 <HAL_GetTick>
 800355e:	1bc0      	subs	r0, r0, r7
 8003560:	4540      	cmp	r0, r8
 8003562:	d9f7      	bls.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003564:	e7dc      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	40007000 	.word	0x40007000
 8003570:	42420000 	.word	0x42420000

08003574 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003574:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003576:	6a02      	ldr	r2, [r0, #32]
{
 8003578:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003582:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003584:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003586:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800358a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800358c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800358e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003592:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003594:	4d0a      	ldr	r5, [pc, #40]	; (80035c0 <TIM_OC1_SetConfig+0x4c>)
 8003596:	42a8      	cmp	r0, r5
 8003598:	d10b      	bne.n	80035b2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800359a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800359c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80035a0:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035a2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035a6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80035aa:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ac:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80035b0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035b6:	684a      	ldr	r2, [r1, #4]
 80035b8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ba:	6203      	str	r3, [r0, #32]
}
 80035bc:	bd70      	pop	{r4, r5, r6, pc}
 80035be:	bf00      	nop
 80035c0:	40012c00 	.word	0x40012c00

080035c4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035c6:	6a02      	ldr	r2, [r0, #32]
{
 80035c8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ce:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035d6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80035da:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035dc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80035de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035e6:	4d0b      	ldr	r5, [pc, #44]	; (8003614 <TIM_OC3_SetConfig+0x50>)
 80035e8:	42a8      	cmp	r0, r5
 80035ea:	d10d      	bne.n	8003608 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ec:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035f6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035fa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80035fe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003604:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003608:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800360a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800360c:	684a      	ldr	r2, [r1, #4]
 800360e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003610:	6203      	str	r3, [r0, #32]
}
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	40012c00 	.word	0x40012c00

08003618 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003618:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800361a:	6a02      	ldr	r2, [r0, #32]
{
 800361c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800361e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003622:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003626:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003628:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800362a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800362e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003632:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003634:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003638:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363c:	4d06      	ldr	r5, [pc, #24]	; (8003658 <TIM_OC4_SetConfig+0x40>)
 800363e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003640:	bf02      	ittt	eq
 8003642:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003644:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003648:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800364e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003650:	684a      	ldr	r2, [r1, #4]
 8003652:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003654:	6203      	str	r3, [r0, #32]
}
 8003656:	bd30      	pop	{r4, r5, pc}
 8003658:	40012c00 	.word	0x40012c00

0800365c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800365c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003660:	2b01      	cmp	r3, #1
 8003662:	d11c      	bne.n	800369e <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003666:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366c:	6803      	ldr	r3, [r0, #0]
 800366e:	4293      	cmp	r3, r2
 8003670:	d00a      	beq.n	8003688 <HAL_TIM_Base_Start+0x2c>
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003676:	d007      	beq.n	8003688 <HAL_TIM_Base_Start+0x2c>
 8003678:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <HAL_TIM_Base_Start+0x2c>
 8003680:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003684:	4293      	cmp	r3, r2
 8003686:	d104      	bne.n	8003692 <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	2a06      	cmp	r2, #6
 8003690:	d003      	beq.n	800369a <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800369a:	2000      	movs	r0, #0
}
 800369c:	4770      	bx	lr
    return HAL_ERROR;
 800369e:	2001      	movs	r0, #1
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40012c00 	.word	0x40012c00

080036a8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a8:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80036aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ac:	4290      	cmp	r0, r2
 80036ae:	d00a      	beq.n	80036c6 <TIM_Base_SetConfig+0x1e>
 80036b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036b4:	d007      	beq.n	80036c6 <TIM_Base_SetConfig+0x1e>
 80036b6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036ba:	4290      	cmp	r0, r2
 80036bc:	d003      	beq.n	80036c6 <TIM_Base_SetConfig+0x1e>
 80036be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036c2:	4290      	cmp	r0, r2
 80036c4:	d115      	bne.n	80036f2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80036c6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <TIM_Base_SetConfig+0x6c>)
 80036d0:	4290      	cmp	r0, r2
 80036d2:	d00a      	beq.n	80036ea <TIM_Base_SetConfig+0x42>
 80036d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036d8:	d007      	beq.n	80036ea <TIM_Base_SetConfig+0x42>
 80036da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036de:	4290      	cmp	r0, r2
 80036e0:	d003      	beq.n	80036ea <TIM_Base_SetConfig+0x42>
 80036e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036e6:	4290      	cmp	r0, r2
 80036e8:	d103      	bne.n	80036f2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ea:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f2:	694a      	ldr	r2, [r1, #20]
 80036f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80036fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036fc:	688b      	ldr	r3, [r1, #8]
 80036fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003700:	680b      	ldr	r3, [r1, #0]
 8003702:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <TIM_Base_SetConfig+0x6c>)
 8003706:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003708:	bf04      	itt	eq
 800370a:	690b      	ldreq	r3, [r1, #16]
 800370c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800370e:	2301      	movs	r3, #1
 8003710:	6143      	str	r3, [r0, #20]
}
 8003712:	4770      	bx	lr
 8003714:	40012c00 	.word	0x40012c00

08003718 <HAL_TIM_Base_Init>:
{
 8003718:	b510      	push	{r4, lr}
  if (htim == NULL)
 800371a:	4604      	mov	r4, r0
 800371c:	b330      	cbz	r0, 800376c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800371e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003722:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003726:	b91b      	cbnz	r3, 8003730 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003728:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800372c:	f7fe fb12 	bl	8001d54 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003732:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003738:	1d21      	adds	r1, r4, #4
 800373a:	f7ff ffb5 	bl	80036a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800373e:	2301      	movs	r3, #1
  return HAL_OK;
 8003740:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003742:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003746:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800374a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800374e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003752:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003756:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800375a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800375e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003766:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800376a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800376c:	2001      	movs	r0, #1
 800376e:	e7fc      	b.n	800376a <HAL_TIM_Base_Init+0x52>

08003770 <HAL_TIM_PWM_Init>:
{
 8003770:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003772:	4604      	mov	r4, r0
 8003774:	b330      	cbz	r0, 80037c4 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003776:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800377a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800377e:	b91b      	cbnz	r3, 8003788 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003780:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003784:	f7fe fb28 	bl	8001dd8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003790:	1d21      	adds	r1, r4, #4
 8003792:	f7ff ff89 	bl	80036a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003796:	2301      	movs	r3, #1
  return HAL_OK;
 8003798:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800379a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80037a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80037a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80037aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80037ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80037be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80037c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037c4:	2001      	movs	r0, #1
 80037c6:	e7fc      	b.n	80037c2 <HAL_TIM_PWM_Init+0x52>

080037c8 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80037c8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ca:	6a02      	ldr	r2, [r0, #32]
{
 80037cc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ce:	f022 0210 	bic.w	r2, r2, #16
 80037d2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80037d4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80037d6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037da:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80037e4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037ec:	4d0b      	ldr	r5, [pc, #44]	; (800381c <TIM_OC2_SetConfig+0x54>)
 80037ee:	42a8      	cmp	r0, r5
 80037f0:	d10d      	bne.n	800380e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037f2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037fc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003800:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003804:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800380a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800380e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003810:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003812:	684a      	ldr	r2, [r1, #4]
 8003814:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003816:	6203      	str	r3, [r0, #32]
}
 8003818:	bd70      	pop	{r4, r5, r6, pc}
 800381a:	bf00      	nop
 800381c:	40012c00 	.word	0x40012c00

08003820 <HAL_TIM_PWM_ConfigChannel>:
{
 8003820:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003822:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003826:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8003828:	2b01      	cmp	r3, #1
 800382a:	d050      	beq.n	80038ce <HAL_TIM_PWM_ConfigChannel+0xae>
 800382c:	2301      	movs	r3, #1
  switch (Channel)
 800382e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003830:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003834:	d03b      	beq.n	80038ae <HAL_TIM_PWM_ConfigChannel+0x8e>
 8003836:	d807      	bhi.n	8003848 <HAL_TIM_PWM_ConfigChannel+0x28>
 8003838:	b1c2      	cbz	r2, 800386c <HAL_TIM_PWM_ConfigChannel+0x4c>
 800383a:	2a04      	cmp	r2, #4
 800383c:	d027      	beq.n	800388e <HAL_TIM_PWM_ConfigChannel+0x6e>
 800383e:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8003840:	2300      	movs	r3, #0
 8003842:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8003846:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8003848:	2a0c      	cmp	r2, #12
 800384a:	d1f8      	bne.n	800383e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800384c:	6800      	ldr	r0, [r0, #0]
 800384e:	f7ff fee3 	bl	8003618 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003852:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003854:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003856:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800385a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800385c:	69c3      	ldr	r3, [r0, #28]
 800385e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003862:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003864:	69c3      	ldr	r3, [r0, #28]
 8003866:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800386a:	e02e      	b.n	80038ca <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800386c:	6800      	ldr	r0, [r0, #0]
 800386e:	f7ff fe81 	bl	8003574 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003872:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003874:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003876:	f043 0308 	orr.w	r3, r3, #8
 800387a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800387c:	6983      	ldr	r3, [r0, #24]
 800387e:	f023 0304 	bic.w	r3, r3, #4
 8003882:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003884:	6983      	ldr	r3, [r0, #24]
 8003886:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003888:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2000      	movs	r0, #0
      break;
 800388c:	e7d8      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800388e:	6800      	ldr	r0, [r0, #0]
 8003890:	f7ff ff9a 	bl	80037c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003894:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003896:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800389c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800389e:	6983      	ldr	r3, [r0, #24]
 80038a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038a4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038a6:	6983      	ldr	r3, [r0, #24]
 80038a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80038ac:	e7ec      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ae:	6800      	ldr	r0, [r0, #0]
 80038b0:	f7ff fe88 	bl	80035c4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038b4:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038b6:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038be:	69c3      	ldr	r3, [r0, #28]
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038c6:	69c3      	ldr	r3, [r0, #28]
 80038c8:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ca:	61c3      	str	r3, [r0, #28]
 80038cc:	e7dd      	b.n	800388a <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 80038ce:	2002      	movs	r0, #2
 80038d0:	e7b9      	b.n	8003846 <HAL_TIM_PWM_ConfigChannel+0x26>

080038d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038d2:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038d4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d6:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038dc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80038e0:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e2:	6082      	str	r2, [r0, #8]
}
 80038e4:	bd10      	pop	{r4, pc}

080038e6 <HAL_TIM_ConfigClockSource>:
{
 80038e6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80038e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80038ec:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	f04f 0002 	mov.w	r0, #2
 80038f4:	f000 808e 	beq.w	8003a14 <HAL_TIM_ConfigClockSource+0x12e>
 80038f8:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80038fa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80038fe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003900:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003904:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800390a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800390e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003910:	680b      	ldr	r3, [r1, #0]
 8003912:	2b60      	cmp	r3, #96	; 0x60
 8003914:	d04f      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0xd0>
 8003916:	d832      	bhi.n	800397e <HAL_TIM_ConfigClockSource+0x98>
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d064      	beq.n	80039e6 <HAL_TIM_ConfigClockSource+0x100>
 800391c:	d816      	bhi.n	800394c <HAL_TIM_ConfigClockSource+0x66>
 800391e:	2b20      	cmp	r3, #32
 8003920:	d00d      	beq.n	800393e <HAL_TIM_ConfigClockSource+0x58>
 8003922:	d80a      	bhi.n	800393a <HAL_TIM_ConfigClockSource+0x54>
 8003924:	f033 0110 	bics.w	r1, r3, #16
 8003928:	d009      	beq.n	800393e <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 800392a:	2301      	movs	r3, #1
 800392c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003930:	2300      	movs	r3, #0
 8003932:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003936:	4610      	mov	r0, r2
 8003938:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800393a:	2b30      	cmp	r3, #48	; 0x30
 800393c:	d1f5      	bne.n	800392a <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 800393e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003940:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003944:	4313      	orrs	r3, r2
 8003946:	f043 0307 	orr.w	r3, r3, #7
 800394a:	e028      	b.n	800399e <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800394c:	2b50      	cmp	r3, #80	; 0x50
 800394e:	d1ec      	bne.n	800392a <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8003950:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003952:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003954:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003956:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003958:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003964:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800396a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800396e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003970:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003972:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003978:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800397c:	e00f      	b.n	800399e <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003982:	d00d      	beq.n	80039a0 <HAL_TIM_ConfigClockSource+0xba>
 8003984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003988:	d00c      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0xbe>
 800398a:	2b70      	cmp	r3, #112	; 0x70
 800398c:	d1cd      	bne.n	800392a <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800398e:	68cb      	ldr	r3, [r1, #12]
 8003990:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003994:	f7ff ff9d 	bl	80038d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003998:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800399a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 800399e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2200      	movs	r2, #0
 80039a2:	e7c2      	b.n	800392a <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80039a4:	68cb      	ldr	r3, [r1, #12]
 80039a6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80039aa:	f7ff ff92 	bl	80038d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ae:	6883      	ldr	r3, [r0, #8]
 80039b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b4:	e7f3      	b.n	800399e <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 80039b6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b8:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80039ba:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039bc:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 80039c0:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c2:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c4:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ca:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039d2:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80039d6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80039d8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80039da:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039e0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80039e4:	e7db      	b.n	800399e <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 80039e6:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80039e8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80039ea:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ec:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ee:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80039fa:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a00:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003a04:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a06:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a08:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a0e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003a12:	e7c4      	b.n	800399e <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8003a14:	4602      	mov	r2, r0
 8003a16:	e78e      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x50>

08003a18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a18:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a1a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a1c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a1e:	f001 011f 	and.w	r1, r1, #31
 8003a22:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003a24:	ea23 0304 	bic.w	r3, r3, r4
 8003a28:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a2a:	6a03      	ldr	r3, [r0, #32]
 8003a2c:	408a      	lsls	r2, r1
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	6202      	str	r2, [r0, #32]
}
 8003a32:	bd10      	pop	{r4, pc}

08003a34 <HAL_TIM_OC_Start>:
{
 8003a34:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a36:	b929      	cbnz	r1, 8003a44 <HAL_TIM_OC_Start+0x10>
 8003a38:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d021      	beq.n	8003a84 <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 8003a40:	2001      	movs	r0, #1
}
 8003a42:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a44:	2904      	cmp	r1, #4
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_OC_Start+0x24>
 8003a48:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d1f7      	bne.n	8003a40 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a50:	2302      	movs	r3, #2
 8003a52:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8003a56:	e018      	b.n	8003a8a <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a58:	2908      	cmp	r1, #8
 8003a5a:	d107      	bne.n	8003a6c <HAL_TIM_OC_Start+0x38>
 8003a5c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d1ed      	bne.n	8003a40 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a64:	2302      	movs	r3, #2
 8003a66:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003a6a:	e00e      	b.n	8003a8a <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a6c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d1e5      	bne.n	8003a40 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a74:	2904      	cmp	r1, #4
 8003a76:	d0eb      	beq.n	8003a50 <HAL_TIM_OC_Start+0x1c>
 8003a78:	2908      	cmp	r1, #8
 8003a7a:	d0f3      	beq.n	8003a64 <HAL_TIM_OC_Start+0x30>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003a82:	e002      	b.n	8003a8a <HAL_TIM_OC_Start+0x56>
 8003a84:	2302      	movs	r3, #2
 8003a86:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8a:	6800      	ldr	r0, [r0, #0]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f7ff ffc3 	bl	8003a18 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a92:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <HAL_TIM_OC_Start+0x98>)
 8003a94:	4298      	cmp	r0, r3
 8003a96:	d10a      	bne.n	8003aae <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 8003a98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a9e:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa0:	6883      	ldr	r3, [r0, #8]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa6:	2b06      	cmp	r3, #6
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_TIM_OC_Start+0x8e>
  return HAL_OK;
 8003aaa:	2000      	movs	r0, #0
 8003aac:	e7c9      	b.n	8003a42 <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ab2:	d0f5      	beq.n	8003aa0 <HAL_TIM_OC_Start+0x6c>
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_TIM_OC_Start+0x9c>)
 8003ab6:	4298      	cmp	r0, r3
 8003ab8:	d0f2      	beq.n	8003aa0 <HAL_TIM_OC_Start+0x6c>
 8003aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003abe:	4298      	cmp	r0, r3
 8003ac0:	d0ee      	beq.n	8003aa0 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 8003ac2:	6803      	ldr	r3, [r0, #0]
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6003      	str	r3, [r0, #0]
 8003aca:	e7ee      	b.n	8003aaa <HAL_TIM_OC_Start+0x76>
 8003acc:	40012c00 	.word	0x40012c00
 8003ad0:	40000400 	.word	0x40000400

08003ad4 <HAL_TIM_PWM_Start>:
 8003ad4:	f7ff bfae 	b.w	8003a34 <HAL_TIM_OC_Start>

08003ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ada:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003ade:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	f04f 0002 	mov.w	r0, #2
 8003ae6:	d022      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae8:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003aea:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003aee:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003af8:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003afa:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afc:	4c0c      	ldr	r4, [pc, #48]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003afe:	42a3      	cmp	r3, r4
 8003b00:	d00a      	beq.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d007      	beq.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003b08:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003b0c:	42a3      	cmp	r3, r4
 8003b0e:	d003      	beq.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003b10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	d104      	bne.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b18:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b1a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b1e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b20:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b22:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003b24:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003b26:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003b2a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8003b2e:	bd30      	pop	{r4, r5, pc}
 8003b30:	40012c00 	.word	0x40012c00

08003b34 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003b38:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d01e      	beq.n	8003b7c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b3e:	68cb      	ldr	r3, [r1, #12]
 8003b40:	6888      	ldr	r0, [r1, #8]
 8003b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b46:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b48:	6848      	ldr	r0, [r1, #4]
 8003b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b4e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b50:	6808      	ldr	r0, [r1, #0]
 8003b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b56:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b58:	6908      	ldr	r0, [r1, #16]
 8003b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b5e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b60:	6948      	ldr	r0, [r1, #20]
 8003b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b66:	4303      	orrs	r3, r0


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8003b68:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b6a:	69c9      	ldr	r1, [r1, #28]
 8003b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b70:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003b72:	6811      	ldr	r1, [r2, #0]
 8003b74:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003b76:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
 8003b7a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003b7c:	2002      	movs	r0, #2
}
 8003b7e:	4770      	bx	lr

08003b80 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b80:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	f102 030c 	add.w	r3, r2, #12
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	320c      	adds	r2, #12
 8003b90:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003b94:	6802      	ldr	r2, [r0, #0]
 8003b96:	2900      	cmp	r1, #0
 8003b98:	d1f2      	bne.n	8003b80 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	f102 0314 	add.w	r3, r2, #20
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	f102 0c14 	add.w	ip, r2, #20
 8003baa:	e84c 3100 	strex	r1, r3, [ip]
 8003bae:	2900      	cmp	r1, #0
 8003bb0:	d1f3      	bne.n	8003b9a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10b      	bne.n	8003bd0 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	f102 030c 	add.w	r3, r2, #12
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	f102 0c0c 	add.w	ip, r2, #12
 8003bc8:	e84c 3100 	strex	r1, r3, [ip]
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	d1f3      	bne.n	8003bb8 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003bda:	4770      	bx	lr

08003bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be0:	6803      	ldr	r3, [r0, #0]
 8003be2:	68c1      	ldr	r1, [r0, #12]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003bea:	430a      	orrs	r2, r1
 8003bec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bee:	6882      	ldr	r2, [r0, #8]
 8003bf0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003bf2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bf4:	4302      	orrs	r2, r0
 8003bf6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003bf8:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003bfc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c00:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003c02:	430a      	orrs	r2, r1
 8003c04:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	69a1      	ldr	r1, [r4, #24]
 8003c0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c12:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <UART_SetConfig+0x70>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d115      	bne.n	8003c44 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7ff fc22 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c1c:	2319      	movs	r3, #25
 8003c1e:	4343      	muls	r3, r0
 8003c20:	6862      	ldr	r2, [r4, #4]
 8003c22:	6820      	ldr	r0, [r4, #0]
 8003c24:	0092      	lsls	r2, r2, #2
 8003c26:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c2a:	2264      	movs	r2, #100	; 0x64
 8003c2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c30:	fb02 3311 	mls	r3, r2, r1, r3
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	3332      	adds	r3, #50	; 0x32
 8003c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c3c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003c40:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c42:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c44:	f7ff fbfc 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 8003c48:	e7e8      	b.n	8003c1c <UART_SetConfig+0x40>
 8003c4a:	bf00      	nop
 8003c4c:	40013800 	.word	0x40013800

08003c50 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	4604      	mov	r4, r0
 8003c54:	460e      	mov	r6, r1
 8003c56:	4617      	mov	r7, r2
 8003c58:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5a:	6822      	ldr	r2, [r4, #0]
 8003c5c:	6813      	ldr	r3, [r2, #0]
 8003c5e:	ea36 0303 	bics.w	r3, r6, r3
 8003c62:	d101      	bne.n	8003c68 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003c64:	2000      	movs	r0, #0
 8003c66:	e028      	b.n	8003cba <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003c68:	1c6b      	adds	r3, r5, #1
 8003c6a:	d0f7      	beq.n	8003c5c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c6c:	b125      	cbz	r5, 8003c78 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8003c6e:	f7fe fb6f 	bl	8002350 <HAL_GetTick>
 8003c72:	1bc0      	subs	r0, r0, r7
 8003c74:	4285      	cmp	r5, r0
 8003c76:	d2f0      	bcs.n	8003c5a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	f102 030c 	add.w	r3, r2, #12
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	320c      	adds	r2, #12
 8003c88:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8003c8c:	6821      	ldr	r1, [r4, #0]
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d1f2      	bne.n	8003c78 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	f101 0314 	add.w	r3, r1, #20
 8003c96:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	f101 0014 	add.w	r0, r1, #20
 8003ca2:	e840 3200 	strex	r2, r3, [r0]
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	d1f3      	bne.n	8003c92 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8003caa:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8003cac:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8003cae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8003cb2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8003cb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8003cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003cbc <HAL_UART_Init>:
{
 8003cbc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	b348      	cbz	r0, 8003d16 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003cc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cca:	b91b      	cbnz	r3, 8003cd4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003ccc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003cd0:	f7fe fa48 	bl	8002164 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003cd6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003cdc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003cde:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003ce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003ce6:	f7ff ff79 	bl	8003bdc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cea:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cec:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d04:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003d06:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d12:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003d14:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d16:	2001      	movs	r0, #1
 8003d18:	e7fc      	b.n	8003d14 <HAL_UART_Init+0x58>

08003d1a <HAL_UART_Transmit>:
{
 8003d1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d1e:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003d20:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003d24:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003d26:	2b20      	cmp	r3, #32
{
 8003d28:	460e      	mov	r6, r1
 8003d2a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003d2c:	d13c      	bne.n	8003da8 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8003d2e:	2900      	cmp	r1, #0
 8003d30:	d03c      	beq.n	8003dac <HAL_UART_Transmit+0x92>
 8003d32:	2a00      	cmp	r2, #0
 8003d34:	d03a      	beq.n	8003dac <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d36:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	2500      	movs	r5, #0
 8003d3a:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8003d40:	f7fe fb06 	bl	8002350 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003d46:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003d4c:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d4e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d50:	d103      	bne.n	8003d5a <HAL_UART_Transmit+0x40>
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	b90b      	cbnz	r3, 8003d5a <HAL_UART_Transmit+0x40>
 8003d56:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003d58:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003d5a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	b953      	cbnz	r3, 8003d76 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d60:	464b      	mov	r3, r9
 8003d62:	4642      	mov	r2, r8
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	4620      	mov	r0, r4
 8003d68:	f7ff ff72 	bl	8003c50 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003d6c:	b950      	cbnz	r0, 8003d84 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8003d6e:	2320      	movs	r3, #32
 8003d70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8003d74:	e007      	b.n	8003d86 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d76:	464b      	mov	r3, r9
 8003d78:	4642      	mov	r2, r8
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f7ff ff67 	bl	8003c50 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003d82:	b110      	cbz	r0, 8003d8a <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8003d84:	2003      	movs	r0, #3
}
 8003d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003d8c:	b94e      	cbnz	r6, 8003da2 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d96:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003d98:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003d9a:	3901      	subs	r1, #1
 8003d9c:	b289      	uxth	r1, r1
 8003d9e:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003da0:	e7db      	b.n	8003d5a <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da2:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003da6:	e7f6      	b.n	8003d96 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8003da8:	2002      	movs	r0, #2
 8003daa:	e7ec      	b.n	8003d86 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8003dac:	2001      	movs	r0, #1
 8003dae:	e7ea      	b.n	8003d86 <HAL_UART_Transmit+0x6c>

08003db0 <HAL_UART_DMAStop>:
{
 8003db0:	b510      	push	{r4, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003db2:	6802      	ldr	r2, [r0, #0]
{
 8003db4:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003db6:	6953      	ldr	r3, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003db8:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003dbc:	2921      	cmp	r1, #33	; 0x21
 8003dbe:	d120      	bne.n	8003e02 <HAL_UART_DMAStop+0x52>
 8003dc0:	0619      	lsls	r1, r3, #24
 8003dc2:	d51e      	bpl.n	8003e02 <HAL_UART_DMAStop+0x52>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	f102 0314 	add.w	r3, r2, #20
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	f102 0014 	add.w	r0, r2, #20
 8003dd4:	e840 3100 	strex	r1, r3, [r0]
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	d1f3      	bne.n	8003dc4 <HAL_UART_DMAStop+0x14>
    if (huart->hdmatx != NULL)
 8003ddc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003dde:	b108      	cbz	r0, 8003de4 <HAL_UART_DMAStop+0x34>
      HAL_DMA_Abort(huart->hdmatx);
 8003de0:	f7fe fe3f 	bl	8002a62 <HAL_DMA_Abort>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003de4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	f102 030c 	add.w	r3, r2, #12
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	320c      	adds	r2, #12
 8003df4:	e842 3100 	strex	r1, r3, [r2]
 8003df8:	2900      	cmp	r1, #0
 8003dfa:	d1f3      	bne.n	8003de4 <HAL_UART_DMAStop+0x34>
  huart->gState = HAL_UART_STATE_READY;
 8003dfc:	2320      	movs	r3, #32
 8003dfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	6953      	ldr	r3, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e06:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8003e0a:	2922      	cmp	r1, #34	; 0x22
 8003e0c:	d114      	bne.n	8003e38 <HAL_UART_DMAStop+0x88>
 8003e0e:	065b      	lsls	r3, r3, #25
 8003e10:	d512      	bpl.n	8003e38 <HAL_UART_DMAStop+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	f102 0314 	add.w	r3, r2, #20
 8003e16:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	f102 0014 	add.w	r0, r2, #20
 8003e22:	e840 3100 	strex	r1, r3, [r0]
 8003e26:	2900      	cmp	r1, #0
 8003e28:	d1f3      	bne.n	8003e12 <HAL_UART_DMAStop+0x62>
    if (huart->hdmarx != NULL)
 8003e2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003e2c:	b108      	cbz	r0, 8003e32 <HAL_UART_DMAStop+0x82>
      HAL_DMA_Abort(huart->hdmarx);
 8003e2e:	f7fe fe18 	bl	8002a62 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 8003e32:	4620      	mov	r0, r4
 8003e34:	f7ff fea4 	bl	8003b80 <UART_EndRxTransfer>
}
 8003e38:	2000      	movs	r0, #0
 8003e3a:	bd10      	pop	{r4, pc}

08003e3c <HAL_UART_TxCpltCallback>:
 8003e3c:	4770      	bx	lr

08003e3e <HAL_UART_RxHalfCpltCallback>:
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_ErrorCallback>:
 8003e40:	4770      	bx	lr

08003e42 <UART_DMAError>:
{
 8003e42:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e44:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e46:	6803      	ldr	r3, [r0, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e4a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003e4e:	2921      	cmp	r1, #33	; 0x21
 8003e50:	d112      	bne.n	8003e78 <UART_DMAError+0x36>
 8003e52:	0612      	lsls	r2, r2, #24
 8003e54:	d510      	bpl.n	8003e78 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8003e56:	2200      	movs	r2, #0
 8003e58:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	f103 020c 	add.w	r2, r3, #12
 8003e5e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e62:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	f103 0c0c 	add.w	ip, r3, #12
 8003e6a:	e84c 2100 	strex	r1, r2, [ip]
 8003e6e:	2900      	cmp	r1, #0
 8003e70:	d1f3      	bne.n	8003e5a <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8003e72:	2220      	movs	r2, #32
 8003e74:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e78:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e7a:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8003e7e:	2a22      	cmp	r2, #34	; 0x22
 8003e80:	d105      	bne.n	8003e8e <UART_DMAError+0x4c>
 8003e82:	065b      	lsls	r3, r3, #25
 8003e84:	d503      	bpl.n	8003e8e <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e8a:	f7ff fe79 	bl	8003b80 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e90:	f043 0310 	orr.w	r3, r3, #16
 8003e94:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8003e96:	f7ff ffd3 	bl	8003e40 <HAL_UART_ErrorCallback>
}
 8003e9a:	bd08      	pop	{r3, pc}

08003e9c <UART_DMAAbortOnError>:
{
 8003e9c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003e9e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003ea2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ea4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003ea6:	f7ff ffcb 	bl	8003e40 <HAL_UART_ErrorCallback>
}
 8003eaa:	bd08      	pop	{r3, pc}

08003eac <HAL_UARTEx_RxEventCallback>:
}
 8003eac:	4770      	bx	lr

08003eae <UART_DMARxHalfCplt>:
{
 8003eae:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003eb0:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003eb4:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d104      	bne.n	8003ec6 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ebc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003ebe:	0849      	lsrs	r1, r1, #1
 8003ec0:	f7ff fff4 	bl	8003eac <HAL_UARTEx_RxEventCallback>
}
 8003ec4:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8003ec6:	f7ff ffba 	bl	8003e3e <HAL_UART_RxHalfCpltCallback>
}
 8003eca:	e7fb      	b.n	8003ec4 <UART_DMARxHalfCplt+0x16>

08003ecc <UART_DMAReceiveCplt>:
{
 8003ecc:	b508      	push	{r3, lr}
 8003ece:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ed0:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f013 0320 	ands.w	r3, r3, #32
 8003eda:	d137      	bne.n	8003f4c <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 8003edc:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ede:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	f102 030c 	add.w	r3, r2, #12
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	320c      	adds	r2, #12
 8003eee:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003ef2:	6803      	ldr	r3, [r0, #0]
 8003ef4:	2900      	cmp	r1, #0
 8003ef6:	d1f2      	bne.n	8003ede <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	f103 0214 	add.w	r2, r3, #20
 8003efc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	f103 0c14 	add.w	ip, r3, #20
 8003f08:	e84c 2100 	strex	r1, r2, [ip]
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d1f3      	bne.n	8003ef8 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	f103 0214 	add.w	r2, r3, #20
 8003f14:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	f103 0c14 	add.w	ip, r3, #20
 8003f20:	e84c 2100 	strex	r1, r2, [ip]
 8003f24:	2900      	cmp	r1, #0
 8003f26:	d1f3      	bne.n	8003f10 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003f30:	2a01      	cmp	r2, #1
 8003f32:	d10b      	bne.n	8003f4c <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	f103 020c 	add.w	r2, r3, #12
 8003f38:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	f103 0c0c 	add.w	ip, r3, #12
 8003f44:	e84c 2100 	strex	r1, r2, [ip]
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	d1f3      	bne.n	8003f34 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f50:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d103      	bne.n	8003f5e <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f56:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003f58:	f7ff ffa8 	bl	8003eac <HAL_UARTEx_RxEventCallback>
}
 8003f5c:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8003f5e:	f7fd fcb5 	bl	80018cc <HAL_UART_RxCpltCallback>
}
 8003f62:	e7fb      	b.n	8003f5c <UART_DMAReceiveCplt+0x90>

08003f64 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f64:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003f68:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f6a:	2b22      	cmp	r3, #34	; 0x22
 8003f6c:	d142      	bne.n	8003ff4 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6e:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f70:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f72:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f76:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f78:	d13f      	bne.n	8003ffa <UART_Receive_IT.isra.0+0x96>
 8003f7a:	6901      	ldr	r1, [r0, #16]
 8003f7c:	2900      	cmp	r1, #0
 8003f7e:	d13f      	bne.n	8004000 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f80:	6852      	ldr	r2, [r2, #4]
 8003f82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f86:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8003f8a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003f8c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d12d      	bne.n	8003ff4 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f98:	6802      	ldr	r2, [r0, #0]
 8003f9a:	68d1      	ldr	r1, [r2, #12]
 8003f9c:	f021 0120 	bic.w	r1, r1, #32
 8003fa0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fa2:	68d1      	ldr	r1, [r2, #12]
 8003fa4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003fa8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003faa:	6951      	ldr	r1, [r2, #20]
 8003fac:	f021 0101 	bic.w	r1, r1, #1
 8003fb0:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb8:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fba:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003fbc:	2a01      	cmp	r2, #1
 8003fbe:	6802      	ldr	r2, [r0, #0]
 8003fc0:	d128      	bne.n	8004014 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	f102 030c 	add.w	r3, r2, #12
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	f102 0c0c 	add.w	ip, r2, #12
 8003fd4:	e84c 3100 	strex	r1, r3, [ip]
 8003fd8:	2900      	cmp	r1, #0
 8003fda:	d1f3      	bne.n	8003fc4 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	06db      	lsls	r3, r3, #27
 8003fe0:	d505      	bpl.n	8003fee <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fe2:	9101      	str	r1, [sp, #4]
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	6853      	ldr	r3, [r2, #4]
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fee:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003ff0:	f7ff ff5c 	bl	8003eac <HAL_UARTEx_RxEventCallback>
}
 8003ff4:	b003      	add	sp, #12
 8003ff6:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ffa:	b939      	cbnz	r1, 800400c <UART_Receive_IT.isra.0+0xa8>
 8003ffc:	6901      	ldr	r1, [r0, #16]
 8003ffe:	b929      	cbnz	r1, 800400c <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004000:	6852      	ldr	r2, [r2, #4]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8004006:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004008:	3301      	adds	r3, #1
 800400a:	e7be      	b.n	8003f8a <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800400c:	6852      	ldr	r2, [r2, #4]
 800400e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004012:	e7f7      	b.n	8004004 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8004014:	f7fd fc5a 	bl	80018cc <HAL_UART_RxCpltCallback>
 8004018:	e7ec      	b.n	8003ff4 <UART_Receive_IT.isra.0+0x90>
	...

0800401c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800401c:	6803      	ldr	r3, [r0, #0]
{
 800401e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004020:	681a      	ldr	r2, [r3, #0]
{
 8004022:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004024:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004026:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004028:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800402a:	d108      	bne.n	800403e <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800402c:	0696      	lsls	r6, r2, #26
 800402e:	d568      	bpl.n	8004102 <HAL_UART_IRQHandler+0xe6>
 8004030:	068d      	lsls	r5, r1, #26
 8004032:	d566      	bpl.n	8004102 <HAL_UART_IRQHandler+0xe6>
}
 8004034:	b002      	add	sp, #8
 8004036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800403a:	f7ff bf93 	b.w	8003f64 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800403e:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004042:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8004046:	4305      	orrs	r5, r0
 8004048:	d05b      	beq.n	8004102 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800404a:	07d6      	lsls	r6, r2, #31
 800404c:	d505      	bpl.n	800405a <HAL_UART_IRQHandler+0x3e>
 800404e:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004050:	bf42      	ittt	mi
 8004052:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8004054:	f043 0301 	orrmi.w	r3, r3, #1
 8004058:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800405a:	0753      	lsls	r3, r2, #29
 800405c:	d504      	bpl.n	8004068 <HAL_UART_IRQHandler+0x4c>
 800405e:	b118      	cbz	r0, 8004068 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004060:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004062:	f043 0302 	orr.w	r3, r3, #2
 8004066:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004068:	0796      	lsls	r6, r2, #30
 800406a:	d504      	bpl.n	8004076 <HAL_UART_IRQHandler+0x5a>
 800406c:	b118      	cbz	r0, 8004076 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800406e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004070:	f043 0304 	orr.w	r3, r3, #4
 8004074:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004076:	0715      	lsls	r5, r2, #28
 8004078:	d507      	bpl.n	800408a <HAL_UART_IRQHandler+0x6e>
 800407a:	f001 0320 	and.w	r3, r1, #32
 800407e:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004080:	bf1e      	ittt	ne
 8004082:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8004084:	f043 0308 	orrne.w	r3, r3, #8
 8004088:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800408a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800408c:	2b00      	cmp	r3, #0
 800408e:	d032      	beq.n	80040f6 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004090:	0692      	lsls	r2, r2, #26
 8004092:	d504      	bpl.n	800409e <HAL_UART_IRQHandler+0x82>
 8004094:	068b      	lsls	r3, r1, #26
 8004096:	d502      	bpl.n	800409e <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8004098:	4620      	mov	r0, r4
 800409a:	f7ff ff63 	bl	8003f64 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 80040a0:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040a2:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040aa:	f002 0208 	and.w	r2, r2, #8
 80040ae:	ea53 0502 	orrs.w	r5, r3, r2
 80040b2:	d022      	beq.n	80040fa <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 80040b4:	f7ff fd64 	bl	8003b80 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	6973      	ldr	r3, [r6, #20]
 80040ba:	065e      	lsls	r6, r3, #25
 80040bc:	d518      	bpl.n	80040f0 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	f102 0314 	add.w	r3, r2, #20
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	3214      	adds	r2, #20
 80040ce:	e842 3100 	strex	r1, r3, [r2]
 80040d2:	2900      	cmp	r1, #0
 80040d4:	d1f3      	bne.n	80040be <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 80040d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80040d8:	b150      	cbz	r0, 80040f0 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040da:	4b74      	ldr	r3, [pc, #464]	; (80042ac <HAL_UART_IRQHandler+0x290>)
 80040dc:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040de:	f7fe fcdf 	bl	8002aa0 <HAL_DMA_Abort_IT>
 80040e2:	b140      	cbz	r0, 80040f6 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040e4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80040e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80040e8:	b002      	add	sp, #8
 80040ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ee:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80040f0:	4620      	mov	r0, r4
 80040f2:	f7ff fea5 	bl	8003e40 <HAL_UART_ErrorCallback>
}
 80040f6:	b002      	add	sp, #8
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80040fa:	f7ff fea1 	bl	8003e40 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	6465      	str	r5, [r4, #68]	; 0x44
 8004100:	e7f9      	b.n	80040f6 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004102:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004104:	2801      	cmp	r0, #1
 8004106:	f040 8094 	bne.w	8004232 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800410a:	06d5      	lsls	r5, r2, #27
 800410c:	f140 8091 	bpl.w	8004232 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004110:	06c8      	lsls	r0, r1, #27
 8004112:	f140 808e 	bpl.w	8004232 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004116:	2200      	movs	r2, #0
 8004118:	9201      	str	r2, [sp, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	9201      	str	r2, [sp, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	9201      	str	r2, [sp, #4]
 8004122:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	0652      	lsls	r2, r2, #25
 8004128:	d54d      	bpl.n	80041c6 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800412a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800412c:	680a      	ldr	r2, [r1, #0]
 800412e:	6852      	ldr	r2, [r2, #4]
 8004130:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004132:	2a00      	cmp	r2, #0
 8004134:	d0df      	beq.n	80040f6 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004136:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004138:	4290      	cmp	r0, r2
 800413a:	d9dc      	bls.n	80040f6 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 800413c:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800413e:	698a      	ldr	r2, [r1, #24]
 8004140:	2a20      	cmp	r2, #32
 8004142:	d036      	beq.n	80041b2 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	f103 020c 	add.w	r2, r3, #12
 8004148:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800414c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	f103 000c 	add.w	r0, r3, #12
 8004154:	e840 2100 	strex	r1, r2, [r0]
 8004158:	2900      	cmp	r1, #0
 800415a:	d1f3      	bne.n	8004144 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	f103 0214 	add.w	r2, r3, #20
 8004160:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	f103 0014 	add.w	r0, r3, #20
 800416c:	e840 2100 	strex	r1, r2, [r0]
 8004170:	2900      	cmp	r1, #0
 8004172:	d1f3      	bne.n	800415c <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	f103 0214 	add.w	r2, r3, #20
 8004178:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	f103 0014 	add.w	r0, r3, #20
 8004184:	e840 2100 	strex	r1, r2, [r0]
 8004188:	2900      	cmp	r1, #0
 800418a:	d1f3      	bne.n	8004174 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 800418c:	2220      	movs	r2, #32
 800418e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004192:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	f103 020c 	add.w	r2, r3, #12
 8004198:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	f103 000c 	add.w	r0, r3, #12
 80041a4:	e840 2100 	strex	r1, r2, [r0]
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d1f3      	bne.n	8004194 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80041ae:	f7fe fc58 	bl	8002a62 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041b2:	2302      	movs	r3, #2
 80041b4:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041b6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80041b8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80041ba:	1ac9      	subs	r1, r1, r3
 80041bc:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041be:	4620      	mov	r0, r4
 80041c0:	f7ff fe74 	bl	8003eac <HAL_UARTEx_RxEventCallback>
 80041c4:	e797      	b.n	80040f6 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041c6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 80041c8:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041ca:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 80041cc:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041ce:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d090      	beq.n	80040f6 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041d4:	1a89      	subs	r1, r1, r2
 80041d6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80041d8:	2900      	cmp	r1, #0
 80041da:	d08c      	beq.n	80040f6 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	f103 020c 	add.w	r2, r3, #12
 80041e0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	f103 050c 	add.w	r5, r3, #12
 80041ec:	e845 2000 	strex	r0, r2, [r5]
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d1f3      	bne.n	80041dc <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	f103 0214 	add.w	r2, r3, #20
 80041f8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	f103 0514 	add.w	r5, r3, #20
 8004204:	e845 2000 	strex	r0, r2, [r5]
 8004208:	2800      	cmp	r0, #0
 800420a:	d1f3      	bne.n	80041f4 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 800420c:	2220      	movs	r2, #32
 800420e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	f103 020c 	add.w	r2, r3, #12
 8004218:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	f103 050c 	add.w	r5, r3, #12
 8004224:	e845 2000 	strex	r0, r2, [r5]
 8004228:	2800      	cmp	r0, #0
 800422a:	d1f3      	bne.n	8004214 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800422c:	2302      	movs	r3, #2
 800422e:	6363      	str	r3, [r4, #52]	; 0x34
 8004230:	e7c5      	b.n	80041be <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004232:	0616      	lsls	r6, r2, #24
 8004234:	d528      	bpl.n	8004288 <HAL_UART_IRQHandler+0x26c>
 8004236:	060d      	lsls	r5, r1, #24
 8004238:	d526      	bpl.n	8004288 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800423a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800423e:	2a21      	cmp	r2, #33	; 0x21
 8004240:	f47f af59 	bne.w	80040f6 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004244:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004246:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004248:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800424c:	d117      	bne.n	800427e <HAL_UART_IRQHandler+0x262>
 800424e:	6921      	ldr	r1, [r4, #16]
 8004250:	b9a9      	cbnz	r1, 800427e <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004252:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004256:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800425a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800425c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800425e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004260:	3a01      	subs	r2, #1
 8004262:	b292      	uxth	r2, r2
 8004264:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004266:	2a00      	cmp	r2, #0
 8004268:	f47f af45 	bne.w	80040f6 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004272:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427a:	60da      	str	r2, [r3, #12]
 800427c:	e73b      	b.n	80040f6 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800427e:	1c51      	adds	r1, r2, #1
 8004280:	6221      	str	r1, [r4, #32]
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	e7ea      	b.n	800425e <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004288:	0650      	lsls	r0, r2, #25
 800428a:	f57f af34 	bpl.w	80040f6 <HAL_UART_IRQHandler+0xda>
 800428e:	064a      	lsls	r2, r1, #25
 8004290:	f57f af31 	bpl.w	80040f6 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004294:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004296:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800429e:	2320      	movs	r3, #32
 80042a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80042a4:	f7ff fdca 	bl	8003e3c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80042a8:	e725      	b.n	80040f6 <HAL_UART_IRQHandler+0xda>
 80042aa:	bf00      	nop
 80042ac:	08003e9d 	.word	0x08003e9d

080042b0 <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 80042b2:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042b6:	2322      	movs	r3, #34	; 0x22
  huart->RxXferSize = Size;
 80042b8:	8582      	strh	r2, [r0, #44]	; 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 80042ba:	6902      	ldr	r2, [r0, #16]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042bc:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->pRxBuffPtr = pData;
 80042c0:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042c2:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80042c4:	b11a      	cbz	r2, 80042ce <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042cc:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042ce:	695a      	ldr	r2, [r3, #20]
}
 80042d0:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	f042 0220 	orr.w	r2, r2, #32
 80042de:	60da      	str	r2, [r3, #12]
}
 80042e0:	4770      	bx	lr

080042e2 <HAL_UART_Receive_IT>:
{
 80042e2:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 80042e4:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 80042e8:	2e20      	cmp	r6, #32
 80042ea:	d106      	bne.n	80042fa <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 80042ec:	b141      	cbz	r1, 8004300 <HAL_UART_Receive_IT+0x1e>
 80042ee:	b13a      	cbz	r2, 8004300 <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f0:	2400      	movs	r4, #0
 80042f2:	6304      	str	r4, [r0, #48]	; 0x30
}
 80042f4:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80042f6:	f7ff bfdb 	b.w	80042b0 <UART_Start_Receive_IT>
    return HAL_BUSY;
 80042fa:	2002      	movs	r0, #2
}
 80042fc:	bc70      	pop	{r4, r5, r6}
 80042fe:	4770      	bx	lr
      return HAL_ERROR;
 8004300:	2001      	movs	r0, #1
 8004302:	e7fb      	b.n	80042fc <HAL_UART_Receive_IT+0x1a>

08004304 <UART_Start_Receive_DMA>:
{
 8004304:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004306:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8004308:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430a:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800430c:	2222      	movs	r2, #34	; 0x22
{
 800430e:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8004310:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004312:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004314:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004318:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800431a:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800431c:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800431e:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004320:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <UART_Start_Receive_DMA+0x90>)
 8004322:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004324:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8004326:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800432a:	460a      	mov	r2, r1
 800432c:	1d31      	adds	r1, r6, #4
 800432e:	f7fe fb59 	bl	80029e4 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	9501      	str	r5, [sp, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	9201      	str	r2, [sp, #4]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	9201      	str	r2, [sp, #4]
 800433e:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004340:	6922      	ldr	r2, [r4, #16]
 8004342:	b15a      	cbz	r2, 800435c <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	f103 020c 	add.w	r2, r3, #12
 8004348:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800434c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	f103 000c 	add.w	r0, r3, #12
 8004354:	e840 2100 	strex	r1, r2, [r0]
 8004358:	2900      	cmp	r1, #0
 800435a:	d1f3      	bne.n	8004344 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	f103 0214 	add.w	r2, r3, #20
 8004360:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004364:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	f103 0014 	add.w	r0, r3, #20
 800436c:	e840 2100 	strex	r1, r2, [r0]
 8004370:	2900      	cmp	r1, #0
 8004372:	d1f3      	bne.n	800435c <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	f103 0214 	add.w	r2, r3, #20
 8004378:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800437c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	f103 0114 	add.w	r1, r3, #20
 8004384:	e841 2000 	strex	r0, r2, [r1]
 8004388:	2800      	cmp	r0, #0
 800438a:	d1f3      	bne.n	8004374 <UART_Start_Receive_DMA+0x70>
}
 800438c:	b002      	add	sp, #8
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	08003ecd 	.word	0x08003ecd
 8004394:	08003eaf 	.word	0x08003eaf
 8004398:	08003e43 	.word	0x08003e43

0800439c <HAL_UART_Receive_DMA>:
{
 800439c:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 800439e:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 80043a2:	2e20      	cmp	r6, #32
 80043a4:	d106      	bne.n	80043b4 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 80043a6:	b141      	cbz	r1, 80043ba <HAL_UART_Receive_DMA+0x1e>
 80043a8:	b13a      	cbz	r2, 80043ba <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	2400      	movs	r4, #0
 80043ac:	6304      	str	r4, [r0, #48]	; 0x30
}
 80043ae:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80043b0:	f7ff bfa8 	b.w	8004304 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 80043b4:	2002      	movs	r0, #2
}
 80043b6:	bc70      	pop	{r4, r5, r6}
 80043b8:	4770      	bx	lr
      return HAL_ERROR;
 80043ba:	2001      	movs	r0, #1
 80043bc:	e7fb      	b.n	80043b6 <HAL_UART_Receive_DMA+0x1a>

080043be <atoi>:
 80043be:	220a      	movs	r2, #10
 80043c0:	2100      	movs	r1, #0
 80043c2:	f000 b881 	b.w	80044c8 <strtol>
	...

080043c8 <_strtol_l.constprop.0>:
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ce:	4686      	mov	lr, r0
 80043d0:	4690      	mov	r8, r2
 80043d2:	d001      	beq.n	80043d8 <_strtol_l.constprop.0+0x10>
 80043d4:	2b24      	cmp	r3, #36	; 0x24
 80043d6:	d906      	bls.n	80043e6 <_strtol_l.constprop.0+0x1e>
 80043d8:	f001 f906 	bl	80055e8 <__errno>
 80043dc:	2316      	movs	r3, #22
 80043de:	6003      	str	r3, [r0, #0]
 80043e0:	2000      	movs	r0, #0
 80043e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e6:	460d      	mov	r5, r1
 80043e8:	4835      	ldr	r0, [pc, #212]	; (80044c0 <_strtol_l.constprop.0+0xf8>)
 80043ea:	462a      	mov	r2, r5
 80043ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043f0:	5d06      	ldrb	r6, [r0, r4]
 80043f2:	f016 0608 	ands.w	r6, r6, #8
 80043f6:	d1f8      	bne.n	80043ea <_strtol_l.constprop.0+0x22>
 80043f8:	2c2d      	cmp	r4, #45	; 0x2d
 80043fa:	d12e      	bne.n	800445a <_strtol_l.constprop.0+0x92>
 80043fc:	2601      	movs	r6, #1
 80043fe:	782c      	ldrb	r4, [r5, #0]
 8004400:	1c95      	adds	r5, r2, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d057      	beq.n	80044b6 <_strtol_l.constprop.0+0xee>
 8004406:	2b10      	cmp	r3, #16
 8004408:	d109      	bne.n	800441e <_strtol_l.constprop.0+0x56>
 800440a:	2c30      	cmp	r4, #48	; 0x30
 800440c:	d107      	bne.n	800441e <_strtol_l.constprop.0+0x56>
 800440e:	782a      	ldrb	r2, [r5, #0]
 8004410:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004414:	2a58      	cmp	r2, #88	; 0x58
 8004416:	d149      	bne.n	80044ac <_strtol_l.constprop.0+0xe4>
 8004418:	2310      	movs	r3, #16
 800441a:	786c      	ldrb	r4, [r5, #1]
 800441c:	3502      	adds	r5, #2
 800441e:	2200      	movs	r2, #0
 8004420:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004424:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004428:	fbbc f9f3 	udiv	r9, ip, r3
 800442c:	4610      	mov	r0, r2
 800442e:	fb03 ca19 	mls	sl, r3, r9, ip
 8004432:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004436:	2f09      	cmp	r7, #9
 8004438:	d814      	bhi.n	8004464 <_strtol_l.constprop.0+0x9c>
 800443a:	463c      	mov	r4, r7
 800443c:	42a3      	cmp	r3, r4
 800443e:	dd20      	ble.n	8004482 <_strtol_l.constprop.0+0xba>
 8004440:	1c57      	adds	r7, r2, #1
 8004442:	d007      	beq.n	8004454 <_strtol_l.constprop.0+0x8c>
 8004444:	4581      	cmp	r9, r0
 8004446:	d319      	bcc.n	800447c <_strtol_l.constprop.0+0xb4>
 8004448:	d101      	bne.n	800444e <_strtol_l.constprop.0+0x86>
 800444a:	45a2      	cmp	sl, r4
 800444c:	db16      	blt.n	800447c <_strtol_l.constprop.0+0xb4>
 800444e:	2201      	movs	r2, #1
 8004450:	fb00 4003 	mla	r0, r0, r3, r4
 8004454:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004458:	e7eb      	b.n	8004432 <_strtol_l.constprop.0+0x6a>
 800445a:	2c2b      	cmp	r4, #43	; 0x2b
 800445c:	bf04      	itt	eq
 800445e:	782c      	ldrbeq	r4, [r5, #0]
 8004460:	1c95      	addeq	r5, r2, #2
 8004462:	e7ce      	b.n	8004402 <_strtol_l.constprop.0+0x3a>
 8004464:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004468:	2f19      	cmp	r7, #25
 800446a:	d801      	bhi.n	8004470 <_strtol_l.constprop.0+0xa8>
 800446c:	3c37      	subs	r4, #55	; 0x37
 800446e:	e7e5      	b.n	800443c <_strtol_l.constprop.0+0x74>
 8004470:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004474:	2f19      	cmp	r7, #25
 8004476:	d804      	bhi.n	8004482 <_strtol_l.constprop.0+0xba>
 8004478:	3c57      	subs	r4, #87	; 0x57
 800447a:	e7df      	b.n	800443c <_strtol_l.constprop.0+0x74>
 800447c:	f04f 32ff 	mov.w	r2, #4294967295
 8004480:	e7e8      	b.n	8004454 <_strtol_l.constprop.0+0x8c>
 8004482:	1c53      	adds	r3, r2, #1
 8004484:	d108      	bne.n	8004498 <_strtol_l.constprop.0+0xd0>
 8004486:	2322      	movs	r3, #34	; 0x22
 8004488:	4660      	mov	r0, ip
 800448a:	f8ce 3000 	str.w	r3, [lr]
 800448e:	f1b8 0f00 	cmp.w	r8, #0
 8004492:	d0a6      	beq.n	80043e2 <_strtol_l.constprop.0+0x1a>
 8004494:	1e69      	subs	r1, r5, #1
 8004496:	e006      	b.n	80044a6 <_strtol_l.constprop.0+0xde>
 8004498:	b106      	cbz	r6, 800449c <_strtol_l.constprop.0+0xd4>
 800449a:	4240      	negs	r0, r0
 800449c:	f1b8 0f00 	cmp.w	r8, #0
 80044a0:	d09f      	beq.n	80043e2 <_strtol_l.constprop.0+0x1a>
 80044a2:	2a00      	cmp	r2, #0
 80044a4:	d1f6      	bne.n	8004494 <_strtol_l.constprop.0+0xcc>
 80044a6:	f8c8 1000 	str.w	r1, [r8]
 80044aa:	e79a      	b.n	80043e2 <_strtol_l.constprop.0+0x1a>
 80044ac:	2430      	movs	r4, #48	; 0x30
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1b5      	bne.n	800441e <_strtol_l.constprop.0+0x56>
 80044b2:	2308      	movs	r3, #8
 80044b4:	e7b3      	b.n	800441e <_strtol_l.constprop.0+0x56>
 80044b6:	2c30      	cmp	r4, #48	; 0x30
 80044b8:	d0a9      	beq.n	800440e <_strtol_l.constprop.0+0x46>
 80044ba:	230a      	movs	r3, #10
 80044bc:	e7af      	b.n	800441e <_strtol_l.constprop.0+0x56>
 80044be:	bf00      	nop
 80044c0:	08008ce0 	.word	0x08008ce0

080044c4 <_strtol_r>:
 80044c4:	f7ff bf80 	b.w	80043c8 <_strtol_l.constprop.0>

080044c8 <strtol>:
 80044c8:	4613      	mov	r3, r2
 80044ca:	460a      	mov	r2, r1
 80044cc:	4601      	mov	r1, r0
 80044ce:	4802      	ldr	r0, [pc, #8]	; (80044d8 <strtol+0x10>)
 80044d0:	6800      	ldr	r0, [r0, #0]
 80044d2:	f7ff bf79 	b.w	80043c8 <_strtol_l.constprop.0>
 80044d6:	bf00      	nop
 80044d8:	20000074 	.word	0x20000074

080044dc <__cvt>:
 80044dc:	2b00      	cmp	r3, #0
 80044de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e2:	461f      	mov	r7, r3
 80044e4:	bfbb      	ittet	lt
 80044e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80044ea:	461f      	movlt	r7, r3
 80044ec:	2300      	movge	r3, #0
 80044ee:	232d      	movlt	r3, #45	; 0x2d
 80044f0:	b088      	sub	sp, #32
 80044f2:	4614      	mov	r4, r2
 80044f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80044f8:	7013      	strb	r3, [r2, #0]
 80044fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80044fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004500:	f023 0820 	bic.w	r8, r3, #32
 8004504:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004508:	d005      	beq.n	8004516 <__cvt+0x3a>
 800450a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800450e:	d100      	bne.n	8004512 <__cvt+0x36>
 8004510:	3501      	adds	r5, #1
 8004512:	2302      	movs	r3, #2
 8004514:	e000      	b.n	8004518 <__cvt+0x3c>
 8004516:	2303      	movs	r3, #3
 8004518:	aa07      	add	r2, sp, #28
 800451a:	9204      	str	r2, [sp, #16]
 800451c:	aa06      	add	r2, sp, #24
 800451e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004522:	e9cd 3500 	strd	r3, r5, [sp]
 8004526:	4622      	mov	r2, r4
 8004528:	463b      	mov	r3, r7
 800452a:	f001 f945 	bl	80057b8 <_dtoa_r>
 800452e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004532:	4606      	mov	r6, r0
 8004534:	d102      	bne.n	800453c <__cvt+0x60>
 8004536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004538:	07db      	lsls	r3, r3, #31
 800453a:	d522      	bpl.n	8004582 <__cvt+0xa6>
 800453c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004540:	eb06 0905 	add.w	r9, r6, r5
 8004544:	d110      	bne.n	8004568 <__cvt+0x8c>
 8004546:	7833      	ldrb	r3, [r6, #0]
 8004548:	2b30      	cmp	r3, #48	; 0x30
 800454a:	d10a      	bne.n	8004562 <__cvt+0x86>
 800454c:	2200      	movs	r2, #0
 800454e:	2300      	movs	r3, #0
 8004550:	4620      	mov	r0, r4
 8004552:	4639      	mov	r1, r7
 8004554:	f7fc fa32 	bl	80009bc <__aeabi_dcmpeq>
 8004558:	b918      	cbnz	r0, 8004562 <__cvt+0x86>
 800455a:	f1c5 0501 	rsb	r5, r5, #1
 800455e:	f8ca 5000 	str.w	r5, [sl]
 8004562:	f8da 3000 	ldr.w	r3, [sl]
 8004566:	4499      	add	r9, r3
 8004568:	2200      	movs	r2, #0
 800456a:	2300      	movs	r3, #0
 800456c:	4620      	mov	r0, r4
 800456e:	4639      	mov	r1, r7
 8004570:	f7fc fa24 	bl	80009bc <__aeabi_dcmpeq>
 8004574:	b108      	cbz	r0, 800457a <__cvt+0x9e>
 8004576:	f8cd 901c 	str.w	r9, [sp, #28]
 800457a:	2230      	movs	r2, #48	; 0x30
 800457c:	9b07      	ldr	r3, [sp, #28]
 800457e:	454b      	cmp	r3, r9
 8004580:	d307      	bcc.n	8004592 <__cvt+0xb6>
 8004582:	4630      	mov	r0, r6
 8004584:	9b07      	ldr	r3, [sp, #28]
 8004586:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004588:	1b9b      	subs	r3, r3, r6
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	b008      	add	sp, #32
 800458e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	9107      	str	r1, [sp, #28]
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	e7f0      	b.n	800457c <__cvt+0xa0>

0800459a <__exponent>:
 800459a:	4603      	mov	r3, r0
 800459c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800459e:	2900      	cmp	r1, #0
 80045a0:	f803 2b02 	strb.w	r2, [r3], #2
 80045a4:	bfb6      	itet	lt
 80045a6:	222d      	movlt	r2, #45	; 0x2d
 80045a8:	222b      	movge	r2, #43	; 0x2b
 80045aa:	4249      	neglt	r1, r1
 80045ac:	2909      	cmp	r1, #9
 80045ae:	7042      	strb	r2, [r0, #1]
 80045b0:	dd2a      	ble.n	8004608 <__exponent+0x6e>
 80045b2:	f10d 0207 	add.w	r2, sp, #7
 80045b6:	4617      	mov	r7, r2
 80045b8:	260a      	movs	r6, #10
 80045ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80045be:	4694      	mov	ip, r2
 80045c0:	fb06 1415 	mls	r4, r6, r5, r1
 80045c4:	3430      	adds	r4, #48	; 0x30
 80045c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80045ca:	460c      	mov	r4, r1
 80045cc:	2c63      	cmp	r4, #99	; 0x63
 80045ce:	4629      	mov	r1, r5
 80045d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80045d4:	dcf1      	bgt.n	80045ba <__exponent+0x20>
 80045d6:	3130      	adds	r1, #48	; 0x30
 80045d8:	f1ac 0402 	sub.w	r4, ip, #2
 80045dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80045e0:	4622      	mov	r2, r4
 80045e2:	1c41      	adds	r1, r0, #1
 80045e4:	42ba      	cmp	r2, r7
 80045e6:	d30a      	bcc.n	80045fe <__exponent+0x64>
 80045e8:	f10d 0209 	add.w	r2, sp, #9
 80045ec:	eba2 020c 	sub.w	r2, r2, ip
 80045f0:	42bc      	cmp	r4, r7
 80045f2:	bf88      	it	hi
 80045f4:	2200      	movhi	r2, #0
 80045f6:	4413      	add	r3, r2
 80045f8:	1a18      	subs	r0, r3, r0
 80045fa:	b003      	add	sp, #12
 80045fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004602:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004606:	e7ed      	b.n	80045e4 <__exponent+0x4a>
 8004608:	2330      	movs	r3, #48	; 0x30
 800460a:	3130      	adds	r1, #48	; 0x30
 800460c:	7083      	strb	r3, [r0, #2]
 800460e:	70c1      	strb	r1, [r0, #3]
 8004610:	1d03      	adds	r3, r0, #4
 8004612:	e7f1      	b.n	80045f8 <__exponent+0x5e>

08004614 <_printf_float>:
 8004614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004618:	b091      	sub	sp, #68	; 0x44
 800461a:	460c      	mov	r4, r1
 800461c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004620:	4616      	mov	r6, r2
 8004622:	461f      	mov	r7, r3
 8004624:	4605      	mov	r5, r0
 8004626:	f000 ff95 	bl	8005554 <_localeconv_r>
 800462a:	6803      	ldr	r3, [r0, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	9309      	str	r3, [sp, #36]	; 0x24
 8004630:	f7fb fd98 	bl	8000164 <strlen>
 8004634:	2300      	movs	r3, #0
 8004636:	930e      	str	r3, [sp, #56]	; 0x38
 8004638:	f8d8 3000 	ldr.w	r3, [r8]
 800463c:	900a      	str	r0, [sp, #40]	; 0x28
 800463e:	3307      	adds	r3, #7
 8004640:	f023 0307 	bic.w	r3, r3, #7
 8004644:	f103 0208 	add.w	r2, r3, #8
 8004648:	f894 9018 	ldrb.w	r9, [r4, #24]
 800464c:	f8d4 b000 	ldr.w	fp, [r4]
 8004650:	f8c8 2000 	str.w	r2, [r8]
 8004654:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004658:	4652      	mov	r2, sl
 800465a:	4643      	mov	r3, r8
 800465c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004660:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004664:	930b      	str	r3, [sp, #44]	; 0x2c
 8004666:	f04f 32ff 	mov.w	r2, #4294967295
 800466a:	4650      	mov	r0, sl
 800466c:	4b9c      	ldr	r3, [pc, #624]	; (80048e0 <_printf_float+0x2cc>)
 800466e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004670:	f7fc f9d6 	bl	8000a20 <__aeabi_dcmpun>
 8004674:	bb70      	cbnz	r0, 80046d4 <_printf_float+0xc0>
 8004676:	f04f 32ff 	mov.w	r2, #4294967295
 800467a:	4650      	mov	r0, sl
 800467c:	4b98      	ldr	r3, [pc, #608]	; (80048e0 <_printf_float+0x2cc>)
 800467e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004680:	f7fc f9b0 	bl	80009e4 <__aeabi_dcmple>
 8004684:	bb30      	cbnz	r0, 80046d4 <_printf_float+0xc0>
 8004686:	2200      	movs	r2, #0
 8004688:	2300      	movs	r3, #0
 800468a:	4650      	mov	r0, sl
 800468c:	4641      	mov	r1, r8
 800468e:	f7fc f99f 	bl	80009d0 <__aeabi_dcmplt>
 8004692:	b110      	cbz	r0, 800469a <_printf_float+0x86>
 8004694:	232d      	movs	r3, #45	; 0x2d
 8004696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800469a:	4a92      	ldr	r2, [pc, #584]	; (80048e4 <_printf_float+0x2d0>)
 800469c:	4b92      	ldr	r3, [pc, #584]	; (80048e8 <_printf_float+0x2d4>)
 800469e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80046a2:	bf94      	ite	ls
 80046a4:	4690      	movls	r8, r2
 80046a6:	4698      	movhi	r8, r3
 80046a8:	2303      	movs	r3, #3
 80046aa:	f04f 0a00 	mov.w	sl, #0
 80046ae:	6123      	str	r3, [r4, #16]
 80046b0:	f02b 0304 	bic.w	r3, fp, #4
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	4633      	mov	r3, r6
 80046b8:	4621      	mov	r1, r4
 80046ba:	4628      	mov	r0, r5
 80046bc:	9700      	str	r7, [sp, #0]
 80046be:	aa0f      	add	r2, sp, #60	; 0x3c
 80046c0:	f000 f9d6 	bl	8004a70 <_printf_common>
 80046c4:	3001      	adds	r0, #1
 80046c6:	f040 8090 	bne.w	80047ea <_printf_float+0x1d6>
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295
 80046ce:	b011      	add	sp, #68	; 0x44
 80046d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d4:	4652      	mov	r2, sl
 80046d6:	4643      	mov	r3, r8
 80046d8:	4650      	mov	r0, sl
 80046da:	4641      	mov	r1, r8
 80046dc:	f7fc f9a0 	bl	8000a20 <__aeabi_dcmpun>
 80046e0:	b148      	cbz	r0, 80046f6 <_printf_float+0xe2>
 80046e2:	f1b8 0f00 	cmp.w	r8, #0
 80046e6:	bfb8      	it	lt
 80046e8:	232d      	movlt	r3, #45	; 0x2d
 80046ea:	4a80      	ldr	r2, [pc, #512]	; (80048ec <_printf_float+0x2d8>)
 80046ec:	bfb8      	it	lt
 80046ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046f2:	4b7f      	ldr	r3, [pc, #508]	; (80048f0 <_printf_float+0x2dc>)
 80046f4:	e7d3      	b.n	800469e <_printf_float+0x8a>
 80046f6:	6863      	ldr	r3, [r4, #4]
 80046f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	d142      	bne.n	8004786 <_printf_float+0x172>
 8004700:	2306      	movs	r3, #6
 8004702:	6063      	str	r3, [r4, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	9206      	str	r2, [sp, #24]
 8004708:	aa0e      	add	r2, sp, #56	; 0x38
 800470a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800470e:	aa0d      	add	r2, sp, #52	; 0x34
 8004710:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004714:	9203      	str	r2, [sp, #12]
 8004716:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800471a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	6863      	ldr	r3, [r4, #4]
 8004722:	4652      	mov	r2, sl
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	4628      	mov	r0, r5
 8004728:	4643      	mov	r3, r8
 800472a:	910b      	str	r1, [sp, #44]	; 0x2c
 800472c:	f7ff fed6 	bl	80044dc <__cvt>
 8004730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004732:	4680      	mov	r8, r0
 8004734:	2947      	cmp	r1, #71	; 0x47
 8004736:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004738:	d108      	bne.n	800474c <_printf_float+0x138>
 800473a:	1cc8      	adds	r0, r1, #3
 800473c:	db02      	blt.n	8004744 <_printf_float+0x130>
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	4299      	cmp	r1, r3
 8004742:	dd40      	ble.n	80047c6 <_printf_float+0x1b2>
 8004744:	f1a9 0902 	sub.w	r9, r9, #2
 8004748:	fa5f f989 	uxtb.w	r9, r9
 800474c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004750:	d81f      	bhi.n	8004792 <_printf_float+0x17e>
 8004752:	464a      	mov	r2, r9
 8004754:	3901      	subs	r1, #1
 8004756:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800475a:	910d      	str	r1, [sp, #52]	; 0x34
 800475c:	f7ff ff1d 	bl	800459a <__exponent>
 8004760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004762:	4682      	mov	sl, r0
 8004764:	1813      	adds	r3, r2, r0
 8004766:	2a01      	cmp	r2, #1
 8004768:	6123      	str	r3, [r4, #16]
 800476a:	dc02      	bgt.n	8004772 <_printf_float+0x15e>
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	07d2      	lsls	r2, r2, #31
 8004770:	d501      	bpl.n	8004776 <_printf_float+0x162>
 8004772:	3301      	adds	r3, #1
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800477a:	2b00      	cmp	r3, #0
 800477c:	d09b      	beq.n	80046b6 <_printf_float+0xa2>
 800477e:	232d      	movs	r3, #45	; 0x2d
 8004780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004784:	e797      	b.n	80046b6 <_printf_float+0xa2>
 8004786:	2947      	cmp	r1, #71	; 0x47
 8004788:	d1bc      	bne.n	8004704 <_printf_float+0xf0>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1ba      	bne.n	8004704 <_printf_float+0xf0>
 800478e:	2301      	movs	r3, #1
 8004790:	e7b7      	b.n	8004702 <_printf_float+0xee>
 8004792:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004796:	d118      	bne.n	80047ca <_printf_float+0x1b6>
 8004798:	2900      	cmp	r1, #0
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	dd0b      	ble.n	80047b6 <_printf_float+0x1a2>
 800479e:	6121      	str	r1, [r4, #16]
 80047a0:	b913      	cbnz	r3, 80047a8 <_printf_float+0x194>
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	07d0      	lsls	r0, r2, #31
 80047a6:	d502      	bpl.n	80047ae <_printf_float+0x19a>
 80047a8:	3301      	adds	r3, #1
 80047aa:	440b      	add	r3, r1
 80047ac:	6123      	str	r3, [r4, #16]
 80047ae:	f04f 0a00 	mov.w	sl, #0
 80047b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80047b4:	e7df      	b.n	8004776 <_printf_float+0x162>
 80047b6:	b913      	cbnz	r3, 80047be <_printf_float+0x1aa>
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	07d2      	lsls	r2, r2, #31
 80047bc:	d501      	bpl.n	80047c2 <_printf_float+0x1ae>
 80047be:	3302      	adds	r3, #2
 80047c0:	e7f4      	b.n	80047ac <_printf_float+0x198>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e7f2      	b.n	80047ac <_printf_float+0x198>
 80047c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80047ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047cc:	4299      	cmp	r1, r3
 80047ce:	db05      	blt.n	80047dc <_printf_float+0x1c8>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	6121      	str	r1, [r4, #16]
 80047d4:	07d8      	lsls	r0, r3, #31
 80047d6:	d5ea      	bpl.n	80047ae <_printf_float+0x19a>
 80047d8:	1c4b      	adds	r3, r1, #1
 80047da:	e7e7      	b.n	80047ac <_printf_float+0x198>
 80047dc:	2900      	cmp	r1, #0
 80047de:	bfcc      	ite	gt
 80047e0:	2201      	movgt	r2, #1
 80047e2:	f1c1 0202 	rsble	r2, r1, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	e7e0      	b.n	80047ac <_printf_float+0x198>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	055a      	lsls	r2, r3, #21
 80047ee:	d407      	bmi.n	8004800 <_printf_float+0x1ec>
 80047f0:	6923      	ldr	r3, [r4, #16]
 80047f2:	4642      	mov	r2, r8
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	d12b      	bne.n	8004856 <_printf_float+0x242>
 80047fe:	e764      	b.n	80046ca <_printf_float+0xb6>
 8004800:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004804:	f240 80dd 	bls.w	80049c2 <_printf_float+0x3ae>
 8004808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800480c:	2200      	movs	r2, #0
 800480e:	2300      	movs	r3, #0
 8004810:	f7fc f8d4 	bl	80009bc <__aeabi_dcmpeq>
 8004814:	2800      	cmp	r0, #0
 8004816:	d033      	beq.n	8004880 <_printf_float+0x26c>
 8004818:	2301      	movs	r3, #1
 800481a:	4631      	mov	r1, r6
 800481c:	4628      	mov	r0, r5
 800481e:	4a35      	ldr	r2, [pc, #212]	; (80048f4 <_printf_float+0x2e0>)
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	f43f af51 	beq.w	80046ca <_printf_float+0xb6>
 8004828:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800482c:	429a      	cmp	r2, r3
 800482e:	db02      	blt.n	8004836 <_printf_float+0x222>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	07d8      	lsls	r0, r3, #31
 8004834:	d50f      	bpl.n	8004856 <_printf_float+0x242>
 8004836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800483a:	4631      	mov	r1, r6
 800483c:	4628      	mov	r0, r5
 800483e:	47b8      	blx	r7
 8004840:	3001      	adds	r0, #1
 8004842:	f43f af42 	beq.w	80046ca <_printf_float+0xb6>
 8004846:	f04f 0800 	mov.w	r8, #0
 800484a:	f104 091a 	add.w	r9, r4, #26
 800484e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004850:	3b01      	subs	r3, #1
 8004852:	4543      	cmp	r3, r8
 8004854:	dc09      	bgt.n	800486a <_printf_float+0x256>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	079b      	lsls	r3, r3, #30
 800485a:	f100 8104 	bmi.w	8004a66 <_printf_float+0x452>
 800485e:	68e0      	ldr	r0, [r4, #12]
 8004860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004862:	4298      	cmp	r0, r3
 8004864:	bfb8      	it	lt
 8004866:	4618      	movlt	r0, r3
 8004868:	e731      	b.n	80046ce <_printf_float+0xba>
 800486a:	2301      	movs	r3, #1
 800486c:	464a      	mov	r2, r9
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	47b8      	blx	r7
 8004874:	3001      	adds	r0, #1
 8004876:	f43f af28 	beq.w	80046ca <_printf_float+0xb6>
 800487a:	f108 0801 	add.w	r8, r8, #1
 800487e:	e7e6      	b.n	800484e <_printf_float+0x23a>
 8004880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004882:	2b00      	cmp	r3, #0
 8004884:	dc38      	bgt.n	80048f8 <_printf_float+0x2e4>
 8004886:	2301      	movs	r3, #1
 8004888:	4631      	mov	r1, r6
 800488a:	4628      	mov	r0, r5
 800488c:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <_printf_float+0x2e0>)
 800488e:	47b8      	blx	r7
 8004890:	3001      	adds	r0, #1
 8004892:	f43f af1a 	beq.w	80046ca <_printf_float+0xb6>
 8004896:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800489a:	4313      	orrs	r3, r2
 800489c:	d102      	bne.n	80048a4 <_printf_float+0x290>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	07d9      	lsls	r1, r3, #31
 80048a2:	d5d8      	bpl.n	8004856 <_printf_float+0x242>
 80048a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048a8:	4631      	mov	r1, r6
 80048aa:	4628      	mov	r0, r5
 80048ac:	47b8      	blx	r7
 80048ae:	3001      	adds	r0, #1
 80048b0:	f43f af0b 	beq.w	80046ca <_printf_float+0xb6>
 80048b4:	f04f 0900 	mov.w	r9, #0
 80048b8:	f104 0a1a 	add.w	sl, r4, #26
 80048bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048be:	425b      	negs	r3, r3
 80048c0:	454b      	cmp	r3, r9
 80048c2:	dc01      	bgt.n	80048c8 <_printf_float+0x2b4>
 80048c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048c6:	e794      	b.n	80047f2 <_printf_float+0x1de>
 80048c8:	2301      	movs	r3, #1
 80048ca:	4652      	mov	r2, sl
 80048cc:	4631      	mov	r1, r6
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b8      	blx	r7
 80048d2:	3001      	adds	r0, #1
 80048d4:	f43f aef9 	beq.w	80046ca <_printf_float+0xb6>
 80048d8:	f109 0901 	add.w	r9, r9, #1
 80048dc:	e7ee      	b.n	80048bc <_printf_float+0x2a8>
 80048de:	bf00      	nop
 80048e0:	7fefffff 	.word	0x7fefffff
 80048e4:	08008de0 	.word	0x08008de0
 80048e8:	08008de4 	.word	0x08008de4
 80048ec:	08008de8 	.word	0x08008de8
 80048f0:	08008dec 	.word	0x08008dec
 80048f4:	08008df0 	.word	0x08008df0
 80048f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048fc:	429a      	cmp	r2, r3
 80048fe:	bfa8      	it	ge
 8004900:	461a      	movge	r2, r3
 8004902:	2a00      	cmp	r2, #0
 8004904:	4691      	mov	r9, r2
 8004906:	dc37      	bgt.n	8004978 <_printf_float+0x364>
 8004908:	f04f 0b00 	mov.w	fp, #0
 800490c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004910:	f104 021a 	add.w	r2, r4, #26
 8004914:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004918:	ebaa 0309 	sub.w	r3, sl, r9
 800491c:	455b      	cmp	r3, fp
 800491e:	dc33      	bgt.n	8004988 <_printf_float+0x374>
 8004920:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004924:	429a      	cmp	r2, r3
 8004926:	db3b      	blt.n	80049a0 <_printf_float+0x38c>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	07da      	lsls	r2, r3, #31
 800492c:	d438      	bmi.n	80049a0 <_printf_float+0x38c>
 800492e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004932:	eba2 0903 	sub.w	r9, r2, r3
 8004936:	eba2 020a 	sub.w	r2, r2, sl
 800493a:	4591      	cmp	r9, r2
 800493c:	bfa8      	it	ge
 800493e:	4691      	movge	r9, r2
 8004940:	f1b9 0f00 	cmp.w	r9, #0
 8004944:	dc34      	bgt.n	80049b0 <_printf_float+0x39c>
 8004946:	f04f 0800 	mov.w	r8, #0
 800494a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800494e:	f104 0a1a 	add.w	sl, r4, #26
 8004952:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	eba3 0309 	sub.w	r3, r3, r9
 800495c:	4543      	cmp	r3, r8
 800495e:	f77f af7a 	ble.w	8004856 <_printf_float+0x242>
 8004962:	2301      	movs	r3, #1
 8004964:	4652      	mov	r2, sl
 8004966:	4631      	mov	r1, r6
 8004968:	4628      	mov	r0, r5
 800496a:	47b8      	blx	r7
 800496c:	3001      	adds	r0, #1
 800496e:	f43f aeac 	beq.w	80046ca <_printf_float+0xb6>
 8004972:	f108 0801 	add.w	r8, r8, #1
 8004976:	e7ec      	b.n	8004952 <_printf_float+0x33e>
 8004978:	4613      	mov	r3, r2
 800497a:	4631      	mov	r1, r6
 800497c:	4642      	mov	r2, r8
 800497e:	4628      	mov	r0, r5
 8004980:	47b8      	blx	r7
 8004982:	3001      	adds	r0, #1
 8004984:	d1c0      	bne.n	8004908 <_printf_float+0x2f4>
 8004986:	e6a0      	b.n	80046ca <_printf_float+0xb6>
 8004988:	2301      	movs	r3, #1
 800498a:	4631      	mov	r1, r6
 800498c:	4628      	mov	r0, r5
 800498e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	f43f ae99 	beq.w	80046ca <_printf_float+0xb6>
 8004998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800499a:	f10b 0b01 	add.w	fp, fp, #1
 800499e:	e7b9      	b.n	8004914 <_printf_float+0x300>
 80049a0:	4631      	mov	r1, r6
 80049a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	d1bf      	bne.n	800492e <_printf_float+0x31a>
 80049ae:	e68c      	b.n	80046ca <_printf_float+0xb6>
 80049b0:	464b      	mov	r3, r9
 80049b2:	4631      	mov	r1, r6
 80049b4:	4628      	mov	r0, r5
 80049b6:	eb08 020a 	add.w	r2, r8, sl
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	d1c2      	bne.n	8004946 <_printf_float+0x332>
 80049c0:	e683      	b.n	80046ca <_printf_float+0xb6>
 80049c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049c4:	2a01      	cmp	r2, #1
 80049c6:	dc01      	bgt.n	80049cc <_printf_float+0x3b8>
 80049c8:	07db      	lsls	r3, r3, #31
 80049ca:	d539      	bpl.n	8004a40 <_printf_float+0x42c>
 80049cc:	2301      	movs	r3, #1
 80049ce:	4642      	mov	r2, r8
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	f43f ae77 	beq.w	80046ca <_printf_float+0xb6>
 80049dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f ae6f 	beq.w	80046ca <_printf_float+0xb6>
 80049ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049f0:	2200      	movs	r2, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80049f8:	f7fb ffe0 	bl	80009bc <__aeabi_dcmpeq>
 80049fc:	b9d8      	cbnz	r0, 8004a36 <_printf_float+0x422>
 80049fe:	f109 33ff 	add.w	r3, r9, #4294967295
 8004a02:	f108 0201 	add.w	r2, r8, #1
 8004a06:	4631      	mov	r1, r6
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b8      	blx	r7
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d10e      	bne.n	8004a2e <_printf_float+0x41a>
 8004a10:	e65b      	b.n	80046ca <_printf_float+0xb6>
 8004a12:	2301      	movs	r3, #1
 8004a14:	464a      	mov	r2, r9
 8004a16:	4631      	mov	r1, r6
 8004a18:	4628      	mov	r0, r5
 8004a1a:	47b8      	blx	r7
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	f43f ae54 	beq.w	80046ca <_printf_float+0xb6>
 8004a22:	f108 0801 	add.w	r8, r8, #1
 8004a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	4543      	cmp	r3, r8
 8004a2c:	dcf1      	bgt.n	8004a12 <_printf_float+0x3fe>
 8004a2e:	4653      	mov	r3, sl
 8004a30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a34:	e6de      	b.n	80047f4 <_printf_float+0x1e0>
 8004a36:	f04f 0800 	mov.w	r8, #0
 8004a3a:	f104 091a 	add.w	r9, r4, #26
 8004a3e:	e7f2      	b.n	8004a26 <_printf_float+0x412>
 8004a40:	2301      	movs	r3, #1
 8004a42:	4642      	mov	r2, r8
 8004a44:	e7df      	b.n	8004a06 <_printf_float+0x3f2>
 8004a46:	2301      	movs	r3, #1
 8004a48:	464a      	mov	r2, r9
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	47b8      	blx	r7
 8004a50:	3001      	adds	r0, #1
 8004a52:	f43f ae3a 	beq.w	80046ca <_printf_float+0xb6>
 8004a56:	f108 0801 	add.w	r8, r8, #1
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a5e:	1a5b      	subs	r3, r3, r1
 8004a60:	4543      	cmp	r3, r8
 8004a62:	dcf0      	bgt.n	8004a46 <_printf_float+0x432>
 8004a64:	e6fb      	b.n	800485e <_printf_float+0x24a>
 8004a66:	f04f 0800 	mov.w	r8, #0
 8004a6a:	f104 0919 	add.w	r9, r4, #25
 8004a6e:	e7f4      	b.n	8004a5a <_printf_float+0x446>

08004a70 <_printf_common>:
 8004a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a74:	4616      	mov	r6, r2
 8004a76:	4699      	mov	r9, r3
 8004a78:	688a      	ldr	r2, [r1, #8]
 8004a7a:	690b      	ldr	r3, [r1, #16]
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	bfb8      	it	lt
 8004a82:	4613      	movlt	r3, r2
 8004a84:	6033      	str	r3, [r6, #0]
 8004a86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a90:	b10a      	cbz	r2, 8004a96 <_printf_common+0x26>
 8004a92:	3301      	adds	r3, #1
 8004a94:	6033      	str	r3, [r6, #0]
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	0699      	lsls	r1, r3, #26
 8004a9a:	bf42      	ittt	mi
 8004a9c:	6833      	ldrmi	r3, [r6, #0]
 8004a9e:	3302      	addmi	r3, #2
 8004aa0:	6033      	strmi	r3, [r6, #0]
 8004aa2:	6825      	ldr	r5, [r4, #0]
 8004aa4:	f015 0506 	ands.w	r5, r5, #6
 8004aa8:	d106      	bne.n	8004ab8 <_printf_common+0x48>
 8004aaa:	f104 0a19 	add.w	sl, r4, #25
 8004aae:	68e3      	ldr	r3, [r4, #12]
 8004ab0:	6832      	ldr	r2, [r6, #0]
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	42ab      	cmp	r3, r5
 8004ab6:	dc2b      	bgt.n	8004b10 <_printf_common+0xa0>
 8004ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004abc:	1e13      	subs	r3, r2, #0
 8004abe:	6822      	ldr	r2, [r4, #0]
 8004ac0:	bf18      	it	ne
 8004ac2:	2301      	movne	r3, #1
 8004ac4:	0692      	lsls	r2, r2, #26
 8004ac6:	d430      	bmi.n	8004b2a <_printf_common+0xba>
 8004ac8:	4649      	mov	r1, r9
 8004aca:	4638      	mov	r0, r7
 8004acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ad0:	47c0      	blx	r8
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d023      	beq.n	8004b1e <_printf_common+0xae>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	6922      	ldr	r2, [r4, #16]
 8004ada:	f003 0306 	and.w	r3, r3, #6
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	bf14      	ite	ne
 8004ae2:	2500      	movne	r5, #0
 8004ae4:	6833      	ldreq	r3, [r6, #0]
 8004ae6:	f04f 0600 	mov.w	r6, #0
 8004aea:	bf08      	it	eq
 8004aec:	68e5      	ldreq	r5, [r4, #12]
 8004aee:	f104 041a 	add.w	r4, r4, #26
 8004af2:	bf08      	it	eq
 8004af4:	1aed      	subeq	r5, r5, r3
 8004af6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004afa:	bf08      	it	eq
 8004afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b00:	4293      	cmp	r3, r2
 8004b02:	bfc4      	itt	gt
 8004b04:	1a9b      	subgt	r3, r3, r2
 8004b06:	18ed      	addgt	r5, r5, r3
 8004b08:	42b5      	cmp	r5, r6
 8004b0a:	d11a      	bne.n	8004b42 <_printf_common+0xd2>
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e008      	b.n	8004b22 <_printf_common+0xb2>
 8004b10:	2301      	movs	r3, #1
 8004b12:	4652      	mov	r2, sl
 8004b14:	4649      	mov	r1, r9
 8004b16:	4638      	mov	r0, r7
 8004b18:	47c0      	blx	r8
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d103      	bne.n	8004b26 <_printf_common+0xb6>
 8004b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b26:	3501      	adds	r5, #1
 8004b28:	e7c1      	b.n	8004aae <_printf_common+0x3e>
 8004b2a:	2030      	movs	r0, #48	; 0x30
 8004b2c:	18e1      	adds	r1, r4, r3
 8004b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b38:	4422      	add	r2, r4
 8004b3a:	3302      	adds	r3, #2
 8004b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b40:	e7c2      	b.n	8004ac8 <_printf_common+0x58>
 8004b42:	2301      	movs	r3, #1
 8004b44:	4622      	mov	r2, r4
 8004b46:	4649      	mov	r1, r9
 8004b48:	4638      	mov	r0, r7
 8004b4a:	47c0      	blx	r8
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d0e6      	beq.n	8004b1e <_printf_common+0xae>
 8004b50:	3601      	adds	r6, #1
 8004b52:	e7d9      	b.n	8004b08 <_printf_common+0x98>

08004b54 <_printf_i>:
 8004b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b58:	7e0f      	ldrb	r7, [r1, #24]
 8004b5a:	4691      	mov	r9, r2
 8004b5c:	2f78      	cmp	r7, #120	; 0x78
 8004b5e:	4680      	mov	r8, r0
 8004b60:	460c      	mov	r4, r1
 8004b62:	469a      	mov	sl, r3
 8004b64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b6a:	d807      	bhi.n	8004b7c <_printf_i+0x28>
 8004b6c:	2f62      	cmp	r7, #98	; 0x62
 8004b6e:	d80a      	bhi.n	8004b86 <_printf_i+0x32>
 8004b70:	2f00      	cmp	r7, #0
 8004b72:	f000 80d5 	beq.w	8004d20 <_printf_i+0x1cc>
 8004b76:	2f58      	cmp	r7, #88	; 0x58
 8004b78:	f000 80c1 	beq.w	8004cfe <_printf_i+0x1aa>
 8004b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b84:	e03a      	b.n	8004bfc <_printf_i+0xa8>
 8004b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b8a:	2b15      	cmp	r3, #21
 8004b8c:	d8f6      	bhi.n	8004b7c <_printf_i+0x28>
 8004b8e:	a101      	add	r1, pc, #4	; (adr r1, 8004b94 <_printf_i+0x40>)
 8004b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b94:	08004bed 	.word	0x08004bed
 8004b98:	08004c01 	.word	0x08004c01
 8004b9c:	08004b7d 	.word	0x08004b7d
 8004ba0:	08004b7d 	.word	0x08004b7d
 8004ba4:	08004b7d 	.word	0x08004b7d
 8004ba8:	08004b7d 	.word	0x08004b7d
 8004bac:	08004c01 	.word	0x08004c01
 8004bb0:	08004b7d 	.word	0x08004b7d
 8004bb4:	08004b7d 	.word	0x08004b7d
 8004bb8:	08004b7d 	.word	0x08004b7d
 8004bbc:	08004b7d 	.word	0x08004b7d
 8004bc0:	08004d07 	.word	0x08004d07
 8004bc4:	08004c2d 	.word	0x08004c2d
 8004bc8:	08004cc1 	.word	0x08004cc1
 8004bcc:	08004b7d 	.word	0x08004b7d
 8004bd0:	08004b7d 	.word	0x08004b7d
 8004bd4:	08004d29 	.word	0x08004d29
 8004bd8:	08004b7d 	.word	0x08004b7d
 8004bdc:	08004c2d 	.word	0x08004c2d
 8004be0:	08004b7d 	.word	0x08004b7d
 8004be4:	08004b7d 	.word	0x08004b7d
 8004be8:	08004cc9 	.word	0x08004cc9
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	1d1a      	adds	r2, r3, #4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	602a      	str	r2, [r5, #0]
 8004bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0a0      	b.n	8004d42 <_printf_i+0x1ee>
 8004c00:	6820      	ldr	r0, [r4, #0]
 8004c02:	682b      	ldr	r3, [r5, #0]
 8004c04:	0607      	lsls	r7, r0, #24
 8004c06:	f103 0104 	add.w	r1, r3, #4
 8004c0a:	6029      	str	r1, [r5, #0]
 8004c0c:	d501      	bpl.n	8004c12 <_printf_i+0xbe>
 8004c0e:	681e      	ldr	r6, [r3, #0]
 8004c10:	e003      	b.n	8004c1a <_printf_i+0xc6>
 8004c12:	0646      	lsls	r6, r0, #25
 8004c14:	d5fb      	bpl.n	8004c0e <_printf_i+0xba>
 8004c16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c1a:	2e00      	cmp	r6, #0
 8004c1c:	da03      	bge.n	8004c26 <_printf_i+0xd2>
 8004c1e:	232d      	movs	r3, #45	; 0x2d
 8004c20:	4276      	negs	r6, r6
 8004c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c26:	230a      	movs	r3, #10
 8004c28:	4859      	ldr	r0, [pc, #356]	; (8004d90 <_printf_i+0x23c>)
 8004c2a:	e012      	b.n	8004c52 <_printf_i+0xfe>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	6820      	ldr	r0, [r4, #0]
 8004c30:	1d19      	adds	r1, r3, #4
 8004c32:	6029      	str	r1, [r5, #0]
 8004c34:	0605      	lsls	r5, r0, #24
 8004c36:	d501      	bpl.n	8004c3c <_printf_i+0xe8>
 8004c38:	681e      	ldr	r6, [r3, #0]
 8004c3a:	e002      	b.n	8004c42 <_printf_i+0xee>
 8004c3c:	0641      	lsls	r1, r0, #25
 8004c3e:	d5fb      	bpl.n	8004c38 <_printf_i+0xe4>
 8004c40:	881e      	ldrh	r6, [r3, #0]
 8004c42:	2f6f      	cmp	r7, #111	; 0x6f
 8004c44:	bf0c      	ite	eq
 8004c46:	2308      	moveq	r3, #8
 8004c48:	230a      	movne	r3, #10
 8004c4a:	4851      	ldr	r0, [pc, #324]	; (8004d90 <_printf_i+0x23c>)
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c52:	6865      	ldr	r5, [r4, #4]
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	bfa8      	it	ge
 8004c58:	6821      	ldrge	r1, [r4, #0]
 8004c5a:	60a5      	str	r5, [r4, #8]
 8004c5c:	bfa4      	itt	ge
 8004c5e:	f021 0104 	bicge.w	r1, r1, #4
 8004c62:	6021      	strge	r1, [r4, #0]
 8004c64:	b90e      	cbnz	r6, 8004c6a <_printf_i+0x116>
 8004c66:	2d00      	cmp	r5, #0
 8004c68:	d04b      	beq.n	8004d02 <_printf_i+0x1ae>
 8004c6a:	4615      	mov	r5, r2
 8004c6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c70:	fb03 6711 	mls	r7, r3, r1, r6
 8004c74:	5dc7      	ldrb	r7, [r0, r7]
 8004c76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c7a:	4637      	mov	r7, r6
 8004c7c:	42bb      	cmp	r3, r7
 8004c7e:	460e      	mov	r6, r1
 8004c80:	d9f4      	bls.n	8004c6c <_printf_i+0x118>
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d10b      	bne.n	8004c9e <_printf_i+0x14a>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	07de      	lsls	r6, r3, #31
 8004c8a:	d508      	bpl.n	8004c9e <_printf_i+0x14a>
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	6861      	ldr	r1, [r4, #4]
 8004c90:	4299      	cmp	r1, r3
 8004c92:	bfde      	ittt	le
 8004c94:	2330      	movle	r3, #48	; 0x30
 8004c96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c9e:	1b52      	subs	r2, r2, r5
 8004ca0:	6122      	str	r2, [r4, #16]
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	f8cd a000 	str.w	sl, [sp]
 8004cac:	aa03      	add	r2, sp, #12
 8004cae:	f7ff fedf 	bl	8004a70 <_printf_common>
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d14a      	bne.n	8004d4c <_printf_i+0x1f8>
 8004cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cba:	b004      	add	sp, #16
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	f043 0320 	orr.w	r3, r3, #32
 8004cc6:	6023      	str	r3, [r4, #0]
 8004cc8:	2778      	movs	r7, #120	; 0x78
 8004cca:	4832      	ldr	r0, [pc, #200]	; (8004d94 <_printf_i+0x240>)
 8004ccc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	6829      	ldr	r1, [r5, #0]
 8004cd4:	061f      	lsls	r7, r3, #24
 8004cd6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cda:	d402      	bmi.n	8004ce2 <_printf_i+0x18e>
 8004cdc:	065f      	lsls	r7, r3, #25
 8004cde:	bf48      	it	mi
 8004ce0:	b2b6      	uxthmi	r6, r6
 8004ce2:	07df      	lsls	r7, r3, #31
 8004ce4:	bf48      	it	mi
 8004ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cea:	6029      	str	r1, [r5, #0]
 8004cec:	bf48      	it	mi
 8004cee:	6023      	strmi	r3, [r4, #0]
 8004cf0:	b91e      	cbnz	r6, 8004cfa <_printf_i+0x1a6>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	f023 0320 	bic.w	r3, r3, #32
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	e7a6      	b.n	8004c4c <_printf_i+0xf8>
 8004cfe:	4824      	ldr	r0, [pc, #144]	; (8004d90 <_printf_i+0x23c>)
 8004d00:	e7e4      	b.n	8004ccc <_printf_i+0x178>
 8004d02:	4615      	mov	r5, r2
 8004d04:	e7bd      	b.n	8004c82 <_printf_i+0x12e>
 8004d06:	682b      	ldr	r3, [r5, #0]
 8004d08:	6826      	ldr	r6, [r4, #0]
 8004d0a:	1d18      	adds	r0, r3, #4
 8004d0c:	6961      	ldr	r1, [r4, #20]
 8004d0e:	6028      	str	r0, [r5, #0]
 8004d10:	0635      	lsls	r5, r6, #24
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	d501      	bpl.n	8004d1a <_printf_i+0x1c6>
 8004d16:	6019      	str	r1, [r3, #0]
 8004d18:	e002      	b.n	8004d20 <_printf_i+0x1cc>
 8004d1a:	0670      	lsls	r0, r6, #25
 8004d1c:	d5fb      	bpl.n	8004d16 <_printf_i+0x1c2>
 8004d1e:	8019      	strh	r1, [r3, #0]
 8004d20:	2300      	movs	r3, #0
 8004d22:	4615      	mov	r5, r2
 8004d24:	6123      	str	r3, [r4, #16]
 8004d26:	e7bc      	b.n	8004ca2 <_printf_i+0x14e>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	1d1a      	adds	r2, r3, #4
 8004d2e:	602a      	str	r2, [r5, #0]
 8004d30:	681d      	ldr	r5, [r3, #0]
 8004d32:	6862      	ldr	r2, [r4, #4]
 8004d34:	4628      	mov	r0, r5
 8004d36:	f000 fc84 	bl	8005642 <memchr>
 8004d3a:	b108      	cbz	r0, 8004d40 <_printf_i+0x1ec>
 8004d3c:	1b40      	subs	r0, r0, r5
 8004d3e:	6060      	str	r0, [r4, #4]
 8004d40:	6863      	ldr	r3, [r4, #4]
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	2300      	movs	r3, #0
 8004d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4a:	e7aa      	b.n	8004ca2 <_printf_i+0x14e>
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4649      	mov	r1, r9
 8004d50:	4640      	mov	r0, r8
 8004d52:	6923      	ldr	r3, [r4, #16]
 8004d54:	47d0      	blx	sl
 8004d56:	3001      	adds	r0, #1
 8004d58:	d0ad      	beq.n	8004cb6 <_printf_i+0x162>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	079b      	lsls	r3, r3, #30
 8004d5e:	d413      	bmi.n	8004d88 <_printf_i+0x234>
 8004d60:	68e0      	ldr	r0, [r4, #12]
 8004d62:	9b03      	ldr	r3, [sp, #12]
 8004d64:	4298      	cmp	r0, r3
 8004d66:	bfb8      	it	lt
 8004d68:	4618      	movlt	r0, r3
 8004d6a:	e7a6      	b.n	8004cba <_printf_i+0x166>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	4632      	mov	r2, r6
 8004d70:	4649      	mov	r1, r9
 8004d72:	4640      	mov	r0, r8
 8004d74:	47d0      	blx	sl
 8004d76:	3001      	adds	r0, #1
 8004d78:	d09d      	beq.n	8004cb6 <_printf_i+0x162>
 8004d7a:	3501      	adds	r5, #1
 8004d7c:	68e3      	ldr	r3, [r4, #12]
 8004d7e:	9903      	ldr	r1, [sp, #12]
 8004d80:	1a5b      	subs	r3, r3, r1
 8004d82:	42ab      	cmp	r3, r5
 8004d84:	dcf2      	bgt.n	8004d6c <_printf_i+0x218>
 8004d86:	e7eb      	b.n	8004d60 <_printf_i+0x20c>
 8004d88:	2500      	movs	r5, #0
 8004d8a:	f104 0619 	add.w	r6, r4, #25
 8004d8e:	e7f5      	b.n	8004d7c <_printf_i+0x228>
 8004d90:	08008df2 	.word	0x08008df2
 8004d94:	08008e03 	.word	0x08008e03

08004d98 <_scanf_float>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	b087      	sub	sp, #28
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	688b      	ldr	r3, [r1, #8]
 8004da2:	4617      	mov	r7, r2
 8004da4:	1e5a      	subs	r2, r3, #1
 8004da6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004daa:	bf85      	ittet	hi
 8004dac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004db0:	195b      	addhi	r3, r3, r5
 8004db2:	2300      	movls	r3, #0
 8004db4:	9302      	strhi	r3, [sp, #8]
 8004db6:	bf88      	it	hi
 8004db8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004dbc:	468b      	mov	fp, r1
 8004dbe:	f04f 0500 	mov.w	r5, #0
 8004dc2:	bf8c      	ite	hi
 8004dc4:	608b      	strhi	r3, [r1, #8]
 8004dc6:	9302      	strls	r3, [sp, #8]
 8004dc8:	680b      	ldr	r3, [r1, #0]
 8004dca:	4680      	mov	r8, r0
 8004dcc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004dd0:	f84b 3b1c 	str.w	r3, [fp], #28
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	465e      	mov	r6, fp
 8004dd8:	46aa      	mov	sl, r5
 8004dda:	46a9      	mov	r9, r5
 8004ddc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004de0:	9501      	str	r5, [sp, #4]
 8004de2:	68a2      	ldr	r2, [r4, #8]
 8004de4:	b152      	cbz	r2, 8004dfc <_scanf_float+0x64>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b4e      	cmp	r3, #78	; 0x4e
 8004dec:	d864      	bhi.n	8004eb8 <_scanf_float+0x120>
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d83c      	bhi.n	8004e6c <_scanf_float+0xd4>
 8004df2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004df6:	b2c8      	uxtb	r0, r1
 8004df8:	280e      	cmp	r0, #14
 8004dfa:	d93a      	bls.n	8004e72 <_scanf_float+0xda>
 8004dfc:	f1b9 0f00 	cmp.w	r9, #0
 8004e00:	d003      	beq.n	8004e0a <_scanf_float+0x72>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e0e:	f1ba 0f01 	cmp.w	sl, #1
 8004e12:	f200 8113 	bhi.w	800503c <_scanf_float+0x2a4>
 8004e16:	455e      	cmp	r6, fp
 8004e18:	f200 8105 	bhi.w	8005026 <_scanf_float+0x28e>
 8004e1c:	2501      	movs	r5, #1
 8004e1e:	4628      	mov	r0, r5
 8004e20:	b007      	add	sp, #28
 8004e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004e2a:	2a0d      	cmp	r2, #13
 8004e2c:	d8e6      	bhi.n	8004dfc <_scanf_float+0x64>
 8004e2e:	a101      	add	r1, pc, #4	; (adr r1, 8004e34 <_scanf_float+0x9c>)
 8004e30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e34:	08004f73 	.word	0x08004f73
 8004e38:	08004dfd 	.word	0x08004dfd
 8004e3c:	08004dfd 	.word	0x08004dfd
 8004e40:	08004dfd 	.word	0x08004dfd
 8004e44:	08004fd3 	.word	0x08004fd3
 8004e48:	08004fab 	.word	0x08004fab
 8004e4c:	08004dfd 	.word	0x08004dfd
 8004e50:	08004dfd 	.word	0x08004dfd
 8004e54:	08004f81 	.word	0x08004f81
 8004e58:	08004dfd 	.word	0x08004dfd
 8004e5c:	08004dfd 	.word	0x08004dfd
 8004e60:	08004dfd 	.word	0x08004dfd
 8004e64:	08004dfd 	.word	0x08004dfd
 8004e68:	08004f39 	.word	0x08004f39
 8004e6c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004e70:	e7db      	b.n	8004e2a <_scanf_float+0x92>
 8004e72:	290e      	cmp	r1, #14
 8004e74:	d8c2      	bhi.n	8004dfc <_scanf_float+0x64>
 8004e76:	a001      	add	r0, pc, #4	; (adr r0, 8004e7c <_scanf_float+0xe4>)
 8004e78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004e7c:	08004f2b 	.word	0x08004f2b
 8004e80:	08004dfd 	.word	0x08004dfd
 8004e84:	08004f2b 	.word	0x08004f2b
 8004e88:	08004fbf 	.word	0x08004fbf
 8004e8c:	08004dfd 	.word	0x08004dfd
 8004e90:	08004ed9 	.word	0x08004ed9
 8004e94:	08004f15 	.word	0x08004f15
 8004e98:	08004f15 	.word	0x08004f15
 8004e9c:	08004f15 	.word	0x08004f15
 8004ea0:	08004f15 	.word	0x08004f15
 8004ea4:	08004f15 	.word	0x08004f15
 8004ea8:	08004f15 	.word	0x08004f15
 8004eac:	08004f15 	.word	0x08004f15
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004f15 	.word	0x08004f15
 8004eb8:	2b6e      	cmp	r3, #110	; 0x6e
 8004eba:	d809      	bhi.n	8004ed0 <_scanf_float+0x138>
 8004ebc:	2b60      	cmp	r3, #96	; 0x60
 8004ebe:	d8b2      	bhi.n	8004e26 <_scanf_float+0x8e>
 8004ec0:	2b54      	cmp	r3, #84	; 0x54
 8004ec2:	d077      	beq.n	8004fb4 <_scanf_float+0x21c>
 8004ec4:	2b59      	cmp	r3, #89	; 0x59
 8004ec6:	d199      	bne.n	8004dfc <_scanf_float+0x64>
 8004ec8:	2d07      	cmp	r5, #7
 8004eca:	d197      	bne.n	8004dfc <_scanf_float+0x64>
 8004ecc:	2508      	movs	r5, #8
 8004ece:	e029      	b.n	8004f24 <_scanf_float+0x18c>
 8004ed0:	2b74      	cmp	r3, #116	; 0x74
 8004ed2:	d06f      	beq.n	8004fb4 <_scanf_float+0x21c>
 8004ed4:	2b79      	cmp	r3, #121	; 0x79
 8004ed6:	e7f6      	b.n	8004ec6 <_scanf_float+0x12e>
 8004ed8:	6821      	ldr	r1, [r4, #0]
 8004eda:	05c8      	lsls	r0, r1, #23
 8004edc:	d51a      	bpl.n	8004f14 <_scanf_float+0x17c>
 8004ede:	9b02      	ldr	r3, [sp, #8]
 8004ee0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ee4:	6021      	str	r1, [r4, #0]
 8004ee6:	f109 0901 	add.w	r9, r9, #1
 8004eea:	b11b      	cbz	r3, 8004ef4 <_scanf_float+0x15c>
 8004eec:	3b01      	subs	r3, #1
 8004eee:	3201      	adds	r2, #1
 8004ef0:	9302      	str	r3, [sp, #8]
 8004ef2:	60a2      	str	r2, [r4, #8]
 8004ef4:	68a3      	ldr	r3, [r4, #8]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	60a3      	str	r3, [r4, #8]
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	3301      	adds	r3, #1
 8004efe:	6123      	str	r3, [r4, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	f340 8084 	ble.w	8005014 <_scanf_float+0x27c>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	e766      	b.n	8004de2 <_scanf_float+0x4a>
 8004f14:	eb1a 0f05 	cmn.w	sl, r5
 8004f18:	f47f af70 	bne.w	8004dfc <_scanf_float+0x64>
 8004f1c:	6822      	ldr	r2, [r4, #0]
 8004f1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004f22:	6022      	str	r2, [r4, #0]
 8004f24:	f806 3b01 	strb.w	r3, [r6], #1
 8004f28:	e7e4      	b.n	8004ef4 <_scanf_float+0x15c>
 8004f2a:	6822      	ldr	r2, [r4, #0]
 8004f2c:	0610      	lsls	r0, r2, #24
 8004f2e:	f57f af65 	bpl.w	8004dfc <_scanf_float+0x64>
 8004f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f36:	e7f4      	b.n	8004f22 <_scanf_float+0x18a>
 8004f38:	f1ba 0f00 	cmp.w	sl, #0
 8004f3c:	d10e      	bne.n	8004f5c <_scanf_float+0x1c4>
 8004f3e:	f1b9 0f00 	cmp.w	r9, #0
 8004f42:	d10e      	bne.n	8004f62 <_scanf_float+0x1ca>
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f4e:	d108      	bne.n	8004f62 <_scanf_float+0x1ca>
 8004f50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f54:	f04f 0a01 	mov.w	sl, #1
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	e7e3      	b.n	8004f24 <_scanf_float+0x18c>
 8004f5c:	f1ba 0f02 	cmp.w	sl, #2
 8004f60:	d055      	beq.n	800500e <_scanf_float+0x276>
 8004f62:	2d01      	cmp	r5, #1
 8004f64:	d002      	beq.n	8004f6c <_scanf_float+0x1d4>
 8004f66:	2d04      	cmp	r5, #4
 8004f68:	f47f af48 	bne.w	8004dfc <_scanf_float+0x64>
 8004f6c:	3501      	adds	r5, #1
 8004f6e:	b2ed      	uxtb	r5, r5
 8004f70:	e7d8      	b.n	8004f24 <_scanf_float+0x18c>
 8004f72:	f1ba 0f01 	cmp.w	sl, #1
 8004f76:	f47f af41 	bne.w	8004dfc <_scanf_float+0x64>
 8004f7a:	f04f 0a02 	mov.w	sl, #2
 8004f7e:	e7d1      	b.n	8004f24 <_scanf_float+0x18c>
 8004f80:	b97d      	cbnz	r5, 8004fa2 <_scanf_float+0x20a>
 8004f82:	f1b9 0f00 	cmp.w	r9, #0
 8004f86:	f47f af3c 	bne.w	8004e02 <_scanf_float+0x6a>
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f94:	f47f af39 	bne.w	8004e0a <_scanf_float+0x72>
 8004f98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f9c:	2501      	movs	r5, #1
 8004f9e:	6022      	str	r2, [r4, #0]
 8004fa0:	e7c0      	b.n	8004f24 <_scanf_float+0x18c>
 8004fa2:	2d03      	cmp	r5, #3
 8004fa4:	d0e2      	beq.n	8004f6c <_scanf_float+0x1d4>
 8004fa6:	2d05      	cmp	r5, #5
 8004fa8:	e7de      	b.n	8004f68 <_scanf_float+0x1d0>
 8004faa:	2d02      	cmp	r5, #2
 8004fac:	f47f af26 	bne.w	8004dfc <_scanf_float+0x64>
 8004fb0:	2503      	movs	r5, #3
 8004fb2:	e7b7      	b.n	8004f24 <_scanf_float+0x18c>
 8004fb4:	2d06      	cmp	r5, #6
 8004fb6:	f47f af21 	bne.w	8004dfc <_scanf_float+0x64>
 8004fba:	2507      	movs	r5, #7
 8004fbc:	e7b2      	b.n	8004f24 <_scanf_float+0x18c>
 8004fbe:	6822      	ldr	r2, [r4, #0]
 8004fc0:	0591      	lsls	r1, r2, #22
 8004fc2:	f57f af1b 	bpl.w	8004dfc <_scanf_float+0x64>
 8004fc6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004fca:	6022      	str	r2, [r4, #0]
 8004fcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fd0:	e7a8      	b.n	8004f24 <_scanf_float+0x18c>
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004fd8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004fdc:	d006      	beq.n	8004fec <_scanf_float+0x254>
 8004fde:	0550      	lsls	r0, r2, #21
 8004fe0:	f57f af0c 	bpl.w	8004dfc <_scanf_float+0x64>
 8004fe4:	f1b9 0f00 	cmp.w	r9, #0
 8004fe8:	f43f af0f 	beq.w	8004e0a <_scanf_float+0x72>
 8004fec:	0591      	lsls	r1, r2, #22
 8004fee:	bf58      	it	pl
 8004ff0:	9901      	ldrpl	r1, [sp, #4]
 8004ff2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ff6:	bf58      	it	pl
 8004ff8:	eba9 0101 	subpl.w	r1, r9, r1
 8004ffc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005000:	f04f 0900 	mov.w	r9, #0
 8005004:	bf58      	it	pl
 8005006:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800500a:	6022      	str	r2, [r4, #0]
 800500c:	e78a      	b.n	8004f24 <_scanf_float+0x18c>
 800500e:	f04f 0a03 	mov.w	sl, #3
 8005012:	e787      	b.n	8004f24 <_scanf_float+0x18c>
 8005014:	4639      	mov	r1, r7
 8005016:	4640      	mov	r0, r8
 8005018:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800501c:	4798      	blx	r3
 800501e:	2800      	cmp	r0, #0
 8005020:	f43f aedf 	beq.w	8004de2 <_scanf_float+0x4a>
 8005024:	e6ea      	b.n	8004dfc <_scanf_float+0x64>
 8005026:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800502a:	463a      	mov	r2, r7
 800502c:	4640      	mov	r0, r8
 800502e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005032:	4798      	blx	r3
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	3b01      	subs	r3, #1
 8005038:	6123      	str	r3, [r4, #16]
 800503a:	e6ec      	b.n	8004e16 <_scanf_float+0x7e>
 800503c:	1e6b      	subs	r3, r5, #1
 800503e:	2b06      	cmp	r3, #6
 8005040:	d825      	bhi.n	800508e <_scanf_float+0x2f6>
 8005042:	2d02      	cmp	r5, #2
 8005044:	d836      	bhi.n	80050b4 <_scanf_float+0x31c>
 8005046:	455e      	cmp	r6, fp
 8005048:	f67f aee8 	bls.w	8004e1c <_scanf_float+0x84>
 800504c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005050:	463a      	mov	r2, r7
 8005052:	4640      	mov	r0, r8
 8005054:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005058:	4798      	blx	r3
 800505a:	6923      	ldr	r3, [r4, #16]
 800505c:	3b01      	subs	r3, #1
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	e7f1      	b.n	8005046 <_scanf_float+0x2ae>
 8005062:	9802      	ldr	r0, [sp, #8]
 8005064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005068:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800506c:	463a      	mov	r2, r7
 800506e:	9002      	str	r0, [sp, #8]
 8005070:	4640      	mov	r0, r8
 8005072:	4798      	blx	r3
 8005074:	6923      	ldr	r3, [r4, #16]
 8005076:	3b01      	subs	r3, #1
 8005078:	6123      	str	r3, [r4, #16]
 800507a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800507e:	fa5f fa8a 	uxtb.w	sl, sl
 8005082:	f1ba 0f02 	cmp.w	sl, #2
 8005086:	d1ec      	bne.n	8005062 <_scanf_float+0x2ca>
 8005088:	3d03      	subs	r5, #3
 800508a:	b2ed      	uxtb	r5, r5
 800508c:	1b76      	subs	r6, r6, r5
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	05da      	lsls	r2, r3, #23
 8005092:	d52f      	bpl.n	80050f4 <_scanf_float+0x35c>
 8005094:	055b      	lsls	r3, r3, #21
 8005096:	d510      	bpl.n	80050ba <_scanf_float+0x322>
 8005098:	455e      	cmp	r6, fp
 800509a:	f67f aebf 	bls.w	8004e1c <_scanf_float+0x84>
 800509e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050a2:	463a      	mov	r2, r7
 80050a4:	4640      	mov	r0, r8
 80050a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050aa:	4798      	blx	r3
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	e7f1      	b.n	8005098 <_scanf_float+0x300>
 80050b4:	46aa      	mov	sl, r5
 80050b6:	9602      	str	r6, [sp, #8]
 80050b8:	e7df      	b.n	800507a <_scanf_float+0x2e2>
 80050ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80050be:	6923      	ldr	r3, [r4, #16]
 80050c0:	2965      	cmp	r1, #101	; 0x65
 80050c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80050c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	d00c      	beq.n	80050e8 <_scanf_float+0x350>
 80050ce:	2945      	cmp	r1, #69	; 0x45
 80050d0:	d00a      	beq.n	80050e8 <_scanf_float+0x350>
 80050d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050d6:	463a      	mov	r2, r7
 80050d8:	4640      	mov	r0, r8
 80050da:	4798      	blx	r3
 80050dc:	6923      	ldr	r3, [r4, #16]
 80050de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	1eb5      	subs	r5, r6, #2
 80050e6:	6123      	str	r3, [r4, #16]
 80050e8:	463a      	mov	r2, r7
 80050ea:	4640      	mov	r0, r8
 80050ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050f0:	4798      	blx	r3
 80050f2:	462e      	mov	r6, r5
 80050f4:	6825      	ldr	r5, [r4, #0]
 80050f6:	f015 0510 	ands.w	r5, r5, #16
 80050fa:	d155      	bne.n	80051a8 <_scanf_float+0x410>
 80050fc:	7035      	strb	r5, [r6, #0]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005108:	d11d      	bne.n	8005146 <_scanf_float+0x3ae>
 800510a:	9b01      	ldr	r3, [sp, #4]
 800510c:	454b      	cmp	r3, r9
 800510e:	eba3 0209 	sub.w	r2, r3, r9
 8005112:	d125      	bne.n	8005160 <_scanf_float+0x3c8>
 8005114:	2200      	movs	r2, #0
 8005116:	4659      	mov	r1, fp
 8005118:	4640      	mov	r0, r8
 800511a:	f002 fce1 	bl	8007ae0 <_strtod_r>
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	f8d4 c000 	ldr.w	ip, [r4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f01c 0f02 	tst.w	ip, #2
 800512a:	4606      	mov	r6, r0
 800512c:	460f      	mov	r7, r1
 800512e:	f103 0204 	add.w	r2, r3, #4
 8005132:	d020      	beq.n	8005176 <_scanf_float+0x3de>
 8005134:	9903      	ldr	r1, [sp, #12]
 8005136:	600a      	str	r2, [r1, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	e9c3 6700 	strd	r6, r7, [r3]
 800513e:	68e3      	ldr	r3, [r4, #12]
 8005140:	3301      	adds	r3, #1
 8005142:	60e3      	str	r3, [r4, #12]
 8005144:	e66b      	b.n	8004e1e <_scanf_float+0x86>
 8005146:	9b04      	ldr	r3, [sp, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0e3      	beq.n	8005114 <_scanf_float+0x37c>
 800514c:	9905      	ldr	r1, [sp, #20]
 800514e:	230a      	movs	r3, #10
 8005150:	462a      	mov	r2, r5
 8005152:	4640      	mov	r0, r8
 8005154:	3101      	adds	r1, #1
 8005156:	f7ff f9b5 	bl	80044c4 <_strtol_r>
 800515a:	9b04      	ldr	r3, [sp, #16]
 800515c:	9e05      	ldr	r6, [sp, #20]
 800515e:	1ac2      	subs	r2, r0, r3
 8005160:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005164:	429e      	cmp	r6, r3
 8005166:	bf28      	it	cs
 8005168:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800516c:	4630      	mov	r0, r6
 800516e:	490f      	ldr	r1, [pc, #60]	; (80051ac <_scanf_float+0x414>)
 8005170:	f000 f916 	bl	80053a0 <siprintf>
 8005174:	e7ce      	b.n	8005114 <_scanf_float+0x37c>
 8005176:	f01c 0f04 	tst.w	ip, #4
 800517a:	d1db      	bne.n	8005134 <_scanf_float+0x39c>
 800517c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005180:	f8cc 2000 	str.w	r2, [ip]
 8005184:	f8d3 8000 	ldr.w	r8, [r3]
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	f7fb fc48 	bl	8000a20 <__aeabi_dcmpun>
 8005190:	b128      	cbz	r0, 800519e <_scanf_float+0x406>
 8005192:	4807      	ldr	r0, [pc, #28]	; (80051b0 <_scanf_float+0x418>)
 8005194:	f000 fa64 	bl	8005660 <nanf>
 8005198:	f8c8 0000 	str.w	r0, [r8]
 800519c:	e7cf      	b.n	800513e <_scanf_float+0x3a6>
 800519e:	4630      	mov	r0, r6
 80051a0:	4639      	mov	r1, r7
 80051a2:	f7fb fc9b 	bl	8000adc <__aeabi_d2f>
 80051a6:	e7f7      	b.n	8005198 <_scanf_float+0x400>
 80051a8:	2500      	movs	r5, #0
 80051aa:	e638      	b.n	8004e1e <_scanf_float+0x86>
 80051ac:	08008e14 	.word	0x08008e14
 80051b0:	08008cb4 	.word	0x08008cb4

080051b4 <std>:
 80051b4:	2300      	movs	r3, #0
 80051b6:	b510      	push	{r4, lr}
 80051b8:	4604      	mov	r4, r0
 80051ba:	e9c0 3300 	strd	r3, r3, [r0]
 80051be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051c2:	6083      	str	r3, [r0, #8]
 80051c4:	8181      	strh	r1, [r0, #12]
 80051c6:	6643      	str	r3, [r0, #100]	; 0x64
 80051c8:	81c2      	strh	r2, [r0, #14]
 80051ca:	6183      	str	r3, [r0, #24]
 80051cc:	4619      	mov	r1, r3
 80051ce:	2208      	movs	r2, #8
 80051d0:	305c      	adds	r0, #92	; 0x5c
 80051d2:	f000 f948 	bl	8005466 <memset>
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <std+0x58>)
 80051d8:	6224      	str	r4, [r4, #32]
 80051da:	6263      	str	r3, [r4, #36]	; 0x24
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <std+0x5c>)
 80051de:	62a3      	str	r3, [r4, #40]	; 0x28
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <std+0x60>)
 80051e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <std+0x64>)
 80051e6:	6323      	str	r3, [r4, #48]	; 0x30
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <std+0x68>)
 80051ea:	429c      	cmp	r4, r3
 80051ec:	d006      	beq.n	80051fc <std+0x48>
 80051ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80051f2:	4294      	cmp	r4, r2
 80051f4:	d002      	beq.n	80051fc <std+0x48>
 80051f6:	33d0      	adds	r3, #208	; 0xd0
 80051f8:	429c      	cmp	r4, r3
 80051fa:	d105      	bne.n	8005208 <std+0x54>
 80051fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005204:	f000 ba1a 	b.w	800563c <__retarget_lock_init_recursive>
 8005208:	bd10      	pop	{r4, pc}
 800520a:	bf00      	nop
 800520c:	080053e1 	.word	0x080053e1
 8005210:	08005403 	.word	0x08005403
 8005214:	0800543b 	.word	0x0800543b
 8005218:	0800545f 	.word	0x0800545f
 800521c:	200005f0 	.word	0x200005f0

08005220 <stdio_exit_handler>:
 8005220:	4a02      	ldr	r2, [pc, #8]	; (800522c <stdio_exit_handler+0xc>)
 8005222:	4903      	ldr	r1, [pc, #12]	; (8005230 <stdio_exit_handler+0x10>)
 8005224:	4803      	ldr	r0, [pc, #12]	; (8005234 <stdio_exit_handler+0x14>)
 8005226:	f000 b869 	b.w	80052fc <_fwalk_sglue>
 800522a:	bf00      	nop
 800522c:	2000001c 	.word	0x2000001c
 8005230:	08007ea1 	.word	0x08007ea1
 8005234:	20000028 	.word	0x20000028

08005238 <cleanup_stdio>:
 8005238:	6841      	ldr	r1, [r0, #4]
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <cleanup_stdio+0x34>)
 800523c:	b510      	push	{r4, lr}
 800523e:	4299      	cmp	r1, r3
 8005240:	4604      	mov	r4, r0
 8005242:	d001      	beq.n	8005248 <cleanup_stdio+0x10>
 8005244:	f002 fe2c 	bl	8007ea0 <_fflush_r>
 8005248:	68a1      	ldr	r1, [r4, #8]
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <cleanup_stdio+0x38>)
 800524c:	4299      	cmp	r1, r3
 800524e:	d002      	beq.n	8005256 <cleanup_stdio+0x1e>
 8005250:	4620      	mov	r0, r4
 8005252:	f002 fe25 	bl	8007ea0 <_fflush_r>
 8005256:	68e1      	ldr	r1, [r4, #12]
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <cleanup_stdio+0x3c>)
 800525a:	4299      	cmp	r1, r3
 800525c:	d004      	beq.n	8005268 <cleanup_stdio+0x30>
 800525e:	4620      	mov	r0, r4
 8005260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005264:	f002 be1c 	b.w	8007ea0 <_fflush_r>
 8005268:	bd10      	pop	{r4, pc}
 800526a:	bf00      	nop
 800526c:	200005f0 	.word	0x200005f0
 8005270:	20000658 	.word	0x20000658
 8005274:	200006c0 	.word	0x200006c0

08005278 <global_stdio_init.part.0>:
 8005278:	b510      	push	{r4, lr}
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <global_stdio_init.part.0+0x30>)
 800527c:	4c0b      	ldr	r4, [pc, #44]	; (80052ac <global_stdio_init.part.0+0x34>)
 800527e:	4a0c      	ldr	r2, [pc, #48]	; (80052b0 <global_stdio_init.part.0+0x38>)
 8005280:	4620      	mov	r0, r4
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	2104      	movs	r1, #4
 8005286:	2200      	movs	r2, #0
 8005288:	f7ff ff94 	bl	80051b4 <std>
 800528c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005290:	2201      	movs	r2, #1
 8005292:	2109      	movs	r1, #9
 8005294:	f7ff ff8e 	bl	80051b4 <std>
 8005298:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800529c:	2202      	movs	r2, #2
 800529e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a2:	2112      	movs	r1, #18
 80052a4:	f7ff bf86 	b.w	80051b4 <std>
 80052a8:	20000728 	.word	0x20000728
 80052ac:	200005f0 	.word	0x200005f0
 80052b0:	08005221 	.word	0x08005221

080052b4 <__sfp_lock_acquire>:
 80052b4:	4801      	ldr	r0, [pc, #4]	; (80052bc <__sfp_lock_acquire+0x8>)
 80052b6:	f000 b9c2 	b.w	800563e <__retarget_lock_acquire_recursive>
 80052ba:	bf00      	nop
 80052bc:	20000731 	.word	0x20000731

080052c0 <__sfp_lock_release>:
 80052c0:	4801      	ldr	r0, [pc, #4]	; (80052c8 <__sfp_lock_release+0x8>)
 80052c2:	f000 b9bd 	b.w	8005640 <__retarget_lock_release_recursive>
 80052c6:	bf00      	nop
 80052c8:	20000731 	.word	0x20000731

080052cc <__sinit>:
 80052cc:	b510      	push	{r4, lr}
 80052ce:	4604      	mov	r4, r0
 80052d0:	f7ff fff0 	bl	80052b4 <__sfp_lock_acquire>
 80052d4:	6a23      	ldr	r3, [r4, #32]
 80052d6:	b11b      	cbz	r3, 80052e0 <__sinit+0x14>
 80052d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052dc:	f7ff bff0 	b.w	80052c0 <__sfp_lock_release>
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <__sinit+0x28>)
 80052e2:	6223      	str	r3, [r4, #32]
 80052e4:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <__sinit+0x2c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1f5      	bne.n	80052d8 <__sinit+0xc>
 80052ec:	f7ff ffc4 	bl	8005278 <global_stdio_init.part.0>
 80052f0:	e7f2      	b.n	80052d8 <__sinit+0xc>
 80052f2:	bf00      	nop
 80052f4:	08005239 	.word	0x08005239
 80052f8:	20000728 	.word	0x20000728

080052fc <_fwalk_sglue>:
 80052fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005300:	4607      	mov	r7, r0
 8005302:	4688      	mov	r8, r1
 8005304:	4614      	mov	r4, r2
 8005306:	2600      	movs	r6, #0
 8005308:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800530c:	f1b9 0901 	subs.w	r9, r9, #1
 8005310:	d505      	bpl.n	800531e <_fwalk_sglue+0x22>
 8005312:	6824      	ldr	r4, [r4, #0]
 8005314:	2c00      	cmp	r4, #0
 8005316:	d1f7      	bne.n	8005308 <_fwalk_sglue+0xc>
 8005318:	4630      	mov	r0, r6
 800531a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800531e:	89ab      	ldrh	r3, [r5, #12]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d907      	bls.n	8005334 <_fwalk_sglue+0x38>
 8005324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005328:	3301      	adds	r3, #1
 800532a:	d003      	beq.n	8005334 <_fwalk_sglue+0x38>
 800532c:	4629      	mov	r1, r5
 800532e:	4638      	mov	r0, r7
 8005330:	47c0      	blx	r8
 8005332:	4306      	orrs	r6, r0
 8005334:	3568      	adds	r5, #104	; 0x68
 8005336:	e7e9      	b.n	800530c <_fwalk_sglue+0x10>

08005338 <sniprintf>:
 8005338:	b40c      	push	{r2, r3}
 800533a:	b530      	push	{r4, r5, lr}
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <sniprintf+0x64>)
 800533e:	1e0c      	subs	r4, r1, #0
 8005340:	681d      	ldr	r5, [r3, #0]
 8005342:	b09d      	sub	sp, #116	; 0x74
 8005344:	da08      	bge.n	8005358 <sniprintf+0x20>
 8005346:	238b      	movs	r3, #139	; 0x8b
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	b01d      	add	sp, #116	; 0x74
 8005350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005354:	b002      	add	sp, #8
 8005356:	4770      	bx	lr
 8005358:	f44f 7302 	mov.w	r3, #520	; 0x208
 800535c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005360:	bf0c      	ite	eq
 8005362:	4623      	moveq	r3, r4
 8005364:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005368:	9304      	str	r3, [sp, #16]
 800536a:	9307      	str	r3, [sp, #28]
 800536c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005370:	9002      	str	r0, [sp, #8]
 8005372:	9006      	str	r0, [sp, #24]
 8005374:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005378:	4628      	mov	r0, r5
 800537a:	ab21      	add	r3, sp, #132	; 0x84
 800537c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800537e:	a902      	add	r1, sp, #8
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	f002 fc0d 	bl	8007ba0 <_svfiprintf_r>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	bfbc      	itt	lt
 800538a:	238b      	movlt	r3, #139	; 0x8b
 800538c:	602b      	strlt	r3, [r5, #0]
 800538e:	2c00      	cmp	r4, #0
 8005390:	d0dd      	beq.n	800534e <sniprintf+0x16>
 8005392:	2200      	movs	r2, #0
 8005394:	9b02      	ldr	r3, [sp, #8]
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	e7d9      	b.n	800534e <sniprintf+0x16>
 800539a:	bf00      	nop
 800539c:	20000074 	.word	0x20000074

080053a0 <siprintf>:
 80053a0:	b40e      	push	{r1, r2, r3}
 80053a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053a6:	b500      	push	{lr}
 80053a8:	b09c      	sub	sp, #112	; 0x70
 80053aa:	ab1d      	add	r3, sp, #116	; 0x74
 80053ac:	9002      	str	r0, [sp, #8]
 80053ae:	9006      	str	r0, [sp, #24]
 80053b0:	9107      	str	r1, [sp, #28]
 80053b2:	9104      	str	r1, [sp, #16]
 80053b4:	4808      	ldr	r0, [pc, #32]	; (80053d8 <siprintf+0x38>)
 80053b6:	4909      	ldr	r1, [pc, #36]	; (80053dc <siprintf+0x3c>)
 80053b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053bc:	9105      	str	r1, [sp, #20]
 80053be:	6800      	ldr	r0, [r0, #0]
 80053c0:	a902      	add	r1, sp, #8
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	f002 fbec 	bl	8007ba0 <_svfiprintf_r>
 80053c8:	2200      	movs	r2, #0
 80053ca:	9b02      	ldr	r3, [sp, #8]
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	b01c      	add	sp, #112	; 0x70
 80053d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053d4:	b003      	add	sp, #12
 80053d6:	4770      	bx	lr
 80053d8:	20000074 	.word	0x20000074
 80053dc:	ffff0208 	.word	0xffff0208

080053e0 <__sread>:
 80053e0:	b510      	push	{r4, lr}
 80053e2:	460c      	mov	r4, r1
 80053e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e8:	f000 f8da 	bl	80055a0 <_read_r>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	bfab      	itete	ge
 80053f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053f2:	89a3      	ldrhlt	r3, [r4, #12]
 80053f4:	181b      	addge	r3, r3, r0
 80053f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053fa:	bfac      	ite	ge
 80053fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80053fe:	81a3      	strhlt	r3, [r4, #12]
 8005400:	bd10      	pop	{r4, pc}

08005402 <__swrite>:
 8005402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005406:	461f      	mov	r7, r3
 8005408:	898b      	ldrh	r3, [r1, #12]
 800540a:	4605      	mov	r5, r0
 800540c:	05db      	lsls	r3, r3, #23
 800540e:	460c      	mov	r4, r1
 8005410:	4616      	mov	r6, r2
 8005412:	d505      	bpl.n	8005420 <__swrite+0x1e>
 8005414:	2302      	movs	r3, #2
 8005416:	2200      	movs	r2, #0
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 f8ae 	bl	800557c <_lseek_r>
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	4632      	mov	r2, r6
 8005424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005428:	81a3      	strh	r3, [r4, #12]
 800542a:	4628      	mov	r0, r5
 800542c:	463b      	mov	r3, r7
 800542e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005436:	f000 b8c5 	b.w	80055c4 <_write_r>

0800543a <__sseek>:
 800543a:	b510      	push	{r4, lr}
 800543c:	460c      	mov	r4, r1
 800543e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005442:	f000 f89b 	bl	800557c <_lseek_r>
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	bf15      	itete	ne
 800544c:	6560      	strne	r0, [r4, #84]	; 0x54
 800544e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005456:	81a3      	strheq	r3, [r4, #12]
 8005458:	bf18      	it	ne
 800545a:	81a3      	strhne	r3, [r4, #12]
 800545c:	bd10      	pop	{r4, pc}

0800545e <__sclose>:
 800545e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005462:	f000 b87b 	b.w	800555c <_close_r>

08005466 <memset>:
 8005466:	4603      	mov	r3, r0
 8005468:	4402      	add	r2, r0
 800546a:	4293      	cmp	r3, r2
 800546c:	d100      	bne.n	8005470 <memset+0xa>
 800546e:	4770      	bx	lr
 8005470:	f803 1b01 	strb.w	r1, [r3], #1
 8005474:	e7f9      	b.n	800546a <memset+0x4>

08005476 <strncpy>:
 8005476:	4603      	mov	r3, r0
 8005478:	b510      	push	{r4, lr}
 800547a:	3901      	subs	r1, #1
 800547c:	b132      	cbz	r2, 800548c <strncpy+0x16>
 800547e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005482:	3a01      	subs	r2, #1
 8005484:	f803 4b01 	strb.w	r4, [r3], #1
 8005488:	2c00      	cmp	r4, #0
 800548a:	d1f7      	bne.n	800547c <strncpy+0x6>
 800548c:	2100      	movs	r1, #0
 800548e:	441a      	add	r2, r3
 8005490:	4293      	cmp	r3, r2
 8005492:	d100      	bne.n	8005496 <strncpy+0x20>
 8005494:	bd10      	pop	{r4, pc}
 8005496:	f803 1b01 	strb.w	r1, [r3], #1
 800549a:	e7f9      	b.n	8005490 <strncpy+0x1a>

0800549c <strtok>:
 800549c:	4b16      	ldr	r3, [pc, #88]	; (80054f8 <strtok+0x5c>)
 800549e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a2:	681f      	ldr	r7, [r3, #0]
 80054a4:	4605      	mov	r5, r0
 80054a6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80054a8:	460e      	mov	r6, r1
 80054aa:	b9ec      	cbnz	r4, 80054e8 <strtok+0x4c>
 80054ac:	2050      	movs	r0, #80	; 0x50
 80054ae:	f000 ffaf 	bl	8006410 <malloc>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6478      	str	r0, [r7, #68]	; 0x44
 80054b6:	b920      	cbnz	r0, 80054c2 <strtok+0x26>
 80054b8:	215b      	movs	r1, #91	; 0x5b
 80054ba:	4b10      	ldr	r3, [pc, #64]	; (80054fc <strtok+0x60>)
 80054bc:	4810      	ldr	r0, [pc, #64]	; (8005500 <strtok+0x64>)
 80054be:	f000 f8d3 	bl	8005668 <__assert_func>
 80054c2:	e9c0 4400 	strd	r4, r4, [r0]
 80054c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80054ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80054ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80054d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80054d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80054da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80054de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80054e2:	6184      	str	r4, [r0, #24]
 80054e4:	7704      	strb	r4, [r0, #28]
 80054e6:	6244      	str	r4, [r0, #36]	; 0x24
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ee:	2301      	movs	r3, #1
 80054f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	f000 b806 	b.w	8005504 <__strtok_r>
 80054f8:	20000074 	.word	0x20000074
 80054fc:	08008e19 	.word	0x08008e19
 8005500:	08008e30 	.word	0x08008e30

08005504 <__strtok_r>:
 8005504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005506:	b908      	cbnz	r0, 800550c <__strtok_r+0x8>
 8005508:	6810      	ldr	r0, [r2, #0]
 800550a:	b188      	cbz	r0, 8005530 <__strtok_r+0x2c>
 800550c:	4604      	mov	r4, r0
 800550e:	460f      	mov	r7, r1
 8005510:	4620      	mov	r0, r4
 8005512:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005516:	f817 6b01 	ldrb.w	r6, [r7], #1
 800551a:	b91e      	cbnz	r6, 8005524 <__strtok_r+0x20>
 800551c:	b965      	cbnz	r5, 8005538 <__strtok_r+0x34>
 800551e:	4628      	mov	r0, r5
 8005520:	6015      	str	r5, [r2, #0]
 8005522:	e005      	b.n	8005530 <__strtok_r+0x2c>
 8005524:	42b5      	cmp	r5, r6
 8005526:	d1f6      	bne.n	8005516 <__strtok_r+0x12>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f0      	bne.n	800550e <__strtok_r+0xa>
 800552c:	6014      	str	r4, [r2, #0]
 800552e:	7003      	strb	r3, [r0, #0]
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005532:	461c      	mov	r4, r3
 8005534:	e00c      	b.n	8005550 <__strtok_r+0x4c>
 8005536:	b915      	cbnz	r5, 800553e <__strtok_r+0x3a>
 8005538:	460e      	mov	r6, r1
 800553a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800553e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005542:	42ab      	cmp	r3, r5
 8005544:	d1f7      	bne.n	8005536 <__strtok_r+0x32>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f3      	beq.n	8005532 <__strtok_r+0x2e>
 800554a:	2300      	movs	r3, #0
 800554c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005550:	6014      	str	r4, [r2, #0]
 8005552:	e7ed      	b.n	8005530 <__strtok_r+0x2c>

08005554 <_localeconv_r>:
 8005554:	4800      	ldr	r0, [pc, #0]	; (8005558 <_localeconv_r+0x4>)
 8005556:	4770      	bx	lr
 8005558:	20000168 	.word	0x20000168

0800555c <_close_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	2300      	movs	r3, #0
 8005560:	4d05      	ldr	r5, [pc, #20]	; (8005578 <_close_r+0x1c>)
 8005562:	4604      	mov	r4, r0
 8005564:	4608      	mov	r0, r1
 8005566:	602b      	str	r3, [r5, #0]
 8005568:	f7fc fbc6 	bl	8001cf8 <_close>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_close_r+0x1a>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_close_r+0x1a>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	2000072c 	.word	0x2000072c

0800557c <_lseek_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4604      	mov	r4, r0
 8005580:	4608      	mov	r0, r1
 8005582:	4611      	mov	r1, r2
 8005584:	2200      	movs	r2, #0
 8005586:	4d05      	ldr	r5, [pc, #20]	; (800559c <_lseek_r+0x20>)
 8005588:	602a      	str	r2, [r5, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fc fbbe 	bl	8001d0c <_lseek>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_lseek_r+0x1e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_lseek_r+0x1e>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	2000072c 	.word	0x2000072c

080055a0 <_read_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4604      	mov	r4, r0
 80055a4:	4608      	mov	r0, r1
 80055a6:	4611      	mov	r1, r2
 80055a8:	2200      	movs	r2, #0
 80055aa:	4d05      	ldr	r5, [pc, #20]	; (80055c0 <_read_r+0x20>)
 80055ac:	602a      	str	r2, [r5, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f7fc fb86 	bl	8001cc0 <_read>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_read_r+0x1e>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b103      	cbz	r3, 80055be <_read_r+0x1e>
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	2000072c 	.word	0x2000072c

080055c4 <_write_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	4611      	mov	r1, r2
 80055cc:	2200      	movs	r2, #0
 80055ce:	4d05      	ldr	r5, [pc, #20]	; (80055e4 <_write_r+0x20>)
 80055d0:	602a      	str	r2, [r5, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	f7fc fb82 	bl	8001cdc <_write>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_write_r+0x1e>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_write_r+0x1e>
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	2000072c 	.word	0x2000072c

080055e8 <__errno>:
 80055e8:	4b01      	ldr	r3, [pc, #4]	; (80055f0 <__errno+0x8>)
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000074 	.word	0x20000074

080055f4 <__libc_init_array>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	2600      	movs	r6, #0
 80055f8:	4d0c      	ldr	r5, [pc, #48]	; (800562c <__libc_init_array+0x38>)
 80055fa:	4c0d      	ldr	r4, [pc, #52]	; (8005630 <__libc_init_array+0x3c>)
 80055fc:	1b64      	subs	r4, r4, r5
 80055fe:	10a4      	asrs	r4, r4, #2
 8005600:	42a6      	cmp	r6, r4
 8005602:	d109      	bne.n	8005618 <__libc_init_array+0x24>
 8005604:	f003 fb40 	bl	8008c88 <_init>
 8005608:	2600      	movs	r6, #0
 800560a:	4d0a      	ldr	r5, [pc, #40]	; (8005634 <__libc_init_array+0x40>)
 800560c:	4c0a      	ldr	r4, [pc, #40]	; (8005638 <__libc_init_array+0x44>)
 800560e:	1b64      	subs	r4, r4, r5
 8005610:	10a4      	asrs	r4, r4, #2
 8005612:	42a6      	cmp	r6, r4
 8005614:	d105      	bne.n	8005622 <__libc_init_array+0x2e>
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	f855 3b04 	ldr.w	r3, [r5], #4
 800561c:	4798      	blx	r3
 800561e:	3601      	adds	r6, #1
 8005620:	e7ee      	b.n	8005600 <__libc_init_array+0xc>
 8005622:	f855 3b04 	ldr.w	r3, [r5], #4
 8005626:	4798      	blx	r3
 8005628:	3601      	adds	r6, #1
 800562a:	e7f2      	b.n	8005612 <__libc_init_array+0x1e>
 800562c:	08009164 	.word	0x08009164
 8005630:	08009164 	.word	0x08009164
 8005634:	08009164 	.word	0x08009164
 8005638:	08009168 	.word	0x08009168

0800563c <__retarget_lock_init_recursive>:
 800563c:	4770      	bx	lr

0800563e <__retarget_lock_acquire_recursive>:
 800563e:	4770      	bx	lr

08005640 <__retarget_lock_release_recursive>:
 8005640:	4770      	bx	lr

08005642 <memchr>:
 8005642:	4603      	mov	r3, r0
 8005644:	b510      	push	{r4, lr}
 8005646:	b2c9      	uxtb	r1, r1
 8005648:	4402      	add	r2, r0
 800564a:	4293      	cmp	r3, r2
 800564c:	4618      	mov	r0, r3
 800564e:	d101      	bne.n	8005654 <memchr+0x12>
 8005650:	2000      	movs	r0, #0
 8005652:	e003      	b.n	800565c <memchr+0x1a>
 8005654:	7804      	ldrb	r4, [r0, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	428c      	cmp	r4, r1
 800565a:	d1f6      	bne.n	800564a <memchr+0x8>
 800565c:	bd10      	pop	{r4, pc}
	...

08005660 <nanf>:
 8005660:	4800      	ldr	r0, [pc, #0]	; (8005664 <nanf+0x4>)
 8005662:	4770      	bx	lr
 8005664:	7fc00000 	.word	0x7fc00000

08005668 <__assert_func>:
 8005668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800566a:	4614      	mov	r4, r2
 800566c:	461a      	mov	r2, r3
 800566e:	4b09      	ldr	r3, [pc, #36]	; (8005694 <__assert_func+0x2c>)
 8005670:	4605      	mov	r5, r0
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68d8      	ldr	r0, [r3, #12]
 8005676:	b14c      	cbz	r4, 800568c <__assert_func+0x24>
 8005678:	4b07      	ldr	r3, [pc, #28]	; (8005698 <__assert_func+0x30>)
 800567a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800567e:	9100      	str	r1, [sp, #0]
 8005680:	462b      	mov	r3, r5
 8005682:	4906      	ldr	r1, [pc, #24]	; (800569c <__assert_func+0x34>)
 8005684:	f002 fc34 	bl	8007ef0 <fiprintf>
 8005688:	f002 fc94 	bl	8007fb4 <abort>
 800568c:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <__assert_func+0x38>)
 800568e:	461c      	mov	r4, r3
 8005690:	e7f3      	b.n	800567a <__assert_func+0x12>
 8005692:	bf00      	nop
 8005694:	20000074 	.word	0x20000074
 8005698:	08008e8a 	.word	0x08008e8a
 800569c:	08008e97 	.word	0x08008e97
 80056a0:	08008cb4 	.word	0x08008cb4

080056a4 <quorem>:
 80056a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a8:	6903      	ldr	r3, [r0, #16]
 80056aa:	690c      	ldr	r4, [r1, #16]
 80056ac:	4607      	mov	r7, r0
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	db7f      	blt.n	80057b2 <quorem+0x10e>
 80056b2:	3c01      	subs	r4, #1
 80056b4:	f100 0514 	add.w	r5, r0, #20
 80056b8:	f101 0814 	add.w	r8, r1, #20
 80056bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056ca:	3301      	adds	r3, #1
 80056cc:	429a      	cmp	r2, r3
 80056ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80056d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056da:	d331      	bcc.n	8005740 <quorem+0x9c>
 80056dc:	f04f 0e00 	mov.w	lr, #0
 80056e0:	4640      	mov	r0, r8
 80056e2:	46ac      	mov	ip, r5
 80056e4:	46f2      	mov	sl, lr
 80056e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80056ea:	b293      	uxth	r3, r2
 80056ec:	fb06 e303 	mla	r3, r6, r3, lr
 80056f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056f4:	0c1a      	lsrs	r2, r3, #16
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	fb06 220e 	mla	r2, r6, lr, r2
 80056fc:	ebaa 0303 	sub.w	r3, sl, r3
 8005700:	f8dc a000 	ldr.w	sl, [ip]
 8005704:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005708:	fa1f fa8a 	uxth.w	sl, sl
 800570c:	4453      	add	r3, sl
 800570e:	f8dc a000 	ldr.w	sl, [ip]
 8005712:	b292      	uxth	r2, r2
 8005714:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800571c:	b29b      	uxth	r3, r3
 800571e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005722:	4581      	cmp	r9, r0
 8005724:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005728:	f84c 3b04 	str.w	r3, [ip], #4
 800572c:	d2db      	bcs.n	80056e6 <quorem+0x42>
 800572e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005732:	b92b      	cbnz	r3, 8005740 <quorem+0x9c>
 8005734:	9b01      	ldr	r3, [sp, #4]
 8005736:	3b04      	subs	r3, #4
 8005738:	429d      	cmp	r5, r3
 800573a:	461a      	mov	r2, r3
 800573c:	d32d      	bcc.n	800579a <quorem+0xf6>
 800573e:	613c      	str	r4, [r7, #16]
 8005740:	4638      	mov	r0, r7
 8005742:	f001 f9dd 	bl	8006b00 <__mcmp>
 8005746:	2800      	cmp	r0, #0
 8005748:	db23      	blt.n	8005792 <quorem+0xee>
 800574a:	4629      	mov	r1, r5
 800574c:	2000      	movs	r0, #0
 800574e:	3601      	adds	r6, #1
 8005750:	f858 2b04 	ldr.w	r2, [r8], #4
 8005754:	f8d1 c000 	ldr.w	ip, [r1]
 8005758:	b293      	uxth	r3, r2
 800575a:	1ac3      	subs	r3, r0, r3
 800575c:	0c12      	lsrs	r2, r2, #16
 800575e:	fa1f f08c 	uxth.w	r0, ip
 8005762:	4403      	add	r3, r0
 8005764:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800576c:	b29b      	uxth	r3, r3
 800576e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005772:	45c1      	cmp	r9, r8
 8005774:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005778:	f841 3b04 	str.w	r3, [r1], #4
 800577c:	d2e8      	bcs.n	8005750 <quorem+0xac>
 800577e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005786:	b922      	cbnz	r2, 8005792 <quorem+0xee>
 8005788:	3b04      	subs	r3, #4
 800578a:	429d      	cmp	r5, r3
 800578c:	461a      	mov	r2, r3
 800578e:	d30a      	bcc.n	80057a6 <quorem+0x102>
 8005790:	613c      	str	r4, [r7, #16]
 8005792:	4630      	mov	r0, r6
 8005794:	b003      	add	sp, #12
 8005796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	3b04      	subs	r3, #4
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d1cd      	bne.n	800573e <quorem+0x9a>
 80057a2:	3c01      	subs	r4, #1
 80057a4:	e7c8      	b.n	8005738 <quorem+0x94>
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	3b04      	subs	r3, #4
 80057aa:	2a00      	cmp	r2, #0
 80057ac:	d1f0      	bne.n	8005790 <quorem+0xec>
 80057ae:	3c01      	subs	r4, #1
 80057b0:	e7eb      	b.n	800578a <quorem+0xe6>
 80057b2:	2000      	movs	r0, #0
 80057b4:	e7ee      	b.n	8005794 <quorem+0xf0>
	...

080057b8 <_dtoa_r>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	4616      	mov	r6, r2
 80057be:	461f      	mov	r7, r3
 80057c0:	69c4      	ldr	r4, [r0, #28]
 80057c2:	b099      	sub	sp, #100	; 0x64
 80057c4:	4605      	mov	r5, r0
 80057c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80057ce:	b974      	cbnz	r4, 80057ee <_dtoa_r+0x36>
 80057d0:	2010      	movs	r0, #16
 80057d2:	f000 fe1d 	bl	8006410 <malloc>
 80057d6:	4602      	mov	r2, r0
 80057d8:	61e8      	str	r0, [r5, #28]
 80057da:	b920      	cbnz	r0, 80057e6 <_dtoa_r+0x2e>
 80057dc:	21ef      	movs	r1, #239	; 0xef
 80057de:	4bac      	ldr	r3, [pc, #688]	; (8005a90 <_dtoa_r+0x2d8>)
 80057e0:	48ac      	ldr	r0, [pc, #688]	; (8005a94 <_dtoa_r+0x2dc>)
 80057e2:	f7ff ff41 	bl	8005668 <__assert_func>
 80057e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057ea:	6004      	str	r4, [r0, #0]
 80057ec:	60c4      	str	r4, [r0, #12]
 80057ee:	69eb      	ldr	r3, [r5, #28]
 80057f0:	6819      	ldr	r1, [r3, #0]
 80057f2:	b151      	cbz	r1, 800580a <_dtoa_r+0x52>
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	2301      	movs	r3, #1
 80057f8:	4093      	lsls	r3, r2
 80057fa:	604a      	str	r2, [r1, #4]
 80057fc:	608b      	str	r3, [r1, #8]
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 fefa 	bl	80065f8 <_Bfree>
 8005804:	2200      	movs	r2, #0
 8005806:	69eb      	ldr	r3, [r5, #28]
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	1e3b      	subs	r3, r7, #0
 800580c:	bfaf      	iteee	ge
 800580e:	2300      	movge	r3, #0
 8005810:	2201      	movlt	r2, #1
 8005812:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005816:	9305      	strlt	r3, [sp, #20]
 8005818:	bfa8      	it	ge
 800581a:	f8c8 3000 	strge.w	r3, [r8]
 800581e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005822:	4b9d      	ldr	r3, [pc, #628]	; (8005a98 <_dtoa_r+0x2e0>)
 8005824:	bfb8      	it	lt
 8005826:	f8c8 2000 	strlt.w	r2, [r8]
 800582a:	ea33 0309 	bics.w	r3, r3, r9
 800582e:	d119      	bne.n	8005864 <_dtoa_r+0xac>
 8005830:	f242 730f 	movw	r3, #9999	; 0x270f
 8005834:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800583c:	4333      	orrs	r3, r6
 800583e:	f000 8589 	beq.w	8006354 <_dtoa_r+0xb9c>
 8005842:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005844:	b953      	cbnz	r3, 800585c <_dtoa_r+0xa4>
 8005846:	4b95      	ldr	r3, [pc, #596]	; (8005a9c <_dtoa_r+0x2e4>)
 8005848:	e023      	b.n	8005892 <_dtoa_r+0xda>
 800584a:	4b95      	ldr	r3, [pc, #596]	; (8005aa0 <_dtoa_r+0x2e8>)
 800584c:	9303      	str	r3, [sp, #12]
 800584e:	3308      	adds	r3, #8
 8005850:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	9803      	ldr	r0, [sp, #12]
 8005856:	b019      	add	sp, #100	; 0x64
 8005858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585c:	4b8f      	ldr	r3, [pc, #572]	; (8005a9c <_dtoa_r+0x2e4>)
 800585e:	9303      	str	r3, [sp, #12]
 8005860:	3303      	adds	r3, #3
 8005862:	e7f5      	b.n	8005850 <_dtoa_r+0x98>
 8005864:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005868:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800586c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005870:	2200      	movs	r2, #0
 8005872:	2300      	movs	r3, #0
 8005874:	f7fb f8a2 	bl	80009bc <__aeabi_dcmpeq>
 8005878:	4680      	mov	r8, r0
 800587a:	b160      	cbz	r0, 8005896 <_dtoa_r+0xde>
 800587c:	2301      	movs	r3, #1
 800587e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8562 	beq.w	800634e <_dtoa_r+0xb96>
 800588a:	4b86      	ldr	r3, [pc, #536]	; (8005aa4 <_dtoa_r+0x2ec>)
 800588c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	3b01      	subs	r3, #1
 8005892:	9303      	str	r3, [sp, #12]
 8005894:	e7de      	b.n	8005854 <_dtoa_r+0x9c>
 8005896:	ab16      	add	r3, sp, #88	; 0x58
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	ab17      	add	r3, sp, #92	; 0x5c
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	4628      	mov	r0, r5
 80058a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058a4:	f001 fa3c 	bl	8006d20 <__d2b>
 80058a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80058ac:	4682      	mov	sl, r0
 80058ae:	2c00      	cmp	r4, #0
 80058b0:	d07e      	beq.n	80059b0 <_dtoa_r+0x1f8>
 80058b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80058bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80058c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80058c8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80058cc:	4619      	mov	r1, r3
 80058ce:	2200      	movs	r2, #0
 80058d0:	4b75      	ldr	r3, [pc, #468]	; (8005aa8 <_dtoa_r+0x2f0>)
 80058d2:	f7fa fc53 	bl	800017c <__aeabi_dsub>
 80058d6:	a368      	add	r3, pc, #416	; (adr r3, 8005a78 <_dtoa_r+0x2c0>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fa fe06 	bl	80004ec <__aeabi_dmul>
 80058e0:	a367      	add	r3, pc, #412	; (adr r3, 8005a80 <_dtoa_r+0x2c8>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fc4b 	bl	8000180 <__adddf3>
 80058ea:	4606      	mov	r6, r0
 80058ec:	4620      	mov	r0, r4
 80058ee:	460f      	mov	r7, r1
 80058f0:	f7fa fd92 	bl	8000418 <__aeabi_i2d>
 80058f4:	a364      	add	r3, pc, #400	; (adr r3, 8005a88 <_dtoa_r+0x2d0>)
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f7fa fdf7 	bl	80004ec <__aeabi_dmul>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4630      	mov	r0, r6
 8005904:	4639      	mov	r1, r7
 8005906:	f7fa fc3b 	bl	8000180 <__adddf3>
 800590a:	4606      	mov	r6, r0
 800590c:	460f      	mov	r7, r1
 800590e:	f7fb f89d 	bl	8000a4c <__aeabi_d2iz>
 8005912:	2200      	movs	r2, #0
 8005914:	4683      	mov	fp, r0
 8005916:	2300      	movs	r3, #0
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fb f858 	bl	80009d0 <__aeabi_dcmplt>
 8005920:	b148      	cbz	r0, 8005936 <_dtoa_r+0x17e>
 8005922:	4658      	mov	r0, fp
 8005924:	f7fa fd78 	bl	8000418 <__aeabi_i2d>
 8005928:	4632      	mov	r2, r6
 800592a:	463b      	mov	r3, r7
 800592c:	f7fb f846 	bl	80009bc <__aeabi_dcmpeq>
 8005930:	b908      	cbnz	r0, 8005936 <_dtoa_r+0x17e>
 8005932:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005936:	f1bb 0f16 	cmp.w	fp, #22
 800593a:	d857      	bhi.n	80059ec <_dtoa_r+0x234>
 800593c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005940:	4b5a      	ldr	r3, [pc, #360]	; (8005aac <_dtoa_r+0x2f4>)
 8005942:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f7fb f841 	bl	80009d0 <__aeabi_dcmplt>
 800594e:	2800      	cmp	r0, #0
 8005950:	d04e      	beq.n	80059f0 <_dtoa_r+0x238>
 8005952:	2300      	movs	r3, #0
 8005954:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005958:	930f      	str	r3, [sp, #60]	; 0x3c
 800595a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800595c:	1b1b      	subs	r3, r3, r4
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	bf46      	itte	mi
 8005962:	f1c3 0901 	rsbmi	r9, r3, #1
 8005966:	2300      	movmi	r3, #0
 8005968:	f04f 0900 	movpl.w	r9, #0
 800596c:	9209      	str	r2, [sp, #36]	; 0x24
 800596e:	bf48      	it	mi
 8005970:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005972:	f1bb 0f00 	cmp.w	fp, #0
 8005976:	db3d      	blt.n	80059f4 <_dtoa_r+0x23c>
 8005978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800597e:	445b      	add	r3, fp
 8005980:	9309      	str	r3, [sp, #36]	; 0x24
 8005982:	2300      	movs	r3, #0
 8005984:	930a      	str	r3, [sp, #40]	; 0x28
 8005986:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005988:	2b09      	cmp	r3, #9
 800598a:	d867      	bhi.n	8005a5c <_dtoa_r+0x2a4>
 800598c:	2b05      	cmp	r3, #5
 800598e:	bfc4      	itt	gt
 8005990:	3b04      	subgt	r3, #4
 8005992:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005994:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005996:	bfc8      	it	gt
 8005998:	2400      	movgt	r4, #0
 800599a:	f1a3 0302 	sub.w	r3, r3, #2
 800599e:	bfd8      	it	le
 80059a0:	2401      	movle	r4, #1
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	f200 8086 	bhi.w	8005ab4 <_dtoa_r+0x2fc>
 80059a8:	e8df f003 	tbb	[pc, r3]
 80059ac:	5637392c 	.word	0x5637392c
 80059b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80059b4:	441c      	add	r4, r3
 80059b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	bfc1      	itttt	gt
 80059be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059c2:	fa09 f903 	lslgt.w	r9, r9, r3
 80059c6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80059ca:	fa26 f303 	lsrgt.w	r3, r6, r3
 80059ce:	bfd6      	itet	le
 80059d0:	f1c3 0320 	rsble	r3, r3, #32
 80059d4:	ea49 0003 	orrgt.w	r0, r9, r3
 80059d8:	fa06 f003 	lslle.w	r0, r6, r3
 80059dc:	f7fa fd0c 	bl	80003f8 <__aeabi_ui2d>
 80059e0:	2201      	movs	r2, #1
 80059e2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80059e6:	3c01      	subs	r4, #1
 80059e8:	9213      	str	r2, [sp, #76]	; 0x4c
 80059ea:	e76f      	b.n	80058cc <_dtoa_r+0x114>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e7b3      	b.n	8005958 <_dtoa_r+0x1a0>
 80059f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80059f2:	e7b2      	b.n	800595a <_dtoa_r+0x1a2>
 80059f4:	f1cb 0300 	rsb	r3, fp, #0
 80059f8:	930a      	str	r3, [sp, #40]	; 0x28
 80059fa:	2300      	movs	r3, #0
 80059fc:	eba9 090b 	sub.w	r9, r9, fp
 8005a00:	930e      	str	r3, [sp, #56]	; 0x38
 8005a02:	e7c0      	b.n	8005986 <_dtoa_r+0x1ce>
 8005a04:	2300      	movs	r3, #0
 8005a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	dc55      	bgt.n	8005aba <_dtoa_r+0x302>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	461a      	mov	r2, r3
 8005a12:	9306      	str	r3, [sp, #24]
 8005a14:	9308      	str	r3, [sp, #32]
 8005a16:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a18:	e00b      	b.n	8005a32 <_dtoa_r+0x27a>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7f3      	b.n	8005a06 <_dtoa_r+0x24e>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a24:	445b      	add	r3, fp
 8005a26:	9306      	str	r3, [sp, #24]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	9308      	str	r3, [sp, #32]
 8005a2e:	bfb8      	it	lt
 8005a30:	2301      	movlt	r3, #1
 8005a32:	2100      	movs	r1, #0
 8005a34:	2204      	movs	r2, #4
 8005a36:	69e8      	ldr	r0, [r5, #28]
 8005a38:	f102 0614 	add.w	r6, r2, #20
 8005a3c:	429e      	cmp	r6, r3
 8005a3e:	d940      	bls.n	8005ac2 <_dtoa_r+0x30a>
 8005a40:	6041      	str	r1, [r0, #4]
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 fd98 	bl	8006578 <_Balloc>
 8005a48:	9003      	str	r0, [sp, #12]
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d13c      	bne.n	8005ac8 <_dtoa_r+0x310>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	f240 11af 	movw	r1, #431	; 0x1af
 8005a54:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <_dtoa_r+0x2f8>)
 8005a56:	e6c3      	b.n	80057e0 <_dtoa_r+0x28>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e7e1      	b.n	8005a20 <_dtoa_r+0x268>
 8005a5c:	2401      	movs	r4, #1
 8005a5e:	2300      	movs	r3, #0
 8005a60:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a62:	9322      	str	r3, [sp, #136]	; 0x88
 8005a64:	f04f 33ff 	mov.w	r3, #4294967295
 8005a68:	2200      	movs	r2, #0
 8005a6a:	9306      	str	r3, [sp, #24]
 8005a6c:	9308      	str	r3, [sp, #32]
 8005a6e:	2312      	movs	r3, #18
 8005a70:	e7d1      	b.n	8005a16 <_dtoa_r+0x25e>
 8005a72:	bf00      	nop
 8005a74:	f3af 8000 	nop.w
 8005a78:	636f4361 	.word	0x636f4361
 8005a7c:	3fd287a7 	.word	0x3fd287a7
 8005a80:	8b60c8b3 	.word	0x8b60c8b3
 8005a84:	3fc68a28 	.word	0x3fc68a28
 8005a88:	509f79fb 	.word	0x509f79fb
 8005a8c:	3fd34413 	.word	0x3fd34413
 8005a90:	08008e19 	.word	0x08008e19
 8005a94:	08008ed3 	.word	0x08008ed3
 8005a98:	7ff00000 	.word	0x7ff00000
 8005a9c:	08008ecf 	.word	0x08008ecf
 8005aa0:	08008ec6 	.word	0x08008ec6
 8005aa4:	08008df1 	.word	0x08008df1
 8005aa8:	3ff80000 	.word	0x3ff80000
 8005aac:	08008fc0 	.word	0x08008fc0
 8005ab0:	08008f2b 	.word	0x08008f2b
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ab8:	e7d4      	b.n	8005a64 <_dtoa_r+0x2ac>
 8005aba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005abc:	9306      	str	r3, [sp, #24]
 8005abe:	9308      	str	r3, [sp, #32]
 8005ac0:	e7b7      	b.n	8005a32 <_dtoa_r+0x27a>
 8005ac2:	3101      	adds	r1, #1
 8005ac4:	0052      	lsls	r2, r2, #1
 8005ac6:	e7b7      	b.n	8005a38 <_dtoa_r+0x280>
 8005ac8:	69eb      	ldr	r3, [r5, #28]
 8005aca:	9a03      	ldr	r2, [sp, #12]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	9b08      	ldr	r3, [sp, #32]
 8005ad0:	2b0e      	cmp	r3, #14
 8005ad2:	f200 80a8 	bhi.w	8005c26 <_dtoa_r+0x46e>
 8005ad6:	2c00      	cmp	r4, #0
 8005ad8:	f000 80a5 	beq.w	8005c26 <_dtoa_r+0x46e>
 8005adc:	f1bb 0f00 	cmp.w	fp, #0
 8005ae0:	dd34      	ble.n	8005b4c <_dtoa_r+0x394>
 8005ae2:	4b9a      	ldr	r3, [pc, #616]	; (8005d4c <_dtoa_r+0x594>)
 8005ae4:	f00b 020f 	and.w	r2, fp, #15
 8005ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005af0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005af4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005af8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005afc:	d016      	beq.n	8005b2c <_dtoa_r+0x374>
 8005afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b02:	4b93      	ldr	r3, [pc, #588]	; (8005d50 <_dtoa_r+0x598>)
 8005b04:	2703      	movs	r7, #3
 8005b06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b0a:	f7fa fe19 	bl	8000740 <__aeabi_ddiv>
 8005b0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b12:	f004 040f 	and.w	r4, r4, #15
 8005b16:	4e8e      	ldr	r6, [pc, #568]	; (8005d50 <_dtoa_r+0x598>)
 8005b18:	b954      	cbnz	r4, 8005b30 <_dtoa_r+0x378>
 8005b1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b22:	f7fa fe0d 	bl	8000740 <__aeabi_ddiv>
 8005b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b2a:	e029      	b.n	8005b80 <_dtoa_r+0x3c8>
 8005b2c:	2702      	movs	r7, #2
 8005b2e:	e7f2      	b.n	8005b16 <_dtoa_r+0x35e>
 8005b30:	07e1      	lsls	r1, r4, #31
 8005b32:	d508      	bpl.n	8005b46 <_dtoa_r+0x38e>
 8005b34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b3c:	f7fa fcd6 	bl	80004ec <__aeabi_dmul>
 8005b40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b44:	3701      	adds	r7, #1
 8005b46:	1064      	asrs	r4, r4, #1
 8005b48:	3608      	adds	r6, #8
 8005b4a:	e7e5      	b.n	8005b18 <_dtoa_r+0x360>
 8005b4c:	f000 80a5 	beq.w	8005c9a <_dtoa_r+0x4e2>
 8005b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b54:	f1cb 0400 	rsb	r4, fp, #0
 8005b58:	4b7c      	ldr	r3, [pc, #496]	; (8005d4c <_dtoa_r+0x594>)
 8005b5a:	f004 020f 	and.w	r2, r4, #15
 8005b5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fcc1 	bl	80004ec <__aeabi_dmul>
 8005b6a:	2702      	movs	r7, #2
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b72:	4e77      	ldr	r6, [pc, #476]	; (8005d50 <_dtoa_r+0x598>)
 8005b74:	1124      	asrs	r4, r4, #4
 8005b76:	2c00      	cmp	r4, #0
 8005b78:	f040 8084 	bne.w	8005c84 <_dtoa_r+0x4cc>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1d2      	bne.n	8005b26 <_dtoa_r+0x36e>
 8005b80:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b84:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8087 	beq.w	8005c9e <_dtoa_r+0x4e6>
 8005b90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b94:	2200      	movs	r2, #0
 8005b96:	4b6f      	ldr	r3, [pc, #444]	; (8005d54 <_dtoa_r+0x59c>)
 8005b98:	f7fa ff1a 	bl	80009d0 <__aeabi_dcmplt>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d07e      	beq.n	8005c9e <_dtoa_r+0x4e6>
 8005ba0:	9b08      	ldr	r3, [sp, #32]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d07b      	beq.n	8005c9e <_dtoa_r+0x4e6>
 8005ba6:	9b06      	ldr	r3, [sp, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dd38      	ble.n	8005c1e <_dtoa_r+0x466>
 8005bac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4b69      	ldr	r3, [pc, #420]	; (8005d58 <_dtoa_r+0x5a0>)
 8005bb4:	f7fa fc9a 	bl	80004ec <__aeabi_dmul>
 8005bb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bbc:	9c06      	ldr	r4, [sp, #24]
 8005bbe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005bc2:	3701      	adds	r7, #1
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f7fa fc27 	bl	8000418 <__aeabi_i2d>
 8005bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bce:	f7fa fc8d 	bl	80004ec <__aeabi_dmul>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4b61      	ldr	r3, [pc, #388]	; (8005d5c <_dtoa_r+0x5a4>)
 8005bd6:	f7fa fad3 	bl	8000180 <__adddf3>
 8005bda:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005bde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005be2:	9611      	str	r6, [sp, #68]	; 0x44
 8005be4:	2c00      	cmp	r4, #0
 8005be6:	d15d      	bne.n	8005ca4 <_dtoa_r+0x4ec>
 8005be8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bec:	2200      	movs	r2, #0
 8005bee:	4b5c      	ldr	r3, [pc, #368]	; (8005d60 <_dtoa_r+0x5a8>)
 8005bf0:	f7fa fac4 	bl	800017c <__aeabi_dsub>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bfc:	4633      	mov	r3, r6
 8005bfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c00:	f7fa ff04 	bl	8000a0c <__aeabi_dcmpgt>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	f040 8295 	bne.w	8006134 <_dtoa_r+0x97c>
 8005c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c14:	f7fa fedc 	bl	80009d0 <__aeabi_dcmplt>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	f040 8289 	bne.w	8006130 <_dtoa_r+0x978>
 8005c1e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c22:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f2c0 8151 	blt.w	8005ed0 <_dtoa_r+0x718>
 8005c2e:	f1bb 0f0e 	cmp.w	fp, #14
 8005c32:	f300 814d 	bgt.w	8005ed0 <_dtoa_r+0x718>
 8005c36:	4b45      	ldr	r3, [pc, #276]	; (8005d4c <_dtoa_r+0x594>)
 8005c38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c40:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f280 80da 	bge.w	8005e00 <_dtoa_r+0x648>
 8005c4c:	9b08      	ldr	r3, [sp, #32]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f300 80d6 	bgt.w	8005e00 <_dtoa_r+0x648>
 8005c54:	f040 826b 	bne.w	800612e <_dtoa_r+0x976>
 8005c58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4b40      	ldr	r3, [pc, #256]	; (8005d60 <_dtoa_r+0x5a8>)
 8005c60:	f7fa fc44 	bl	80004ec <__aeabi_dmul>
 8005c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c68:	f7fa fec6 	bl	80009f8 <__aeabi_dcmpge>
 8005c6c:	9c08      	ldr	r4, [sp, #32]
 8005c6e:	4626      	mov	r6, r4
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f040 8241 	bne.w	80060f8 <_dtoa_r+0x940>
 8005c76:	2331      	movs	r3, #49	; 0x31
 8005c78:	9f03      	ldr	r7, [sp, #12]
 8005c7a:	f10b 0b01 	add.w	fp, fp, #1
 8005c7e:	f807 3b01 	strb.w	r3, [r7], #1
 8005c82:	e23d      	b.n	8006100 <_dtoa_r+0x948>
 8005c84:	07e2      	lsls	r2, r4, #31
 8005c86:	d505      	bpl.n	8005c94 <_dtoa_r+0x4dc>
 8005c88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c8c:	f7fa fc2e 	bl	80004ec <__aeabi_dmul>
 8005c90:	2301      	movs	r3, #1
 8005c92:	3701      	adds	r7, #1
 8005c94:	1064      	asrs	r4, r4, #1
 8005c96:	3608      	adds	r6, #8
 8005c98:	e76d      	b.n	8005b76 <_dtoa_r+0x3be>
 8005c9a:	2702      	movs	r7, #2
 8005c9c:	e770      	b.n	8005b80 <_dtoa_r+0x3c8>
 8005c9e:	46d8      	mov	r8, fp
 8005ca0:	9c08      	ldr	r4, [sp, #32]
 8005ca2:	e78f      	b.n	8005bc4 <_dtoa_r+0x40c>
 8005ca4:	9903      	ldr	r1, [sp, #12]
 8005ca6:	4b29      	ldr	r3, [pc, #164]	; (8005d4c <_dtoa_r+0x594>)
 8005ca8:	4421      	add	r1, r4
 8005caa:	9112      	str	r1, [sp, #72]	; 0x48
 8005cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cb2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cba:	2900      	cmp	r1, #0
 8005cbc:	d054      	beq.n	8005d68 <_dtoa_r+0x5b0>
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	4928      	ldr	r1, [pc, #160]	; (8005d64 <_dtoa_r+0x5ac>)
 8005cc2:	f7fa fd3d 	bl	8000740 <__aeabi_ddiv>
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	4632      	mov	r2, r6
 8005cca:	f7fa fa57 	bl	800017c <__aeabi_dsub>
 8005cce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cd2:	9f03      	ldr	r7, [sp, #12]
 8005cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cd8:	f7fa feb8 	bl	8000a4c <__aeabi_d2iz>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	f7fa fb9b 	bl	8000418 <__aeabi_i2d>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cea:	f7fa fa47 	bl	800017c <__aeabi_dsub>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	3430      	adds	r4, #48	; 0x30
 8005cf4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cfc:	f807 4b01 	strb.w	r4, [r7], #1
 8005d00:	f7fa fe66 	bl	80009d0 <__aeabi_dcmplt>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d173      	bne.n	8005df0 <_dtoa_r+0x638>
 8005d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	4911      	ldr	r1, [pc, #68]	; (8005d54 <_dtoa_r+0x59c>)
 8005d10:	f7fa fa34 	bl	800017c <__aeabi_dsub>
 8005d14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d18:	f7fa fe5a 	bl	80009d0 <__aeabi_dcmplt>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	f040 80b6 	bne.w	8005e8e <_dtoa_r+0x6d6>
 8005d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d24:	429f      	cmp	r7, r3
 8005d26:	f43f af7a 	beq.w	8005c1e <_dtoa_r+0x466>
 8005d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d2e:	2200      	movs	r2, #0
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <_dtoa_r+0x5a0>)
 8005d32:	f7fa fbdb 	bl	80004ec <__aeabi_dmul>
 8005d36:	2200      	movs	r2, #0
 8005d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <_dtoa_r+0x5a0>)
 8005d42:	f7fa fbd3 	bl	80004ec <__aeabi_dmul>
 8005d46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d4a:	e7c3      	b.n	8005cd4 <_dtoa_r+0x51c>
 8005d4c:	08008fc0 	.word	0x08008fc0
 8005d50:	08008f98 	.word	0x08008f98
 8005d54:	3ff00000 	.word	0x3ff00000
 8005d58:	40240000 	.word	0x40240000
 8005d5c:	401c0000 	.word	0x401c0000
 8005d60:	40140000 	.word	0x40140000
 8005d64:	3fe00000 	.word	0x3fe00000
 8005d68:	4630      	mov	r0, r6
 8005d6a:	4639      	mov	r1, r7
 8005d6c:	f7fa fbbe 	bl	80004ec <__aeabi_dmul>
 8005d70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d76:	9c03      	ldr	r4, [sp, #12]
 8005d78:	9314      	str	r3, [sp, #80]	; 0x50
 8005d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d7e:	f7fa fe65 	bl	8000a4c <__aeabi_d2iz>
 8005d82:	9015      	str	r0, [sp, #84]	; 0x54
 8005d84:	f7fa fb48 	bl	8000418 <__aeabi_i2d>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d90:	f7fa f9f4 	bl	800017c <__aeabi_dsub>
 8005d94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d96:	4606      	mov	r6, r0
 8005d98:	3330      	adds	r3, #48	; 0x30
 8005d9a:	f804 3b01 	strb.w	r3, [r4], #1
 8005d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005da0:	460f      	mov	r7, r1
 8005da2:	429c      	cmp	r4, r3
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	d124      	bne.n	8005df4 <_dtoa_r+0x63c>
 8005daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dae:	4baf      	ldr	r3, [pc, #700]	; (800606c <_dtoa_r+0x8b4>)
 8005db0:	f7fa f9e6 	bl	8000180 <__adddf3>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4630      	mov	r0, r6
 8005dba:	4639      	mov	r1, r7
 8005dbc:	f7fa fe26 	bl	8000a0c <__aeabi_dcmpgt>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d163      	bne.n	8005e8c <_dtoa_r+0x6d4>
 8005dc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dc8:	2000      	movs	r0, #0
 8005dca:	49a8      	ldr	r1, [pc, #672]	; (800606c <_dtoa_r+0x8b4>)
 8005dcc:	f7fa f9d6 	bl	800017c <__aeabi_dsub>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	f7fa fdfa 	bl	80009d0 <__aeabi_dcmplt>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	f43f af1e 	beq.w	8005c1e <_dtoa_r+0x466>
 8005de2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005de4:	1e7b      	subs	r3, r7, #1
 8005de6:	9314      	str	r3, [sp, #80]	; 0x50
 8005de8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005dec:	2b30      	cmp	r3, #48	; 0x30
 8005dee:	d0f8      	beq.n	8005de2 <_dtoa_r+0x62a>
 8005df0:	46c3      	mov	fp, r8
 8005df2:	e03b      	b.n	8005e6c <_dtoa_r+0x6b4>
 8005df4:	4b9e      	ldr	r3, [pc, #632]	; (8006070 <_dtoa_r+0x8b8>)
 8005df6:	f7fa fb79 	bl	80004ec <__aeabi_dmul>
 8005dfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dfe:	e7bc      	b.n	8005d7a <_dtoa_r+0x5c2>
 8005e00:	9f03      	ldr	r7, [sp, #12]
 8005e02:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	f7fa fc97 	bl	8000740 <__aeabi_ddiv>
 8005e12:	f7fa fe1b 	bl	8000a4c <__aeabi_d2iz>
 8005e16:	4604      	mov	r4, r0
 8005e18:	f7fa fafe 	bl	8000418 <__aeabi_i2d>
 8005e1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e20:	f7fa fb64 	bl	80004ec <__aeabi_dmul>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4640      	mov	r0, r8
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	f7fa f9a6 	bl	800017c <__aeabi_dsub>
 8005e30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e34:	f807 6b01 	strb.w	r6, [r7], #1
 8005e38:	9e03      	ldr	r6, [sp, #12]
 8005e3a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005e3e:	1bbe      	subs	r6, r7, r6
 8005e40:	45b4      	cmp	ip, r6
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	d136      	bne.n	8005eb6 <_dtoa_r+0x6fe>
 8005e48:	f7fa f99a 	bl	8000180 <__adddf3>
 8005e4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e50:	4680      	mov	r8, r0
 8005e52:	4689      	mov	r9, r1
 8005e54:	f7fa fdda 	bl	8000a0c <__aeabi_dcmpgt>
 8005e58:	bb58      	cbnz	r0, 8005eb2 <_dtoa_r+0x6fa>
 8005e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e5e:	4640      	mov	r0, r8
 8005e60:	4649      	mov	r1, r9
 8005e62:	f7fa fdab 	bl	80009bc <__aeabi_dcmpeq>
 8005e66:	b108      	cbz	r0, 8005e6c <_dtoa_r+0x6b4>
 8005e68:	07e3      	lsls	r3, r4, #31
 8005e6a:	d422      	bmi.n	8005eb2 <_dtoa_r+0x6fa>
 8005e6c:	4651      	mov	r1, sl
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 fbc2 	bl	80065f8 <_Bfree>
 8005e74:	2300      	movs	r3, #0
 8005e76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e78:	703b      	strb	r3, [r7, #0]
 8005e7a:	f10b 0301 	add.w	r3, fp, #1
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f43f ace6 	beq.w	8005854 <_dtoa_r+0x9c>
 8005e88:	601f      	str	r7, [r3, #0]
 8005e8a:	e4e3      	b.n	8005854 <_dtoa_r+0x9c>
 8005e8c:	4627      	mov	r7, r4
 8005e8e:	463b      	mov	r3, r7
 8005e90:	461f      	mov	r7, r3
 8005e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e96:	2a39      	cmp	r2, #57	; 0x39
 8005e98:	d107      	bne.n	8005eaa <_dtoa_r+0x6f2>
 8005e9a:	9a03      	ldr	r2, [sp, #12]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d1f7      	bne.n	8005e90 <_dtoa_r+0x6d8>
 8005ea0:	2230      	movs	r2, #48	; 0x30
 8005ea2:	9903      	ldr	r1, [sp, #12]
 8005ea4:	f108 0801 	add.w	r8, r8, #1
 8005ea8:	700a      	strb	r2, [r1, #0]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	3201      	adds	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	e79e      	b.n	8005df0 <_dtoa_r+0x638>
 8005eb2:	46d8      	mov	r8, fp
 8005eb4:	e7eb      	b.n	8005e8e <_dtoa_r+0x6d6>
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	4b6d      	ldr	r3, [pc, #436]	; (8006070 <_dtoa_r+0x8b8>)
 8005eba:	f7fa fb17 	bl	80004ec <__aeabi_dmul>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4680      	mov	r8, r0
 8005ec4:	4689      	mov	r9, r1
 8005ec6:	f7fa fd79 	bl	80009bc <__aeabi_dcmpeq>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d09b      	beq.n	8005e06 <_dtoa_r+0x64e>
 8005ece:	e7cd      	b.n	8005e6c <_dtoa_r+0x6b4>
 8005ed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	f000 80c4 	beq.w	8006060 <_dtoa_r+0x8a8>
 8005ed8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005eda:	2a01      	cmp	r2, #1
 8005edc:	f300 80a8 	bgt.w	8006030 <_dtoa_r+0x878>
 8005ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	f000 80a0 	beq.w	8006028 <_dtoa_r+0x870>
 8005ee8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005eec:	464f      	mov	r7, r9
 8005eee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	441a      	add	r2, r3
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	4499      	add	r9, r3
 8005efa:	9209      	str	r2, [sp, #36]	; 0x24
 8005efc:	f000 fc7c 	bl	80067f8 <__i2b>
 8005f00:	4606      	mov	r6, r0
 8005f02:	b15f      	cbz	r7, 8005f1c <_dtoa_r+0x764>
 8005f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dd08      	ble.n	8005f1c <_dtoa_r+0x764>
 8005f0a:	42bb      	cmp	r3, r7
 8005f0c:	bfa8      	it	ge
 8005f0e:	463b      	movge	r3, r7
 8005f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f12:	eba9 0903 	sub.w	r9, r9, r3
 8005f16:	1aff      	subs	r7, r7, r3
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1e:	b1f3      	cbz	r3, 8005f5e <_dtoa_r+0x7a6>
 8005f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80a0 	beq.w	8006068 <_dtoa_r+0x8b0>
 8005f28:	2c00      	cmp	r4, #0
 8005f2a:	dd10      	ble.n	8005f4e <_dtoa_r+0x796>
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4622      	mov	r2, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f000 fd1f 	bl	8006974 <__pow5mult>
 8005f36:	4652      	mov	r2, sl
 8005f38:	4601      	mov	r1, r0
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 fc71 	bl	8006824 <__multiply>
 8005f42:	4680      	mov	r8, r0
 8005f44:	4651      	mov	r1, sl
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 fb56 	bl	80065f8 <_Bfree>
 8005f4c:	46c2      	mov	sl, r8
 8005f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f50:	1b1a      	subs	r2, r3, r4
 8005f52:	d004      	beq.n	8005f5e <_dtoa_r+0x7a6>
 8005f54:	4651      	mov	r1, sl
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 fd0c 	bl	8006974 <__pow5mult>
 8005f5c:	4682      	mov	sl, r0
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 fc49 	bl	80067f8 <__i2b>
 8005f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f68:	4604      	mov	r4, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f340 8082 	ble.w	8006074 <_dtoa_r+0x8bc>
 8005f70:	461a      	mov	r2, r3
 8005f72:	4601      	mov	r1, r0
 8005f74:	4628      	mov	r0, r5
 8005f76:	f000 fcfd 	bl	8006974 <__pow5mult>
 8005f7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	dd7b      	ble.n	800607a <_dtoa_r+0x8c2>
 8005f82:	f04f 0800 	mov.w	r8, #0
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f8c:	6918      	ldr	r0, [r3, #16]
 8005f8e:	f000 fbe5 	bl	800675c <__hi0bits>
 8005f92:	f1c0 0020 	rsb	r0, r0, #32
 8005f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f98:	4418      	add	r0, r3
 8005f9a:	f010 001f 	ands.w	r0, r0, #31
 8005f9e:	f000 8092 	beq.w	80060c6 <_dtoa_r+0x90e>
 8005fa2:	f1c0 0320 	rsb	r3, r0, #32
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	f340 8085 	ble.w	80060b6 <_dtoa_r+0x8fe>
 8005fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fae:	f1c0 001c 	rsb	r0, r0, #28
 8005fb2:	4403      	add	r3, r0
 8005fb4:	4481      	add	r9, r0
 8005fb6:	4407      	add	r7, r0
 8005fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fba:	f1b9 0f00 	cmp.w	r9, #0
 8005fbe:	dd05      	ble.n	8005fcc <_dtoa_r+0x814>
 8005fc0:	4651      	mov	r1, sl
 8005fc2:	464a      	mov	r2, r9
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 fd2f 	bl	8006a28 <__lshift>
 8005fca:	4682      	mov	sl, r0
 8005fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dd05      	ble.n	8005fde <_dtoa_r+0x826>
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fd26 	bl	8006a28 <__lshift>
 8005fdc:	4604      	mov	r4, r0
 8005fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d072      	beq.n	80060ca <_dtoa_r+0x912>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4650      	mov	r0, sl
 8005fe8:	f000 fd8a 	bl	8006b00 <__mcmp>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	da6c      	bge.n	80060ca <_dtoa_r+0x912>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4651      	mov	r1, sl
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 fb20 	bl	800663c <__multadd>
 8005ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ffe:	4682      	mov	sl, r0
 8006000:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 81ac 	beq.w	8006362 <_dtoa_r+0xbaa>
 800600a:	2300      	movs	r3, #0
 800600c:	4631      	mov	r1, r6
 800600e:	220a      	movs	r2, #10
 8006010:	4628      	mov	r0, r5
 8006012:	f000 fb13 	bl	800663c <__multadd>
 8006016:	9b06      	ldr	r3, [sp, #24]
 8006018:	4606      	mov	r6, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	f300 8093 	bgt.w	8006146 <_dtoa_r+0x98e>
 8006020:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006022:	2b02      	cmp	r3, #2
 8006024:	dc59      	bgt.n	80060da <_dtoa_r+0x922>
 8006026:	e08e      	b.n	8006146 <_dtoa_r+0x98e>
 8006028:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800602a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800602e:	e75d      	b.n	8005eec <_dtoa_r+0x734>
 8006030:	9b08      	ldr	r3, [sp, #32]
 8006032:	1e5c      	subs	r4, r3, #1
 8006034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006036:	42a3      	cmp	r3, r4
 8006038:	bfbf      	itttt	lt
 800603a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800603c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800603e:	1ae3      	sublt	r3, r4, r3
 8006040:	18d2      	addlt	r2, r2, r3
 8006042:	bfa8      	it	ge
 8006044:	1b1c      	subge	r4, r3, r4
 8006046:	9b08      	ldr	r3, [sp, #32]
 8006048:	bfbe      	ittt	lt
 800604a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800604c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800604e:	2400      	movlt	r4, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	bfb5      	itete	lt
 8006054:	eba9 0703 	sublt.w	r7, r9, r3
 8006058:	464f      	movge	r7, r9
 800605a:	2300      	movlt	r3, #0
 800605c:	9b08      	ldrge	r3, [sp, #32]
 800605e:	e747      	b.n	8005ef0 <_dtoa_r+0x738>
 8006060:	464f      	mov	r7, r9
 8006062:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006064:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006066:	e74c      	b.n	8005f02 <_dtoa_r+0x74a>
 8006068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800606a:	e773      	b.n	8005f54 <_dtoa_r+0x79c>
 800606c:	3fe00000 	.word	0x3fe00000
 8006070:	40240000 	.word	0x40240000
 8006074:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006076:	2b01      	cmp	r3, #1
 8006078:	dc18      	bgt.n	80060ac <_dtoa_r+0x8f4>
 800607a:	9b04      	ldr	r3, [sp, #16]
 800607c:	b9b3      	cbnz	r3, 80060ac <_dtoa_r+0x8f4>
 800607e:	9b05      	ldr	r3, [sp, #20]
 8006080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006084:	b993      	cbnz	r3, 80060ac <_dtoa_r+0x8f4>
 8006086:	9b05      	ldr	r3, [sp, #20]
 8006088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800608c:	0d1b      	lsrs	r3, r3, #20
 800608e:	051b      	lsls	r3, r3, #20
 8006090:	b17b      	cbz	r3, 80060b2 <_dtoa_r+0x8fa>
 8006092:	f04f 0801 	mov.w	r8, #1
 8006096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006098:	f109 0901 	add.w	r9, r9, #1
 800609c:	3301      	adds	r3, #1
 800609e:	9309      	str	r3, [sp, #36]	; 0x24
 80060a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f47f af6f 	bne.w	8005f86 <_dtoa_r+0x7ce>
 80060a8:	2001      	movs	r0, #1
 80060aa:	e774      	b.n	8005f96 <_dtoa_r+0x7de>
 80060ac:	f04f 0800 	mov.w	r8, #0
 80060b0:	e7f6      	b.n	80060a0 <_dtoa_r+0x8e8>
 80060b2:	4698      	mov	r8, r3
 80060b4:	e7f4      	b.n	80060a0 <_dtoa_r+0x8e8>
 80060b6:	d080      	beq.n	8005fba <_dtoa_r+0x802>
 80060b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ba:	331c      	adds	r3, #28
 80060bc:	441a      	add	r2, r3
 80060be:	4499      	add	r9, r3
 80060c0:	441f      	add	r7, r3
 80060c2:	9209      	str	r2, [sp, #36]	; 0x24
 80060c4:	e779      	b.n	8005fba <_dtoa_r+0x802>
 80060c6:	4603      	mov	r3, r0
 80060c8:	e7f6      	b.n	80060b8 <_dtoa_r+0x900>
 80060ca:	9b08      	ldr	r3, [sp, #32]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dc34      	bgt.n	800613a <_dtoa_r+0x982>
 80060d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	dd31      	ble.n	800613a <_dtoa_r+0x982>
 80060d6:	9b08      	ldr	r3, [sp, #32]
 80060d8:	9306      	str	r3, [sp, #24]
 80060da:	9b06      	ldr	r3, [sp, #24]
 80060dc:	b963      	cbnz	r3, 80060f8 <_dtoa_r+0x940>
 80060de:	4621      	mov	r1, r4
 80060e0:	2205      	movs	r2, #5
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 faaa 	bl	800663c <__multadd>
 80060e8:	4601      	mov	r1, r0
 80060ea:	4604      	mov	r4, r0
 80060ec:	4650      	mov	r0, sl
 80060ee:	f000 fd07 	bl	8006b00 <__mcmp>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	f73f adbf 	bgt.w	8005c76 <_dtoa_r+0x4be>
 80060f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060fa:	9f03      	ldr	r7, [sp, #12]
 80060fc:	ea6f 0b03 	mvn.w	fp, r3
 8006100:	f04f 0800 	mov.w	r8, #0
 8006104:	4621      	mov	r1, r4
 8006106:	4628      	mov	r0, r5
 8006108:	f000 fa76 	bl	80065f8 <_Bfree>
 800610c:	2e00      	cmp	r6, #0
 800610e:	f43f aead 	beq.w	8005e6c <_dtoa_r+0x6b4>
 8006112:	f1b8 0f00 	cmp.w	r8, #0
 8006116:	d005      	beq.n	8006124 <_dtoa_r+0x96c>
 8006118:	45b0      	cmp	r8, r6
 800611a:	d003      	beq.n	8006124 <_dtoa_r+0x96c>
 800611c:	4641      	mov	r1, r8
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fa6a 	bl	80065f8 <_Bfree>
 8006124:	4631      	mov	r1, r6
 8006126:	4628      	mov	r0, r5
 8006128:	f000 fa66 	bl	80065f8 <_Bfree>
 800612c:	e69e      	b.n	8005e6c <_dtoa_r+0x6b4>
 800612e:	2400      	movs	r4, #0
 8006130:	4626      	mov	r6, r4
 8006132:	e7e1      	b.n	80060f8 <_dtoa_r+0x940>
 8006134:	46c3      	mov	fp, r8
 8006136:	4626      	mov	r6, r4
 8006138:	e59d      	b.n	8005c76 <_dtoa_r+0x4be>
 800613a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 80c8 	beq.w	80062d2 <_dtoa_r+0xb1a>
 8006142:	9b08      	ldr	r3, [sp, #32]
 8006144:	9306      	str	r3, [sp, #24]
 8006146:	2f00      	cmp	r7, #0
 8006148:	dd05      	ble.n	8006156 <_dtoa_r+0x99e>
 800614a:	4631      	mov	r1, r6
 800614c:	463a      	mov	r2, r7
 800614e:	4628      	mov	r0, r5
 8006150:	f000 fc6a 	bl	8006a28 <__lshift>
 8006154:	4606      	mov	r6, r0
 8006156:	f1b8 0f00 	cmp.w	r8, #0
 800615a:	d05b      	beq.n	8006214 <_dtoa_r+0xa5c>
 800615c:	4628      	mov	r0, r5
 800615e:	6871      	ldr	r1, [r6, #4]
 8006160:	f000 fa0a 	bl	8006578 <_Balloc>
 8006164:	4607      	mov	r7, r0
 8006166:	b928      	cbnz	r0, 8006174 <_dtoa_r+0x9bc>
 8006168:	4602      	mov	r2, r0
 800616a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800616e:	4b81      	ldr	r3, [pc, #516]	; (8006374 <_dtoa_r+0xbbc>)
 8006170:	f7ff bb36 	b.w	80057e0 <_dtoa_r+0x28>
 8006174:	6932      	ldr	r2, [r6, #16]
 8006176:	f106 010c 	add.w	r1, r6, #12
 800617a:	3202      	adds	r2, #2
 800617c:	0092      	lsls	r2, r2, #2
 800617e:	300c      	adds	r0, #12
 8006180:	f001 ff04 	bl	8007f8c <memcpy>
 8006184:	2201      	movs	r2, #1
 8006186:	4639      	mov	r1, r7
 8006188:	4628      	mov	r0, r5
 800618a:	f000 fc4d 	bl	8006a28 <__lshift>
 800618e:	46b0      	mov	r8, r6
 8006190:	4606      	mov	r6, r0
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	9a03      	ldr	r2, [sp, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	9308      	str	r3, [sp, #32]
 800619a:	9b06      	ldr	r3, [sp, #24]
 800619c:	4413      	add	r3, r2
 800619e:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a0:	9b04      	ldr	r3, [sp, #16]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	930a      	str	r3, [sp, #40]	; 0x28
 80061a8:	9b08      	ldr	r3, [sp, #32]
 80061aa:	4621      	mov	r1, r4
 80061ac:	3b01      	subs	r3, #1
 80061ae:	4650      	mov	r0, sl
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	f7ff fa77 	bl	80056a4 <quorem>
 80061b6:	4641      	mov	r1, r8
 80061b8:	9006      	str	r0, [sp, #24]
 80061ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061be:	4650      	mov	r0, sl
 80061c0:	f000 fc9e 	bl	8006b00 <__mcmp>
 80061c4:	4632      	mov	r2, r6
 80061c6:	9009      	str	r0, [sp, #36]	; 0x24
 80061c8:	4621      	mov	r1, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 fcb4 	bl	8006b38 <__mdiff>
 80061d0:	68c2      	ldr	r2, [r0, #12]
 80061d2:	4607      	mov	r7, r0
 80061d4:	bb02      	cbnz	r2, 8006218 <_dtoa_r+0xa60>
 80061d6:	4601      	mov	r1, r0
 80061d8:	4650      	mov	r0, sl
 80061da:	f000 fc91 	bl	8006b00 <__mcmp>
 80061de:	4602      	mov	r2, r0
 80061e0:	4639      	mov	r1, r7
 80061e2:	4628      	mov	r0, r5
 80061e4:	920c      	str	r2, [sp, #48]	; 0x30
 80061e6:	f000 fa07 	bl	80065f8 <_Bfree>
 80061ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061ee:	9f08      	ldr	r7, [sp, #32]
 80061f0:	ea43 0102 	orr.w	r1, r3, r2
 80061f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f6:	4319      	orrs	r1, r3
 80061f8:	d110      	bne.n	800621c <_dtoa_r+0xa64>
 80061fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80061fe:	d029      	beq.n	8006254 <_dtoa_r+0xa9c>
 8006200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	dd02      	ble.n	800620c <_dtoa_r+0xa54>
 8006206:	9b06      	ldr	r3, [sp, #24]
 8006208:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800620c:	9b04      	ldr	r3, [sp, #16]
 800620e:	f883 9000 	strb.w	r9, [r3]
 8006212:	e777      	b.n	8006104 <_dtoa_r+0x94c>
 8006214:	4630      	mov	r0, r6
 8006216:	e7ba      	b.n	800618e <_dtoa_r+0x9d6>
 8006218:	2201      	movs	r2, #1
 800621a:	e7e1      	b.n	80061e0 <_dtoa_r+0xa28>
 800621c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	db04      	blt.n	800622c <_dtoa_r+0xa74>
 8006222:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006224:	430b      	orrs	r3, r1
 8006226:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006228:	430b      	orrs	r3, r1
 800622a:	d120      	bne.n	800626e <_dtoa_r+0xab6>
 800622c:	2a00      	cmp	r2, #0
 800622e:	dded      	ble.n	800620c <_dtoa_r+0xa54>
 8006230:	4651      	mov	r1, sl
 8006232:	2201      	movs	r2, #1
 8006234:	4628      	mov	r0, r5
 8006236:	f000 fbf7 	bl	8006a28 <__lshift>
 800623a:	4621      	mov	r1, r4
 800623c:	4682      	mov	sl, r0
 800623e:	f000 fc5f 	bl	8006b00 <__mcmp>
 8006242:	2800      	cmp	r0, #0
 8006244:	dc03      	bgt.n	800624e <_dtoa_r+0xa96>
 8006246:	d1e1      	bne.n	800620c <_dtoa_r+0xa54>
 8006248:	f019 0f01 	tst.w	r9, #1
 800624c:	d0de      	beq.n	800620c <_dtoa_r+0xa54>
 800624e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006252:	d1d8      	bne.n	8006206 <_dtoa_r+0xa4e>
 8006254:	2339      	movs	r3, #57	; 0x39
 8006256:	9a04      	ldr	r2, [sp, #16]
 8006258:	7013      	strb	r3, [r2, #0]
 800625a:	463b      	mov	r3, r7
 800625c:	461f      	mov	r7, r3
 800625e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006262:	3b01      	subs	r3, #1
 8006264:	2a39      	cmp	r2, #57	; 0x39
 8006266:	d06b      	beq.n	8006340 <_dtoa_r+0xb88>
 8006268:	3201      	adds	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	e74a      	b.n	8006104 <_dtoa_r+0x94c>
 800626e:	2a00      	cmp	r2, #0
 8006270:	dd07      	ble.n	8006282 <_dtoa_r+0xaca>
 8006272:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006276:	d0ed      	beq.n	8006254 <_dtoa_r+0xa9c>
 8006278:	9a04      	ldr	r2, [sp, #16]
 800627a:	f109 0301 	add.w	r3, r9, #1
 800627e:	7013      	strb	r3, [r2, #0]
 8006280:	e740      	b.n	8006104 <_dtoa_r+0x94c>
 8006282:	9b08      	ldr	r3, [sp, #32]
 8006284:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006286:	f803 9c01 	strb.w	r9, [r3, #-1]
 800628a:	4293      	cmp	r3, r2
 800628c:	d042      	beq.n	8006314 <_dtoa_r+0xb5c>
 800628e:	4651      	mov	r1, sl
 8006290:	2300      	movs	r3, #0
 8006292:	220a      	movs	r2, #10
 8006294:	4628      	mov	r0, r5
 8006296:	f000 f9d1 	bl	800663c <__multadd>
 800629a:	45b0      	cmp	r8, r6
 800629c:	4682      	mov	sl, r0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	f04f 020a 	mov.w	r2, #10
 80062a6:	4641      	mov	r1, r8
 80062a8:	4628      	mov	r0, r5
 80062aa:	d107      	bne.n	80062bc <_dtoa_r+0xb04>
 80062ac:	f000 f9c6 	bl	800663c <__multadd>
 80062b0:	4680      	mov	r8, r0
 80062b2:	4606      	mov	r6, r0
 80062b4:	9b08      	ldr	r3, [sp, #32]
 80062b6:	3301      	adds	r3, #1
 80062b8:	9308      	str	r3, [sp, #32]
 80062ba:	e775      	b.n	80061a8 <_dtoa_r+0x9f0>
 80062bc:	f000 f9be 	bl	800663c <__multadd>
 80062c0:	4631      	mov	r1, r6
 80062c2:	4680      	mov	r8, r0
 80062c4:	2300      	movs	r3, #0
 80062c6:	220a      	movs	r2, #10
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 f9b7 	bl	800663c <__multadd>
 80062ce:	4606      	mov	r6, r0
 80062d0:	e7f0      	b.n	80062b4 <_dtoa_r+0xafc>
 80062d2:	9b08      	ldr	r3, [sp, #32]
 80062d4:	9306      	str	r3, [sp, #24]
 80062d6:	9f03      	ldr	r7, [sp, #12]
 80062d8:	4621      	mov	r1, r4
 80062da:	4650      	mov	r0, sl
 80062dc:	f7ff f9e2 	bl	80056a4 <quorem>
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062e6:	f807 9b01 	strb.w	r9, [r7], #1
 80062ea:	1afa      	subs	r2, r7, r3
 80062ec:	9b06      	ldr	r3, [sp, #24]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	dd07      	ble.n	8006302 <_dtoa_r+0xb4a>
 80062f2:	4651      	mov	r1, sl
 80062f4:	2300      	movs	r3, #0
 80062f6:	220a      	movs	r2, #10
 80062f8:	4628      	mov	r0, r5
 80062fa:	f000 f99f 	bl	800663c <__multadd>
 80062fe:	4682      	mov	sl, r0
 8006300:	e7ea      	b.n	80062d8 <_dtoa_r+0xb20>
 8006302:	9b06      	ldr	r3, [sp, #24]
 8006304:	f04f 0800 	mov.w	r8, #0
 8006308:	2b00      	cmp	r3, #0
 800630a:	bfcc      	ite	gt
 800630c:	461f      	movgt	r7, r3
 800630e:	2701      	movle	r7, #1
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	441f      	add	r7, r3
 8006314:	4651      	mov	r1, sl
 8006316:	2201      	movs	r2, #1
 8006318:	4628      	mov	r0, r5
 800631a:	f000 fb85 	bl	8006a28 <__lshift>
 800631e:	4621      	mov	r1, r4
 8006320:	4682      	mov	sl, r0
 8006322:	f000 fbed 	bl	8006b00 <__mcmp>
 8006326:	2800      	cmp	r0, #0
 8006328:	dc97      	bgt.n	800625a <_dtoa_r+0xaa2>
 800632a:	d102      	bne.n	8006332 <_dtoa_r+0xb7a>
 800632c:	f019 0f01 	tst.w	r9, #1
 8006330:	d193      	bne.n	800625a <_dtoa_r+0xaa2>
 8006332:	463b      	mov	r3, r7
 8006334:	461f      	mov	r7, r3
 8006336:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800633a:	2a30      	cmp	r2, #48	; 0x30
 800633c:	d0fa      	beq.n	8006334 <_dtoa_r+0xb7c>
 800633e:	e6e1      	b.n	8006104 <_dtoa_r+0x94c>
 8006340:	9a03      	ldr	r2, [sp, #12]
 8006342:	429a      	cmp	r2, r3
 8006344:	d18a      	bne.n	800625c <_dtoa_r+0xaa4>
 8006346:	2331      	movs	r3, #49	; 0x31
 8006348:	f10b 0b01 	add.w	fp, fp, #1
 800634c:	e797      	b.n	800627e <_dtoa_r+0xac6>
 800634e:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <_dtoa_r+0xbc0>)
 8006350:	f7ff ba9f 	b.w	8005892 <_dtoa_r+0xda>
 8006354:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006356:	2b00      	cmp	r3, #0
 8006358:	f47f aa77 	bne.w	800584a <_dtoa_r+0x92>
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <_dtoa_r+0xbc4>)
 800635e:	f7ff ba98 	b.w	8005892 <_dtoa_r+0xda>
 8006362:	9b06      	ldr	r3, [sp, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dcb6      	bgt.n	80062d6 <_dtoa_r+0xb1e>
 8006368:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800636a:	2b02      	cmp	r3, #2
 800636c:	f73f aeb5 	bgt.w	80060da <_dtoa_r+0x922>
 8006370:	e7b1      	b.n	80062d6 <_dtoa_r+0xb1e>
 8006372:	bf00      	nop
 8006374:	08008f2b 	.word	0x08008f2b
 8006378:	08008df0 	.word	0x08008df0
 800637c:	08008ec6 	.word	0x08008ec6

08006380 <_free_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4605      	mov	r5, r0
 8006384:	2900      	cmp	r1, #0
 8006386:	d040      	beq.n	800640a <_free_r+0x8a>
 8006388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800638c:	1f0c      	subs	r4, r1, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	bfb8      	it	lt
 8006392:	18e4      	addlt	r4, r4, r3
 8006394:	f000 f8e4 	bl	8006560 <__malloc_lock>
 8006398:	4a1c      	ldr	r2, [pc, #112]	; (800640c <_free_r+0x8c>)
 800639a:	6813      	ldr	r3, [r2, #0]
 800639c:	b933      	cbnz	r3, 80063ac <_free_r+0x2c>
 800639e:	6063      	str	r3, [r4, #4]
 80063a0:	6014      	str	r4, [r2, #0]
 80063a2:	4628      	mov	r0, r5
 80063a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063a8:	f000 b8e0 	b.w	800656c <__malloc_unlock>
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	d908      	bls.n	80063c2 <_free_r+0x42>
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	1821      	adds	r1, r4, r0
 80063b4:	428b      	cmp	r3, r1
 80063b6:	bf01      	itttt	eq
 80063b8:	6819      	ldreq	r1, [r3, #0]
 80063ba:	685b      	ldreq	r3, [r3, #4]
 80063bc:	1809      	addeq	r1, r1, r0
 80063be:	6021      	streq	r1, [r4, #0]
 80063c0:	e7ed      	b.n	800639e <_free_r+0x1e>
 80063c2:	461a      	mov	r2, r3
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	b10b      	cbz	r3, 80063cc <_free_r+0x4c>
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d9fa      	bls.n	80063c2 <_free_r+0x42>
 80063cc:	6811      	ldr	r1, [r2, #0]
 80063ce:	1850      	adds	r0, r2, r1
 80063d0:	42a0      	cmp	r0, r4
 80063d2:	d10b      	bne.n	80063ec <_free_r+0x6c>
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	4401      	add	r1, r0
 80063d8:	1850      	adds	r0, r2, r1
 80063da:	4283      	cmp	r3, r0
 80063dc:	6011      	str	r1, [r2, #0]
 80063de:	d1e0      	bne.n	80063a2 <_free_r+0x22>
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4408      	add	r0, r1
 80063e6:	6010      	str	r0, [r2, #0]
 80063e8:	6053      	str	r3, [r2, #4]
 80063ea:	e7da      	b.n	80063a2 <_free_r+0x22>
 80063ec:	d902      	bls.n	80063f4 <_free_r+0x74>
 80063ee:	230c      	movs	r3, #12
 80063f0:	602b      	str	r3, [r5, #0]
 80063f2:	e7d6      	b.n	80063a2 <_free_r+0x22>
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	1821      	adds	r1, r4, r0
 80063f8:	428b      	cmp	r3, r1
 80063fa:	bf01      	itttt	eq
 80063fc:	6819      	ldreq	r1, [r3, #0]
 80063fe:	685b      	ldreq	r3, [r3, #4]
 8006400:	1809      	addeq	r1, r1, r0
 8006402:	6021      	streq	r1, [r4, #0]
 8006404:	6063      	str	r3, [r4, #4]
 8006406:	6054      	str	r4, [r2, #4]
 8006408:	e7cb      	b.n	80063a2 <_free_r+0x22>
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	20000734 	.word	0x20000734

08006410 <malloc>:
 8006410:	4b02      	ldr	r3, [pc, #8]	; (800641c <malloc+0xc>)
 8006412:	4601      	mov	r1, r0
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f000 b823 	b.w	8006460 <_malloc_r>
 800641a:	bf00      	nop
 800641c:	20000074 	.word	0x20000074

08006420 <sbrk_aligned>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4e0e      	ldr	r6, [pc, #56]	; (800645c <sbrk_aligned+0x3c>)
 8006424:	460c      	mov	r4, r1
 8006426:	6831      	ldr	r1, [r6, #0]
 8006428:	4605      	mov	r5, r0
 800642a:	b911      	cbnz	r1, 8006432 <sbrk_aligned+0x12>
 800642c:	f001 fd9e 	bl	8007f6c <_sbrk_r>
 8006430:	6030      	str	r0, [r6, #0]
 8006432:	4621      	mov	r1, r4
 8006434:	4628      	mov	r0, r5
 8006436:	f001 fd99 	bl	8007f6c <_sbrk_r>
 800643a:	1c43      	adds	r3, r0, #1
 800643c:	d00a      	beq.n	8006454 <sbrk_aligned+0x34>
 800643e:	1cc4      	adds	r4, r0, #3
 8006440:	f024 0403 	bic.w	r4, r4, #3
 8006444:	42a0      	cmp	r0, r4
 8006446:	d007      	beq.n	8006458 <sbrk_aligned+0x38>
 8006448:	1a21      	subs	r1, r4, r0
 800644a:	4628      	mov	r0, r5
 800644c:	f001 fd8e 	bl	8007f6c <_sbrk_r>
 8006450:	3001      	adds	r0, #1
 8006452:	d101      	bne.n	8006458 <sbrk_aligned+0x38>
 8006454:	f04f 34ff 	mov.w	r4, #4294967295
 8006458:	4620      	mov	r0, r4
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	20000738 	.word	0x20000738

08006460 <_malloc_r>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	1ccd      	adds	r5, r1, #3
 8006466:	f025 0503 	bic.w	r5, r5, #3
 800646a:	3508      	adds	r5, #8
 800646c:	2d0c      	cmp	r5, #12
 800646e:	bf38      	it	cc
 8006470:	250c      	movcc	r5, #12
 8006472:	2d00      	cmp	r5, #0
 8006474:	4607      	mov	r7, r0
 8006476:	db01      	blt.n	800647c <_malloc_r+0x1c>
 8006478:	42a9      	cmp	r1, r5
 800647a:	d905      	bls.n	8006488 <_malloc_r+0x28>
 800647c:	230c      	movs	r3, #12
 800647e:	2600      	movs	r6, #0
 8006480:	603b      	str	r3, [r7, #0]
 8006482:	4630      	mov	r0, r6
 8006484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006488:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800655c <_malloc_r+0xfc>
 800648c:	f000 f868 	bl	8006560 <__malloc_lock>
 8006490:	f8d8 3000 	ldr.w	r3, [r8]
 8006494:	461c      	mov	r4, r3
 8006496:	bb5c      	cbnz	r4, 80064f0 <_malloc_r+0x90>
 8006498:	4629      	mov	r1, r5
 800649a:	4638      	mov	r0, r7
 800649c:	f7ff ffc0 	bl	8006420 <sbrk_aligned>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	4604      	mov	r4, r0
 80064a4:	d155      	bne.n	8006552 <_malloc_r+0xf2>
 80064a6:	f8d8 4000 	ldr.w	r4, [r8]
 80064aa:	4626      	mov	r6, r4
 80064ac:	2e00      	cmp	r6, #0
 80064ae:	d145      	bne.n	800653c <_malloc_r+0xdc>
 80064b0:	2c00      	cmp	r4, #0
 80064b2:	d048      	beq.n	8006546 <_malloc_r+0xe6>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	4631      	mov	r1, r6
 80064b8:	4638      	mov	r0, r7
 80064ba:	eb04 0903 	add.w	r9, r4, r3
 80064be:	f001 fd55 	bl	8007f6c <_sbrk_r>
 80064c2:	4581      	cmp	r9, r0
 80064c4:	d13f      	bne.n	8006546 <_malloc_r+0xe6>
 80064c6:	6821      	ldr	r1, [r4, #0]
 80064c8:	4638      	mov	r0, r7
 80064ca:	1a6d      	subs	r5, r5, r1
 80064cc:	4629      	mov	r1, r5
 80064ce:	f7ff ffa7 	bl	8006420 <sbrk_aligned>
 80064d2:	3001      	adds	r0, #1
 80064d4:	d037      	beq.n	8006546 <_malloc_r+0xe6>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	442b      	add	r3, r5
 80064da:	6023      	str	r3, [r4, #0]
 80064dc:	f8d8 3000 	ldr.w	r3, [r8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d038      	beq.n	8006556 <_malloc_r+0xf6>
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	42a2      	cmp	r2, r4
 80064e8:	d12b      	bne.n	8006542 <_malloc_r+0xe2>
 80064ea:	2200      	movs	r2, #0
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	e00f      	b.n	8006510 <_malloc_r+0xb0>
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	1b52      	subs	r2, r2, r5
 80064f4:	d41f      	bmi.n	8006536 <_malloc_r+0xd6>
 80064f6:	2a0b      	cmp	r2, #11
 80064f8:	d917      	bls.n	800652a <_malloc_r+0xca>
 80064fa:	1961      	adds	r1, r4, r5
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	6025      	str	r5, [r4, #0]
 8006500:	bf18      	it	ne
 8006502:	6059      	strne	r1, [r3, #4]
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	bf08      	it	eq
 8006508:	f8c8 1000 	streq.w	r1, [r8]
 800650c:	5162      	str	r2, [r4, r5]
 800650e:	604b      	str	r3, [r1, #4]
 8006510:	4638      	mov	r0, r7
 8006512:	f104 060b 	add.w	r6, r4, #11
 8006516:	f000 f829 	bl	800656c <__malloc_unlock>
 800651a:	f026 0607 	bic.w	r6, r6, #7
 800651e:	1d23      	adds	r3, r4, #4
 8006520:	1af2      	subs	r2, r6, r3
 8006522:	d0ae      	beq.n	8006482 <_malloc_r+0x22>
 8006524:	1b9b      	subs	r3, r3, r6
 8006526:	50a3      	str	r3, [r4, r2]
 8006528:	e7ab      	b.n	8006482 <_malloc_r+0x22>
 800652a:	42a3      	cmp	r3, r4
 800652c:	6862      	ldr	r2, [r4, #4]
 800652e:	d1dd      	bne.n	80064ec <_malloc_r+0x8c>
 8006530:	f8c8 2000 	str.w	r2, [r8]
 8006534:	e7ec      	b.n	8006510 <_malloc_r+0xb0>
 8006536:	4623      	mov	r3, r4
 8006538:	6864      	ldr	r4, [r4, #4]
 800653a:	e7ac      	b.n	8006496 <_malloc_r+0x36>
 800653c:	4634      	mov	r4, r6
 800653e:	6876      	ldr	r6, [r6, #4]
 8006540:	e7b4      	b.n	80064ac <_malloc_r+0x4c>
 8006542:	4613      	mov	r3, r2
 8006544:	e7cc      	b.n	80064e0 <_malloc_r+0x80>
 8006546:	230c      	movs	r3, #12
 8006548:	4638      	mov	r0, r7
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	f000 f80e 	bl	800656c <__malloc_unlock>
 8006550:	e797      	b.n	8006482 <_malloc_r+0x22>
 8006552:	6025      	str	r5, [r4, #0]
 8006554:	e7dc      	b.n	8006510 <_malloc_r+0xb0>
 8006556:	605b      	str	r3, [r3, #4]
 8006558:	deff      	udf	#255	; 0xff
 800655a:	bf00      	nop
 800655c:	20000734 	.word	0x20000734

08006560 <__malloc_lock>:
 8006560:	4801      	ldr	r0, [pc, #4]	; (8006568 <__malloc_lock+0x8>)
 8006562:	f7ff b86c 	b.w	800563e <__retarget_lock_acquire_recursive>
 8006566:	bf00      	nop
 8006568:	20000730 	.word	0x20000730

0800656c <__malloc_unlock>:
 800656c:	4801      	ldr	r0, [pc, #4]	; (8006574 <__malloc_unlock+0x8>)
 800656e:	f7ff b867 	b.w	8005640 <__retarget_lock_release_recursive>
 8006572:	bf00      	nop
 8006574:	20000730 	.word	0x20000730

08006578 <_Balloc>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	69c6      	ldr	r6, [r0, #28]
 800657c:	4604      	mov	r4, r0
 800657e:	460d      	mov	r5, r1
 8006580:	b976      	cbnz	r6, 80065a0 <_Balloc+0x28>
 8006582:	2010      	movs	r0, #16
 8006584:	f7ff ff44 	bl	8006410 <malloc>
 8006588:	4602      	mov	r2, r0
 800658a:	61e0      	str	r0, [r4, #28]
 800658c:	b920      	cbnz	r0, 8006598 <_Balloc+0x20>
 800658e:	216b      	movs	r1, #107	; 0x6b
 8006590:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <_Balloc+0x78>)
 8006592:	4818      	ldr	r0, [pc, #96]	; (80065f4 <_Balloc+0x7c>)
 8006594:	f7ff f868 	bl	8005668 <__assert_func>
 8006598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800659c:	6006      	str	r6, [r0, #0]
 800659e:	60c6      	str	r6, [r0, #12]
 80065a0:	69e6      	ldr	r6, [r4, #28]
 80065a2:	68f3      	ldr	r3, [r6, #12]
 80065a4:	b183      	cbz	r3, 80065c8 <_Balloc+0x50>
 80065a6:	69e3      	ldr	r3, [r4, #28]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065ae:	b9b8      	cbnz	r0, 80065e0 <_Balloc+0x68>
 80065b0:	2101      	movs	r1, #1
 80065b2:	fa01 f605 	lsl.w	r6, r1, r5
 80065b6:	1d72      	adds	r2, r6, #5
 80065b8:	4620      	mov	r0, r4
 80065ba:	0092      	lsls	r2, r2, #2
 80065bc:	f001 fd01 	bl	8007fc2 <_calloc_r>
 80065c0:	b160      	cbz	r0, 80065dc <_Balloc+0x64>
 80065c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065c6:	e00e      	b.n	80065e6 <_Balloc+0x6e>
 80065c8:	2221      	movs	r2, #33	; 0x21
 80065ca:	2104      	movs	r1, #4
 80065cc:	4620      	mov	r0, r4
 80065ce:	f001 fcf8 	bl	8007fc2 <_calloc_r>
 80065d2:	69e3      	ldr	r3, [r4, #28]
 80065d4:	60f0      	str	r0, [r6, #12]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e4      	bne.n	80065a6 <_Balloc+0x2e>
 80065dc:	2000      	movs	r0, #0
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	6802      	ldr	r2, [r0, #0]
 80065e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065e6:	2300      	movs	r3, #0
 80065e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065ec:	e7f7      	b.n	80065de <_Balloc+0x66>
 80065ee:	bf00      	nop
 80065f0:	08008e19 	.word	0x08008e19
 80065f4:	08008f3c 	.word	0x08008f3c

080065f8 <_Bfree>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	69c6      	ldr	r6, [r0, #28]
 80065fc:	4605      	mov	r5, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	b976      	cbnz	r6, 8006620 <_Bfree+0x28>
 8006602:	2010      	movs	r0, #16
 8006604:	f7ff ff04 	bl	8006410 <malloc>
 8006608:	4602      	mov	r2, r0
 800660a:	61e8      	str	r0, [r5, #28]
 800660c:	b920      	cbnz	r0, 8006618 <_Bfree+0x20>
 800660e:	218f      	movs	r1, #143	; 0x8f
 8006610:	4b08      	ldr	r3, [pc, #32]	; (8006634 <_Bfree+0x3c>)
 8006612:	4809      	ldr	r0, [pc, #36]	; (8006638 <_Bfree+0x40>)
 8006614:	f7ff f828 	bl	8005668 <__assert_func>
 8006618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800661c:	6006      	str	r6, [r0, #0]
 800661e:	60c6      	str	r6, [r0, #12]
 8006620:	b13c      	cbz	r4, 8006632 <_Bfree+0x3a>
 8006622:	69eb      	ldr	r3, [r5, #28]
 8006624:	6862      	ldr	r2, [r4, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800662c:	6021      	str	r1, [r4, #0]
 800662e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	08008e19 	.word	0x08008e19
 8006638:	08008f3c 	.word	0x08008f3c

0800663c <__multadd>:
 800663c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006640:	4607      	mov	r7, r0
 8006642:	460c      	mov	r4, r1
 8006644:	461e      	mov	r6, r3
 8006646:	2000      	movs	r0, #0
 8006648:	690d      	ldr	r5, [r1, #16]
 800664a:	f101 0c14 	add.w	ip, r1, #20
 800664e:	f8dc 3000 	ldr.w	r3, [ip]
 8006652:	3001      	adds	r0, #1
 8006654:	b299      	uxth	r1, r3
 8006656:	fb02 6101 	mla	r1, r2, r1, r6
 800665a:	0c1e      	lsrs	r6, r3, #16
 800665c:	0c0b      	lsrs	r3, r1, #16
 800665e:	fb02 3306 	mla	r3, r2, r6, r3
 8006662:	b289      	uxth	r1, r1
 8006664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006668:	4285      	cmp	r5, r0
 800666a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800666e:	f84c 1b04 	str.w	r1, [ip], #4
 8006672:	dcec      	bgt.n	800664e <__multadd+0x12>
 8006674:	b30e      	cbz	r6, 80066ba <__multadd+0x7e>
 8006676:	68a3      	ldr	r3, [r4, #8]
 8006678:	42ab      	cmp	r3, r5
 800667a:	dc19      	bgt.n	80066b0 <__multadd+0x74>
 800667c:	6861      	ldr	r1, [r4, #4]
 800667e:	4638      	mov	r0, r7
 8006680:	3101      	adds	r1, #1
 8006682:	f7ff ff79 	bl	8006578 <_Balloc>
 8006686:	4680      	mov	r8, r0
 8006688:	b928      	cbnz	r0, 8006696 <__multadd+0x5a>
 800668a:	4602      	mov	r2, r0
 800668c:	21ba      	movs	r1, #186	; 0xba
 800668e:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <__multadd+0x84>)
 8006690:	480c      	ldr	r0, [pc, #48]	; (80066c4 <__multadd+0x88>)
 8006692:	f7fe ffe9 	bl	8005668 <__assert_func>
 8006696:	6922      	ldr	r2, [r4, #16]
 8006698:	f104 010c 	add.w	r1, r4, #12
 800669c:	3202      	adds	r2, #2
 800669e:	0092      	lsls	r2, r2, #2
 80066a0:	300c      	adds	r0, #12
 80066a2:	f001 fc73 	bl	8007f8c <memcpy>
 80066a6:	4621      	mov	r1, r4
 80066a8:	4638      	mov	r0, r7
 80066aa:	f7ff ffa5 	bl	80065f8 <_Bfree>
 80066ae:	4644      	mov	r4, r8
 80066b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066b4:	3501      	adds	r5, #1
 80066b6:	615e      	str	r6, [r3, #20]
 80066b8:	6125      	str	r5, [r4, #16]
 80066ba:	4620      	mov	r0, r4
 80066bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c0:	08008f2b 	.word	0x08008f2b
 80066c4:	08008f3c 	.word	0x08008f3c

080066c8 <__s2b>:
 80066c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066cc:	4615      	mov	r5, r2
 80066ce:	2209      	movs	r2, #9
 80066d0:	461f      	mov	r7, r3
 80066d2:	3308      	adds	r3, #8
 80066d4:	460c      	mov	r4, r1
 80066d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066da:	4606      	mov	r6, r0
 80066dc:	2201      	movs	r2, #1
 80066de:	2100      	movs	r1, #0
 80066e0:	429a      	cmp	r2, r3
 80066e2:	db09      	blt.n	80066f8 <__s2b+0x30>
 80066e4:	4630      	mov	r0, r6
 80066e6:	f7ff ff47 	bl	8006578 <_Balloc>
 80066ea:	b940      	cbnz	r0, 80066fe <__s2b+0x36>
 80066ec:	4602      	mov	r2, r0
 80066ee:	21d3      	movs	r1, #211	; 0xd3
 80066f0:	4b18      	ldr	r3, [pc, #96]	; (8006754 <__s2b+0x8c>)
 80066f2:	4819      	ldr	r0, [pc, #100]	; (8006758 <__s2b+0x90>)
 80066f4:	f7fe ffb8 	bl	8005668 <__assert_func>
 80066f8:	0052      	lsls	r2, r2, #1
 80066fa:	3101      	adds	r1, #1
 80066fc:	e7f0      	b.n	80066e0 <__s2b+0x18>
 80066fe:	9b08      	ldr	r3, [sp, #32]
 8006700:	2d09      	cmp	r5, #9
 8006702:	6143      	str	r3, [r0, #20]
 8006704:	f04f 0301 	mov.w	r3, #1
 8006708:	6103      	str	r3, [r0, #16]
 800670a:	dd16      	ble.n	800673a <__s2b+0x72>
 800670c:	f104 0909 	add.w	r9, r4, #9
 8006710:	46c8      	mov	r8, r9
 8006712:	442c      	add	r4, r5
 8006714:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006718:	4601      	mov	r1, r0
 800671a:	220a      	movs	r2, #10
 800671c:	4630      	mov	r0, r6
 800671e:	3b30      	subs	r3, #48	; 0x30
 8006720:	f7ff ff8c 	bl	800663c <__multadd>
 8006724:	45a0      	cmp	r8, r4
 8006726:	d1f5      	bne.n	8006714 <__s2b+0x4c>
 8006728:	f1a5 0408 	sub.w	r4, r5, #8
 800672c:	444c      	add	r4, r9
 800672e:	1b2d      	subs	r5, r5, r4
 8006730:	1963      	adds	r3, r4, r5
 8006732:	42bb      	cmp	r3, r7
 8006734:	db04      	blt.n	8006740 <__s2b+0x78>
 8006736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800673a:	2509      	movs	r5, #9
 800673c:	340a      	adds	r4, #10
 800673e:	e7f6      	b.n	800672e <__s2b+0x66>
 8006740:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006744:	4601      	mov	r1, r0
 8006746:	220a      	movs	r2, #10
 8006748:	4630      	mov	r0, r6
 800674a:	3b30      	subs	r3, #48	; 0x30
 800674c:	f7ff ff76 	bl	800663c <__multadd>
 8006750:	e7ee      	b.n	8006730 <__s2b+0x68>
 8006752:	bf00      	nop
 8006754:	08008f2b 	.word	0x08008f2b
 8006758:	08008f3c 	.word	0x08008f3c

0800675c <__hi0bits>:
 800675c:	0c02      	lsrs	r2, r0, #16
 800675e:	0412      	lsls	r2, r2, #16
 8006760:	4603      	mov	r3, r0
 8006762:	b9ca      	cbnz	r2, 8006798 <__hi0bits+0x3c>
 8006764:	0403      	lsls	r3, r0, #16
 8006766:	2010      	movs	r0, #16
 8006768:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800676c:	bf04      	itt	eq
 800676e:	021b      	lsleq	r3, r3, #8
 8006770:	3008      	addeq	r0, #8
 8006772:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006776:	bf04      	itt	eq
 8006778:	011b      	lsleq	r3, r3, #4
 800677a:	3004      	addeq	r0, #4
 800677c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006780:	bf04      	itt	eq
 8006782:	009b      	lsleq	r3, r3, #2
 8006784:	3002      	addeq	r0, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	db05      	blt.n	8006796 <__hi0bits+0x3a>
 800678a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800678e:	f100 0001 	add.w	r0, r0, #1
 8006792:	bf08      	it	eq
 8006794:	2020      	moveq	r0, #32
 8006796:	4770      	bx	lr
 8006798:	2000      	movs	r0, #0
 800679a:	e7e5      	b.n	8006768 <__hi0bits+0xc>

0800679c <__lo0bits>:
 800679c:	6803      	ldr	r3, [r0, #0]
 800679e:	4602      	mov	r2, r0
 80067a0:	f013 0007 	ands.w	r0, r3, #7
 80067a4:	d00b      	beq.n	80067be <__lo0bits+0x22>
 80067a6:	07d9      	lsls	r1, r3, #31
 80067a8:	d421      	bmi.n	80067ee <__lo0bits+0x52>
 80067aa:	0798      	lsls	r0, r3, #30
 80067ac:	bf49      	itett	mi
 80067ae:	085b      	lsrmi	r3, r3, #1
 80067b0:	089b      	lsrpl	r3, r3, #2
 80067b2:	2001      	movmi	r0, #1
 80067b4:	6013      	strmi	r3, [r2, #0]
 80067b6:	bf5c      	itt	pl
 80067b8:	2002      	movpl	r0, #2
 80067ba:	6013      	strpl	r3, [r2, #0]
 80067bc:	4770      	bx	lr
 80067be:	b299      	uxth	r1, r3
 80067c0:	b909      	cbnz	r1, 80067c6 <__lo0bits+0x2a>
 80067c2:	2010      	movs	r0, #16
 80067c4:	0c1b      	lsrs	r3, r3, #16
 80067c6:	b2d9      	uxtb	r1, r3
 80067c8:	b909      	cbnz	r1, 80067ce <__lo0bits+0x32>
 80067ca:	3008      	adds	r0, #8
 80067cc:	0a1b      	lsrs	r3, r3, #8
 80067ce:	0719      	lsls	r1, r3, #28
 80067d0:	bf04      	itt	eq
 80067d2:	091b      	lsreq	r3, r3, #4
 80067d4:	3004      	addeq	r0, #4
 80067d6:	0799      	lsls	r1, r3, #30
 80067d8:	bf04      	itt	eq
 80067da:	089b      	lsreq	r3, r3, #2
 80067dc:	3002      	addeq	r0, #2
 80067de:	07d9      	lsls	r1, r3, #31
 80067e0:	d403      	bmi.n	80067ea <__lo0bits+0x4e>
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	f100 0001 	add.w	r0, r0, #1
 80067e8:	d003      	beq.n	80067f2 <__lo0bits+0x56>
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	4770      	bx	lr
 80067ee:	2000      	movs	r0, #0
 80067f0:	4770      	bx	lr
 80067f2:	2020      	movs	r0, #32
 80067f4:	4770      	bx	lr
	...

080067f8 <__i2b>:
 80067f8:	b510      	push	{r4, lr}
 80067fa:	460c      	mov	r4, r1
 80067fc:	2101      	movs	r1, #1
 80067fe:	f7ff febb 	bl	8006578 <_Balloc>
 8006802:	4602      	mov	r2, r0
 8006804:	b928      	cbnz	r0, 8006812 <__i2b+0x1a>
 8006806:	f240 1145 	movw	r1, #325	; 0x145
 800680a:	4b04      	ldr	r3, [pc, #16]	; (800681c <__i2b+0x24>)
 800680c:	4804      	ldr	r0, [pc, #16]	; (8006820 <__i2b+0x28>)
 800680e:	f7fe ff2b 	bl	8005668 <__assert_func>
 8006812:	2301      	movs	r3, #1
 8006814:	6144      	str	r4, [r0, #20]
 8006816:	6103      	str	r3, [r0, #16]
 8006818:	bd10      	pop	{r4, pc}
 800681a:	bf00      	nop
 800681c:	08008f2b 	.word	0x08008f2b
 8006820:	08008f3c 	.word	0x08008f3c

08006824 <__multiply>:
 8006824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006828:	4691      	mov	r9, r2
 800682a:	690a      	ldr	r2, [r1, #16]
 800682c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006830:	460c      	mov	r4, r1
 8006832:	429a      	cmp	r2, r3
 8006834:	bfbe      	ittt	lt
 8006836:	460b      	movlt	r3, r1
 8006838:	464c      	movlt	r4, r9
 800683a:	4699      	movlt	r9, r3
 800683c:	6927      	ldr	r7, [r4, #16]
 800683e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	6861      	ldr	r1, [r4, #4]
 8006846:	eb07 060a 	add.w	r6, r7, sl
 800684a:	42b3      	cmp	r3, r6
 800684c:	b085      	sub	sp, #20
 800684e:	bfb8      	it	lt
 8006850:	3101      	addlt	r1, #1
 8006852:	f7ff fe91 	bl	8006578 <_Balloc>
 8006856:	b930      	cbnz	r0, 8006866 <__multiply+0x42>
 8006858:	4602      	mov	r2, r0
 800685a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800685e:	4b43      	ldr	r3, [pc, #268]	; (800696c <__multiply+0x148>)
 8006860:	4843      	ldr	r0, [pc, #268]	; (8006970 <__multiply+0x14c>)
 8006862:	f7fe ff01 	bl	8005668 <__assert_func>
 8006866:	f100 0514 	add.w	r5, r0, #20
 800686a:	462b      	mov	r3, r5
 800686c:	2200      	movs	r2, #0
 800686e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006872:	4543      	cmp	r3, r8
 8006874:	d321      	bcc.n	80068ba <__multiply+0x96>
 8006876:	f104 0314 	add.w	r3, r4, #20
 800687a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800687e:	f109 0314 	add.w	r3, r9, #20
 8006882:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006886:	9202      	str	r2, [sp, #8]
 8006888:	1b3a      	subs	r2, r7, r4
 800688a:	3a15      	subs	r2, #21
 800688c:	f022 0203 	bic.w	r2, r2, #3
 8006890:	3204      	adds	r2, #4
 8006892:	f104 0115 	add.w	r1, r4, #21
 8006896:	428f      	cmp	r7, r1
 8006898:	bf38      	it	cc
 800689a:	2204      	movcc	r2, #4
 800689c:	9201      	str	r2, [sp, #4]
 800689e:	9a02      	ldr	r2, [sp, #8]
 80068a0:	9303      	str	r3, [sp, #12]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d80c      	bhi.n	80068c0 <__multiply+0x9c>
 80068a6:	2e00      	cmp	r6, #0
 80068a8:	dd03      	ble.n	80068b2 <__multiply+0x8e>
 80068aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d05a      	beq.n	8006968 <__multiply+0x144>
 80068b2:	6106      	str	r6, [r0, #16]
 80068b4:	b005      	add	sp, #20
 80068b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ba:	f843 2b04 	str.w	r2, [r3], #4
 80068be:	e7d8      	b.n	8006872 <__multiply+0x4e>
 80068c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80068c4:	f1ba 0f00 	cmp.w	sl, #0
 80068c8:	d023      	beq.n	8006912 <__multiply+0xee>
 80068ca:	46a9      	mov	r9, r5
 80068cc:	f04f 0c00 	mov.w	ip, #0
 80068d0:	f104 0e14 	add.w	lr, r4, #20
 80068d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068d8:	f8d9 1000 	ldr.w	r1, [r9]
 80068dc:	fa1f fb82 	uxth.w	fp, r2
 80068e0:	b289      	uxth	r1, r1
 80068e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80068e6:	4461      	add	r1, ip
 80068e8:	f8d9 c000 	ldr.w	ip, [r9]
 80068ec:	0c12      	lsrs	r2, r2, #16
 80068ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80068f2:	fb0a c202 	mla	r2, sl, r2, ip
 80068f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068fa:	b289      	uxth	r1, r1
 80068fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006900:	4577      	cmp	r7, lr
 8006902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006906:	f849 1b04 	str.w	r1, [r9], #4
 800690a:	d8e3      	bhi.n	80068d4 <__multiply+0xb0>
 800690c:	9a01      	ldr	r2, [sp, #4]
 800690e:	f845 c002 	str.w	ip, [r5, r2]
 8006912:	9a03      	ldr	r2, [sp, #12]
 8006914:	3304      	adds	r3, #4
 8006916:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800691a:	f1b9 0f00 	cmp.w	r9, #0
 800691e:	d021      	beq.n	8006964 <__multiply+0x140>
 8006920:	46ae      	mov	lr, r5
 8006922:	f04f 0a00 	mov.w	sl, #0
 8006926:	6829      	ldr	r1, [r5, #0]
 8006928:	f104 0c14 	add.w	ip, r4, #20
 800692c:	f8bc b000 	ldrh.w	fp, [ip]
 8006930:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006934:	b289      	uxth	r1, r1
 8006936:	fb09 220b 	mla	r2, r9, fp, r2
 800693a:	4452      	add	r2, sl
 800693c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006940:	f84e 1b04 	str.w	r1, [lr], #4
 8006944:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006948:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800694c:	f8be 1000 	ldrh.w	r1, [lr]
 8006950:	4567      	cmp	r7, ip
 8006952:	fb09 110a 	mla	r1, r9, sl, r1
 8006956:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800695a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800695e:	d8e5      	bhi.n	800692c <__multiply+0x108>
 8006960:	9a01      	ldr	r2, [sp, #4]
 8006962:	50a9      	str	r1, [r5, r2]
 8006964:	3504      	adds	r5, #4
 8006966:	e79a      	b.n	800689e <__multiply+0x7a>
 8006968:	3e01      	subs	r6, #1
 800696a:	e79c      	b.n	80068a6 <__multiply+0x82>
 800696c:	08008f2b 	.word	0x08008f2b
 8006970:	08008f3c 	.word	0x08008f3c

08006974 <__pow5mult>:
 8006974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006978:	4615      	mov	r5, r2
 800697a:	f012 0203 	ands.w	r2, r2, #3
 800697e:	4606      	mov	r6, r0
 8006980:	460f      	mov	r7, r1
 8006982:	d007      	beq.n	8006994 <__pow5mult+0x20>
 8006984:	4c25      	ldr	r4, [pc, #148]	; (8006a1c <__pow5mult+0xa8>)
 8006986:	3a01      	subs	r2, #1
 8006988:	2300      	movs	r3, #0
 800698a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800698e:	f7ff fe55 	bl	800663c <__multadd>
 8006992:	4607      	mov	r7, r0
 8006994:	10ad      	asrs	r5, r5, #2
 8006996:	d03d      	beq.n	8006a14 <__pow5mult+0xa0>
 8006998:	69f4      	ldr	r4, [r6, #28]
 800699a:	b97c      	cbnz	r4, 80069bc <__pow5mult+0x48>
 800699c:	2010      	movs	r0, #16
 800699e:	f7ff fd37 	bl	8006410 <malloc>
 80069a2:	4602      	mov	r2, r0
 80069a4:	61f0      	str	r0, [r6, #28]
 80069a6:	b928      	cbnz	r0, 80069b4 <__pow5mult+0x40>
 80069a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80069ac:	4b1c      	ldr	r3, [pc, #112]	; (8006a20 <__pow5mult+0xac>)
 80069ae:	481d      	ldr	r0, [pc, #116]	; (8006a24 <__pow5mult+0xb0>)
 80069b0:	f7fe fe5a 	bl	8005668 <__assert_func>
 80069b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069b8:	6004      	str	r4, [r0, #0]
 80069ba:	60c4      	str	r4, [r0, #12]
 80069bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80069c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069c4:	b94c      	cbnz	r4, 80069da <__pow5mult+0x66>
 80069c6:	f240 2171 	movw	r1, #625	; 0x271
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7ff ff14 	bl	80067f8 <__i2b>
 80069d0:	2300      	movs	r3, #0
 80069d2:	4604      	mov	r4, r0
 80069d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80069d8:	6003      	str	r3, [r0, #0]
 80069da:	f04f 0900 	mov.w	r9, #0
 80069de:	07eb      	lsls	r3, r5, #31
 80069e0:	d50a      	bpl.n	80069f8 <__pow5mult+0x84>
 80069e2:	4639      	mov	r1, r7
 80069e4:	4622      	mov	r2, r4
 80069e6:	4630      	mov	r0, r6
 80069e8:	f7ff ff1c 	bl	8006824 <__multiply>
 80069ec:	4680      	mov	r8, r0
 80069ee:	4639      	mov	r1, r7
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7ff fe01 	bl	80065f8 <_Bfree>
 80069f6:	4647      	mov	r7, r8
 80069f8:	106d      	asrs	r5, r5, #1
 80069fa:	d00b      	beq.n	8006a14 <__pow5mult+0xa0>
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	b938      	cbnz	r0, 8006a10 <__pow5mult+0x9c>
 8006a00:	4622      	mov	r2, r4
 8006a02:	4621      	mov	r1, r4
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7ff ff0d 	bl	8006824 <__multiply>
 8006a0a:	6020      	str	r0, [r4, #0]
 8006a0c:	f8c0 9000 	str.w	r9, [r0]
 8006a10:	4604      	mov	r4, r0
 8006a12:	e7e4      	b.n	80069de <__pow5mult+0x6a>
 8006a14:	4638      	mov	r0, r7
 8006a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a1a:	bf00      	nop
 8006a1c:	08009088 	.word	0x08009088
 8006a20:	08008e19 	.word	0x08008e19
 8006a24:	08008f3c 	.word	0x08008f3c

08006a28 <__lshift>:
 8006a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	4607      	mov	r7, r0
 8006a30:	4691      	mov	r9, r2
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	6849      	ldr	r1, [r1, #4]
 8006a36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a3a:	68a3      	ldr	r3, [r4, #8]
 8006a3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a40:	f108 0601 	add.w	r6, r8, #1
 8006a44:	42b3      	cmp	r3, r6
 8006a46:	db0b      	blt.n	8006a60 <__lshift+0x38>
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f7ff fd95 	bl	8006578 <_Balloc>
 8006a4e:	4605      	mov	r5, r0
 8006a50:	b948      	cbnz	r0, 8006a66 <__lshift+0x3e>
 8006a52:	4602      	mov	r2, r0
 8006a54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006a58:	4b27      	ldr	r3, [pc, #156]	; (8006af8 <__lshift+0xd0>)
 8006a5a:	4828      	ldr	r0, [pc, #160]	; (8006afc <__lshift+0xd4>)
 8006a5c:	f7fe fe04 	bl	8005668 <__assert_func>
 8006a60:	3101      	adds	r1, #1
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	e7ee      	b.n	8006a44 <__lshift+0x1c>
 8006a66:	2300      	movs	r3, #0
 8006a68:	f100 0114 	add.w	r1, r0, #20
 8006a6c:	f100 0210 	add.w	r2, r0, #16
 8006a70:	4618      	mov	r0, r3
 8006a72:	4553      	cmp	r3, sl
 8006a74:	db33      	blt.n	8006ade <__lshift+0xb6>
 8006a76:	6920      	ldr	r0, [r4, #16]
 8006a78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a7c:	f104 0314 	add.w	r3, r4, #20
 8006a80:	f019 091f 	ands.w	r9, r9, #31
 8006a84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a8c:	d02b      	beq.n	8006ae6 <__lshift+0xbe>
 8006a8e:	468a      	mov	sl, r1
 8006a90:	2200      	movs	r2, #0
 8006a92:	f1c9 0e20 	rsb	lr, r9, #32
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	fa00 f009 	lsl.w	r0, r0, r9
 8006a9c:	4310      	orrs	r0, r2
 8006a9e:	f84a 0b04 	str.w	r0, [sl], #4
 8006aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa6:	459c      	cmp	ip, r3
 8006aa8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006aac:	d8f3      	bhi.n	8006a96 <__lshift+0x6e>
 8006aae:	ebac 0304 	sub.w	r3, ip, r4
 8006ab2:	3b15      	subs	r3, #21
 8006ab4:	f023 0303 	bic.w	r3, r3, #3
 8006ab8:	3304      	adds	r3, #4
 8006aba:	f104 0015 	add.w	r0, r4, #21
 8006abe:	4584      	cmp	ip, r0
 8006ac0:	bf38      	it	cc
 8006ac2:	2304      	movcc	r3, #4
 8006ac4:	50ca      	str	r2, [r1, r3]
 8006ac6:	b10a      	cbz	r2, 8006acc <__lshift+0xa4>
 8006ac8:	f108 0602 	add.w	r6, r8, #2
 8006acc:	3e01      	subs	r6, #1
 8006ace:	4638      	mov	r0, r7
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	612e      	str	r6, [r5, #16]
 8006ad4:	f7ff fd90 	bl	80065f8 <_Bfree>
 8006ad8:	4628      	mov	r0, r5
 8006ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ade:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	e7c5      	b.n	8006a72 <__lshift+0x4a>
 8006ae6:	3904      	subs	r1, #4
 8006ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aec:	459c      	cmp	ip, r3
 8006aee:	f841 2f04 	str.w	r2, [r1, #4]!
 8006af2:	d8f9      	bhi.n	8006ae8 <__lshift+0xc0>
 8006af4:	e7ea      	b.n	8006acc <__lshift+0xa4>
 8006af6:	bf00      	nop
 8006af8:	08008f2b 	.word	0x08008f2b
 8006afc:	08008f3c 	.word	0x08008f3c

08006b00 <__mcmp>:
 8006b00:	4603      	mov	r3, r0
 8006b02:	690a      	ldr	r2, [r1, #16]
 8006b04:	6900      	ldr	r0, [r0, #16]
 8006b06:	b530      	push	{r4, r5, lr}
 8006b08:	1a80      	subs	r0, r0, r2
 8006b0a:	d10d      	bne.n	8006b28 <__mcmp+0x28>
 8006b0c:	3314      	adds	r3, #20
 8006b0e:	3114      	adds	r1, #20
 8006b10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b20:	4295      	cmp	r5, r2
 8006b22:	d002      	beq.n	8006b2a <__mcmp+0x2a>
 8006b24:	d304      	bcc.n	8006b30 <__mcmp+0x30>
 8006b26:	2001      	movs	r0, #1
 8006b28:	bd30      	pop	{r4, r5, pc}
 8006b2a:	42a3      	cmp	r3, r4
 8006b2c:	d3f4      	bcc.n	8006b18 <__mcmp+0x18>
 8006b2e:	e7fb      	b.n	8006b28 <__mcmp+0x28>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	e7f8      	b.n	8006b28 <__mcmp+0x28>
	...

08006b38 <__mdiff>:
 8006b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	4607      	mov	r7, r0
 8006b40:	4611      	mov	r1, r2
 8006b42:	4628      	mov	r0, r5
 8006b44:	4614      	mov	r4, r2
 8006b46:	f7ff ffdb 	bl	8006b00 <__mcmp>
 8006b4a:	1e06      	subs	r6, r0, #0
 8006b4c:	d111      	bne.n	8006b72 <__mdiff+0x3a>
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4638      	mov	r0, r7
 8006b52:	f7ff fd11 	bl	8006578 <_Balloc>
 8006b56:	4602      	mov	r2, r0
 8006b58:	b928      	cbnz	r0, 8006b66 <__mdiff+0x2e>
 8006b5a:	f240 2137 	movw	r1, #567	; 0x237
 8006b5e:	4b3a      	ldr	r3, [pc, #232]	; (8006c48 <__mdiff+0x110>)
 8006b60:	483a      	ldr	r0, [pc, #232]	; (8006c4c <__mdiff+0x114>)
 8006b62:	f7fe fd81 	bl	8005668 <__assert_func>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b72:	bfa4      	itt	ge
 8006b74:	4623      	movge	r3, r4
 8006b76:	462c      	movge	r4, r5
 8006b78:	4638      	mov	r0, r7
 8006b7a:	6861      	ldr	r1, [r4, #4]
 8006b7c:	bfa6      	itte	ge
 8006b7e:	461d      	movge	r5, r3
 8006b80:	2600      	movge	r6, #0
 8006b82:	2601      	movlt	r6, #1
 8006b84:	f7ff fcf8 	bl	8006578 <_Balloc>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	b918      	cbnz	r0, 8006b94 <__mdiff+0x5c>
 8006b8c:	f240 2145 	movw	r1, #581	; 0x245
 8006b90:	4b2d      	ldr	r3, [pc, #180]	; (8006c48 <__mdiff+0x110>)
 8006b92:	e7e5      	b.n	8006b60 <__mdiff+0x28>
 8006b94:	f102 0814 	add.w	r8, r2, #20
 8006b98:	46c2      	mov	sl, r8
 8006b9a:	f04f 0c00 	mov.w	ip, #0
 8006b9e:	6927      	ldr	r7, [r4, #16]
 8006ba0:	60c6      	str	r6, [r0, #12]
 8006ba2:	692e      	ldr	r6, [r5, #16]
 8006ba4:	f104 0014 	add.w	r0, r4, #20
 8006ba8:	f105 0914 	add.w	r9, r5, #20
 8006bac:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006bb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006bb4:	3410      	adds	r4, #16
 8006bb6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006bba:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bbe:	fa1f f18b 	uxth.w	r1, fp
 8006bc2:	4461      	add	r1, ip
 8006bc4:	fa1f fc83 	uxth.w	ip, r3
 8006bc8:	0c1b      	lsrs	r3, r3, #16
 8006bca:	eba1 010c 	sub.w	r1, r1, ip
 8006bce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bd2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bd6:	b289      	uxth	r1, r1
 8006bd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006bdc:	454e      	cmp	r6, r9
 8006bde:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006be2:	f84a 1b04 	str.w	r1, [sl], #4
 8006be6:	d8e6      	bhi.n	8006bb6 <__mdiff+0x7e>
 8006be8:	1b73      	subs	r3, r6, r5
 8006bea:	3b15      	subs	r3, #21
 8006bec:	f023 0303 	bic.w	r3, r3, #3
 8006bf0:	3515      	adds	r5, #21
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	42ae      	cmp	r6, r5
 8006bf6:	bf38      	it	cc
 8006bf8:	2304      	movcc	r3, #4
 8006bfa:	4418      	add	r0, r3
 8006bfc:	4443      	add	r3, r8
 8006bfe:	461e      	mov	r6, r3
 8006c00:	4605      	mov	r5, r0
 8006c02:	4575      	cmp	r5, lr
 8006c04:	d30e      	bcc.n	8006c24 <__mdiff+0xec>
 8006c06:	f10e 0103 	add.w	r1, lr, #3
 8006c0a:	1a09      	subs	r1, r1, r0
 8006c0c:	f021 0103 	bic.w	r1, r1, #3
 8006c10:	3803      	subs	r0, #3
 8006c12:	4586      	cmp	lr, r0
 8006c14:	bf38      	it	cc
 8006c16:	2100      	movcc	r1, #0
 8006c18:	440b      	add	r3, r1
 8006c1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c1e:	b189      	cbz	r1, 8006c44 <__mdiff+0x10c>
 8006c20:	6117      	str	r7, [r2, #16]
 8006c22:	e7a3      	b.n	8006b6c <__mdiff+0x34>
 8006c24:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c28:	fa1f f188 	uxth.w	r1, r8
 8006c2c:	4461      	add	r1, ip
 8006c2e:	140c      	asrs	r4, r1, #16
 8006c30:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c34:	b289      	uxth	r1, r1
 8006c36:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c3a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c3e:	f846 1b04 	str.w	r1, [r6], #4
 8006c42:	e7de      	b.n	8006c02 <__mdiff+0xca>
 8006c44:	3f01      	subs	r7, #1
 8006c46:	e7e8      	b.n	8006c1a <__mdiff+0xe2>
 8006c48:	08008f2b 	.word	0x08008f2b
 8006c4c:	08008f3c 	.word	0x08008f3c

08006c50 <__ulp>:
 8006c50:	4b0e      	ldr	r3, [pc, #56]	; (8006c8c <__ulp+0x3c>)
 8006c52:	400b      	ands	r3, r1
 8006c54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	dc08      	bgt.n	8006c6e <__ulp+0x1e>
 8006c5c:	425b      	negs	r3, r3
 8006c5e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006c62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006c66:	da04      	bge.n	8006c72 <__ulp+0x22>
 8006c68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c6c:	4113      	asrs	r3, r2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	e008      	b.n	8006c84 <__ulp+0x34>
 8006c72:	f1a2 0314 	sub.w	r3, r2, #20
 8006c76:	2b1e      	cmp	r3, #30
 8006c78:	bfd6      	itet	le
 8006c7a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006c7e:	2201      	movgt	r2, #1
 8006c80:	40da      	lsrle	r2, r3
 8006c82:	2300      	movs	r3, #0
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	7ff00000 	.word	0x7ff00000

08006c90 <__b2d>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	6905      	ldr	r5, [r0, #16]
 8006c94:	f100 0714 	add.w	r7, r0, #20
 8006c98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006c9c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006ca0:	1f2e      	subs	r6, r5, #4
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f7ff fd5a 	bl	800675c <__hi0bits>
 8006ca8:	f1c0 0220 	rsb	r2, r0, #32
 8006cac:	280a      	cmp	r0, #10
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006d1c <__b2d+0x8c>
 8006cb4:	600a      	str	r2, [r1, #0]
 8006cb6:	dc12      	bgt.n	8006cde <__b2d+0x4e>
 8006cb8:	f1c0 0e0b 	rsb	lr, r0, #11
 8006cbc:	fa24 f20e 	lsr.w	r2, r4, lr
 8006cc0:	42b7      	cmp	r7, r6
 8006cc2:	ea42 010c 	orr.w	r1, r2, ip
 8006cc6:	bf2c      	ite	cs
 8006cc8:	2200      	movcs	r2, #0
 8006cca:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006cce:	3315      	adds	r3, #21
 8006cd0:	fa04 f303 	lsl.w	r3, r4, r3
 8006cd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cde:	42b7      	cmp	r7, r6
 8006ce0:	bf2e      	itee	cs
 8006ce2:	2200      	movcs	r2, #0
 8006ce4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006ce8:	f1a5 0608 	subcc.w	r6, r5, #8
 8006cec:	3b0b      	subs	r3, #11
 8006cee:	d012      	beq.n	8006d16 <__b2d+0x86>
 8006cf0:	f1c3 0520 	rsb	r5, r3, #32
 8006cf4:	fa22 f105 	lsr.w	r1, r2, r5
 8006cf8:	409c      	lsls	r4, r3
 8006cfa:	430c      	orrs	r4, r1
 8006cfc:	42be      	cmp	r6, r7
 8006cfe:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006d02:	bf94      	ite	ls
 8006d04:	2400      	movls	r4, #0
 8006d06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006d0a:	409a      	lsls	r2, r3
 8006d0c:	40ec      	lsrs	r4, r5
 8006d0e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006d12:	4322      	orrs	r2, r4
 8006d14:	e7e1      	b.n	8006cda <__b2d+0x4a>
 8006d16:	ea44 010c 	orr.w	r1, r4, ip
 8006d1a:	e7de      	b.n	8006cda <__b2d+0x4a>
 8006d1c:	3ff00000 	.word	0x3ff00000

08006d20 <__d2b>:
 8006d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d22:	2101      	movs	r1, #1
 8006d24:	4617      	mov	r7, r2
 8006d26:	461c      	mov	r4, r3
 8006d28:	9e08      	ldr	r6, [sp, #32]
 8006d2a:	f7ff fc25 	bl	8006578 <_Balloc>
 8006d2e:	4605      	mov	r5, r0
 8006d30:	b930      	cbnz	r0, 8006d40 <__d2b+0x20>
 8006d32:	4602      	mov	r2, r0
 8006d34:	f240 310f 	movw	r1, #783	; 0x30f
 8006d38:	4b22      	ldr	r3, [pc, #136]	; (8006dc4 <__d2b+0xa4>)
 8006d3a:	4823      	ldr	r0, [pc, #140]	; (8006dc8 <__d2b+0xa8>)
 8006d3c:	f7fe fc94 	bl	8005668 <__assert_func>
 8006d40:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006d44:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006d48:	bb24      	cbnz	r4, 8006d94 <__d2b+0x74>
 8006d4a:	2f00      	cmp	r7, #0
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	d026      	beq.n	8006d9e <__d2b+0x7e>
 8006d50:	4668      	mov	r0, sp
 8006d52:	9700      	str	r7, [sp, #0]
 8006d54:	f7ff fd22 	bl	800679c <__lo0bits>
 8006d58:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d5c:	b1e8      	cbz	r0, 8006d9a <__d2b+0x7a>
 8006d5e:	f1c0 0320 	rsb	r3, r0, #32
 8006d62:	fa02 f303 	lsl.w	r3, r2, r3
 8006d66:	430b      	orrs	r3, r1
 8006d68:	40c2      	lsrs	r2, r0
 8006d6a:	616b      	str	r3, [r5, #20]
 8006d6c:	9201      	str	r2, [sp, #4]
 8006d6e:	9b01      	ldr	r3, [sp, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	bf14      	ite	ne
 8006d74:	2102      	movne	r1, #2
 8006d76:	2101      	moveq	r1, #1
 8006d78:	61ab      	str	r3, [r5, #24]
 8006d7a:	6129      	str	r1, [r5, #16]
 8006d7c:	b1bc      	cbz	r4, 8006dae <__d2b+0x8e>
 8006d7e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d82:	4404      	add	r4, r0
 8006d84:	6034      	str	r4, [r6, #0]
 8006d86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8c:	6018      	str	r0, [r3, #0]
 8006d8e:	4628      	mov	r0, r5
 8006d90:	b003      	add	sp, #12
 8006d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d98:	e7d7      	b.n	8006d4a <__d2b+0x2a>
 8006d9a:	6169      	str	r1, [r5, #20]
 8006d9c:	e7e7      	b.n	8006d6e <__d2b+0x4e>
 8006d9e:	a801      	add	r0, sp, #4
 8006da0:	f7ff fcfc 	bl	800679c <__lo0bits>
 8006da4:	9b01      	ldr	r3, [sp, #4]
 8006da6:	2101      	movs	r1, #1
 8006da8:	616b      	str	r3, [r5, #20]
 8006daa:	3020      	adds	r0, #32
 8006dac:	e7e5      	b.n	8006d7a <__d2b+0x5a>
 8006dae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006db2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006db6:	6030      	str	r0, [r6, #0]
 8006db8:	6918      	ldr	r0, [r3, #16]
 8006dba:	f7ff fccf 	bl	800675c <__hi0bits>
 8006dbe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006dc2:	e7e2      	b.n	8006d8a <__d2b+0x6a>
 8006dc4:	08008f2b 	.word	0x08008f2b
 8006dc8:	08008f3c 	.word	0x08008f3c

08006dcc <__ratio>:
 8006dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	4688      	mov	r8, r1
 8006dd2:	4669      	mov	r1, sp
 8006dd4:	4681      	mov	r9, r0
 8006dd6:	f7ff ff5b 	bl	8006c90 <__b2d>
 8006dda:	460f      	mov	r7, r1
 8006ddc:	4604      	mov	r4, r0
 8006dde:	460d      	mov	r5, r1
 8006de0:	4640      	mov	r0, r8
 8006de2:	a901      	add	r1, sp, #4
 8006de4:	f7ff ff54 	bl	8006c90 <__b2d>
 8006de8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006df0:	468b      	mov	fp, r1
 8006df2:	eba3 0c02 	sub.w	ip, r3, r2
 8006df6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bfd5      	itete	le
 8006e04:	460a      	movle	r2, r1
 8006e06:	462a      	movgt	r2, r5
 8006e08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e0c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e10:	bfd8      	it	le
 8006e12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006e16:	465b      	mov	r3, fp
 8006e18:	4602      	mov	r2, r0
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f7f9 fc8f 	bl	8000740 <__aeabi_ddiv>
 8006e22:	b003      	add	sp, #12
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e28 <__copybits>:
 8006e28:	3901      	subs	r1, #1
 8006e2a:	b570      	push	{r4, r5, r6, lr}
 8006e2c:	1149      	asrs	r1, r1, #5
 8006e2e:	6914      	ldr	r4, [r2, #16]
 8006e30:	3101      	adds	r1, #1
 8006e32:	f102 0314 	add.w	r3, r2, #20
 8006e36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e3e:	1f05      	subs	r5, r0, #4
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	d30c      	bcc.n	8006e5e <__copybits+0x36>
 8006e44:	1aa3      	subs	r3, r4, r2
 8006e46:	3b11      	subs	r3, #17
 8006e48:	f023 0303 	bic.w	r3, r3, #3
 8006e4c:	3211      	adds	r2, #17
 8006e4e:	42a2      	cmp	r2, r4
 8006e50:	bf88      	it	hi
 8006e52:	2300      	movhi	r3, #0
 8006e54:	4418      	add	r0, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	4288      	cmp	r0, r1
 8006e5a:	d305      	bcc.n	8006e68 <__copybits+0x40>
 8006e5c:	bd70      	pop	{r4, r5, r6, pc}
 8006e5e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006e62:	f845 6f04 	str.w	r6, [r5, #4]!
 8006e66:	e7eb      	b.n	8006e40 <__copybits+0x18>
 8006e68:	f840 3b04 	str.w	r3, [r0], #4
 8006e6c:	e7f4      	b.n	8006e58 <__copybits+0x30>

08006e6e <__any_on>:
 8006e6e:	f100 0214 	add.w	r2, r0, #20
 8006e72:	6900      	ldr	r0, [r0, #16]
 8006e74:	114b      	asrs	r3, r1, #5
 8006e76:	4298      	cmp	r0, r3
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	db11      	blt.n	8006ea0 <__any_on+0x32>
 8006e7c:	dd0a      	ble.n	8006e94 <__any_on+0x26>
 8006e7e:	f011 011f 	ands.w	r1, r1, #31
 8006e82:	d007      	beq.n	8006e94 <__any_on+0x26>
 8006e84:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e88:	fa24 f001 	lsr.w	r0, r4, r1
 8006e8c:	fa00 f101 	lsl.w	r1, r0, r1
 8006e90:	428c      	cmp	r4, r1
 8006e92:	d10b      	bne.n	8006eac <__any_on+0x3e>
 8006e94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d803      	bhi.n	8006ea4 <__any_on+0x36>
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	bd10      	pop	{r4, pc}
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	e7f7      	b.n	8006e94 <__any_on+0x26>
 8006ea4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	d0f5      	beq.n	8006e98 <__any_on+0x2a>
 8006eac:	2001      	movs	r0, #1
 8006eae:	e7f6      	b.n	8006e9e <__any_on+0x30>

08006eb0 <sulp>:
 8006eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	4690      	mov	r8, r2
 8006eb8:	f7ff feca 	bl	8006c50 <__ulp>
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	460d      	mov	r5, r1
 8006ec0:	f1b8 0f00 	cmp.w	r8, #0
 8006ec4:	d011      	beq.n	8006eea <sulp+0x3a>
 8006ec6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006eca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dd0b      	ble.n	8006eea <sulp+0x3a>
 8006ed2:	2400      	movs	r4, #0
 8006ed4:	051b      	lsls	r3, r3, #20
 8006ed6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006eda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ede:	4622      	mov	r2, r4
 8006ee0:	462b      	mov	r3, r5
 8006ee2:	f7f9 fb03 	bl	80004ec <__aeabi_dmul>
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	460d      	mov	r5, r1
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef2:	0000      	movs	r0, r0
 8006ef4:	0000      	movs	r0, r0
	...

08006ef8 <_strtod_l>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	b09f      	sub	sp, #124	; 0x7c
 8006efe:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f00:	2200      	movs	r2, #0
 8006f02:	4604      	mov	r4, r0
 8006f04:	921a      	str	r2, [sp, #104]	; 0x68
 8006f06:	460d      	mov	r5, r1
 8006f08:	f04f 0800 	mov.w	r8, #0
 8006f0c:	f04f 0900 	mov.w	r9, #0
 8006f10:	460a      	mov	r2, r1
 8006f12:	9219      	str	r2, [sp, #100]	; 0x64
 8006f14:	7811      	ldrb	r1, [r2, #0]
 8006f16:	292b      	cmp	r1, #43	; 0x2b
 8006f18:	d04a      	beq.n	8006fb0 <_strtod_l+0xb8>
 8006f1a:	d838      	bhi.n	8006f8e <_strtod_l+0x96>
 8006f1c:	290d      	cmp	r1, #13
 8006f1e:	d832      	bhi.n	8006f86 <_strtod_l+0x8e>
 8006f20:	2908      	cmp	r1, #8
 8006f22:	d832      	bhi.n	8006f8a <_strtod_l+0x92>
 8006f24:	2900      	cmp	r1, #0
 8006f26:	d03b      	beq.n	8006fa0 <_strtod_l+0xa8>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	920e      	str	r2, [sp, #56]	; 0x38
 8006f2c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006f2e:	7832      	ldrb	r2, [r6, #0]
 8006f30:	2a30      	cmp	r2, #48	; 0x30
 8006f32:	f040 80b2 	bne.w	800709a <_strtod_l+0x1a2>
 8006f36:	7872      	ldrb	r2, [r6, #1]
 8006f38:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006f3c:	2a58      	cmp	r2, #88	; 0x58
 8006f3e:	d16e      	bne.n	800701e <_strtod_l+0x126>
 8006f40:	9302      	str	r3, [sp, #8]
 8006f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f44:	4620      	mov	r0, r4
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	ab1a      	add	r3, sp, #104	; 0x68
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	4a8c      	ldr	r2, [pc, #560]	; (8007180 <_strtod_l+0x288>)
 8006f4e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006f50:	a919      	add	r1, sp, #100	; 0x64
 8006f52:	f001 f8b3 	bl	80080bc <__gethex>
 8006f56:	f010 070f 	ands.w	r7, r0, #15
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	d005      	beq.n	8006f6a <_strtod_l+0x72>
 8006f5e:	2f06      	cmp	r7, #6
 8006f60:	d128      	bne.n	8006fb4 <_strtod_l+0xbc>
 8006f62:	2300      	movs	r3, #0
 8006f64:	3601      	adds	r6, #1
 8006f66:	9619      	str	r6, [sp, #100]	; 0x64
 8006f68:	930e      	str	r3, [sp, #56]	; 0x38
 8006f6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f040 85a0 	bne.w	8007ab2 <_strtod_l+0xbba>
 8006f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f74:	b1cb      	cbz	r3, 8006faa <_strtod_l+0xb2>
 8006f76:	4642      	mov	r2, r8
 8006f78:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	b01f      	add	sp, #124	; 0x7c
 8006f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f86:	2920      	cmp	r1, #32
 8006f88:	d1ce      	bne.n	8006f28 <_strtod_l+0x30>
 8006f8a:	3201      	adds	r2, #1
 8006f8c:	e7c1      	b.n	8006f12 <_strtod_l+0x1a>
 8006f8e:	292d      	cmp	r1, #45	; 0x2d
 8006f90:	d1ca      	bne.n	8006f28 <_strtod_l+0x30>
 8006f92:	2101      	movs	r1, #1
 8006f94:	910e      	str	r1, [sp, #56]	; 0x38
 8006f96:	1c51      	adds	r1, r2, #1
 8006f98:	9119      	str	r1, [sp, #100]	; 0x64
 8006f9a:	7852      	ldrb	r2, [r2, #1]
 8006f9c:	2a00      	cmp	r2, #0
 8006f9e:	d1c5      	bne.n	8006f2c <_strtod_l+0x34>
 8006fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fa2:	9519      	str	r5, [sp, #100]	; 0x64
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f040 8582 	bne.w	8007aae <_strtod_l+0xbb6>
 8006faa:	4642      	mov	r2, r8
 8006fac:	464b      	mov	r3, r9
 8006fae:	e7e5      	b.n	8006f7c <_strtod_l+0x84>
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	e7ef      	b.n	8006f94 <_strtod_l+0x9c>
 8006fb4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fb6:	b13a      	cbz	r2, 8006fc8 <_strtod_l+0xd0>
 8006fb8:	2135      	movs	r1, #53	; 0x35
 8006fba:	a81c      	add	r0, sp, #112	; 0x70
 8006fbc:	f7ff ff34 	bl	8006e28 <__copybits>
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fc4:	f7ff fb18 	bl	80065f8 <_Bfree>
 8006fc8:	3f01      	subs	r7, #1
 8006fca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006fcc:	2f04      	cmp	r7, #4
 8006fce:	d806      	bhi.n	8006fde <_strtod_l+0xe6>
 8006fd0:	e8df f007 	tbb	[pc, r7]
 8006fd4:	201d0314 	.word	0x201d0314
 8006fd8:	14          	.byte	0x14
 8006fd9:	00          	.byte	0x00
 8006fda:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006fde:	05e9      	lsls	r1, r5, #23
 8006fe0:	bf48      	it	mi
 8006fe2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006fe6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fea:	0d1b      	lsrs	r3, r3, #20
 8006fec:	051b      	lsls	r3, r3, #20
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1bb      	bne.n	8006f6a <_strtod_l+0x72>
 8006ff2:	f7fe faf9 	bl	80055e8 <__errno>
 8006ff6:	2322      	movs	r3, #34	; 0x22
 8006ff8:	6003      	str	r3, [r0, #0]
 8006ffa:	e7b6      	b.n	8006f6a <_strtod_l+0x72>
 8006ffc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007000:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007004:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007008:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800700c:	e7e7      	b.n	8006fde <_strtod_l+0xe6>
 800700e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007184 <_strtod_l+0x28c>
 8007012:	e7e4      	b.n	8006fde <_strtod_l+0xe6>
 8007014:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007018:	f04f 38ff 	mov.w	r8, #4294967295
 800701c:	e7df      	b.n	8006fde <_strtod_l+0xe6>
 800701e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	9219      	str	r2, [sp, #100]	; 0x64
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b30      	cmp	r3, #48	; 0x30
 8007028:	d0f9      	beq.n	800701e <_strtod_l+0x126>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d09d      	beq.n	8006f6a <_strtod_l+0x72>
 800702e:	2301      	movs	r3, #1
 8007030:	f04f 0a00 	mov.w	sl, #0
 8007034:	220a      	movs	r2, #10
 8007036:	46d3      	mov	fp, sl
 8007038:	9305      	str	r3, [sp, #20]
 800703a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800703c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007040:	930b      	str	r3, [sp, #44]	; 0x2c
 8007042:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007044:	7806      	ldrb	r6, [r0, #0]
 8007046:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800704a:	b2d9      	uxtb	r1, r3
 800704c:	2909      	cmp	r1, #9
 800704e:	d926      	bls.n	800709e <_strtod_l+0x1a6>
 8007050:	2201      	movs	r2, #1
 8007052:	494d      	ldr	r1, [pc, #308]	; (8007188 <_strtod_l+0x290>)
 8007054:	f000 ff78 	bl	8007f48 <strncmp>
 8007058:	2800      	cmp	r0, #0
 800705a:	d030      	beq.n	80070be <_strtod_l+0x1c6>
 800705c:	2000      	movs	r0, #0
 800705e:	4632      	mov	r2, r6
 8007060:	4603      	mov	r3, r0
 8007062:	465e      	mov	r6, fp
 8007064:	9008      	str	r0, [sp, #32]
 8007066:	2a65      	cmp	r2, #101	; 0x65
 8007068:	d001      	beq.n	800706e <_strtod_l+0x176>
 800706a:	2a45      	cmp	r2, #69	; 0x45
 800706c:	d113      	bne.n	8007096 <_strtod_l+0x19e>
 800706e:	b91e      	cbnz	r6, 8007078 <_strtod_l+0x180>
 8007070:	9a05      	ldr	r2, [sp, #20]
 8007072:	4302      	orrs	r2, r0
 8007074:	d094      	beq.n	8006fa0 <_strtod_l+0xa8>
 8007076:	2600      	movs	r6, #0
 8007078:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800707a:	1c6a      	adds	r2, r5, #1
 800707c:	9219      	str	r2, [sp, #100]	; 0x64
 800707e:	786a      	ldrb	r2, [r5, #1]
 8007080:	2a2b      	cmp	r2, #43	; 0x2b
 8007082:	d074      	beq.n	800716e <_strtod_l+0x276>
 8007084:	2a2d      	cmp	r2, #45	; 0x2d
 8007086:	d078      	beq.n	800717a <_strtod_l+0x282>
 8007088:	f04f 0c00 	mov.w	ip, #0
 800708c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007090:	2909      	cmp	r1, #9
 8007092:	d97f      	bls.n	8007194 <_strtod_l+0x29c>
 8007094:	9519      	str	r5, [sp, #100]	; 0x64
 8007096:	2700      	movs	r7, #0
 8007098:	e09e      	b.n	80071d8 <_strtod_l+0x2e0>
 800709a:	2300      	movs	r3, #0
 800709c:	e7c8      	b.n	8007030 <_strtod_l+0x138>
 800709e:	f1bb 0f08 	cmp.w	fp, #8
 80070a2:	bfd8      	it	le
 80070a4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80070a6:	f100 0001 	add.w	r0, r0, #1
 80070aa:	bfd6      	itet	le
 80070ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80070b0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80070b4:	930a      	strle	r3, [sp, #40]	; 0x28
 80070b6:	f10b 0b01 	add.w	fp, fp, #1
 80070ba:	9019      	str	r0, [sp, #100]	; 0x64
 80070bc:	e7c1      	b.n	8007042 <_strtod_l+0x14a>
 80070be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	9219      	str	r2, [sp, #100]	; 0x64
 80070c4:	785a      	ldrb	r2, [r3, #1]
 80070c6:	f1bb 0f00 	cmp.w	fp, #0
 80070ca:	d037      	beq.n	800713c <_strtod_l+0x244>
 80070cc:	465e      	mov	r6, fp
 80070ce:	9008      	str	r0, [sp, #32]
 80070d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	d912      	bls.n	80070fe <_strtod_l+0x206>
 80070d8:	2301      	movs	r3, #1
 80070da:	e7c4      	b.n	8007066 <_strtod_l+0x16e>
 80070dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070de:	3001      	adds	r0, #1
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	9219      	str	r2, [sp, #100]	; 0x64
 80070e4:	785a      	ldrb	r2, [r3, #1]
 80070e6:	2a30      	cmp	r2, #48	; 0x30
 80070e8:	d0f8      	beq.n	80070dc <_strtod_l+0x1e4>
 80070ea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	f200 84e4 	bhi.w	8007abc <_strtod_l+0xbc4>
 80070f4:	9008      	str	r0, [sp, #32]
 80070f6:	2000      	movs	r0, #0
 80070f8:	4606      	mov	r6, r0
 80070fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80070fe:	3a30      	subs	r2, #48	; 0x30
 8007100:	f100 0301 	add.w	r3, r0, #1
 8007104:	d014      	beq.n	8007130 <_strtod_l+0x238>
 8007106:	9908      	ldr	r1, [sp, #32]
 8007108:	eb00 0c06 	add.w	ip, r0, r6
 800710c:	4419      	add	r1, r3
 800710e:	9108      	str	r1, [sp, #32]
 8007110:	4633      	mov	r3, r6
 8007112:	210a      	movs	r1, #10
 8007114:	4563      	cmp	r3, ip
 8007116:	d113      	bne.n	8007140 <_strtod_l+0x248>
 8007118:	1833      	adds	r3, r6, r0
 800711a:	2b08      	cmp	r3, #8
 800711c:	f106 0601 	add.w	r6, r6, #1
 8007120:	4406      	add	r6, r0
 8007122:	dc1a      	bgt.n	800715a <_strtod_l+0x262>
 8007124:	230a      	movs	r3, #10
 8007126:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007128:	fb03 2301 	mla	r3, r3, r1, r2
 800712c:	930a      	str	r3, [sp, #40]	; 0x28
 800712e:	2300      	movs	r3, #0
 8007130:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007132:	4618      	mov	r0, r3
 8007134:	1c51      	adds	r1, r2, #1
 8007136:	9119      	str	r1, [sp, #100]	; 0x64
 8007138:	7852      	ldrb	r2, [r2, #1]
 800713a:	e7c9      	b.n	80070d0 <_strtod_l+0x1d8>
 800713c:	4658      	mov	r0, fp
 800713e:	e7d2      	b.n	80070e6 <_strtod_l+0x1ee>
 8007140:	2b08      	cmp	r3, #8
 8007142:	f103 0301 	add.w	r3, r3, #1
 8007146:	dc03      	bgt.n	8007150 <_strtod_l+0x258>
 8007148:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800714a:	434f      	muls	r7, r1
 800714c:	970a      	str	r7, [sp, #40]	; 0x28
 800714e:	e7e1      	b.n	8007114 <_strtod_l+0x21c>
 8007150:	2b10      	cmp	r3, #16
 8007152:	bfd8      	it	le
 8007154:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007158:	e7dc      	b.n	8007114 <_strtod_l+0x21c>
 800715a:	2e10      	cmp	r6, #16
 800715c:	bfdc      	itt	le
 800715e:	230a      	movle	r3, #10
 8007160:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007164:	e7e3      	b.n	800712e <_strtod_l+0x236>
 8007166:	2300      	movs	r3, #0
 8007168:	9308      	str	r3, [sp, #32]
 800716a:	2301      	movs	r3, #1
 800716c:	e780      	b.n	8007070 <_strtod_l+0x178>
 800716e:	f04f 0c00 	mov.w	ip, #0
 8007172:	1caa      	adds	r2, r5, #2
 8007174:	9219      	str	r2, [sp, #100]	; 0x64
 8007176:	78aa      	ldrb	r2, [r5, #2]
 8007178:	e788      	b.n	800708c <_strtod_l+0x194>
 800717a:	f04f 0c01 	mov.w	ip, #1
 800717e:	e7f8      	b.n	8007172 <_strtod_l+0x27a>
 8007180:	08009098 	.word	0x08009098
 8007184:	7ff00000 	.word	0x7ff00000
 8007188:	08009094 	.word	0x08009094
 800718c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800718e:	1c51      	adds	r1, r2, #1
 8007190:	9119      	str	r1, [sp, #100]	; 0x64
 8007192:	7852      	ldrb	r2, [r2, #1]
 8007194:	2a30      	cmp	r2, #48	; 0x30
 8007196:	d0f9      	beq.n	800718c <_strtod_l+0x294>
 8007198:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800719c:	2908      	cmp	r1, #8
 800719e:	f63f af7a 	bhi.w	8007096 <_strtod_l+0x19e>
 80071a2:	3a30      	subs	r2, #48	; 0x30
 80071a4:	9209      	str	r2, [sp, #36]	; 0x24
 80071a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071a8:	920c      	str	r2, [sp, #48]	; 0x30
 80071aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071ac:	1c57      	adds	r7, r2, #1
 80071ae:	9719      	str	r7, [sp, #100]	; 0x64
 80071b0:	7852      	ldrb	r2, [r2, #1]
 80071b2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80071b6:	f1be 0f09 	cmp.w	lr, #9
 80071ba:	d938      	bls.n	800722e <_strtod_l+0x336>
 80071bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071be:	1a7f      	subs	r7, r7, r1
 80071c0:	2f08      	cmp	r7, #8
 80071c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80071c6:	dc03      	bgt.n	80071d0 <_strtod_l+0x2d8>
 80071c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071ca:	428f      	cmp	r7, r1
 80071cc:	bfa8      	it	ge
 80071ce:	460f      	movge	r7, r1
 80071d0:	f1bc 0f00 	cmp.w	ip, #0
 80071d4:	d000      	beq.n	80071d8 <_strtod_l+0x2e0>
 80071d6:	427f      	negs	r7, r7
 80071d8:	2e00      	cmp	r6, #0
 80071da:	d14f      	bne.n	800727c <_strtod_l+0x384>
 80071dc:	9905      	ldr	r1, [sp, #20]
 80071de:	4301      	orrs	r1, r0
 80071e0:	f47f aec3 	bne.w	8006f6a <_strtod_l+0x72>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f47f aedb 	bne.w	8006fa0 <_strtod_l+0xa8>
 80071ea:	2a69      	cmp	r2, #105	; 0x69
 80071ec:	d029      	beq.n	8007242 <_strtod_l+0x34a>
 80071ee:	dc26      	bgt.n	800723e <_strtod_l+0x346>
 80071f0:	2a49      	cmp	r2, #73	; 0x49
 80071f2:	d026      	beq.n	8007242 <_strtod_l+0x34a>
 80071f4:	2a4e      	cmp	r2, #78	; 0x4e
 80071f6:	f47f aed3 	bne.w	8006fa0 <_strtod_l+0xa8>
 80071fa:	499a      	ldr	r1, [pc, #616]	; (8007464 <_strtod_l+0x56c>)
 80071fc:	a819      	add	r0, sp, #100	; 0x64
 80071fe:	f001 f99f 	bl	8008540 <__match>
 8007202:	2800      	cmp	r0, #0
 8007204:	f43f aecc 	beq.w	8006fa0 <_strtod_l+0xa8>
 8007208:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b28      	cmp	r3, #40	; 0x28
 800720e:	d12f      	bne.n	8007270 <_strtod_l+0x378>
 8007210:	4995      	ldr	r1, [pc, #596]	; (8007468 <_strtod_l+0x570>)
 8007212:	aa1c      	add	r2, sp, #112	; 0x70
 8007214:	a819      	add	r0, sp, #100	; 0x64
 8007216:	f001 f9a7 	bl	8008568 <__hexnan>
 800721a:	2805      	cmp	r0, #5
 800721c:	d128      	bne.n	8007270 <_strtod_l+0x378>
 800721e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007220:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007224:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007228:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800722c:	e69d      	b.n	8006f6a <_strtod_l+0x72>
 800722e:	210a      	movs	r1, #10
 8007230:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007232:	fb01 2107 	mla	r1, r1, r7, r2
 8007236:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800723a:	9209      	str	r2, [sp, #36]	; 0x24
 800723c:	e7b5      	b.n	80071aa <_strtod_l+0x2b2>
 800723e:	2a6e      	cmp	r2, #110	; 0x6e
 8007240:	e7d9      	b.n	80071f6 <_strtod_l+0x2fe>
 8007242:	498a      	ldr	r1, [pc, #552]	; (800746c <_strtod_l+0x574>)
 8007244:	a819      	add	r0, sp, #100	; 0x64
 8007246:	f001 f97b 	bl	8008540 <__match>
 800724a:	2800      	cmp	r0, #0
 800724c:	f43f aea8 	beq.w	8006fa0 <_strtod_l+0xa8>
 8007250:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007252:	4987      	ldr	r1, [pc, #540]	; (8007470 <_strtod_l+0x578>)
 8007254:	3b01      	subs	r3, #1
 8007256:	a819      	add	r0, sp, #100	; 0x64
 8007258:	9319      	str	r3, [sp, #100]	; 0x64
 800725a:	f001 f971 	bl	8008540 <__match>
 800725e:	b910      	cbnz	r0, 8007266 <_strtod_l+0x36e>
 8007260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007262:	3301      	adds	r3, #1
 8007264:	9319      	str	r3, [sp, #100]	; 0x64
 8007266:	f04f 0800 	mov.w	r8, #0
 800726a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007474 <_strtod_l+0x57c>
 800726e:	e67c      	b.n	8006f6a <_strtod_l+0x72>
 8007270:	4881      	ldr	r0, [pc, #516]	; (8007478 <_strtod_l+0x580>)
 8007272:	f000 fe99 	bl	8007fa8 <nan>
 8007276:	4680      	mov	r8, r0
 8007278:	4689      	mov	r9, r1
 800727a:	e676      	b.n	8006f6a <_strtod_l+0x72>
 800727c:	9b08      	ldr	r3, [sp, #32]
 800727e:	f1bb 0f00 	cmp.w	fp, #0
 8007282:	bf08      	it	eq
 8007284:	46b3      	moveq	fp, r6
 8007286:	1afb      	subs	r3, r7, r3
 8007288:	2e10      	cmp	r6, #16
 800728a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800728c:	4635      	mov	r5, r6
 800728e:	9309      	str	r3, [sp, #36]	; 0x24
 8007290:	bfa8      	it	ge
 8007292:	2510      	movge	r5, #16
 8007294:	f7f9 f8b0 	bl	80003f8 <__aeabi_ui2d>
 8007298:	2e09      	cmp	r6, #9
 800729a:	4680      	mov	r8, r0
 800729c:	4689      	mov	r9, r1
 800729e:	dd13      	ble.n	80072c8 <_strtod_l+0x3d0>
 80072a0:	4b76      	ldr	r3, [pc, #472]	; (800747c <_strtod_l+0x584>)
 80072a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80072a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80072aa:	f7f9 f91f 	bl	80004ec <__aeabi_dmul>
 80072ae:	4680      	mov	r8, r0
 80072b0:	4650      	mov	r0, sl
 80072b2:	4689      	mov	r9, r1
 80072b4:	f7f9 f8a0 	bl	80003f8 <__aeabi_ui2d>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4640      	mov	r0, r8
 80072be:	4649      	mov	r1, r9
 80072c0:	f7f8 ff5e 	bl	8000180 <__adddf3>
 80072c4:	4680      	mov	r8, r0
 80072c6:	4689      	mov	r9, r1
 80072c8:	2e0f      	cmp	r6, #15
 80072ca:	dc36      	bgt.n	800733a <_strtod_l+0x442>
 80072cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f43f ae4b 	beq.w	8006f6a <_strtod_l+0x72>
 80072d4:	dd22      	ble.n	800731c <_strtod_l+0x424>
 80072d6:	2b16      	cmp	r3, #22
 80072d8:	dc09      	bgt.n	80072ee <_strtod_l+0x3f6>
 80072da:	4968      	ldr	r1, [pc, #416]	; (800747c <_strtod_l+0x584>)
 80072dc:	4642      	mov	r2, r8
 80072de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072e2:	464b      	mov	r3, r9
 80072e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072e8:	f7f9 f900 	bl	80004ec <__aeabi_dmul>
 80072ec:	e7c3      	b.n	8007276 <_strtod_l+0x37e>
 80072ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80072f4:	4293      	cmp	r3, r2
 80072f6:	db20      	blt.n	800733a <_strtod_l+0x442>
 80072f8:	4c60      	ldr	r4, [pc, #384]	; (800747c <_strtod_l+0x584>)
 80072fa:	f1c6 060f 	rsb	r6, r6, #15
 80072fe:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007302:	4642      	mov	r2, r8
 8007304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007308:	464b      	mov	r3, r9
 800730a:	f7f9 f8ef 	bl	80004ec <__aeabi_dmul>
 800730e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007310:	1b9e      	subs	r6, r3, r6
 8007312:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007316:	e9d4 2300 	ldrd	r2, r3, [r4]
 800731a:	e7e5      	b.n	80072e8 <_strtod_l+0x3f0>
 800731c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731e:	3316      	adds	r3, #22
 8007320:	db0b      	blt.n	800733a <_strtod_l+0x442>
 8007322:	9b08      	ldr	r3, [sp, #32]
 8007324:	4640      	mov	r0, r8
 8007326:	1bdf      	subs	r7, r3, r7
 8007328:	4b54      	ldr	r3, [pc, #336]	; (800747c <_strtod_l+0x584>)
 800732a:	4649      	mov	r1, r9
 800732c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007334:	f7f9 fa04 	bl	8000740 <__aeabi_ddiv>
 8007338:	e79d      	b.n	8007276 <_strtod_l+0x37e>
 800733a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733c:	1b75      	subs	r5, r6, r5
 800733e:	441d      	add	r5, r3
 8007340:	2d00      	cmp	r5, #0
 8007342:	dd70      	ble.n	8007426 <_strtod_l+0x52e>
 8007344:	f015 030f 	ands.w	r3, r5, #15
 8007348:	d00a      	beq.n	8007360 <_strtod_l+0x468>
 800734a:	494c      	ldr	r1, [pc, #304]	; (800747c <_strtod_l+0x584>)
 800734c:	4642      	mov	r2, r8
 800734e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007356:	464b      	mov	r3, r9
 8007358:	f7f9 f8c8 	bl	80004ec <__aeabi_dmul>
 800735c:	4680      	mov	r8, r0
 800735e:	4689      	mov	r9, r1
 8007360:	f035 050f 	bics.w	r5, r5, #15
 8007364:	d04d      	beq.n	8007402 <_strtod_l+0x50a>
 8007366:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800736a:	dd22      	ble.n	80073b2 <_strtod_l+0x4ba>
 800736c:	2600      	movs	r6, #0
 800736e:	46b3      	mov	fp, r6
 8007370:	960b      	str	r6, [sp, #44]	; 0x2c
 8007372:	9608      	str	r6, [sp, #32]
 8007374:	2322      	movs	r3, #34	; 0x22
 8007376:	f04f 0800 	mov.w	r8, #0
 800737a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007474 <_strtod_l+0x57c>
 800737e:	6023      	str	r3, [r4, #0]
 8007380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007382:	2b00      	cmp	r3, #0
 8007384:	f43f adf1 	beq.w	8006f6a <_strtod_l+0x72>
 8007388:	4620      	mov	r0, r4
 800738a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800738c:	f7ff f934 	bl	80065f8 <_Bfree>
 8007390:	4620      	mov	r0, r4
 8007392:	9908      	ldr	r1, [sp, #32]
 8007394:	f7ff f930 	bl	80065f8 <_Bfree>
 8007398:	4659      	mov	r1, fp
 800739a:	4620      	mov	r0, r4
 800739c:	f7ff f92c 	bl	80065f8 <_Bfree>
 80073a0:	4620      	mov	r0, r4
 80073a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073a4:	f7ff f928 	bl	80065f8 <_Bfree>
 80073a8:	4631      	mov	r1, r6
 80073aa:	4620      	mov	r0, r4
 80073ac:	f7ff f924 	bl	80065f8 <_Bfree>
 80073b0:	e5db      	b.n	8006f6a <_strtod_l+0x72>
 80073b2:	4b33      	ldr	r3, [pc, #204]	; (8007480 <_strtod_l+0x588>)
 80073b4:	4640      	mov	r0, r8
 80073b6:	9305      	str	r3, [sp, #20]
 80073b8:	2300      	movs	r3, #0
 80073ba:	4649      	mov	r1, r9
 80073bc:	469a      	mov	sl, r3
 80073be:	112d      	asrs	r5, r5, #4
 80073c0:	2d01      	cmp	r5, #1
 80073c2:	dc21      	bgt.n	8007408 <_strtod_l+0x510>
 80073c4:	b10b      	cbz	r3, 80073ca <_strtod_l+0x4d2>
 80073c6:	4680      	mov	r8, r0
 80073c8:	4689      	mov	r9, r1
 80073ca:	492d      	ldr	r1, [pc, #180]	; (8007480 <_strtod_l+0x588>)
 80073cc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80073d0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80073d4:	4642      	mov	r2, r8
 80073d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073da:	464b      	mov	r3, r9
 80073dc:	f7f9 f886 	bl	80004ec <__aeabi_dmul>
 80073e0:	4b24      	ldr	r3, [pc, #144]	; (8007474 <_strtod_l+0x57c>)
 80073e2:	460a      	mov	r2, r1
 80073e4:	400b      	ands	r3, r1
 80073e6:	4927      	ldr	r1, [pc, #156]	; (8007484 <_strtod_l+0x58c>)
 80073e8:	4680      	mov	r8, r0
 80073ea:	428b      	cmp	r3, r1
 80073ec:	d8be      	bhi.n	800736c <_strtod_l+0x474>
 80073ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80073f2:	428b      	cmp	r3, r1
 80073f4:	bf86      	itte	hi
 80073f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80073fa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007488 <_strtod_l+0x590>
 80073fe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007402:	2300      	movs	r3, #0
 8007404:	9305      	str	r3, [sp, #20]
 8007406:	e07b      	b.n	8007500 <_strtod_l+0x608>
 8007408:	07ea      	lsls	r2, r5, #31
 800740a:	d505      	bpl.n	8007418 <_strtod_l+0x520>
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007412:	f7f9 f86b 	bl	80004ec <__aeabi_dmul>
 8007416:	2301      	movs	r3, #1
 8007418:	9a05      	ldr	r2, [sp, #20]
 800741a:	f10a 0a01 	add.w	sl, sl, #1
 800741e:	3208      	adds	r2, #8
 8007420:	106d      	asrs	r5, r5, #1
 8007422:	9205      	str	r2, [sp, #20]
 8007424:	e7cc      	b.n	80073c0 <_strtod_l+0x4c8>
 8007426:	d0ec      	beq.n	8007402 <_strtod_l+0x50a>
 8007428:	426d      	negs	r5, r5
 800742a:	f015 020f 	ands.w	r2, r5, #15
 800742e:	d00a      	beq.n	8007446 <_strtod_l+0x54e>
 8007430:	4b12      	ldr	r3, [pc, #72]	; (800747c <_strtod_l+0x584>)
 8007432:	4640      	mov	r0, r8
 8007434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007438:	4649      	mov	r1, r9
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 f97f 	bl	8000740 <__aeabi_ddiv>
 8007442:	4680      	mov	r8, r0
 8007444:	4689      	mov	r9, r1
 8007446:	112d      	asrs	r5, r5, #4
 8007448:	d0db      	beq.n	8007402 <_strtod_l+0x50a>
 800744a:	2d1f      	cmp	r5, #31
 800744c:	dd1e      	ble.n	800748c <_strtod_l+0x594>
 800744e:	2600      	movs	r6, #0
 8007450:	46b3      	mov	fp, r6
 8007452:	960b      	str	r6, [sp, #44]	; 0x2c
 8007454:	9608      	str	r6, [sp, #32]
 8007456:	2322      	movs	r3, #34	; 0x22
 8007458:	f04f 0800 	mov.w	r8, #0
 800745c:	f04f 0900 	mov.w	r9, #0
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	e78d      	b.n	8007380 <_strtod_l+0x488>
 8007464:	08008ded 	.word	0x08008ded
 8007468:	080090ac 	.word	0x080090ac
 800746c:	08008de5 	.word	0x08008de5
 8007470:	08008ec9 	.word	0x08008ec9
 8007474:	7ff00000 	.word	0x7ff00000
 8007478:	08008cb4 	.word	0x08008cb4
 800747c:	08008fc0 	.word	0x08008fc0
 8007480:	08008f98 	.word	0x08008f98
 8007484:	7ca00000 	.word	0x7ca00000
 8007488:	7fefffff 	.word	0x7fefffff
 800748c:	f015 0310 	ands.w	r3, r5, #16
 8007490:	bf18      	it	ne
 8007492:	236a      	movne	r3, #106	; 0x6a
 8007494:	4640      	mov	r0, r8
 8007496:	9305      	str	r3, [sp, #20]
 8007498:	4649      	mov	r1, r9
 800749a:	2300      	movs	r3, #0
 800749c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007768 <_strtod_l+0x870>
 80074a0:	07ea      	lsls	r2, r5, #31
 80074a2:	d504      	bpl.n	80074ae <_strtod_l+0x5b6>
 80074a4:	e9da 2300 	ldrd	r2, r3, [sl]
 80074a8:	f7f9 f820 	bl	80004ec <__aeabi_dmul>
 80074ac:	2301      	movs	r3, #1
 80074ae:	106d      	asrs	r5, r5, #1
 80074b0:	f10a 0a08 	add.w	sl, sl, #8
 80074b4:	d1f4      	bne.n	80074a0 <_strtod_l+0x5a8>
 80074b6:	b10b      	cbz	r3, 80074bc <_strtod_l+0x5c4>
 80074b8:	4680      	mov	r8, r0
 80074ba:	4689      	mov	r9, r1
 80074bc:	9b05      	ldr	r3, [sp, #20]
 80074be:	b1bb      	cbz	r3, 80074f0 <_strtod_l+0x5f8>
 80074c0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80074c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	4649      	mov	r1, r9
 80074cc:	dd10      	ble.n	80074f0 <_strtod_l+0x5f8>
 80074ce:	2b1f      	cmp	r3, #31
 80074d0:	f340 8128 	ble.w	8007724 <_strtod_l+0x82c>
 80074d4:	2b34      	cmp	r3, #52	; 0x34
 80074d6:	bfd8      	it	le
 80074d8:	f04f 33ff 	movle.w	r3, #4294967295
 80074dc:	f04f 0800 	mov.w	r8, #0
 80074e0:	bfcf      	iteee	gt
 80074e2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80074e6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80074ea:	4093      	lslle	r3, r2
 80074ec:	ea03 0901 	andle.w	r9, r3, r1
 80074f0:	2200      	movs	r2, #0
 80074f2:	2300      	movs	r3, #0
 80074f4:	4640      	mov	r0, r8
 80074f6:	4649      	mov	r1, r9
 80074f8:	f7f9 fa60 	bl	80009bc <__aeabi_dcmpeq>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d1a6      	bne.n	800744e <_strtod_l+0x556>
 8007500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007502:	465a      	mov	r2, fp
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	4620      	mov	r0, r4
 8007508:	4633      	mov	r3, r6
 800750a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800750c:	f7ff f8dc 	bl	80066c8 <__s2b>
 8007510:	900b      	str	r0, [sp, #44]	; 0x2c
 8007512:	2800      	cmp	r0, #0
 8007514:	f43f af2a 	beq.w	800736c <_strtod_l+0x474>
 8007518:	2600      	movs	r6, #0
 800751a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800751c:	9b08      	ldr	r3, [sp, #32]
 800751e:	2a00      	cmp	r2, #0
 8007520:	eba3 0307 	sub.w	r3, r3, r7
 8007524:	bfa8      	it	ge
 8007526:	2300      	movge	r3, #0
 8007528:	46b3      	mov	fp, r6
 800752a:	9312      	str	r3, [sp, #72]	; 0x48
 800752c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007530:	9316      	str	r3, [sp, #88]	; 0x58
 8007532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007534:	4620      	mov	r0, r4
 8007536:	6859      	ldr	r1, [r3, #4]
 8007538:	f7ff f81e 	bl	8006578 <_Balloc>
 800753c:	9008      	str	r0, [sp, #32]
 800753e:	2800      	cmp	r0, #0
 8007540:	f43f af18 	beq.w	8007374 <_strtod_l+0x47c>
 8007544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007546:	300c      	adds	r0, #12
 8007548:	691a      	ldr	r2, [r3, #16]
 800754a:	f103 010c 	add.w	r1, r3, #12
 800754e:	3202      	adds	r2, #2
 8007550:	0092      	lsls	r2, r2, #2
 8007552:	f000 fd1b 	bl	8007f8c <memcpy>
 8007556:	ab1c      	add	r3, sp, #112	; 0x70
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	ab1b      	add	r3, sp, #108	; 0x6c
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	4642      	mov	r2, r8
 8007560:	464b      	mov	r3, r9
 8007562:	4620      	mov	r0, r4
 8007564:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007568:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800756c:	f7ff fbd8 	bl	8006d20 <__d2b>
 8007570:	901a      	str	r0, [sp, #104]	; 0x68
 8007572:	2800      	cmp	r0, #0
 8007574:	f43f aefe 	beq.w	8007374 <_strtod_l+0x47c>
 8007578:	2101      	movs	r1, #1
 800757a:	4620      	mov	r0, r4
 800757c:	f7ff f93c 	bl	80067f8 <__i2b>
 8007580:	4683      	mov	fp, r0
 8007582:	2800      	cmp	r0, #0
 8007584:	f43f aef6 	beq.w	8007374 <_strtod_l+0x47c>
 8007588:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800758a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800758c:	2f00      	cmp	r7, #0
 800758e:	bfab      	itete	ge
 8007590:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007592:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007594:	eb07 0a03 	addge.w	sl, r7, r3
 8007598:	1bdd      	sublt	r5, r3, r7
 800759a:	9b05      	ldr	r3, [sp, #20]
 800759c:	bfa8      	it	ge
 800759e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80075a0:	eba7 0703 	sub.w	r7, r7, r3
 80075a4:	4417      	add	r7, r2
 80075a6:	4b71      	ldr	r3, [pc, #452]	; (800776c <_strtod_l+0x874>)
 80075a8:	f107 37ff 	add.w	r7, r7, #4294967295
 80075ac:	bfb8      	it	lt
 80075ae:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80075b2:	429f      	cmp	r7, r3
 80075b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80075b8:	f280 80c7 	bge.w	800774a <_strtod_l+0x852>
 80075bc:	1bdb      	subs	r3, r3, r7
 80075be:	2b1f      	cmp	r3, #31
 80075c0:	f04f 0101 	mov.w	r1, #1
 80075c4:	eba2 0203 	sub.w	r2, r2, r3
 80075c8:	f300 80b3 	bgt.w	8007732 <_strtod_l+0x83a>
 80075cc:	fa01 f303 	lsl.w	r3, r1, r3
 80075d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80075d2:	2300      	movs	r3, #0
 80075d4:	9310      	str	r3, [sp, #64]	; 0x40
 80075d6:	eb0a 0702 	add.w	r7, sl, r2
 80075da:	9b05      	ldr	r3, [sp, #20]
 80075dc:	45ba      	cmp	sl, r7
 80075de:	4415      	add	r5, r2
 80075e0:	441d      	add	r5, r3
 80075e2:	4653      	mov	r3, sl
 80075e4:	bfa8      	it	ge
 80075e6:	463b      	movge	r3, r7
 80075e8:	42ab      	cmp	r3, r5
 80075ea:	bfa8      	it	ge
 80075ec:	462b      	movge	r3, r5
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	bfc2      	ittt	gt
 80075f2:	1aff      	subgt	r7, r7, r3
 80075f4:	1aed      	subgt	r5, r5, r3
 80075f6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80075fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dd17      	ble.n	8007630 <_strtod_l+0x738>
 8007600:	4659      	mov	r1, fp
 8007602:	461a      	mov	r2, r3
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff f9b5 	bl	8006974 <__pow5mult>
 800760a:	4683      	mov	fp, r0
 800760c:	2800      	cmp	r0, #0
 800760e:	f43f aeb1 	beq.w	8007374 <_strtod_l+0x47c>
 8007612:	4601      	mov	r1, r0
 8007614:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007616:	4620      	mov	r0, r4
 8007618:	f7ff f904 	bl	8006824 <__multiply>
 800761c:	900a      	str	r0, [sp, #40]	; 0x28
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f aea8 	beq.w	8007374 <_strtod_l+0x47c>
 8007624:	4620      	mov	r0, r4
 8007626:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007628:	f7fe ffe6 	bl	80065f8 <_Bfree>
 800762c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762e:	931a      	str	r3, [sp, #104]	; 0x68
 8007630:	2f00      	cmp	r7, #0
 8007632:	f300 808f 	bgt.w	8007754 <_strtod_l+0x85c>
 8007636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	dd08      	ble.n	800764e <_strtod_l+0x756>
 800763c:	4620      	mov	r0, r4
 800763e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007640:	9908      	ldr	r1, [sp, #32]
 8007642:	f7ff f997 	bl	8006974 <__pow5mult>
 8007646:	9008      	str	r0, [sp, #32]
 8007648:	2800      	cmp	r0, #0
 800764a:	f43f ae93 	beq.w	8007374 <_strtod_l+0x47c>
 800764e:	2d00      	cmp	r5, #0
 8007650:	dd08      	ble.n	8007664 <_strtod_l+0x76c>
 8007652:	462a      	mov	r2, r5
 8007654:	4620      	mov	r0, r4
 8007656:	9908      	ldr	r1, [sp, #32]
 8007658:	f7ff f9e6 	bl	8006a28 <__lshift>
 800765c:	9008      	str	r0, [sp, #32]
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f ae88 	beq.w	8007374 <_strtod_l+0x47c>
 8007664:	f1ba 0f00 	cmp.w	sl, #0
 8007668:	dd08      	ble.n	800767c <_strtod_l+0x784>
 800766a:	4659      	mov	r1, fp
 800766c:	4652      	mov	r2, sl
 800766e:	4620      	mov	r0, r4
 8007670:	f7ff f9da 	bl	8006a28 <__lshift>
 8007674:	4683      	mov	fp, r0
 8007676:	2800      	cmp	r0, #0
 8007678:	f43f ae7c 	beq.w	8007374 <_strtod_l+0x47c>
 800767c:	4620      	mov	r0, r4
 800767e:	9a08      	ldr	r2, [sp, #32]
 8007680:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007682:	f7ff fa59 	bl	8006b38 <__mdiff>
 8007686:	4606      	mov	r6, r0
 8007688:	2800      	cmp	r0, #0
 800768a:	f43f ae73 	beq.w	8007374 <_strtod_l+0x47c>
 800768e:	2500      	movs	r5, #0
 8007690:	68c3      	ldr	r3, [r0, #12]
 8007692:	4659      	mov	r1, fp
 8007694:	60c5      	str	r5, [r0, #12]
 8007696:	930a      	str	r3, [sp, #40]	; 0x28
 8007698:	f7ff fa32 	bl	8006b00 <__mcmp>
 800769c:	42a8      	cmp	r0, r5
 800769e:	da6b      	bge.n	8007778 <_strtod_l+0x880>
 80076a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a2:	ea53 0308 	orrs.w	r3, r3, r8
 80076a6:	f040 808f 	bne.w	80077c8 <_strtod_l+0x8d0>
 80076aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f040 808a 	bne.w	80077c8 <_strtod_l+0x8d0>
 80076b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076b8:	0d1b      	lsrs	r3, r3, #20
 80076ba:	051b      	lsls	r3, r3, #20
 80076bc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80076c0:	f240 8082 	bls.w	80077c8 <_strtod_l+0x8d0>
 80076c4:	6973      	ldr	r3, [r6, #20]
 80076c6:	b913      	cbnz	r3, 80076ce <_strtod_l+0x7d6>
 80076c8:	6933      	ldr	r3, [r6, #16]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	dd7c      	ble.n	80077c8 <_strtod_l+0x8d0>
 80076ce:	4631      	mov	r1, r6
 80076d0:	2201      	movs	r2, #1
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7ff f9a8 	bl	8006a28 <__lshift>
 80076d8:	4659      	mov	r1, fp
 80076da:	4606      	mov	r6, r0
 80076dc:	f7ff fa10 	bl	8006b00 <__mcmp>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	dd71      	ble.n	80077c8 <_strtod_l+0x8d0>
 80076e4:	9905      	ldr	r1, [sp, #20]
 80076e6:	464b      	mov	r3, r9
 80076e8:	4a21      	ldr	r2, [pc, #132]	; (8007770 <_strtod_l+0x878>)
 80076ea:	2900      	cmp	r1, #0
 80076ec:	f000 808d 	beq.w	800780a <_strtod_l+0x912>
 80076f0:	ea02 0109 	and.w	r1, r2, r9
 80076f4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80076f8:	f300 8087 	bgt.w	800780a <_strtod_l+0x912>
 80076fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007700:	f77f aea9 	ble.w	8007456 <_strtod_l+0x55e>
 8007704:	4640      	mov	r0, r8
 8007706:	4649      	mov	r1, r9
 8007708:	4b1a      	ldr	r3, [pc, #104]	; (8007774 <_strtod_l+0x87c>)
 800770a:	2200      	movs	r2, #0
 800770c:	f7f8 feee 	bl	80004ec <__aeabi_dmul>
 8007710:	4b17      	ldr	r3, [pc, #92]	; (8007770 <_strtod_l+0x878>)
 8007712:	4680      	mov	r8, r0
 8007714:	400b      	ands	r3, r1
 8007716:	4689      	mov	r9, r1
 8007718:	2b00      	cmp	r3, #0
 800771a:	f47f ae35 	bne.w	8007388 <_strtod_l+0x490>
 800771e:	2322      	movs	r3, #34	; 0x22
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	e631      	b.n	8007388 <_strtod_l+0x490>
 8007724:	f04f 32ff 	mov.w	r2, #4294967295
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	ea03 0808 	and.w	r8, r3, r8
 8007730:	e6de      	b.n	80074f0 <_strtod_l+0x5f8>
 8007732:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007736:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800773a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800773e:	37e2      	adds	r7, #226	; 0xe2
 8007740:	fa01 f307 	lsl.w	r3, r1, r7
 8007744:	9310      	str	r3, [sp, #64]	; 0x40
 8007746:	9113      	str	r1, [sp, #76]	; 0x4c
 8007748:	e745      	b.n	80075d6 <_strtod_l+0x6de>
 800774a:	2300      	movs	r3, #0
 800774c:	9310      	str	r3, [sp, #64]	; 0x40
 800774e:	2301      	movs	r3, #1
 8007750:	9313      	str	r3, [sp, #76]	; 0x4c
 8007752:	e740      	b.n	80075d6 <_strtod_l+0x6de>
 8007754:	463a      	mov	r2, r7
 8007756:	4620      	mov	r0, r4
 8007758:	991a      	ldr	r1, [sp, #104]	; 0x68
 800775a:	f7ff f965 	bl	8006a28 <__lshift>
 800775e:	901a      	str	r0, [sp, #104]	; 0x68
 8007760:	2800      	cmp	r0, #0
 8007762:	f47f af68 	bne.w	8007636 <_strtod_l+0x73e>
 8007766:	e605      	b.n	8007374 <_strtod_l+0x47c>
 8007768:	080090c0 	.word	0x080090c0
 800776c:	fffffc02 	.word	0xfffffc02
 8007770:	7ff00000 	.word	0x7ff00000
 8007774:	39500000 	.word	0x39500000
 8007778:	46ca      	mov	sl, r9
 800777a:	d165      	bne.n	8007848 <_strtod_l+0x950>
 800777c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800777e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007782:	b352      	cbz	r2, 80077da <_strtod_l+0x8e2>
 8007784:	4a9e      	ldr	r2, [pc, #632]	; (8007a00 <_strtod_l+0xb08>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d12a      	bne.n	80077e0 <_strtod_l+0x8e8>
 800778a:	9b05      	ldr	r3, [sp, #20]
 800778c:	4641      	mov	r1, r8
 800778e:	b1fb      	cbz	r3, 80077d0 <_strtod_l+0x8d8>
 8007790:	4b9c      	ldr	r3, [pc, #624]	; (8007a04 <_strtod_l+0xb0c>)
 8007792:	f04f 32ff 	mov.w	r2, #4294967295
 8007796:	ea09 0303 	and.w	r3, r9, r3
 800779a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800779e:	d81a      	bhi.n	80077d6 <_strtod_l+0x8de>
 80077a0:	0d1b      	lsrs	r3, r3, #20
 80077a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	4299      	cmp	r1, r3
 80077ac:	d118      	bne.n	80077e0 <_strtod_l+0x8e8>
 80077ae:	4b96      	ldr	r3, [pc, #600]	; (8007a08 <_strtod_l+0xb10>)
 80077b0:	459a      	cmp	sl, r3
 80077b2:	d102      	bne.n	80077ba <_strtod_l+0x8c2>
 80077b4:	3101      	adds	r1, #1
 80077b6:	f43f addd 	beq.w	8007374 <_strtod_l+0x47c>
 80077ba:	f04f 0800 	mov.w	r8, #0
 80077be:	4b91      	ldr	r3, [pc, #580]	; (8007a04 <_strtod_l+0xb0c>)
 80077c0:	ea0a 0303 	and.w	r3, sl, r3
 80077c4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80077c8:	9b05      	ldr	r3, [sp, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d19a      	bne.n	8007704 <_strtod_l+0x80c>
 80077ce:	e5db      	b.n	8007388 <_strtod_l+0x490>
 80077d0:	f04f 33ff 	mov.w	r3, #4294967295
 80077d4:	e7e9      	b.n	80077aa <_strtod_l+0x8b2>
 80077d6:	4613      	mov	r3, r2
 80077d8:	e7e7      	b.n	80077aa <_strtod_l+0x8b2>
 80077da:	ea53 0308 	orrs.w	r3, r3, r8
 80077de:	d081      	beq.n	80076e4 <_strtod_l+0x7ec>
 80077e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077e2:	b1e3      	cbz	r3, 800781e <_strtod_l+0x926>
 80077e4:	ea13 0f0a 	tst.w	r3, sl
 80077e8:	d0ee      	beq.n	80077c8 <_strtod_l+0x8d0>
 80077ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	9a05      	ldr	r2, [sp, #20]
 80077f2:	b1c3      	cbz	r3, 8007826 <_strtod_l+0x92e>
 80077f4:	f7ff fb5c 	bl	8006eb0 <sulp>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80077fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007800:	f7f8 fcbe 	bl	8000180 <__adddf3>
 8007804:	4680      	mov	r8, r0
 8007806:	4689      	mov	r9, r1
 8007808:	e7de      	b.n	80077c8 <_strtod_l+0x8d0>
 800780a:	4013      	ands	r3, r2
 800780c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007810:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007814:	f04f 38ff 	mov.w	r8, #4294967295
 8007818:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800781c:	e7d4      	b.n	80077c8 <_strtod_l+0x8d0>
 800781e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007820:	ea13 0f08 	tst.w	r3, r8
 8007824:	e7e0      	b.n	80077e8 <_strtod_l+0x8f0>
 8007826:	f7ff fb43 	bl	8006eb0 <sulp>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007830:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007832:	f7f8 fca3 	bl	800017c <__aeabi_dsub>
 8007836:	2200      	movs	r2, #0
 8007838:	2300      	movs	r3, #0
 800783a:	4680      	mov	r8, r0
 800783c:	4689      	mov	r9, r1
 800783e:	f7f9 f8bd 	bl	80009bc <__aeabi_dcmpeq>
 8007842:	2800      	cmp	r0, #0
 8007844:	d0c0      	beq.n	80077c8 <_strtod_l+0x8d0>
 8007846:	e606      	b.n	8007456 <_strtod_l+0x55e>
 8007848:	4659      	mov	r1, fp
 800784a:	4630      	mov	r0, r6
 800784c:	f7ff fabe 	bl	8006dcc <__ratio>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007858:	2200      	movs	r2, #0
 800785a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800785e:	f7f9 f8c1 	bl	80009e4 <__aeabi_dcmple>
 8007862:	2800      	cmp	r0, #0
 8007864:	d06f      	beq.n	8007946 <_strtod_l+0xa4e>
 8007866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007868:	2b00      	cmp	r3, #0
 800786a:	d17c      	bne.n	8007966 <_strtod_l+0xa6e>
 800786c:	f1b8 0f00 	cmp.w	r8, #0
 8007870:	d159      	bne.n	8007926 <_strtod_l+0xa2e>
 8007872:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007876:	2b00      	cmp	r3, #0
 8007878:	d17b      	bne.n	8007972 <_strtod_l+0xa7a>
 800787a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800787e:	2200      	movs	r2, #0
 8007880:	4b62      	ldr	r3, [pc, #392]	; (8007a0c <_strtod_l+0xb14>)
 8007882:	f7f9 f8a5 	bl	80009d0 <__aeabi_dcmplt>
 8007886:	2800      	cmp	r0, #0
 8007888:	d15a      	bne.n	8007940 <_strtod_l+0xa48>
 800788a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800788e:	2200      	movs	r2, #0
 8007890:	4b5f      	ldr	r3, [pc, #380]	; (8007a10 <_strtod_l+0xb18>)
 8007892:	f7f8 fe2b 	bl	80004ec <__aeabi_dmul>
 8007896:	4605      	mov	r5, r0
 8007898:	460f      	mov	r7, r1
 800789a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800789e:	9506      	str	r5, [sp, #24]
 80078a0:	9307      	str	r3, [sp, #28]
 80078a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80078aa:	4b56      	ldr	r3, [pc, #344]	; (8007a04 <_strtod_l+0xb0c>)
 80078ac:	4a55      	ldr	r2, [pc, #340]	; (8007a04 <_strtod_l+0xb0c>)
 80078ae:	ea0a 0303 	and.w	r3, sl, r3
 80078b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80078b4:	4b57      	ldr	r3, [pc, #348]	; (8007a14 <_strtod_l+0xb1c>)
 80078b6:	ea0a 0202 	and.w	r2, sl, r2
 80078ba:	429a      	cmp	r2, r3
 80078bc:	f040 80b0 	bne.w	8007a20 <_strtod_l+0xb28>
 80078c0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80078c4:	4640      	mov	r0, r8
 80078c6:	4649      	mov	r1, r9
 80078c8:	f7ff f9c2 	bl	8006c50 <__ulp>
 80078cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078d0:	f7f8 fe0c 	bl	80004ec <__aeabi_dmul>
 80078d4:	4642      	mov	r2, r8
 80078d6:	464b      	mov	r3, r9
 80078d8:	f7f8 fc52 	bl	8000180 <__adddf3>
 80078dc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007a04 <_strtod_l+0xb0c>
 80078e0:	4a4d      	ldr	r2, [pc, #308]	; (8007a18 <_strtod_l+0xb20>)
 80078e2:	ea01 0a0a 	and.w	sl, r1, sl
 80078e6:	4592      	cmp	sl, r2
 80078e8:	4680      	mov	r8, r0
 80078ea:	d948      	bls.n	800797e <_strtod_l+0xa86>
 80078ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078ee:	4b46      	ldr	r3, [pc, #280]	; (8007a08 <_strtod_l+0xb10>)
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d103      	bne.n	80078fc <_strtod_l+0xa04>
 80078f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078f6:	3301      	adds	r3, #1
 80078f8:	f43f ad3c 	beq.w	8007374 <_strtod_l+0x47c>
 80078fc:	f04f 38ff 	mov.w	r8, #4294967295
 8007900:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007a08 <_strtod_l+0xb10>
 8007904:	4620      	mov	r0, r4
 8007906:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007908:	f7fe fe76 	bl	80065f8 <_Bfree>
 800790c:	4620      	mov	r0, r4
 800790e:	9908      	ldr	r1, [sp, #32]
 8007910:	f7fe fe72 	bl	80065f8 <_Bfree>
 8007914:	4659      	mov	r1, fp
 8007916:	4620      	mov	r0, r4
 8007918:	f7fe fe6e 	bl	80065f8 <_Bfree>
 800791c:	4631      	mov	r1, r6
 800791e:	4620      	mov	r0, r4
 8007920:	f7fe fe6a 	bl	80065f8 <_Bfree>
 8007924:	e605      	b.n	8007532 <_strtod_l+0x63a>
 8007926:	f1b8 0f01 	cmp.w	r8, #1
 800792a:	d103      	bne.n	8007934 <_strtod_l+0xa3c>
 800792c:	f1b9 0f00 	cmp.w	r9, #0
 8007930:	f43f ad91 	beq.w	8007456 <_strtod_l+0x55e>
 8007934:	2200      	movs	r2, #0
 8007936:	4b39      	ldr	r3, [pc, #228]	; (8007a1c <_strtod_l+0xb24>)
 8007938:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800793a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800793e:	e016      	b.n	800796e <_strtod_l+0xa76>
 8007940:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007942:	4f33      	ldr	r7, [pc, #204]	; (8007a10 <_strtod_l+0xb18>)
 8007944:	e7a9      	b.n	800789a <_strtod_l+0x9a2>
 8007946:	4b32      	ldr	r3, [pc, #200]	; (8007a10 <_strtod_l+0xb18>)
 8007948:	2200      	movs	r2, #0
 800794a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800794e:	f7f8 fdcd 	bl	80004ec <__aeabi_dmul>
 8007952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007954:	4605      	mov	r5, r0
 8007956:	460f      	mov	r7, r1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d09e      	beq.n	800789a <_strtod_l+0x9a2>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007964:	e79d      	b.n	80078a2 <_strtod_l+0x9aa>
 8007966:	2200      	movs	r2, #0
 8007968:	4b28      	ldr	r3, [pc, #160]	; (8007a0c <_strtod_l+0xb14>)
 800796a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800796e:	4f27      	ldr	r7, [pc, #156]	; (8007a0c <_strtod_l+0xb14>)
 8007970:	e797      	b.n	80078a2 <_strtod_l+0x9aa>
 8007972:	2200      	movs	r2, #0
 8007974:	4b29      	ldr	r3, [pc, #164]	; (8007a1c <_strtod_l+0xb24>)
 8007976:	4645      	mov	r5, r8
 8007978:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800797c:	e7f7      	b.n	800796e <_strtod_l+0xa76>
 800797e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007982:	9b05      	ldr	r3, [sp, #20]
 8007984:	46ca      	mov	sl, r9
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1bc      	bne.n	8007904 <_strtod_l+0xa0c>
 800798a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800798e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007990:	0d1b      	lsrs	r3, r3, #20
 8007992:	051b      	lsls	r3, r3, #20
 8007994:	429a      	cmp	r2, r3
 8007996:	d1b5      	bne.n	8007904 <_strtod_l+0xa0c>
 8007998:	4628      	mov	r0, r5
 800799a:	4639      	mov	r1, r7
 800799c:	f7f9 fbe8 	bl	8001170 <__aeabi_d2lz>
 80079a0:	f7f8 fd76 	bl	8000490 <__aeabi_l2d>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4628      	mov	r0, r5
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f8 fbe6 	bl	800017c <__aeabi_dsub>
 80079b0:	460b      	mov	r3, r1
 80079b2:	4602      	mov	r2, r0
 80079b4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80079b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80079bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079be:	ea4a 0a08 	orr.w	sl, sl, r8
 80079c2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80079c6:	d06c      	beq.n	8007aa2 <_strtod_l+0xbaa>
 80079c8:	a309      	add	r3, pc, #36	; (adr r3, 80079f0 <_strtod_l+0xaf8>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 ffff 	bl	80009d0 <__aeabi_dcmplt>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	f47f acd8 	bne.w	8007388 <_strtod_l+0x490>
 80079d8:	a307      	add	r3, pc, #28	; (adr r3, 80079f8 <_strtod_l+0xb00>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079e2:	f7f9 f813 	bl	8000a0c <__aeabi_dcmpgt>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d08c      	beq.n	8007904 <_strtod_l+0xa0c>
 80079ea:	e4cd      	b.n	8007388 <_strtod_l+0x490>
 80079ec:	f3af 8000 	nop.w
 80079f0:	94a03595 	.word	0x94a03595
 80079f4:	3fdfffff 	.word	0x3fdfffff
 80079f8:	35afe535 	.word	0x35afe535
 80079fc:	3fe00000 	.word	0x3fe00000
 8007a00:	000fffff 	.word	0x000fffff
 8007a04:	7ff00000 	.word	0x7ff00000
 8007a08:	7fefffff 	.word	0x7fefffff
 8007a0c:	3ff00000 	.word	0x3ff00000
 8007a10:	3fe00000 	.word	0x3fe00000
 8007a14:	7fe00000 	.word	0x7fe00000
 8007a18:	7c9fffff 	.word	0x7c9fffff
 8007a1c:	bff00000 	.word	0xbff00000
 8007a20:	9b05      	ldr	r3, [sp, #20]
 8007a22:	b333      	cbz	r3, 8007a72 <_strtod_l+0xb7a>
 8007a24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a2a:	d822      	bhi.n	8007a72 <_strtod_l+0xb7a>
 8007a2c:	a328      	add	r3, pc, #160	; (adr r3, 8007ad0 <_strtod_l+0xbd8>)
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	4628      	mov	r0, r5
 8007a34:	4639      	mov	r1, r7
 8007a36:	f7f8 ffd5 	bl	80009e4 <__aeabi_dcmple>
 8007a3a:	b1a0      	cbz	r0, 8007a66 <_strtod_l+0xb6e>
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f7f9 f82c 	bl	8000a9c <__aeabi_d2uiz>
 8007a44:	2801      	cmp	r0, #1
 8007a46:	bf38      	it	cc
 8007a48:	2001      	movcc	r0, #1
 8007a4a:	f7f8 fcd5 	bl	80003f8 <__aeabi_ui2d>
 8007a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a50:	4605      	mov	r5, r0
 8007a52:	460f      	mov	r7, r1
 8007a54:	bb03      	cbnz	r3, 8007a98 <_strtod_l+0xba0>
 8007a56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a5a:	9014      	str	r0, [sp, #80]	; 0x50
 8007a5c:	9315      	str	r3, [sp, #84]	; 0x54
 8007a5e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a62:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a6a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007a6e:	1a9b      	subs	r3, r3, r2
 8007a70:	9311      	str	r3, [sp, #68]	; 0x44
 8007a72:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a76:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007a7a:	f7ff f8e9 	bl	8006c50 <__ulp>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4640      	mov	r0, r8
 8007a84:	4649      	mov	r1, r9
 8007a86:	f7f8 fd31 	bl	80004ec <__aeabi_dmul>
 8007a8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a8e:	f7f8 fb77 	bl	8000180 <__adddf3>
 8007a92:	4680      	mov	r8, r0
 8007a94:	4689      	mov	r9, r1
 8007a96:	e774      	b.n	8007982 <_strtod_l+0xa8a>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007aa0:	e7dd      	b.n	8007a5e <_strtod_l+0xb66>
 8007aa2:	a30d      	add	r3, pc, #52	; (adr r3, 8007ad8 <_strtod_l+0xbe0>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f7f8 ff92 	bl	80009d0 <__aeabi_dcmplt>
 8007aac:	e79b      	b.n	80079e6 <_strtod_l+0xaee>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ab2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ab4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	f7ff ba5b 	b.w	8006f72 <_strtod_l+0x7a>
 8007abc:	2a65      	cmp	r2, #101	; 0x65
 8007abe:	f43f ab52 	beq.w	8007166 <_strtod_l+0x26e>
 8007ac2:	2a45      	cmp	r2, #69	; 0x45
 8007ac4:	f43f ab4f 	beq.w	8007166 <_strtod_l+0x26e>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f7ff bb87 	b.w	80071dc <_strtod_l+0x2e4>
 8007ace:	bf00      	nop
 8007ad0:	ffc00000 	.word	0xffc00000
 8007ad4:	41dfffff 	.word	0x41dfffff
 8007ad8:	94a03595 	.word	0x94a03595
 8007adc:	3fcfffff 	.word	0x3fcfffff

08007ae0 <_strtod_r>:
 8007ae0:	4b01      	ldr	r3, [pc, #4]	; (8007ae8 <_strtod_r+0x8>)
 8007ae2:	f7ff ba09 	b.w	8006ef8 <_strtod_l>
 8007ae6:	bf00      	nop
 8007ae8:	20000078 	.word	0x20000078

08007aec <__ssputs_r>:
 8007aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af0:	461f      	mov	r7, r3
 8007af2:	688e      	ldr	r6, [r1, #8]
 8007af4:	4682      	mov	sl, r0
 8007af6:	42be      	cmp	r6, r7
 8007af8:	460c      	mov	r4, r1
 8007afa:	4690      	mov	r8, r2
 8007afc:	680b      	ldr	r3, [r1, #0]
 8007afe:	d82c      	bhi.n	8007b5a <__ssputs_r+0x6e>
 8007b00:	898a      	ldrh	r2, [r1, #12]
 8007b02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b06:	d026      	beq.n	8007b56 <__ssputs_r+0x6a>
 8007b08:	6965      	ldr	r5, [r4, #20]
 8007b0a:	6909      	ldr	r1, [r1, #16]
 8007b0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b10:	eba3 0901 	sub.w	r9, r3, r1
 8007b14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b18:	1c7b      	adds	r3, r7, #1
 8007b1a:	444b      	add	r3, r9
 8007b1c:	106d      	asrs	r5, r5, #1
 8007b1e:	429d      	cmp	r5, r3
 8007b20:	bf38      	it	cc
 8007b22:	461d      	movcc	r5, r3
 8007b24:	0553      	lsls	r3, r2, #21
 8007b26:	d527      	bpl.n	8007b78 <__ssputs_r+0x8c>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7fe fc99 	bl	8006460 <_malloc_r>
 8007b2e:	4606      	mov	r6, r0
 8007b30:	b360      	cbz	r0, 8007b8c <__ssputs_r+0xa0>
 8007b32:	464a      	mov	r2, r9
 8007b34:	6921      	ldr	r1, [r4, #16]
 8007b36:	f000 fa29 	bl	8007f8c <memcpy>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	6126      	str	r6, [r4, #16]
 8007b48:	444e      	add	r6, r9
 8007b4a:	6026      	str	r6, [r4, #0]
 8007b4c:	463e      	mov	r6, r7
 8007b4e:	6165      	str	r5, [r4, #20]
 8007b50:	eba5 0509 	sub.w	r5, r5, r9
 8007b54:	60a5      	str	r5, [r4, #8]
 8007b56:	42be      	cmp	r6, r7
 8007b58:	d900      	bls.n	8007b5c <__ssputs_r+0x70>
 8007b5a:	463e      	mov	r6, r7
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4641      	mov	r1, r8
 8007b60:	6820      	ldr	r0, [r4, #0]
 8007b62:	f000 f9d7 	bl	8007f14 <memmove>
 8007b66:	2000      	movs	r0, #0
 8007b68:	68a3      	ldr	r3, [r4, #8]
 8007b6a:	1b9b      	subs	r3, r3, r6
 8007b6c:	60a3      	str	r3, [r4, #8]
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	4433      	add	r3, r6
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b78:	462a      	mov	r2, r5
 8007b7a:	f000 fda2 	bl	80086c2 <_realloc_r>
 8007b7e:	4606      	mov	r6, r0
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d1e0      	bne.n	8007b46 <__ssputs_r+0x5a>
 8007b84:	4650      	mov	r0, sl
 8007b86:	6921      	ldr	r1, [r4, #16]
 8007b88:	f7fe fbfa 	bl	8006380 <_free_r>
 8007b8c:	230c      	movs	r3, #12
 8007b8e:	f8ca 3000 	str.w	r3, [sl]
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	e7e9      	b.n	8007b74 <__ssputs_r+0x88>

08007ba0 <_svfiprintf_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	4698      	mov	r8, r3
 8007ba6:	898b      	ldrh	r3, [r1, #12]
 8007ba8:	4607      	mov	r7, r0
 8007baa:	061b      	lsls	r3, r3, #24
 8007bac:	460d      	mov	r5, r1
 8007bae:	4614      	mov	r4, r2
 8007bb0:	b09d      	sub	sp, #116	; 0x74
 8007bb2:	d50e      	bpl.n	8007bd2 <_svfiprintf_r+0x32>
 8007bb4:	690b      	ldr	r3, [r1, #16]
 8007bb6:	b963      	cbnz	r3, 8007bd2 <_svfiprintf_r+0x32>
 8007bb8:	2140      	movs	r1, #64	; 0x40
 8007bba:	f7fe fc51 	bl	8006460 <_malloc_r>
 8007bbe:	6028      	str	r0, [r5, #0]
 8007bc0:	6128      	str	r0, [r5, #16]
 8007bc2:	b920      	cbnz	r0, 8007bce <_svfiprintf_r+0x2e>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	603b      	str	r3, [r7, #0]
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	e0d0      	b.n	8007d70 <_svfiprintf_r+0x1d0>
 8007bce:	2340      	movs	r3, #64	; 0x40
 8007bd0:	616b      	str	r3, [r5, #20]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd6:	2320      	movs	r3, #32
 8007bd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bdc:	2330      	movs	r3, #48	; 0x30
 8007bde:	f04f 0901 	mov.w	r9, #1
 8007be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007be6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007d88 <_svfiprintf_r+0x1e8>
 8007bea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bee:	4623      	mov	r3, r4
 8007bf0:	469a      	mov	sl, r3
 8007bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bf6:	b10a      	cbz	r2, 8007bfc <_svfiprintf_r+0x5c>
 8007bf8:	2a25      	cmp	r2, #37	; 0x25
 8007bfa:	d1f9      	bne.n	8007bf0 <_svfiprintf_r+0x50>
 8007bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8007c00:	d00b      	beq.n	8007c1a <_svfiprintf_r+0x7a>
 8007c02:	465b      	mov	r3, fp
 8007c04:	4622      	mov	r2, r4
 8007c06:	4629      	mov	r1, r5
 8007c08:	4638      	mov	r0, r7
 8007c0a:	f7ff ff6f 	bl	8007aec <__ssputs_r>
 8007c0e:	3001      	adds	r0, #1
 8007c10:	f000 80a9 	beq.w	8007d66 <_svfiprintf_r+0x1c6>
 8007c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c16:	445a      	add	r2, fp
 8007c18:	9209      	str	r2, [sp, #36]	; 0x24
 8007c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80a1 	beq.w	8007d66 <_svfiprintf_r+0x1c6>
 8007c24:	2300      	movs	r3, #0
 8007c26:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c2e:	f10a 0a01 	add.w	sl, sl, #1
 8007c32:	9304      	str	r3, [sp, #16]
 8007c34:	9307      	str	r3, [sp, #28]
 8007c36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c3c:	4654      	mov	r4, sl
 8007c3e:	2205      	movs	r2, #5
 8007c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c44:	4850      	ldr	r0, [pc, #320]	; (8007d88 <_svfiprintf_r+0x1e8>)
 8007c46:	f7fd fcfc 	bl	8005642 <memchr>
 8007c4a:	9a04      	ldr	r2, [sp, #16]
 8007c4c:	b9d8      	cbnz	r0, 8007c86 <_svfiprintf_r+0xe6>
 8007c4e:	06d0      	lsls	r0, r2, #27
 8007c50:	bf44      	itt	mi
 8007c52:	2320      	movmi	r3, #32
 8007c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c58:	0711      	lsls	r1, r2, #28
 8007c5a:	bf44      	itt	mi
 8007c5c:	232b      	movmi	r3, #43	; 0x2b
 8007c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c62:	f89a 3000 	ldrb.w	r3, [sl]
 8007c66:	2b2a      	cmp	r3, #42	; 0x2a
 8007c68:	d015      	beq.n	8007c96 <_svfiprintf_r+0xf6>
 8007c6a:	4654      	mov	r4, sl
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	f04f 0c0a 	mov.w	ip, #10
 8007c72:	9a07      	ldr	r2, [sp, #28]
 8007c74:	4621      	mov	r1, r4
 8007c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c7a:	3b30      	subs	r3, #48	; 0x30
 8007c7c:	2b09      	cmp	r3, #9
 8007c7e:	d94d      	bls.n	8007d1c <_svfiprintf_r+0x17c>
 8007c80:	b1b0      	cbz	r0, 8007cb0 <_svfiprintf_r+0x110>
 8007c82:	9207      	str	r2, [sp, #28]
 8007c84:	e014      	b.n	8007cb0 <_svfiprintf_r+0x110>
 8007c86:	eba0 0308 	sub.w	r3, r0, r8
 8007c8a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	46a2      	mov	sl, r4
 8007c92:	9304      	str	r3, [sp, #16]
 8007c94:	e7d2      	b.n	8007c3c <_svfiprintf_r+0x9c>
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	1d19      	adds	r1, r3, #4
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	9103      	str	r1, [sp, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bfbb      	ittet	lt
 8007ca2:	425b      	neglt	r3, r3
 8007ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ca8:	9307      	strge	r3, [sp, #28]
 8007caa:	9307      	strlt	r3, [sp, #28]
 8007cac:	bfb8      	it	lt
 8007cae:	9204      	strlt	r2, [sp, #16]
 8007cb0:	7823      	ldrb	r3, [r4, #0]
 8007cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8007cb4:	d10c      	bne.n	8007cd0 <_svfiprintf_r+0x130>
 8007cb6:	7863      	ldrb	r3, [r4, #1]
 8007cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cba:	d134      	bne.n	8007d26 <_svfiprintf_r+0x186>
 8007cbc:	9b03      	ldr	r3, [sp, #12]
 8007cbe:	3402      	adds	r4, #2
 8007cc0:	1d1a      	adds	r2, r3, #4
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	9203      	str	r2, [sp, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bfb8      	it	lt
 8007cca:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cce:	9305      	str	r3, [sp, #20]
 8007cd0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007d8c <_svfiprintf_r+0x1ec>
 8007cd4:	2203      	movs	r2, #3
 8007cd6:	4650      	mov	r0, sl
 8007cd8:	7821      	ldrb	r1, [r4, #0]
 8007cda:	f7fd fcb2 	bl	8005642 <memchr>
 8007cde:	b138      	cbz	r0, 8007cf0 <_svfiprintf_r+0x150>
 8007ce0:	2240      	movs	r2, #64	; 0x40
 8007ce2:	9b04      	ldr	r3, [sp, #16]
 8007ce4:	eba0 000a 	sub.w	r0, r0, sl
 8007ce8:	4082      	lsls	r2, r0
 8007cea:	4313      	orrs	r3, r2
 8007cec:	3401      	adds	r4, #1
 8007cee:	9304      	str	r3, [sp, #16]
 8007cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf4:	2206      	movs	r2, #6
 8007cf6:	4826      	ldr	r0, [pc, #152]	; (8007d90 <_svfiprintf_r+0x1f0>)
 8007cf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cfc:	f7fd fca1 	bl	8005642 <memchr>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d038      	beq.n	8007d76 <_svfiprintf_r+0x1d6>
 8007d04:	4b23      	ldr	r3, [pc, #140]	; (8007d94 <_svfiprintf_r+0x1f4>)
 8007d06:	bb1b      	cbnz	r3, 8007d50 <_svfiprintf_r+0x1b0>
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	3307      	adds	r3, #7
 8007d0c:	f023 0307 	bic.w	r3, r3, #7
 8007d10:	3308      	adds	r3, #8
 8007d12:	9303      	str	r3, [sp, #12]
 8007d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d16:	4433      	add	r3, r6
 8007d18:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1a:	e768      	b.n	8007bee <_svfiprintf_r+0x4e>
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	2001      	movs	r0, #1
 8007d20:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d24:	e7a6      	b.n	8007c74 <_svfiprintf_r+0xd4>
 8007d26:	2300      	movs	r3, #0
 8007d28:	f04f 0c0a 	mov.w	ip, #10
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	3401      	adds	r4, #1
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	4620      	mov	r0, r4
 8007d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d38:	3a30      	subs	r2, #48	; 0x30
 8007d3a:	2a09      	cmp	r2, #9
 8007d3c:	d903      	bls.n	8007d46 <_svfiprintf_r+0x1a6>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0c6      	beq.n	8007cd0 <_svfiprintf_r+0x130>
 8007d42:	9105      	str	r1, [sp, #20]
 8007d44:	e7c4      	b.n	8007cd0 <_svfiprintf_r+0x130>
 8007d46:	4604      	mov	r4, r0
 8007d48:	2301      	movs	r3, #1
 8007d4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d4e:	e7f0      	b.n	8007d32 <_svfiprintf_r+0x192>
 8007d50:	ab03      	add	r3, sp, #12
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	462a      	mov	r2, r5
 8007d56:	4638      	mov	r0, r7
 8007d58:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <_svfiprintf_r+0x1f8>)
 8007d5a:	a904      	add	r1, sp, #16
 8007d5c:	f7fc fc5a 	bl	8004614 <_printf_float>
 8007d60:	1c42      	adds	r2, r0, #1
 8007d62:	4606      	mov	r6, r0
 8007d64:	d1d6      	bne.n	8007d14 <_svfiprintf_r+0x174>
 8007d66:	89ab      	ldrh	r3, [r5, #12]
 8007d68:	065b      	lsls	r3, r3, #25
 8007d6a:	f53f af2d 	bmi.w	8007bc8 <_svfiprintf_r+0x28>
 8007d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d70:	b01d      	add	sp, #116	; 0x74
 8007d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d76:	ab03      	add	r3, sp, #12
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	462a      	mov	r2, r5
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <_svfiprintf_r+0x1f8>)
 8007d80:	a904      	add	r1, sp, #16
 8007d82:	f7fc fee7 	bl	8004b54 <_printf_i>
 8007d86:	e7eb      	b.n	8007d60 <_svfiprintf_r+0x1c0>
 8007d88:	080090e8 	.word	0x080090e8
 8007d8c:	080090ee 	.word	0x080090ee
 8007d90:	080090f2 	.word	0x080090f2
 8007d94:	08004615 	.word	0x08004615
 8007d98:	08007aed 	.word	0x08007aed

08007d9c <__sflush_r>:
 8007d9c:	898a      	ldrh	r2, [r1, #12]
 8007d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da0:	4605      	mov	r5, r0
 8007da2:	0710      	lsls	r0, r2, #28
 8007da4:	460c      	mov	r4, r1
 8007da6:	d457      	bmi.n	8007e58 <__sflush_r+0xbc>
 8007da8:	684b      	ldr	r3, [r1, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	dc04      	bgt.n	8007db8 <__sflush_r+0x1c>
 8007dae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dc01      	bgt.n	8007db8 <__sflush_r+0x1c>
 8007db4:	2000      	movs	r0, #0
 8007db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dba:	2e00      	cmp	r6, #0
 8007dbc:	d0fa      	beq.n	8007db4 <__sflush_r+0x18>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dc4:	682f      	ldr	r7, [r5, #0]
 8007dc6:	6a21      	ldr	r1, [r4, #32]
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	d032      	beq.n	8007e32 <__sflush_r+0x96>
 8007dcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	075a      	lsls	r2, r3, #29
 8007dd2:	d505      	bpl.n	8007de0 <__sflush_r+0x44>
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	1ac0      	subs	r0, r0, r3
 8007dd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dda:	b10b      	cbz	r3, 8007de0 <__sflush_r+0x44>
 8007ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dde:	1ac0      	subs	r0, r0, r3
 8007de0:	2300      	movs	r3, #0
 8007de2:	4602      	mov	r2, r0
 8007de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007de6:	4628      	mov	r0, r5
 8007de8:	6a21      	ldr	r1, [r4, #32]
 8007dea:	47b0      	blx	r6
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	d106      	bne.n	8007e00 <__sflush_r+0x64>
 8007df2:	6829      	ldr	r1, [r5, #0]
 8007df4:	291d      	cmp	r1, #29
 8007df6:	d82b      	bhi.n	8007e50 <__sflush_r+0xb4>
 8007df8:	4a28      	ldr	r2, [pc, #160]	; (8007e9c <__sflush_r+0x100>)
 8007dfa:	410a      	asrs	r2, r1
 8007dfc:	07d6      	lsls	r6, r2, #31
 8007dfe:	d427      	bmi.n	8007e50 <__sflush_r+0xb4>
 8007e00:	2200      	movs	r2, #0
 8007e02:	6062      	str	r2, [r4, #4]
 8007e04:	6922      	ldr	r2, [r4, #16]
 8007e06:	04d9      	lsls	r1, r3, #19
 8007e08:	6022      	str	r2, [r4, #0]
 8007e0a:	d504      	bpl.n	8007e16 <__sflush_r+0x7a>
 8007e0c:	1c42      	adds	r2, r0, #1
 8007e0e:	d101      	bne.n	8007e14 <__sflush_r+0x78>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	b903      	cbnz	r3, 8007e16 <__sflush_r+0x7a>
 8007e14:	6560      	str	r0, [r4, #84]	; 0x54
 8007e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e18:	602f      	str	r7, [r5, #0]
 8007e1a:	2900      	cmp	r1, #0
 8007e1c:	d0ca      	beq.n	8007db4 <__sflush_r+0x18>
 8007e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e22:	4299      	cmp	r1, r3
 8007e24:	d002      	beq.n	8007e2c <__sflush_r+0x90>
 8007e26:	4628      	mov	r0, r5
 8007e28:	f7fe faaa 	bl	8006380 <_free_r>
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	6360      	str	r0, [r4, #52]	; 0x34
 8007e30:	e7c1      	b.n	8007db6 <__sflush_r+0x1a>
 8007e32:	2301      	movs	r3, #1
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b0      	blx	r6
 8007e38:	1c41      	adds	r1, r0, #1
 8007e3a:	d1c8      	bne.n	8007dce <__sflush_r+0x32>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0c5      	beq.n	8007dce <__sflush_r+0x32>
 8007e42:	2b1d      	cmp	r3, #29
 8007e44:	d001      	beq.n	8007e4a <__sflush_r+0xae>
 8007e46:	2b16      	cmp	r3, #22
 8007e48:	d101      	bne.n	8007e4e <__sflush_r+0xb2>
 8007e4a:	602f      	str	r7, [r5, #0]
 8007e4c:	e7b2      	b.n	8007db4 <__sflush_r+0x18>
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e54:	81a3      	strh	r3, [r4, #12]
 8007e56:	e7ae      	b.n	8007db6 <__sflush_r+0x1a>
 8007e58:	690f      	ldr	r7, [r1, #16]
 8007e5a:	2f00      	cmp	r7, #0
 8007e5c:	d0aa      	beq.n	8007db4 <__sflush_r+0x18>
 8007e5e:	0793      	lsls	r3, r2, #30
 8007e60:	bf18      	it	ne
 8007e62:	2300      	movne	r3, #0
 8007e64:	680e      	ldr	r6, [r1, #0]
 8007e66:	bf08      	it	eq
 8007e68:	694b      	ldreq	r3, [r1, #20]
 8007e6a:	1bf6      	subs	r6, r6, r7
 8007e6c:	600f      	str	r7, [r1, #0]
 8007e6e:	608b      	str	r3, [r1, #8]
 8007e70:	2e00      	cmp	r6, #0
 8007e72:	dd9f      	ble.n	8007db4 <__sflush_r+0x18>
 8007e74:	4633      	mov	r3, r6
 8007e76:	463a      	mov	r2, r7
 8007e78:	4628      	mov	r0, r5
 8007e7a:	6a21      	ldr	r1, [r4, #32]
 8007e7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007e80:	47e0      	blx	ip
 8007e82:	2800      	cmp	r0, #0
 8007e84:	dc06      	bgt.n	8007e94 <__sflush_r+0xf8>
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e90:	81a3      	strh	r3, [r4, #12]
 8007e92:	e790      	b.n	8007db6 <__sflush_r+0x1a>
 8007e94:	4407      	add	r7, r0
 8007e96:	1a36      	subs	r6, r6, r0
 8007e98:	e7ea      	b.n	8007e70 <__sflush_r+0xd4>
 8007e9a:	bf00      	nop
 8007e9c:	dfbffffe 	.word	0xdfbffffe

08007ea0 <_fflush_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	690b      	ldr	r3, [r1, #16]
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	b913      	cbnz	r3, 8007eb0 <_fflush_r+0x10>
 8007eaa:	2500      	movs	r5, #0
 8007eac:	4628      	mov	r0, r5
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
 8007eb0:	b118      	cbz	r0, 8007eba <_fflush_r+0x1a>
 8007eb2:	6a03      	ldr	r3, [r0, #32]
 8007eb4:	b90b      	cbnz	r3, 8007eba <_fflush_r+0x1a>
 8007eb6:	f7fd fa09 	bl	80052cc <__sinit>
 8007eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f3      	beq.n	8007eaa <_fflush_r+0xa>
 8007ec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ec4:	07d0      	lsls	r0, r2, #31
 8007ec6:	d404      	bmi.n	8007ed2 <_fflush_r+0x32>
 8007ec8:	0599      	lsls	r1, r3, #22
 8007eca:	d402      	bmi.n	8007ed2 <_fflush_r+0x32>
 8007ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ece:	f7fd fbb6 	bl	800563e <__retarget_lock_acquire_recursive>
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	f7ff ff61 	bl	8007d9c <__sflush_r>
 8007eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007edc:	4605      	mov	r5, r0
 8007ede:	07da      	lsls	r2, r3, #31
 8007ee0:	d4e4      	bmi.n	8007eac <_fflush_r+0xc>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	059b      	lsls	r3, r3, #22
 8007ee6:	d4e1      	bmi.n	8007eac <_fflush_r+0xc>
 8007ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eea:	f7fd fba9 	bl	8005640 <__retarget_lock_release_recursive>
 8007eee:	e7dd      	b.n	8007eac <_fflush_r+0xc>

08007ef0 <fiprintf>:
 8007ef0:	b40e      	push	{r1, r2, r3}
 8007ef2:	b503      	push	{r0, r1, lr}
 8007ef4:	4601      	mov	r1, r0
 8007ef6:	ab03      	add	r3, sp, #12
 8007ef8:	4805      	ldr	r0, [pc, #20]	; (8007f10 <fiprintf+0x20>)
 8007efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007efe:	6800      	ldr	r0, [r0, #0]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	f000 fc41 	bl	8008788 <_vfiprintf_r>
 8007f06:	b002      	add	sp, #8
 8007f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f0c:	b003      	add	sp, #12
 8007f0e:	4770      	bx	lr
 8007f10:	20000074 	.word	0x20000074

08007f14 <memmove>:
 8007f14:	4288      	cmp	r0, r1
 8007f16:	b510      	push	{r4, lr}
 8007f18:	eb01 0402 	add.w	r4, r1, r2
 8007f1c:	d902      	bls.n	8007f24 <memmove+0x10>
 8007f1e:	4284      	cmp	r4, r0
 8007f20:	4623      	mov	r3, r4
 8007f22:	d807      	bhi.n	8007f34 <memmove+0x20>
 8007f24:	1e43      	subs	r3, r0, #1
 8007f26:	42a1      	cmp	r1, r4
 8007f28:	d008      	beq.n	8007f3c <memmove+0x28>
 8007f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f32:	e7f8      	b.n	8007f26 <memmove+0x12>
 8007f34:	4601      	mov	r1, r0
 8007f36:	4402      	add	r2, r0
 8007f38:	428a      	cmp	r2, r1
 8007f3a:	d100      	bne.n	8007f3e <memmove+0x2a>
 8007f3c:	bd10      	pop	{r4, pc}
 8007f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f46:	e7f7      	b.n	8007f38 <memmove+0x24>

08007f48 <strncmp>:
 8007f48:	b510      	push	{r4, lr}
 8007f4a:	b16a      	cbz	r2, 8007f68 <strncmp+0x20>
 8007f4c:	3901      	subs	r1, #1
 8007f4e:	1884      	adds	r4, r0, r2
 8007f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d103      	bne.n	8007f64 <strncmp+0x1c>
 8007f5c:	42a0      	cmp	r0, r4
 8007f5e:	d001      	beq.n	8007f64 <strncmp+0x1c>
 8007f60:	2a00      	cmp	r2, #0
 8007f62:	d1f5      	bne.n	8007f50 <strncmp+0x8>
 8007f64:	1ad0      	subs	r0, r2, r3
 8007f66:	bd10      	pop	{r4, pc}
 8007f68:	4610      	mov	r0, r2
 8007f6a:	e7fc      	b.n	8007f66 <strncmp+0x1e>

08007f6c <_sbrk_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	2300      	movs	r3, #0
 8007f70:	4d05      	ldr	r5, [pc, #20]	; (8007f88 <_sbrk_r+0x1c>)
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	602b      	str	r3, [r5, #0]
 8007f78:	f7f9 feca 	bl	8001d10 <_sbrk>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	d102      	bne.n	8007f86 <_sbrk_r+0x1a>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	b103      	cbz	r3, 8007f86 <_sbrk_r+0x1a>
 8007f84:	6023      	str	r3, [r4, #0]
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
 8007f88:	2000072c 	.word	0x2000072c

08007f8c <memcpy>:
 8007f8c:	440a      	add	r2, r1
 8007f8e:	4291      	cmp	r1, r2
 8007f90:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f94:	d100      	bne.n	8007f98 <memcpy+0xc>
 8007f96:	4770      	bx	lr
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f9e:	4291      	cmp	r1, r2
 8007fa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa4:	d1f9      	bne.n	8007f9a <memcpy+0xe>
 8007fa6:	bd10      	pop	{r4, pc}

08007fa8 <nan>:
 8007fa8:	2000      	movs	r0, #0
 8007faa:	4901      	ldr	r1, [pc, #4]	; (8007fb0 <nan+0x8>)
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	7ff80000 	.word	0x7ff80000

08007fb4 <abort>:
 8007fb4:	2006      	movs	r0, #6
 8007fb6:	b508      	push	{r3, lr}
 8007fb8:	f000 fdbe 	bl	8008b38 <raise>
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	f7f9 fe79 	bl	8001cb4 <_exit>

08007fc2 <_calloc_r>:
 8007fc2:	b570      	push	{r4, r5, r6, lr}
 8007fc4:	fba1 5402 	umull	r5, r4, r1, r2
 8007fc8:	b934      	cbnz	r4, 8007fd8 <_calloc_r+0x16>
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7fe fa48 	bl	8006460 <_malloc_r>
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	b928      	cbnz	r0, 8007fe0 <_calloc_r+0x1e>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	220c      	movs	r2, #12
 8007fda:	2600      	movs	r6, #0
 8007fdc:	6002      	str	r2, [r0, #0]
 8007fde:	e7f9      	b.n	8007fd4 <_calloc_r+0x12>
 8007fe0:	462a      	mov	r2, r5
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	f7fd fa3f 	bl	8005466 <memset>
 8007fe8:	e7f4      	b.n	8007fd4 <_calloc_r+0x12>

08007fea <rshift>:
 8007fea:	6903      	ldr	r3, [r0, #16]
 8007fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ff0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007ff4:	f100 0414 	add.w	r4, r0, #20
 8007ff8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ffc:	dd46      	ble.n	800808c <rshift+0xa2>
 8007ffe:	f011 011f 	ands.w	r1, r1, #31
 8008002:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008006:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800800a:	d10c      	bne.n	8008026 <rshift+0x3c>
 800800c:	4629      	mov	r1, r5
 800800e:	f100 0710 	add.w	r7, r0, #16
 8008012:	42b1      	cmp	r1, r6
 8008014:	d335      	bcc.n	8008082 <rshift+0x98>
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	1eea      	subs	r2, r5, #3
 800801c:	4296      	cmp	r6, r2
 800801e:	bf38      	it	cc
 8008020:	2300      	movcc	r3, #0
 8008022:	4423      	add	r3, r4
 8008024:	e015      	b.n	8008052 <rshift+0x68>
 8008026:	46a1      	mov	r9, r4
 8008028:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800802c:	f1c1 0820 	rsb	r8, r1, #32
 8008030:	40cf      	lsrs	r7, r1
 8008032:	f105 0e04 	add.w	lr, r5, #4
 8008036:	4576      	cmp	r6, lr
 8008038:	46f4      	mov	ip, lr
 800803a:	d816      	bhi.n	800806a <rshift+0x80>
 800803c:	1a9a      	subs	r2, r3, r2
 800803e:	0092      	lsls	r2, r2, #2
 8008040:	3a04      	subs	r2, #4
 8008042:	3501      	adds	r5, #1
 8008044:	42ae      	cmp	r6, r5
 8008046:	bf38      	it	cc
 8008048:	2200      	movcc	r2, #0
 800804a:	18a3      	adds	r3, r4, r2
 800804c:	50a7      	str	r7, [r4, r2]
 800804e:	b107      	cbz	r7, 8008052 <rshift+0x68>
 8008050:	3304      	adds	r3, #4
 8008052:	42a3      	cmp	r3, r4
 8008054:	eba3 0204 	sub.w	r2, r3, r4
 8008058:	bf08      	it	eq
 800805a:	2300      	moveq	r3, #0
 800805c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008060:	6102      	str	r2, [r0, #16]
 8008062:	bf08      	it	eq
 8008064:	6143      	streq	r3, [r0, #20]
 8008066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800806a:	f8dc c000 	ldr.w	ip, [ip]
 800806e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008072:	ea4c 0707 	orr.w	r7, ip, r7
 8008076:	f849 7b04 	str.w	r7, [r9], #4
 800807a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800807e:	40cf      	lsrs	r7, r1
 8008080:	e7d9      	b.n	8008036 <rshift+0x4c>
 8008082:	f851 cb04 	ldr.w	ip, [r1], #4
 8008086:	f847 cf04 	str.w	ip, [r7, #4]!
 800808a:	e7c2      	b.n	8008012 <rshift+0x28>
 800808c:	4623      	mov	r3, r4
 800808e:	e7e0      	b.n	8008052 <rshift+0x68>

08008090 <__hexdig_fun>:
 8008090:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008094:	2b09      	cmp	r3, #9
 8008096:	d802      	bhi.n	800809e <__hexdig_fun+0xe>
 8008098:	3820      	subs	r0, #32
 800809a:	b2c0      	uxtb	r0, r0
 800809c:	4770      	bx	lr
 800809e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80080a2:	2b05      	cmp	r3, #5
 80080a4:	d801      	bhi.n	80080aa <__hexdig_fun+0x1a>
 80080a6:	3847      	subs	r0, #71	; 0x47
 80080a8:	e7f7      	b.n	800809a <__hexdig_fun+0xa>
 80080aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80080ae:	2b05      	cmp	r3, #5
 80080b0:	d801      	bhi.n	80080b6 <__hexdig_fun+0x26>
 80080b2:	3827      	subs	r0, #39	; 0x27
 80080b4:	e7f1      	b.n	800809a <__hexdig_fun+0xa>
 80080b6:	2000      	movs	r0, #0
 80080b8:	4770      	bx	lr
	...

080080bc <__gethex>:
 80080bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c0:	4681      	mov	r9, r0
 80080c2:	468a      	mov	sl, r1
 80080c4:	4617      	mov	r7, r2
 80080c6:	680a      	ldr	r2, [r1, #0]
 80080c8:	b085      	sub	sp, #20
 80080ca:	f102 0b02 	add.w	fp, r2, #2
 80080ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80080d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80080d6:	9302      	str	r3, [sp, #8]
 80080d8:	32fe      	adds	r2, #254	; 0xfe
 80080da:	eb02 030b 	add.w	r3, r2, fp
 80080de:	46d8      	mov	r8, fp
 80080e0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	2830      	cmp	r0, #48	; 0x30
 80080e8:	d0f7      	beq.n	80080da <__gethex+0x1e>
 80080ea:	f7ff ffd1 	bl	8008090 <__hexdig_fun>
 80080ee:	4604      	mov	r4, r0
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d138      	bne.n	8008166 <__gethex+0xaa>
 80080f4:	2201      	movs	r2, #1
 80080f6:	4640      	mov	r0, r8
 80080f8:	49a7      	ldr	r1, [pc, #668]	; (8008398 <__gethex+0x2dc>)
 80080fa:	f7ff ff25 	bl	8007f48 <strncmp>
 80080fe:	4606      	mov	r6, r0
 8008100:	2800      	cmp	r0, #0
 8008102:	d169      	bne.n	80081d8 <__gethex+0x11c>
 8008104:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008108:	465d      	mov	r5, fp
 800810a:	f7ff ffc1 	bl	8008090 <__hexdig_fun>
 800810e:	2800      	cmp	r0, #0
 8008110:	d064      	beq.n	80081dc <__gethex+0x120>
 8008112:	465a      	mov	r2, fp
 8008114:	7810      	ldrb	r0, [r2, #0]
 8008116:	4690      	mov	r8, r2
 8008118:	2830      	cmp	r0, #48	; 0x30
 800811a:	f102 0201 	add.w	r2, r2, #1
 800811e:	d0f9      	beq.n	8008114 <__gethex+0x58>
 8008120:	f7ff ffb6 	bl	8008090 <__hexdig_fun>
 8008124:	2301      	movs	r3, #1
 8008126:	fab0 f480 	clz	r4, r0
 800812a:	465e      	mov	r6, fp
 800812c:	0964      	lsrs	r4, r4, #5
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	4642      	mov	r2, r8
 8008132:	4615      	mov	r5, r2
 8008134:	7828      	ldrb	r0, [r5, #0]
 8008136:	3201      	adds	r2, #1
 8008138:	f7ff ffaa 	bl	8008090 <__hexdig_fun>
 800813c:	2800      	cmp	r0, #0
 800813e:	d1f8      	bne.n	8008132 <__gethex+0x76>
 8008140:	2201      	movs	r2, #1
 8008142:	4628      	mov	r0, r5
 8008144:	4994      	ldr	r1, [pc, #592]	; (8008398 <__gethex+0x2dc>)
 8008146:	f7ff feff 	bl	8007f48 <strncmp>
 800814a:	b978      	cbnz	r0, 800816c <__gethex+0xb0>
 800814c:	b946      	cbnz	r6, 8008160 <__gethex+0xa4>
 800814e:	1c6e      	adds	r6, r5, #1
 8008150:	4632      	mov	r2, r6
 8008152:	4615      	mov	r5, r2
 8008154:	7828      	ldrb	r0, [r5, #0]
 8008156:	3201      	adds	r2, #1
 8008158:	f7ff ff9a 	bl	8008090 <__hexdig_fun>
 800815c:	2800      	cmp	r0, #0
 800815e:	d1f8      	bne.n	8008152 <__gethex+0x96>
 8008160:	1b73      	subs	r3, r6, r5
 8008162:	009e      	lsls	r6, r3, #2
 8008164:	e004      	b.n	8008170 <__gethex+0xb4>
 8008166:	2400      	movs	r4, #0
 8008168:	4626      	mov	r6, r4
 800816a:	e7e1      	b.n	8008130 <__gethex+0x74>
 800816c:	2e00      	cmp	r6, #0
 800816e:	d1f7      	bne.n	8008160 <__gethex+0xa4>
 8008170:	782b      	ldrb	r3, [r5, #0]
 8008172:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008176:	2b50      	cmp	r3, #80	; 0x50
 8008178:	d13d      	bne.n	80081f6 <__gethex+0x13a>
 800817a:	786b      	ldrb	r3, [r5, #1]
 800817c:	2b2b      	cmp	r3, #43	; 0x2b
 800817e:	d02f      	beq.n	80081e0 <__gethex+0x124>
 8008180:	2b2d      	cmp	r3, #45	; 0x2d
 8008182:	d031      	beq.n	80081e8 <__gethex+0x12c>
 8008184:	f04f 0b00 	mov.w	fp, #0
 8008188:	1c69      	adds	r1, r5, #1
 800818a:	7808      	ldrb	r0, [r1, #0]
 800818c:	f7ff ff80 	bl	8008090 <__hexdig_fun>
 8008190:	1e42      	subs	r2, r0, #1
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	2a18      	cmp	r2, #24
 8008196:	d82e      	bhi.n	80081f6 <__gethex+0x13a>
 8008198:	f1a0 0210 	sub.w	r2, r0, #16
 800819c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081a0:	f7ff ff76 	bl	8008090 <__hexdig_fun>
 80081a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80081a8:	fa5f fc8c 	uxtb.w	ip, ip
 80081ac:	f1bc 0f18 	cmp.w	ip, #24
 80081b0:	d91d      	bls.n	80081ee <__gethex+0x132>
 80081b2:	f1bb 0f00 	cmp.w	fp, #0
 80081b6:	d000      	beq.n	80081ba <__gethex+0xfe>
 80081b8:	4252      	negs	r2, r2
 80081ba:	4416      	add	r6, r2
 80081bc:	f8ca 1000 	str.w	r1, [sl]
 80081c0:	b1dc      	cbz	r4, 80081fa <__gethex+0x13e>
 80081c2:	9b01      	ldr	r3, [sp, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bf14      	ite	ne
 80081c8:	f04f 0800 	movne.w	r8, #0
 80081cc:	f04f 0806 	moveq.w	r8, #6
 80081d0:	4640      	mov	r0, r8
 80081d2:	b005      	add	sp, #20
 80081d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d8:	4645      	mov	r5, r8
 80081da:	4626      	mov	r6, r4
 80081dc:	2401      	movs	r4, #1
 80081de:	e7c7      	b.n	8008170 <__gethex+0xb4>
 80081e0:	f04f 0b00 	mov.w	fp, #0
 80081e4:	1ca9      	adds	r1, r5, #2
 80081e6:	e7d0      	b.n	800818a <__gethex+0xce>
 80081e8:	f04f 0b01 	mov.w	fp, #1
 80081ec:	e7fa      	b.n	80081e4 <__gethex+0x128>
 80081ee:	230a      	movs	r3, #10
 80081f0:	fb03 0002 	mla	r0, r3, r2, r0
 80081f4:	e7d0      	b.n	8008198 <__gethex+0xdc>
 80081f6:	4629      	mov	r1, r5
 80081f8:	e7e0      	b.n	80081bc <__gethex+0x100>
 80081fa:	4621      	mov	r1, r4
 80081fc:	eba5 0308 	sub.w	r3, r5, r8
 8008200:	3b01      	subs	r3, #1
 8008202:	2b07      	cmp	r3, #7
 8008204:	dc0a      	bgt.n	800821c <__gethex+0x160>
 8008206:	4648      	mov	r0, r9
 8008208:	f7fe f9b6 	bl	8006578 <_Balloc>
 800820c:	4604      	mov	r4, r0
 800820e:	b940      	cbnz	r0, 8008222 <__gethex+0x166>
 8008210:	4602      	mov	r2, r0
 8008212:	21e4      	movs	r1, #228	; 0xe4
 8008214:	4b61      	ldr	r3, [pc, #388]	; (800839c <__gethex+0x2e0>)
 8008216:	4862      	ldr	r0, [pc, #392]	; (80083a0 <__gethex+0x2e4>)
 8008218:	f7fd fa26 	bl	8005668 <__assert_func>
 800821c:	3101      	adds	r1, #1
 800821e:	105b      	asrs	r3, r3, #1
 8008220:	e7ef      	b.n	8008202 <__gethex+0x146>
 8008222:	2300      	movs	r3, #0
 8008224:	469b      	mov	fp, r3
 8008226:	f100 0a14 	add.w	sl, r0, #20
 800822a:	f8cd a004 	str.w	sl, [sp, #4]
 800822e:	45a8      	cmp	r8, r5
 8008230:	d344      	bcc.n	80082bc <__gethex+0x200>
 8008232:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008236:	4658      	mov	r0, fp
 8008238:	f848 bb04 	str.w	fp, [r8], #4
 800823c:	eba8 080a 	sub.w	r8, r8, sl
 8008240:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008244:	6122      	str	r2, [r4, #16]
 8008246:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800824a:	f7fe fa87 	bl	800675c <__hi0bits>
 800824e:	683d      	ldr	r5, [r7, #0]
 8008250:	eba8 0800 	sub.w	r8, r8, r0
 8008254:	45a8      	cmp	r8, r5
 8008256:	dd59      	ble.n	800830c <__gethex+0x250>
 8008258:	eba8 0805 	sub.w	r8, r8, r5
 800825c:	4641      	mov	r1, r8
 800825e:	4620      	mov	r0, r4
 8008260:	f7fe fe05 	bl	8006e6e <__any_on>
 8008264:	4683      	mov	fp, r0
 8008266:	b1b8      	cbz	r0, 8008298 <__gethex+0x1dc>
 8008268:	f04f 0b01 	mov.w	fp, #1
 800826c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008270:	1159      	asrs	r1, r3, #5
 8008272:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008276:	f003 021f 	and.w	r2, r3, #31
 800827a:	fa0b f202 	lsl.w	r2, fp, r2
 800827e:	420a      	tst	r2, r1
 8008280:	d00a      	beq.n	8008298 <__gethex+0x1dc>
 8008282:	455b      	cmp	r3, fp
 8008284:	dd06      	ble.n	8008294 <__gethex+0x1d8>
 8008286:	4620      	mov	r0, r4
 8008288:	f1a8 0102 	sub.w	r1, r8, #2
 800828c:	f7fe fdef 	bl	8006e6e <__any_on>
 8008290:	2800      	cmp	r0, #0
 8008292:	d138      	bne.n	8008306 <__gethex+0x24a>
 8008294:	f04f 0b02 	mov.w	fp, #2
 8008298:	4641      	mov	r1, r8
 800829a:	4620      	mov	r0, r4
 800829c:	f7ff fea5 	bl	8007fea <rshift>
 80082a0:	4446      	add	r6, r8
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	42b3      	cmp	r3, r6
 80082a6:	da41      	bge.n	800832c <__gethex+0x270>
 80082a8:	4621      	mov	r1, r4
 80082aa:	4648      	mov	r0, r9
 80082ac:	f7fe f9a4 	bl	80065f8 <_Bfree>
 80082b0:	2300      	movs	r3, #0
 80082b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082b4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	e789      	b.n	80081d0 <__gethex+0x114>
 80082bc:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80082c0:	2a2e      	cmp	r2, #46	; 0x2e
 80082c2:	d014      	beq.n	80082ee <__gethex+0x232>
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d106      	bne.n	80082d6 <__gethex+0x21a>
 80082c8:	9b01      	ldr	r3, [sp, #4]
 80082ca:	f843 bb04 	str.w	fp, [r3], #4
 80082ce:	f04f 0b00 	mov.w	fp, #0
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	465b      	mov	r3, fp
 80082d6:	7828      	ldrb	r0, [r5, #0]
 80082d8:	9303      	str	r3, [sp, #12]
 80082da:	f7ff fed9 	bl	8008090 <__hexdig_fun>
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	f000 000f 	and.w	r0, r0, #15
 80082e4:	4098      	lsls	r0, r3
 80082e6:	ea4b 0b00 	orr.w	fp, fp, r0
 80082ea:	3304      	adds	r3, #4
 80082ec:	e79f      	b.n	800822e <__gethex+0x172>
 80082ee:	45a8      	cmp	r8, r5
 80082f0:	d8e8      	bhi.n	80082c4 <__gethex+0x208>
 80082f2:	2201      	movs	r2, #1
 80082f4:	4628      	mov	r0, r5
 80082f6:	4928      	ldr	r1, [pc, #160]	; (8008398 <__gethex+0x2dc>)
 80082f8:	9303      	str	r3, [sp, #12]
 80082fa:	f7ff fe25 	bl	8007f48 <strncmp>
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	2800      	cmp	r0, #0
 8008302:	d1df      	bne.n	80082c4 <__gethex+0x208>
 8008304:	e793      	b.n	800822e <__gethex+0x172>
 8008306:	f04f 0b03 	mov.w	fp, #3
 800830a:	e7c5      	b.n	8008298 <__gethex+0x1dc>
 800830c:	da0b      	bge.n	8008326 <__gethex+0x26a>
 800830e:	eba5 0808 	sub.w	r8, r5, r8
 8008312:	4621      	mov	r1, r4
 8008314:	4642      	mov	r2, r8
 8008316:	4648      	mov	r0, r9
 8008318:	f7fe fb86 	bl	8006a28 <__lshift>
 800831c:	4604      	mov	r4, r0
 800831e:	eba6 0608 	sub.w	r6, r6, r8
 8008322:	f100 0a14 	add.w	sl, r0, #20
 8008326:	f04f 0b00 	mov.w	fp, #0
 800832a:	e7ba      	b.n	80082a2 <__gethex+0x1e6>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	42b3      	cmp	r3, r6
 8008330:	dd74      	ble.n	800841c <__gethex+0x360>
 8008332:	1b9e      	subs	r6, r3, r6
 8008334:	42b5      	cmp	r5, r6
 8008336:	dc35      	bgt.n	80083a4 <__gethex+0x2e8>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d023      	beq.n	8008386 <__gethex+0x2ca>
 800833e:	2b03      	cmp	r3, #3
 8008340:	d025      	beq.n	800838e <__gethex+0x2d2>
 8008342:	2b01      	cmp	r3, #1
 8008344:	d115      	bne.n	8008372 <__gethex+0x2b6>
 8008346:	42b5      	cmp	r5, r6
 8008348:	d113      	bne.n	8008372 <__gethex+0x2b6>
 800834a:	2d01      	cmp	r5, #1
 800834c:	d10b      	bne.n	8008366 <__gethex+0x2aa>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	9a02      	ldr	r2, [sp, #8]
 8008352:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	2301      	movs	r3, #1
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	f8ca 3000 	str.w	r3, [sl]
 8008360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008362:	601c      	str	r4, [r3, #0]
 8008364:	e734      	b.n	80081d0 <__gethex+0x114>
 8008366:	4620      	mov	r0, r4
 8008368:	1e69      	subs	r1, r5, #1
 800836a:	f7fe fd80 	bl	8006e6e <__any_on>
 800836e:	2800      	cmp	r0, #0
 8008370:	d1ed      	bne.n	800834e <__gethex+0x292>
 8008372:	4621      	mov	r1, r4
 8008374:	4648      	mov	r0, r9
 8008376:	f7fe f93f 	bl	80065f8 <_Bfree>
 800837a:	2300      	movs	r3, #0
 800837c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800837e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	e724      	b.n	80081d0 <__gethex+0x114>
 8008386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1f2      	bne.n	8008372 <__gethex+0x2b6>
 800838c:	e7df      	b.n	800834e <__gethex+0x292>
 800838e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1dc      	bne.n	800834e <__gethex+0x292>
 8008394:	e7ed      	b.n	8008372 <__gethex+0x2b6>
 8008396:	bf00      	nop
 8008398:	08009094 	.word	0x08009094
 800839c:	08008f2b 	.word	0x08008f2b
 80083a0:	08009101 	.word	0x08009101
 80083a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80083a8:	f1bb 0f00 	cmp.w	fp, #0
 80083ac:	d133      	bne.n	8008416 <__gethex+0x35a>
 80083ae:	f1b8 0f00 	cmp.w	r8, #0
 80083b2:	d004      	beq.n	80083be <__gethex+0x302>
 80083b4:	4641      	mov	r1, r8
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7fe fd59 	bl	8006e6e <__any_on>
 80083bc:	4683      	mov	fp, r0
 80083be:	2301      	movs	r3, #1
 80083c0:	ea4f 1268 	mov.w	r2, r8, asr #5
 80083c4:	f008 081f 	and.w	r8, r8, #31
 80083c8:	fa03 f308 	lsl.w	r3, r3, r8
 80083cc:	f04f 0802 	mov.w	r8, #2
 80083d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80083d4:	4631      	mov	r1, r6
 80083d6:	4213      	tst	r3, r2
 80083d8:	4620      	mov	r0, r4
 80083da:	bf18      	it	ne
 80083dc:	f04b 0b02 	orrne.w	fp, fp, #2
 80083e0:	1bad      	subs	r5, r5, r6
 80083e2:	f7ff fe02 	bl	8007fea <rshift>
 80083e6:	687e      	ldr	r6, [r7, #4]
 80083e8:	f1bb 0f00 	cmp.w	fp, #0
 80083ec:	d04a      	beq.n	8008484 <__gethex+0x3c8>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d016      	beq.n	8008422 <__gethex+0x366>
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d018      	beq.n	800842a <__gethex+0x36e>
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d109      	bne.n	8008410 <__gethex+0x354>
 80083fc:	f01b 0f02 	tst.w	fp, #2
 8008400:	d006      	beq.n	8008410 <__gethex+0x354>
 8008402:	f8da 3000 	ldr.w	r3, [sl]
 8008406:	ea4b 0b03 	orr.w	fp, fp, r3
 800840a:	f01b 0f01 	tst.w	fp, #1
 800840e:	d10f      	bne.n	8008430 <__gethex+0x374>
 8008410:	f048 0810 	orr.w	r8, r8, #16
 8008414:	e036      	b.n	8008484 <__gethex+0x3c8>
 8008416:	f04f 0b01 	mov.w	fp, #1
 800841a:	e7d0      	b.n	80083be <__gethex+0x302>
 800841c:	f04f 0801 	mov.w	r8, #1
 8008420:	e7e2      	b.n	80083e8 <__gethex+0x32c>
 8008422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008424:	f1c3 0301 	rsb	r3, r3, #1
 8008428:	930f      	str	r3, [sp, #60]	; 0x3c
 800842a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0ef      	beq.n	8008410 <__gethex+0x354>
 8008430:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008434:	f104 0214 	add.w	r2, r4, #20
 8008438:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	2300      	movs	r3, #0
 8008440:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008444:	4694      	mov	ip, r2
 8008446:	f852 1b04 	ldr.w	r1, [r2], #4
 800844a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800844e:	d01e      	beq.n	800848e <__gethex+0x3d2>
 8008450:	3101      	adds	r1, #1
 8008452:	f8cc 1000 	str.w	r1, [ip]
 8008456:	f1b8 0f02 	cmp.w	r8, #2
 800845a:	f104 0214 	add.w	r2, r4, #20
 800845e:	d13d      	bne.n	80084dc <__gethex+0x420>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	3b01      	subs	r3, #1
 8008464:	42ab      	cmp	r3, r5
 8008466:	d10b      	bne.n	8008480 <__gethex+0x3c4>
 8008468:	2301      	movs	r3, #1
 800846a:	1169      	asrs	r1, r5, #5
 800846c:	f005 051f 	and.w	r5, r5, #31
 8008470:	fa03 f505 	lsl.w	r5, r3, r5
 8008474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008478:	421d      	tst	r5, r3
 800847a:	bf18      	it	ne
 800847c:	f04f 0801 	movne.w	r8, #1
 8008480:	f048 0820 	orr.w	r8, r8, #32
 8008484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008486:	601c      	str	r4, [r3, #0]
 8008488:	9b02      	ldr	r3, [sp, #8]
 800848a:	601e      	str	r6, [r3, #0]
 800848c:	e6a0      	b.n	80081d0 <__gethex+0x114>
 800848e:	4290      	cmp	r0, r2
 8008490:	f842 3c04 	str.w	r3, [r2, #-4]
 8008494:	d8d6      	bhi.n	8008444 <__gethex+0x388>
 8008496:	68a2      	ldr	r2, [r4, #8]
 8008498:	4593      	cmp	fp, r2
 800849a:	db17      	blt.n	80084cc <__gethex+0x410>
 800849c:	6861      	ldr	r1, [r4, #4]
 800849e:	4648      	mov	r0, r9
 80084a0:	3101      	adds	r1, #1
 80084a2:	f7fe f869 	bl	8006578 <_Balloc>
 80084a6:	4682      	mov	sl, r0
 80084a8:	b918      	cbnz	r0, 80084b2 <__gethex+0x3f6>
 80084aa:	4602      	mov	r2, r0
 80084ac:	2184      	movs	r1, #132	; 0x84
 80084ae:	4b1a      	ldr	r3, [pc, #104]	; (8008518 <__gethex+0x45c>)
 80084b0:	e6b1      	b.n	8008216 <__gethex+0x15a>
 80084b2:	6922      	ldr	r2, [r4, #16]
 80084b4:	f104 010c 	add.w	r1, r4, #12
 80084b8:	3202      	adds	r2, #2
 80084ba:	0092      	lsls	r2, r2, #2
 80084bc:	300c      	adds	r0, #12
 80084be:	f7ff fd65 	bl	8007f8c <memcpy>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4648      	mov	r0, r9
 80084c6:	f7fe f897 	bl	80065f8 <_Bfree>
 80084ca:	4654      	mov	r4, sl
 80084cc:	6922      	ldr	r2, [r4, #16]
 80084ce:	1c51      	adds	r1, r2, #1
 80084d0:	6121      	str	r1, [r4, #16]
 80084d2:	2101      	movs	r1, #1
 80084d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80084d8:	6151      	str	r1, [r2, #20]
 80084da:	e7bc      	b.n	8008456 <__gethex+0x39a>
 80084dc:	6921      	ldr	r1, [r4, #16]
 80084de:	4559      	cmp	r1, fp
 80084e0:	dd0b      	ble.n	80084fa <__gethex+0x43e>
 80084e2:	2101      	movs	r1, #1
 80084e4:	4620      	mov	r0, r4
 80084e6:	f7ff fd80 	bl	8007fea <rshift>
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	3601      	adds	r6, #1
 80084ee:	42b3      	cmp	r3, r6
 80084f0:	f6ff aeda 	blt.w	80082a8 <__gethex+0x1ec>
 80084f4:	f04f 0801 	mov.w	r8, #1
 80084f8:	e7c2      	b.n	8008480 <__gethex+0x3c4>
 80084fa:	f015 051f 	ands.w	r5, r5, #31
 80084fe:	d0f9      	beq.n	80084f4 <__gethex+0x438>
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	f1c5 0520 	rsb	r5, r5, #32
 8008506:	441a      	add	r2, r3
 8008508:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800850c:	f7fe f926 	bl	800675c <__hi0bits>
 8008510:	42a8      	cmp	r0, r5
 8008512:	dbe6      	blt.n	80084e2 <__gethex+0x426>
 8008514:	e7ee      	b.n	80084f4 <__gethex+0x438>
 8008516:	bf00      	nop
 8008518:	08008f2b 	.word	0x08008f2b

0800851c <L_shift>:
 800851c:	f1c2 0208 	rsb	r2, r2, #8
 8008520:	0092      	lsls	r2, r2, #2
 8008522:	b570      	push	{r4, r5, r6, lr}
 8008524:	f1c2 0620 	rsb	r6, r2, #32
 8008528:	6843      	ldr	r3, [r0, #4]
 800852a:	6804      	ldr	r4, [r0, #0]
 800852c:	fa03 f506 	lsl.w	r5, r3, r6
 8008530:	432c      	orrs	r4, r5
 8008532:	40d3      	lsrs	r3, r2
 8008534:	6004      	str	r4, [r0, #0]
 8008536:	f840 3f04 	str.w	r3, [r0, #4]!
 800853a:	4288      	cmp	r0, r1
 800853c:	d3f4      	bcc.n	8008528 <L_shift+0xc>
 800853e:	bd70      	pop	{r4, r5, r6, pc}

08008540 <__match>:
 8008540:	b530      	push	{r4, r5, lr}
 8008542:	6803      	ldr	r3, [r0, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800854a:	b914      	cbnz	r4, 8008552 <__match+0x12>
 800854c:	6003      	str	r3, [r0, #0]
 800854e:	2001      	movs	r0, #1
 8008550:	bd30      	pop	{r4, r5, pc}
 8008552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008556:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800855a:	2d19      	cmp	r5, #25
 800855c:	bf98      	it	ls
 800855e:	3220      	addls	r2, #32
 8008560:	42a2      	cmp	r2, r4
 8008562:	d0f0      	beq.n	8008546 <__match+0x6>
 8008564:	2000      	movs	r0, #0
 8008566:	e7f3      	b.n	8008550 <__match+0x10>

08008568 <__hexnan>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	2500      	movs	r5, #0
 800856e:	680b      	ldr	r3, [r1, #0]
 8008570:	4682      	mov	sl, r0
 8008572:	115e      	asrs	r6, r3, #5
 8008574:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008578:	f013 031f 	ands.w	r3, r3, #31
 800857c:	bf18      	it	ne
 800857e:	3604      	addne	r6, #4
 8008580:	1f37      	subs	r7, r6, #4
 8008582:	4690      	mov	r8, r2
 8008584:	46b9      	mov	r9, r7
 8008586:	463c      	mov	r4, r7
 8008588:	46ab      	mov	fp, r5
 800858a:	b087      	sub	sp, #28
 800858c:	6801      	ldr	r1, [r0, #0]
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	f846 5c04 	str.w	r5, [r6, #-4]
 8008594:	9502      	str	r5, [sp, #8]
 8008596:	784a      	ldrb	r2, [r1, #1]
 8008598:	1c4b      	adds	r3, r1, #1
 800859a:	9303      	str	r3, [sp, #12]
 800859c:	b342      	cbz	r2, 80085f0 <__hexnan+0x88>
 800859e:	4610      	mov	r0, r2
 80085a0:	9105      	str	r1, [sp, #20]
 80085a2:	9204      	str	r2, [sp, #16]
 80085a4:	f7ff fd74 	bl	8008090 <__hexdig_fun>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d14f      	bne.n	800864c <__hexnan+0xe4>
 80085ac:	9a04      	ldr	r2, [sp, #16]
 80085ae:	9905      	ldr	r1, [sp, #20]
 80085b0:	2a20      	cmp	r2, #32
 80085b2:	d818      	bhi.n	80085e6 <__hexnan+0x7e>
 80085b4:	9b02      	ldr	r3, [sp, #8]
 80085b6:	459b      	cmp	fp, r3
 80085b8:	dd13      	ble.n	80085e2 <__hexnan+0x7a>
 80085ba:	454c      	cmp	r4, r9
 80085bc:	d206      	bcs.n	80085cc <__hexnan+0x64>
 80085be:	2d07      	cmp	r5, #7
 80085c0:	dc04      	bgt.n	80085cc <__hexnan+0x64>
 80085c2:	462a      	mov	r2, r5
 80085c4:	4649      	mov	r1, r9
 80085c6:	4620      	mov	r0, r4
 80085c8:	f7ff ffa8 	bl	800851c <L_shift>
 80085cc:	4544      	cmp	r4, r8
 80085ce:	d950      	bls.n	8008672 <__hexnan+0x10a>
 80085d0:	2300      	movs	r3, #0
 80085d2:	f1a4 0904 	sub.w	r9, r4, #4
 80085d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80085da:	461d      	mov	r5, r3
 80085dc:	464c      	mov	r4, r9
 80085de:	f8cd b008 	str.w	fp, [sp, #8]
 80085e2:	9903      	ldr	r1, [sp, #12]
 80085e4:	e7d7      	b.n	8008596 <__hexnan+0x2e>
 80085e6:	2a29      	cmp	r2, #41	; 0x29
 80085e8:	d155      	bne.n	8008696 <__hexnan+0x12e>
 80085ea:	3102      	adds	r1, #2
 80085ec:	f8ca 1000 	str.w	r1, [sl]
 80085f0:	f1bb 0f00 	cmp.w	fp, #0
 80085f4:	d04f      	beq.n	8008696 <__hexnan+0x12e>
 80085f6:	454c      	cmp	r4, r9
 80085f8:	d206      	bcs.n	8008608 <__hexnan+0xa0>
 80085fa:	2d07      	cmp	r5, #7
 80085fc:	dc04      	bgt.n	8008608 <__hexnan+0xa0>
 80085fe:	462a      	mov	r2, r5
 8008600:	4649      	mov	r1, r9
 8008602:	4620      	mov	r0, r4
 8008604:	f7ff ff8a 	bl	800851c <L_shift>
 8008608:	4544      	cmp	r4, r8
 800860a:	d934      	bls.n	8008676 <__hexnan+0x10e>
 800860c:	4623      	mov	r3, r4
 800860e:	f1a8 0204 	sub.w	r2, r8, #4
 8008612:	f853 1b04 	ldr.w	r1, [r3], #4
 8008616:	429f      	cmp	r7, r3
 8008618:	f842 1f04 	str.w	r1, [r2, #4]!
 800861c:	d2f9      	bcs.n	8008612 <__hexnan+0xaa>
 800861e:	1b3b      	subs	r3, r7, r4
 8008620:	f023 0303 	bic.w	r3, r3, #3
 8008624:	3304      	adds	r3, #4
 8008626:	3e03      	subs	r6, #3
 8008628:	3401      	adds	r4, #1
 800862a:	42a6      	cmp	r6, r4
 800862c:	bf38      	it	cc
 800862e:	2304      	movcc	r3, #4
 8008630:	2200      	movs	r2, #0
 8008632:	4443      	add	r3, r8
 8008634:	f843 2b04 	str.w	r2, [r3], #4
 8008638:	429f      	cmp	r7, r3
 800863a:	d2fb      	bcs.n	8008634 <__hexnan+0xcc>
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	b91b      	cbnz	r3, 8008648 <__hexnan+0xe0>
 8008640:	4547      	cmp	r7, r8
 8008642:	d126      	bne.n	8008692 <__hexnan+0x12a>
 8008644:	2301      	movs	r3, #1
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	2005      	movs	r0, #5
 800864a:	e025      	b.n	8008698 <__hexnan+0x130>
 800864c:	3501      	adds	r5, #1
 800864e:	2d08      	cmp	r5, #8
 8008650:	f10b 0b01 	add.w	fp, fp, #1
 8008654:	dd06      	ble.n	8008664 <__hexnan+0xfc>
 8008656:	4544      	cmp	r4, r8
 8008658:	d9c3      	bls.n	80085e2 <__hexnan+0x7a>
 800865a:	2300      	movs	r3, #0
 800865c:	2501      	movs	r5, #1
 800865e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008662:	3c04      	subs	r4, #4
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	f000 000f 	and.w	r0, r0, #15
 800866a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800866e:	6020      	str	r0, [r4, #0]
 8008670:	e7b7      	b.n	80085e2 <__hexnan+0x7a>
 8008672:	2508      	movs	r5, #8
 8008674:	e7b5      	b.n	80085e2 <__hexnan+0x7a>
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0df      	beq.n	800863c <__hexnan+0xd4>
 800867c:	f04f 32ff 	mov.w	r2, #4294967295
 8008680:	f1c3 0320 	rsb	r3, r3, #32
 8008684:	40da      	lsrs	r2, r3
 8008686:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800868a:	4013      	ands	r3, r2
 800868c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008690:	e7d4      	b.n	800863c <__hexnan+0xd4>
 8008692:	3f04      	subs	r7, #4
 8008694:	e7d2      	b.n	800863c <__hexnan+0xd4>
 8008696:	2004      	movs	r0, #4
 8008698:	b007      	add	sp, #28
 800869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800869e <__ascii_mbtowc>:
 800869e:	b082      	sub	sp, #8
 80086a0:	b901      	cbnz	r1, 80086a4 <__ascii_mbtowc+0x6>
 80086a2:	a901      	add	r1, sp, #4
 80086a4:	b142      	cbz	r2, 80086b8 <__ascii_mbtowc+0x1a>
 80086a6:	b14b      	cbz	r3, 80086bc <__ascii_mbtowc+0x1e>
 80086a8:	7813      	ldrb	r3, [r2, #0]
 80086aa:	600b      	str	r3, [r1, #0]
 80086ac:	7812      	ldrb	r2, [r2, #0]
 80086ae:	1e10      	subs	r0, r2, #0
 80086b0:	bf18      	it	ne
 80086b2:	2001      	movne	r0, #1
 80086b4:	b002      	add	sp, #8
 80086b6:	4770      	bx	lr
 80086b8:	4610      	mov	r0, r2
 80086ba:	e7fb      	b.n	80086b4 <__ascii_mbtowc+0x16>
 80086bc:	f06f 0001 	mvn.w	r0, #1
 80086c0:	e7f8      	b.n	80086b4 <__ascii_mbtowc+0x16>

080086c2 <_realloc_r>:
 80086c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c6:	4680      	mov	r8, r0
 80086c8:	4614      	mov	r4, r2
 80086ca:	460e      	mov	r6, r1
 80086cc:	b921      	cbnz	r1, 80086d8 <_realloc_r+0x16>
 80086ce:	4611      	mov	r1, r2
 80086d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086d4:	f7fd bec4 	b.w	8006460 <_malloc_r>
 80086d8:	b92a      	cbnz	r2, 80086e6 <_realloc_r+0x24>
 80086da:	f7fd fe51 	bl	8006380 <_free_r>
 80086de:	4625      	mov	r5, r4
 80086e0:	4628      	mov	r0, r5
 80086e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e6:	f000 fa43 	bl	8008b70 <_malloc_usable_size_r>
 80086ea:	4284      	cmp	r4, r0
 80086ec:	4607      	mov	r7, r0
 80086ee:	d802      	bhi.n	80086f6 <_realloc_r+0x34>
 80086f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086f4:	d812      	bhi.n	800871c <_realloc_r+0x5a>
 80086f6:	4621      	mov	r1, r4
 80086f8:	4640      	mov	r0, r8
 80086fa:	f7fd feb1 	bl	8006460 <_malloc_r>
 80086fe:	4605      	mov	r5, r0
 8008700:	2800      	cmp	r0, #0
 8008702:	d0ed      	beq.n	80086e0 <_realloc_r+0x1e>
 8008704:	42bc      	cmp	r4, r7
 8008706:	4622      	mov	r2, r4
 8008708:	4631      	mov	r1, r6
 800870a:	bf28      	it	cs
 800870c:	463a      	movcs	r2, r7
 800870e:	f7ff fc3d 	bl	8007f8c <memcpy>
 8008712:	4631      	mov	r1, r6
 8008714:	4640      	mov	r0, r8
 8008716:	f7fd fe33 	bl	8006380 <_free_r>
 800871a:	e7e1      	b.n	80086e0 <_realloc_r+0x1e>
 800871c:	4635      	mov	r5, r6
 800871e:	e7df      	b.n	80086e0 <_realloc_r+0x1e>

08008720 <__ascii_wctomb>:
 8008720:	4603      	mov	r3, r0
 8008722:	4608      	mov	r0, r1
 8008724:	b141      	cbz	r1, 8008738 <__ascii_wctomb+0x18>
 8008726:	2aff      	cmp	r2, #255	; 0xff
 8008728:	d904      	bls.n	8008734 <__ascii_wctomb+0x14>
 800872a:	228a      	movs	r2, #138	; 0x8a
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	4770      	bx	lr
 8008734:	2001      	movs	r0, #1
 8008736:	700a      	strb	r2, [r1, #0]
 8008738:	4770      	bx	lr

0800873a <__sfputc_r>:
 800873a:	6893      	ldr	r3, [r2, #8]
 800873c:	b410      	push	{r4}
 800873e:	3b01      	subs	r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	6093      	str	r3, [r2, #8]
 8008744:	da07      	bge.n	8008756 <__sfputc_r+0x1c>
 8008746:	6994      	ldr	r4, [r2, #24]
 8008748:	42a3      	cmp	r3, r4
 800874a:	db01      	blt.n	8008750 <__sfputc_r+0x16>
 800874c:	290a      	cmp	r1, #10
 800874e:	d102      	bne.n	8008756 <__sfputc_r+0x1c>
 8008750:	bc10      	pop	{r4}
 8008752:	f000 b933 	b.w	80089bc <__swbuf_r>
 8008756:	6813      	ldr	r3, [r2, #0]
 8008758:	1c58      	adds	r0, r3, #1
 800875a:	6010      	str	r0, [r2, #0]
 800875c:	7019      	strb	r1, [r3, #0]
 800875e:	4608      	mov	r0, r1
 8008760:	bc10      	pop	{r4}
 8008762:	4770      	bx	lr

08008764 <__sfputs_r>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	4606      	mov	r6, r0
 8008768:	460f      	mov	r7, r1
 800876a:	4614      	mov	r4, r2
 800876c:	18d5      	adds	r5, r2, r3
 800876e:	42ac      	cmp	r4, r5
 8008770:	d101      	bne.n	8008776 <__sfputs_r+0x12>
 8008772:	2000      	movs	r0, #0
 8008774:	e007      	b.n	8008786 <__sfputs_r+0x22>
 8008776:	463a      	mov	r2, r7
 8008778:	4630      	mov	r0, r6
 800877a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800877e:	f7ff ffdc 	bl	800873a <__sfputc_r>
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	d1f3      	bne.n	800876e <__sfputs_r+0xa>
 8008786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008788 <_vfiprintf_r>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	460d      	mov	r5, r1
 800878e:	4614      	mov	r4, r2
 8008790:	4698      	mov	r8, r3
 8008792:	4606      	mov	r6, r0
 8008794:	b09d      	sub	sp, #116	; 0x74
 8008796:	b118      	cbz	r0, 80087a0 <_vfiprintf_r+0x18>
 8008798:	6a03      	ldr	r3, [r0, #32]
 800879a:	b90b      	cbnz	r3, 80087a0 <_vfiprintf_r+0x18>
 800879c:	f7fc fd96 	bl	80052cc <__sinit>
 80087a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087a2:	07d9      	lsls	r1, r3, #31
 80087a4:	d405      	bmi.n	80087b2 <_vfiprintf_r+0x2a>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	059a      	lsls	r2, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_vfiprintf_r+0x2a>
 80087ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ae:	f7fc ff46 	bl	800563e <__retarget_lock_acquire_recursive>
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	071b      	lsls	r3, r3, #28
 80087b6:	d501      	bpl.n	80087bc <_vfiprintf_r+0x34>
 80087b8:	692b      	ldr	r3, [r5, #16]
 80087ba:	b99b      	cbnz	r3, 80087e4 <_vfiprintf_r+0x5c>
 80087bc:	4629      	mov	r1, r5
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 f93a 	bl	8008a38 <__swsetup_r>
 80087c4:	b170      	cbz	r0, 80087e4 <_vfiprintf_r+0x5c>
 80087c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087c8:	07dc      	lsls	r4, r3, #31
 80087ca:	d504      	bpl.n	80087d6 <_vfiprintf_r+0x4e>
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
 80087d0:	b01d      	add	sp, #116	; 0x74
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	0598      	lsls	r0, r3, #22
 80087da:	d4f7      	bmi.n	80087cc <_vfiprintf_r+0x44>
 80087dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087de:	f7fc ff2f 	bl	8005640 <__retarget_lock_release_recursive>
 80087e2:	e7f3      	b.n	80087cc <_vfiprintf_r+0x44>
 80087e4:	2300      	movs	r3, #0
 80087e6:	9309      	str	r3, [sp, #36]	; 0x24
 80087e8:	2320      	movs	r3, #32
 80087ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ee:	2330      	movs	r3, #48	; 0x30
 80087f0:	f04f 0901 	mov.w	r9, #1
 80087f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80089a8 <_vfiprintf_r+0x220>
 80087fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008800:	4623      	mov	r3, r4
 8008802:	469a      	mov	sl, r3
 8008804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008808:	b10a      	cbz	r2, 800880e <_vfiprintf_r+0x86>
 800880a:	2a25      	cmp	r2, #37	; 0x25
 800880c:	d1f9      	bne.n	8008802 <_vfiprintf_r+0x7a>
 800880e:	ebba 0b04 	subs.w	fp, sl, r4
 8008812:	d00b      	beq.n	800882c <_vfiprintf_r+0xa4>
 8008814:	465b      	mov	r3, fp
 8008816:	4622      	mov	r2, r4
 8008818:	4629      	mov	r1, r5
 800881a:	4630      	mov	r0, r6
 800881c:	f7ff ffa2 	bl	8008764 <__sfputs_r>
 8008820:	3001      	adds	r0, #1
 8008822:	f000 80a9 	beq.w	8008978 <_vfiprintf_r+0x1f0>
 8008826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008828:	445a      	add	r2, fp
 800882a:	9209      	str	r2, [sp, #36]	; 0x24
 800882c:	f89a 3000 	ldrb.w	r3, [sl]
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 80a1 	beq.w	8008978 <_vfiprintf_r+0x1f0>
 8008836:	2300      	movs	r3, #0
 8008838:	f04f 32ff 	mov.w	r2, #4294967295
 800883c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008840:	f10a 0a01 	add.w	sl, sl, #1
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	9307      	str	r3, [sp, #28]
 8008848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800884c:	931a      	str	r3, [sp, #104]	; 0x68
 800884e:	4654      	mov	r4, sl
 8008850:	2205      	movs	r2, #5
 8008852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008856:	4854      	ldr	r0, [pc, #336]	; (80089a8 <_vfiprintf_r+0x220>)
 8008858:	f7fc fef3 	bl	8005642 <memchr>
 800885c:	9a04      	ldr	r2, [sp, #16]
 800885e:	b9d8      	cbnz	r0, 8008898 <_vfiprintf_r+0x110>
 8008860:	06d1      	lsls	r1, r2, #27
 8008862:	bf44      	itt	mi
 8008864:	2320      	movmi	r3, #32
 8008866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800886a:	0713      	lsls	r3, r2, #28
 800886c:	bf44      	itt	mi
 800886e:	232b      	movmi	r3, #43	; 0x2b
 8008870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008874:	f89a 3000 	ldrb.w	r3, [sl]
 8008878:	2b2a      	cmp	r3, #42	; 0x2a
 800887a:	d015      	beq.n	80088a8 <_vfiprintf_r+0x120>
 800887c:	4654      	mov	r4, sl
 800887e:	2000      	movs	r0, #0
 8008880:	f04f 0c0a 	mov.w	ip, #10
 8008884:	9a07      	ldr	r2, [sp, #28]
 8008886:	4621      	mov	r1, r4
 8008888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800888c:	3b30      	subs	r3, #48	; 0x30
 800888e:	2b09      	cmp	r3, #9
 8008890:	d94d      	bls.n	800892e <_vfiprintf_r+0x1a6>
 8008892:	b1b0      	cbz	r0, 80088c2 <_vfiprintf_r+0x13a>
 8008894:	9207      	str	r2, [sp, #28]
 8008896:	e014      	b.n	80088c2 <_vfiprintf_r+0x13a>
 8008898:	eba0 0308 	sub.w	r3, r0, r8
 800889c:	fa09 f303 	lsl.w	r3, r9, r3
 80088a0:	4313      	orrs	r3, r2
 80088a2:	46a2      	mov	sl, r4
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	e7d2      	b.n	800884e <_vfiprintf_r+0xc6>
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	1d19      	adds	r1, r3, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	9103      	str	r1, [sp, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bfbb      	ittet	lt
 80088b4:	425b      	neglt	r3, r3
 80088b6:	f042 0202 	orrlt.w	r2, r2, #2
 80088ba:	9307      	strge	r3, [sp, #28]
 80088bc:	9307      	strlt	r3, [sp, #28]
 80088be:	bfb8      	it	lt
 80088c0:	9204      	strlt	r2, [sp, #16]
 80088c2:	7823      	ldrb	r3, [r4, #0]
 80088c4:	2b2e      	cmp	r3, #46	; 0x2e
 80088c6:	d10c      	bne.n	80088e2 <_vfiprintf_r+0x15a>
 80088c8:	7863      	ldrb	r3, [r4, #1]
 80088ca:	2b2a      	cmp	r3, #42	; 0x2a
 80088cc:	d134      	bne.n	8008938 <_vfiprintf_r+0x1b0>
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	3402      	adds	r4, #2
 80088d2:	1d1a      	adds	r2, r3, #4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	9203      	str	r2, [sp, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	bfb8      	it	lt
 80088dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80088e0:	9305      	str	r3, [sp, #20]
 80088e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089ac <_vfiprintf_r+0x224>
 80088e6:	2203      	movs	r2, #3
 80088e8:	4650      	mov	r0, sl
 80088ea:	7821      	ldrb	r1, [r4, #0]
 80088ec:	f7fc fea9 	bl	8005642 <memchr>
 80088f0:	b138      	cbz	r0, 8008902 <_vfiprintf_r+0x17a>
 80088f2:	2240      	movs	r2, #64	; 0x40
 80088f4:	9b04      	ldr	r3, [sp, #16]
 80088f6:	eba0 000a 	sub.w	r0, r0, sl
 80088fa:	4082      	lsls	r2, r0
 80088fc:	4313      	orrs	r3, r2
 80088fe:	3401      	adds	r4, #1
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008906:	2206      	movs	r2, #6
 8008908:	4829      	ldr	r0, [pc, #164]	; (80089b0 <_vfiprintf_r+0x228>)
 800890a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800890e:	f7fc fe98 	bl	8005642 <memchr>
 8008912:	2800      	cmp	r0, #0
 8008914:	d03f      	beq.n	8008996 <_vfiprintf_r+0x20e>
 8008916:	4b27      	ldr	r3, [pc, #156]	; (80089b4 <_vfiprintf_r+0x22c>)
 8008918:	bb1b      	cbnz	r3, 8008962 <_vfiprintf_r+0x1da>
 800891a:	9b03      	ldr	r3, [sp, #12]
 800891c:	3307      	adds	r3, #7
 800891e:	f023 0307 	bic.w	r3, r3, #7
 8008922:	3308      	adds	r3, #8
 8008924:	9303      	str	r3, [sp, #12]
 8008926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008928:	443b      	add	r3, r7
 800892a:	9309      	str	r3, [sp, #36]	; 0x24
 800892c:	e768      	b.n	8008800 <_vfiprintf_r+0x78>
 800892e:	460c      	mov	r4, r1
 8008930:	2001      	movs	r0, #1
 8008932:	fb0c 3202 	mla	r2, ip, r2, r3
 8008936:	e7a6      	b.n	8008886 <_vfiprintf_r+0xfe>
 8008938:	2300      	movs	r3, #0
 800893a:	f04f 0c0a 	mov.w	ip, #10
 800893e:	4619      	mov	r1, r3
 8008940:	3401      	adds	r4, #1
 8008942:	9305      	str	r3, [sp, #20]
 8008944:	4620      	mov	r0, r4
 8008946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800894a:	3a30      	subs	r2, #48	; 0x30
 800894c:	2a09      	cmp	r2, #9
 800894e:	d903      	bls.n	8008958 <_vfiprintf_r+0x1d0>
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0c6      	beq.n	80088e2 <_vfiprintf_r+0x15a>
 8008954:	9105      	str	r1, [sp, #20]
 8008956:	e7c4      	b.n	80088e2 <_vfiprintf_r+0x15a>
 8008958:	4604      	mov	r4, r0
 800895a:	2301      	movs	r3, #1
 800895c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008960:	e7f0      	b.n	8008944 <_vfiprintf_r+0x1bc>
 8008962:	ab03      	add	r3, sp, #12
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	462a      	mov	r2, r5
 8008968:	4630      	mov	r0, r6
 800896a:	4b13      	ldr	r3, [pc, #76]	; (80089b8 <_vfiprintf_r+0x230>)
 800896c:	a904      	add	r1, sp, #16
 800896e:	f7fb fe51 	bl	8004614 <_printf_float>
 8008972:	4607      	mov	r7, r0
 8008974:	1c78      	adds	r0, r7, #1
 8008976:	d1d6      	bne.n	8008926 <_vfiprintf_r+0x19e>
 8008978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800897a:	07d9      	lsls	r1, r3, #31
 800897c:	d405      	bmi.n	800898a <_vfiprintf_r+0x202>
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	059a      	lsls	r2, r3, #22
 8008982:	d402      	bmi.n	800898a <_vfiprintf_r+0x202>
 8008984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008986:	f7fc fe5b 	bl	8005640 <__retarget_lock_release_recursive>
 800898a:	89ab      	ldrh	r3, [r5, #12]
 800898c:	065b      	lsls	r3, r3, #25
 800898e:	f53f af1d 	bmi.w	80087cc <_vfiprintf_r+0x44>
 8008992:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008994:	e71c      	b.n	80087d0 <_vfiprintf_r+0x48>
 8008996:	ab03      	add	r3, sp, #12
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	462a      	mov	r2, r5
 800899c:	4630      	mov	r0, r6
 800899e:	4b06      	ldr	r3, [pc, #24]	; (80089b8 <_vfiprintf_r+0x230>)
 80089a0:	a904      	add	r1, sp, #16
 80089a2:	f7fc f8d7 	bl	8004b54 <_printf_i>
 80089a6:	e7e4      	b.n	8008972 <_vfiprintf_r+0x1ea>
 80089a8:	080090e8 	.word	0x080090e8
 80089ac:	080090ee 	.word	0x080090ee
 80089b0:	080090f2 	.word	0x080090f2
 80089b4:	08004615 	.word	0x08004615
 80089b8:	08008765 	.word	0x08008765

080089bc <__swbuf_r>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	460e      	mov	r6, r1
 80089c0:	4614      	mov	r4, r2
 80089c2:	4605      	mov	r5, r0
 80089c4:	b118      	cbz	r0, 80089ce <__swbuf_r+0x12>
 80089c6:	6a03      	ldr	r3, [r0, #32]
 80089c8:	b90b      	cbnz	r3, 80089ce <__swbuf_r+0x12>
 80089ca:	f7fc fc7f 	bl	80052cc <__sinit>
 80089ce:	69a3      	ldr	r3, [r4, #24]
 80089d0:	60a3      	str	r3, [r4, #8]
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	071a      	lsls	r2, r3, #28
 80089d6:	d525      	bpl.n	8008a24 <__swbuf_r+0x68>
 80089d8:	6923      	ldr	r3, [r4, #16]
 80089da:	b31b      	cbz	r3, 8008a24 <__swbuf_r+0x68>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	6922      	ldr	r2, [r4, #16]
 80089e0:	b2f6      	uxtb	r6, r6
 80089e2:	1a98      	subs	r0, r3, r2
 80089e4:	6963      	ldr	r3, [r4, #20]
 80089e6:	4637      	mov	r7, r6
 80089e8:	4283      	cmp	r3, r0
 80089ea:	dc04      	bgt.n	80089f6 <__swbuf_r+0x3a>
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	f7ff fa56 	bl	8007ea0 <_fflush_r>
 80089f4:	b9e0      	cbnz	r0, 8008a30 <__swbuf_r+0x74>
 80089f6:	68a3      	ldr	r3, [r4, #8]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	60a3      	str	r3, [r4, #8]
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	6022      	str	r2, [r4, #0]
 8008a02:	701e      	strb	r6, [r3, #0]
 8008a04:	6962      	ldr	r2, [r4, #20]
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d004      	beq.n	8008a16 <__swbuf_r+0x5a>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	07db      	lsls	r3, r3, #31
 8008a10:	d506      	bpl.n	8008a20 <__swbuf_r+0x64>
 8008a12:	2e0a      	cmp	r6, #10
 8008a14:	d104      	bne.n	8008a20 <__swbuf_r+0x64>
 8008a16:	4621      	mov	r1, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f7ff fa41 	bl	8007ea0 <_fflush_r>
 8008a1e:	b938      	cbnz	r0, 8008a30 <__swbuf_r+0x74>
 8008a20:	4638      	mov	r0, r7
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a24:	4621      	mov	r1, r4
 8008a26:	4628      	mov	r0, r5
 8008a28:	f000 f806 	bl	8008a38 <__swsetup_r>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d0d5      	beq.n	80089dc <__swbuf_r+0x20>
 8008a30:	f04f 37ff 	mov.w	r7, #4294967295
 8008a34:	e7f4      	b.n	8008a20 <__swbuf_r+0x64>
	...

08008a38 <__swsetup_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4b2a      	ldr	r3, [pc, #168]	; (8008ae4 <__swsetup_r+0xac>)
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	6818      	ldr	r0, [r3, #0]
 8008a40:	460c      	mov	r4, r1
 8008a42:	b118      	cbz	r0, 8008a4c <__swsetup_r+0x14>
 8008a44:	6a03      	ldr	r3, [r0, #32]
 8008a46:	b90b      	cbnz	r3, 8008a4c <__swsetup_r+0x14>
 8008a48:	f7fc fc40 	bl	80052cc <__sinit>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a52:	0718      	lsls	r0, r3, #28
 8008a54:	d422      	bmi.n	8008a9c <__swsetup_r+0x64>
 8008a56:	06d9      	lsls	r1, r3, #27
 8008a58:	d407      	bmi.n	8008a6a <__swsetup_r+0x32>
 8008a5a:	2309      	movs	r3, #9
 8008a5c:	602b      	str	r3, [r5, #0]
 8008a5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a62:	f04f 30ff 	mov.w	r0, #4294967295
 8008a66:	81a3      	strh	r3, [r4, #12]
 8008a68:	e034      	b.n	8008ad4 <__swsetup_r+0x9c>
 8008a6a:	0758      	lsls	r0, r3, #29
 8008a6c:	d512      	bpl.n	8008a94 <__swsetup_r+0x5c>
 8008a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a70:	b141      	cbz	r1, 8008a84 <__swsetup_r+0x4c>
 8008a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a76:	4299      	cmp	r1, r3
 8008a78:	d002      	beq.n	8008a80 <__swsetup_r+0x48>
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f7fd fc80 	bl	8006380 <_free_r>
 8008a80:	2300      	movs	r3, #0
 8008a82:	6363      	str	r3, [r4, #52]	; 0x34
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	6063      	str	r3, [r4, #4]
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	f043 0308 	orr.w	r3, r3, #8
 8008a9a:	81a3      	strh	r3, [r4, #12]
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	b94b      	cbnz	r3, 8008ab4 <__swsetup_r+0x7c>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aaa:	d003      	beq.n	8008ab4 <__swsetup_r+0x7c>
 8008aac:	4621      	mov	r1, r4
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f000 f88b 	bl	8008bca <__smakebuf_r>
 8008ab4:	89a0      	ldrh	r0, [r4, #12]
 8008ab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008aba:	f010 0301 	ands.w	r3, r0, #1
 8008abe:	d00a      	beq.n	8008ad6 <__swsetup_r+0x9e>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60a3      	str	r3, [r4, #8]
 8008ac4:	6963      	ldr	r3, [r4, #20]
 8008ac6:	425b      	negs	r3, r3
 8008ac8:	61a3      	str	r3, [r4, #24]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	b943      	cbnz	r3, 8008ae0 <__swsetup_r+0xa8>
 8008ace:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ad2:	d1c4      	bne.n	8008a5e <__swsetup_r+0x26>
 8008ad4:	bd38      	pop	{r3, r4, r5, pc}
 8008ad6:	0781      	lsls	r1, r0, #30
 8008ad8:	bf58      	it	pl
 8008ada:	6963      	ldrpl	r3, [r4, #20]
 8008adc:	60a3      	str	r3, [r4, #8]
 8008ade:	e7f4      	b.n	8008aca <__swsetup_r+0x92>
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	e7f7      	b.n	8008ad4 <__swsetup_r+0x9c>
 8008ae4:	20000074 	.word	0x20000074

08008ae8 <_raise_r>:
 8008ae8:	291f      	cmp	r1, #31
 8008aea:	b538      	push	{r3, r4, r5, lr}
 8008aec:	4604      	mov	r4, r0
 8008aee:	460d      	mov	r5, r1
 8008af0:	d904      	bls.n	8008afc <_raise_r+0x14>
 8008af2:	2316      	movs	r3, #22
 8008af4:	6003      	str	r3, [r0, #0]
 8008af6:	f04f 30ff 	mov.w	r0, #4294967295
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008afe:	b112      	cbz	r2, 8008b06 <_raise_r+0x1e>
 8008b00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b04:	b94b      	cbnz	r3, 8008b1a <_raise_r+0x32>
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f830 	bl	8008b6c <_getpid_r>
 8008b0c:	462a      	mov	r2, r5
 8008b0e:	4601      	mov	r1, r0
 8008b10:	4620      	mov	r0, r4
 8008b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b16:	f000 b817 	b.w	8008b48 <_kill_r>
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d00a      	beq.n	8008b34 <_raise_r+0x4c>
 8008b1e:	1c59      	adds	r1, r3, #1
 8008b20:	d103      	bne.n	8008b2a <_raise_r+0x42>
 8008b22:	2316      	movs	r3, #22
 8008b24:	6003      	str	r3, [r0, #0]
 8008b26:	2001      	movs	r0, #1
 8008b28:	e7e7      	b.n	8008afa <_raise_r+0x12>
 8008b2a:	2400      	movs	r4, #0
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b32:	4798      	blx	r3
 8008b34:	2000      	movs	r0, #0
 8008b36:	e7e0      	b.n	8008afa <_raise_r+0x12>

08008b38 <raise>:
 8008b38:	4b02      	ldr	r3, [pc, #8]	; (8008b44 <raise+0xc>)
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	6818      	ldr	r0, [r3, #0]
 8008b3e:	f7ff bfd3 	b.w	8008ae8 <_raise_r>
 8008b42:	bf00      	nop
 8008b44:	20000074 	.word	0x20000074

08008b48 <_kill_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	4d06      	ldr	r5, [pc, #24]	; (8008b68 <_kill_r+0x20>)
 8008b4e:	4604      	mov	r4, r0
 8008b50:	4608      	mov	r0, r1
 8008b52:	4611      	mov	r1, r2
 8008b54:	602b      	str	r3, [r5, #0]
 8008b56:	f7f9 f8a5 	bl	8001ca4 <_kill>
 8008b5a:	1c43      	adds	r3, r0, #1
 8008b5c:	d102      	bne.n	8008b64 <_kill_r+0x1c>
 8008b5e:	682b      	ldr	r3, [r5, #0]
 8008b60:	b103      	cbz	r3, 8008b64 <_kill_r+0x1c>
 8008b62:	6023      	str	r3, [r4, #0]
 8008b64:	bd38      	pop	{r3, r4, r5, pc}
 8008b66:	bf00      	nop
 8008b68:	2000072c 	.word	0x2000072c

08008b6c <_getpid_r>:
 8008b6c:	f7f9 b898 	b.w	8001ca0 <_getpid>

08008b70 <_malloc_usable_size_r>:
 8008b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b74:	1f18      	subs	r0, r3, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfbc      	itt	lt
 8008b7a:	580b      	ldrlt	r3, [r1, r0]
 8008b7c:	18c0      	addlt	r0, r0, r3
 8008b7e:	4770      	bx	lr

08008b80 <__swhatbuf_r>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	460c      	mov	r4, r1
 8008b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b88:	4615      	mov	r5, r2
 8008b8a:	2900      	cmp	r1, #0
 8008b8c:	461e      	mov	r6, r3
 8008b8e:	b096      	sub	sp, #88	; 0x58
 8008b90:	da0c      	bge.n	8008bac <__swhatbuf_r+0x2c>
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	2100      	movs	r1, #0
 8008b96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b9a:	bf0c      	ite	eq
 8008b9c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008ba0:	2340      	movne	r3, #64	; 0x40
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	6031      	str	r1, [r6, #0]
 8008ba6:	602b      	str	r3, [r5, #0]
 8008ba8:	b016      	add	sp, #88	; 0x58
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	466a      	mov	r2, sp
 8008bae:	f000 f849 	bl	8008c44 <_fstat_r>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	dbed      	blt.n	8008b92 <__swhatbuf_r+0x12>
 8008bb6:	9901      	ldr	r1, [sp, #4]
 8008bb8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008bbc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008bc0:	4259      	negs	r1, r3
 8008bc2:	4159      	adcs	r1, r3
 8008bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bc8:	e7eb      	b.n	8008ba2 <__swhatbuf_r+0x22>

08008bca <__smakebuf_r>:
 8008bca:	898b      	ldrh	r3, [r1, #12]
 8008bcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bce:	079d      	lsls	r5, r3, #30
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	d507      	bpl.n	8008be6 <__smakebuf_r+0x1c>
 8008bd6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	6123      	str	r3, [r4, #16]
 8008bde:	2301      	movs	r3, #1
 8008be0:	6163      	str	r3, [r4, #20]
 8008be2:	b002      	add	sp, #8
 8008be4:	bd70      	pop	{r4, r5, r6, pc}
 8008be6:	466a      	mov	r2, sp
 8008be8:	ab01      	add	r3, sp, #4
 8008bea:	f7ff ffc9 	bl	8008b80 <__swhatbuf_r>
 8008bee:	9900      	ldr	r1, [sp, #0]
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7fd fc34 	bl	8006460 <_malloc_r>
 8008bf8:	b948      	cbnz	r0, 8008c0e <__smakebuf_r+0x44>
 8008bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bfe:	059a      	lsls	r2, r3, #22
 8008c00:	d4ef      	bmi.n	8008be2 <__smakebuf_r+0x18>
 8008c02:	f023 0303 	bic.w	r3, r3, #3
 8008c06:	f043 0302 	orr.w	r3, r3, #2
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	e7e3      	b.n	8008bd6 <__smakebuf_r+0xc>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	6020      	str	r0, [r4, #0]
 8008c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	9b00      	ldr	r3, [sp, #0]
 8008c1a:	6120      	str	r0, [r4, #16]
 8008c1c:	6163      	str	r3, [r4, #20]
 8008c1e:	9b01      	ldr	r3, [sp, #4]
 8008c20:	b15b      	cbz	r3, 8008c3a <__smakebuf_r+0x70>
 8008c22:	4630      	mov	r0, r6
 8008c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c28:	f000 f81e 	bl	8008c68 <_isatty_r>
 8008c2c:	b128      	cbz	r0, 8008c3a <__smakebuf_r+0x70>
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	f023 0303 	bic.w	r3, r3, #3
 8008c34:	f043 0301 	orr.w	r3, r3, #1
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	431d      	orrs	r5, r3
 8008c3e:	81a5      	strh	r5, [r4, #12]
 8008c40:	e7cf      	b.n	8008be2 <__smakebuf_r+0x18>
	...

08008c44 <_fstat_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	2300      	movs	r3, #0
 8008c48:	4d06      	ldr	r5, [pc, #24]	; (8008c64 <_fstat_r+0x20>)
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	4611      	mov	r1, r2
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	f7f9 f854 	bl	8001cfe <_fstat>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	d102      	bne.n	8008c60 <_fstat_r+0x1c>
 8008c5a:	682b      	ldr	r3, [r5, #0]
 8008c5c:	b103      	cbz	r3, 8008c60 <_fstat_r+0x1c>
 8008c5e:	6023      	str	r3, [r4, #0]
 8008c60:	bd38      	pop	{r3, r4, r5, pc}
 8008c62:	bf00      	nop
 8008c64:	2000072c 	.word	0x2000072c

08008c68 <_isatty_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4d05      	ldr	r5, [pc, #20]	; (8008c84 <_isatty_r+0x1c>)
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	f7f9 f848 	bl	8001d08 <_isatty>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_isatty_r+0x1a>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_isatty_r+0x1a>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	2000072c 	.word	0x2000072c

08008c88 <_init>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	bf00      	nop
 8008c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8e:	bc08      	pop	{r3}
 8008c90:	469e      	mov	lr, r3
 8008c92:	4770      	bx	lr

08008c94 <_fini>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr
