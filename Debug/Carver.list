
Carver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000877c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08008890  08008890  00018890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de0  08008de0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008de0  08008de0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008de0  08008de0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de0  08008de0  00018de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de4  08008de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200001e0  08008fc8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08008fc8  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b664  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004219  00000000  00000000  0003b86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011865  00000000  00000000  0003fa86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  000512f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001750  00000000  00000000  000522b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b172  00000000  00000000  00053a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000203fe  00000000  00000000  0006eb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009669c  00000000  00000000  0008ef78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125614  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004840  00000000  00000000  00125664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008874 	.word	0x08008874

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008874 	.word	0x08008874

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	2200      	movs	r2, #0
 800112c:	2300      	movs	r3, #0
 800112e:	4628      	mov	r0, r5
 8001130:	4621      	mov	r1, r4
 8001132:	f7ff fc4d 	bl	80009d0 <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	2200      	movs	r2, #0
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__aeabi_d2ulz+0x34>)
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff f9c3 	bl	80004ec <__aeabi_dmul>
 8001166:	f7ff fc99 	bl	8000a9c <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff f944 	bl	80003f8 <__aeabi_ui2d>
 8001170:	2200      	movs	r2, #0
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001174:	f7ff f9ba 	bl	80004ec <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7fe fffc 	bl	800017c <__aeabi_dsub>
 8001184:	f7ff fc8a 	bl	8000a9c <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <IO_init_ADC_DMA>:
	var->Sense_48V = map(ADC_buffer[2], 0, 4096, 0, 48);

}

void IO_init_ADC_DMA(){
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, 4);
 8001194:	2204      	movs	r2, #4
 8001196:	4902      	ldr	r1, [pc, #8]	; (80011a0 <IO_init_ADC_DMA+0xc>)
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <IO_init_ADC_DMA+0x10>)
 800119a:	f001 b883 	b.w	80022a4 <HAL_ADC_Start_DMA>
 800119e:	bf00      	nop
 80011a0:	200001fc 	.word	0x200001fc
 80011a4:	200002ec 	.word	0x200002ec

080011a8 <map>:
}

float map(float value, int32_t m, int32_t n, int32_t x, int32_t y){
 80011a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011ac:	4680      	mov	r8, r0
	float return_value;
	return_value = (value - m) / (n - m) * (y - x) + x;
 80011ae:	4618      	mov	r0, r3
float map(float value, int32_t m, int32_t n, int32_t x, int32_t y){
 80011b0:	461c      	mov	r4, r3
 80011b2:	4691      	mov	r9, r2
 80011b4:	460d      	mov	r5, r1
	return_value = (value - m) / (n - m) * (y - x) + x;
 80011b6:	f7ff fd9b 	bl	8000cf0 <__aeabi_i2f>
 80011ba:	4606      	mov	r6, r0
 80011bc:	4628      	mov	r0, r5
 80011be:	f7ff fd97 	bl	8000cf0 <__aeabi_i2f>
 80011c2:	4601      	mov	r1, r0
 80011c4:	4640      	mov	r0, r8
 80011c6:	f7ff fcdd 	bl	8000b84 <__aeabi_fsub>
 80011ca:	4680      	mov	r8, r0
 80011cc:	eba9 0005 	sub.w	r0, r9, r5
 80011d0:	f7ff fd8e 	bl	8000cf0 <__aeabi_i2f>
 80011d4:	4601      	mov	r1, r0
 80011d6:	4640      	mov	r0, r8
 80011d8:	f7ff fe92 	bl	8000f00 <__aeabi_fdiv>
float map(float value, int32_t m, int32_t n, int32_t x, int32_t y){
 80011dc:	9f08      	ldr	r7, [sp, #32]
	return_value = (value - m) / (n - m) * (y - x) + x;
 80011de:	4605      	mov	r5, r0
 80011e0:	1b38      	subs	r0, r7, r4
 80011e2:	f7ff fd85 	bl	8000cf0 <__aeabi_i2f>
 80011e6:	4601      	mov	r1, r0
 80011e8:	4628      	mov	r0, r5
 80011ea:	f7ff fdd5 	bl	8000d98 <__aeabi_fmul>
 80011ee:	4631      	mov	r1, r6
 80011f0:	f7ff fcca 	bl	8000b88 <__addsf3>
 80011f4:	4605      	mov	r5, r0
	if(return_value > y){
 80011f6:	4638      	mov	r0, r7
 80011f8:	f7ff fd7a 	bl	8000cf0 <__aeabi_i2f>
 80011fc:	4629      	mov	r1, r5
 80011fe:	4604      	mov	r4, r0
 8001200:	f7ff ff68 	bl	80010d4 <__aeabi_fcmplt>
 8001204:	b928      	cbnz	r0, 8001212 <map+0x6a>
		return_value = y;
	}else if(return_value < x){
 8001206:	4629      	mov	r1, r5
 8001208:	4630      	mov	r0, r6
 800120a:	f7ff ff81 	bl	8001110 <__aeabi_fcmpgt>
 800120e:	b118      	cbz	r0, 8001218 <map+0x70>
		return_value = x;
 8001210:	4634      	mov	r4, r6
	}
	return return_value;
}
 8001212:	4620      	mov	r0, r4
 8001214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return_value = (value - m) / (n - m) * (y - x) + x;
 8001218:	462c      	mov	r4, r5
	return return_value;
 800121a:	e7fa      	b.n	8001212 <map+0x6a>

0800121c <IO_read_write>:
void IO_read_write(IOtypedef *var) {
 800121c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t AUTO_CMD = HAL_GPIO_ReadPin(AUTO_CMD_GPIO_Port, AUTO_CMD_Pin);
 800121e:	2101      	movs	r1, #1
void IO_read_write(IOtypedef *var) {
 8001220:	4604      	mov	r4, r0
	uint8_t AUTO_CMD = HAL_GPIO_ReadPin(AUTO_CMD_GPIO_Port, AUTO_CMD_Pin);
 8001222:	4839      	ldr	r0, [pc, #228]	; (8001308 <IO_read_write+0xec>)
 8001224:	f001 fc98 	bl	8002b58 <HAL_GPIO_ReadPin>
 8001228:	4605      	mov	r5, r0
	uint8_t MANUAL_CMD = HAL_GPIO_ReadPin(MANUAL_CMD_GPIO_Port, MANUAL_CMD_Pin);
 800122a:	2102      	movs	r1, #2
 800122c:	4836      	ldr	r0, [pc, #216]	; (8001308 <IO_read_write+0xec>)
 800122e:	f001 fc93 	bl	8002b58 <HAL_GPIO_ReadPin>
	if ((AUTO_CMD && MANUAL_CMD) || (!AUTO_CMD && !MANUAL_CMD)) {
 8001232:	b10d      	cbz	r5, 8001238 <IO_read_write+0x1c>
 8001234:	2800      	cmp	r0, #0
 8001236:	d05b      	beq.n	80012f0 <IO_read_write+0xd4>
		var->DrivingMode = MODE_MANUAL;
 8001238:	2300      	movs	r3, #0
		var->DrivingMode = MODE_AUTO;
 800123a:	7023      	strb	r3, [r4, #0]
	uint8_t P = HAL_GPIO_ReadPin(Gear_P_GPIO_Port, Gear_P_Pin);
 800123c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001240:	4832      	ldr	r0, [pc, #200]	; (800130c <IO_read_write+0xf0>)
 8001242:	f001 fc89 	bl	8002b58 <HAL_GPIO_ReadPin>
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 8001246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	uint8_t P = HAL_GPIO_ReadPin(Gear_P_GPIO_Port, Gear_P_Pin);
 800124a:	4607      	mov	r7, r0
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 800124c:	482f      	ldr	r0, [pc, #188]	; (800130c <IO_read_write+0xf0>)
 800124e:	f001 fc83 	bl	8002b58 <HAL_GPIO_ReadPin>
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 8001252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 8001256:	4606      	mov	r6, r0
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 8001258:	482c      	ldr	r0, [pc, #176]	; (800130c <IO_read_write+0xf0>)
 800125a:	f001 fc7d 	bl	8002b58 <HAL_GPIO_ReadPin>
	uint8_t D = HAL_GPIO_ReadPin(Gear_D_GPIO_Port, Gear_D_Pin);
 800125e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 8001262:	4605      	mov	r5, r0
	uint8_t D = HAL_GPIO_ReadPin(Gear_D_GPIO_Port, Gear_D_Pin);
 8001264:	4829      	ldr	r0, [pc, #164]	; (800130c <IO_read_write+0xf0>)
 8001266:	f001 fc77 	bl	8002b58 <HAL_GPIO_ReadPin>
	if (P + R + N + D == 1) {
 800126a:	19bb      	adds	r3, r7, r6
 800126c:	442b      	add	r3, r5
 800126e:	4403      	add	r3, r0
 8001270:	2b01      	cmp	r3, #1
 8001272:	d103      	bne.n	800127c <IO_read_write+0x60>
		if (P) {
 8001274:	2f00      	cmp	r7, #0
 8001276:	d03d      	beq.n	80012f4 <IO_read_write+0xd8>
			var->Gear = GEAR_P;
 8001278:	2300      	movs	r3, #0
			var->Gear = GEAR_D;
 800127a:	7063      	strb	r3, [r4, #1]
	var->DrivingDirection = ((int8_t)HAL_GPIO_ReadPin(DIR_SIG_GPIO_Port, DIR_SIG_Pin) * 2) - 1;
 800127c:	2102      	movs	r1, #2
 800127e:	4823      	ldr	r0, [pc, #140]	; (800130c <IO_read_write+0xf0>)
 8001280:	f001 fc6a 	bl	8002b58 <HAL_GPIO_ReadPin>
 8001284:	0040      	lsls	r0, r0, #1
 8001286:	3801      	subs	r0, #1
	var->BrakeStatus = HAL_GPIO_ReadPin(BRAKE_SIG_GPIO_Port, BRAKE_SIG_Pin);
 8001288:	f44f 7100 	mov.w	r1, #512	; 0x200
	var->DrivingDirection = ((int8_t)HAL_GPIO_ReadPin(DIR_SIG_GPIO_Port, DIR_SIG_Pin) * 2) - 1;
 800128c:	70a0      	strb	r0, [r4, #2]
	var->BrakeStatus = HAL_GPIO_ReadPin(BRAKE_SIG_GPIO_Port, BRAKE_SIG_Pin);
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <IO_read_write+0xf0>)
 8001290:	f001 fc62 	bl	8002b58 <HAL_GPIO_ReadPin>
	var->Throttle = map(ADC_buffer[1], 0, 4096, 0, 4096) * var->DrivingDirection;
 8001294:	4e1e      	ldr	r6, [pc, #120]	; (8001310 <IO_read_write+0xf4>)
	var->BrakeStatus = HAL_GPIO_ReadPin(BRAKE_SIG_GPIO_Port, BRAKE_SIG_Pin);
 8001296:	70e0      	strb	r0, [r4, #3]
	var->Throttle = map(ADC_buffer[1], 0, 4096, 0, 4096) * var->DrivingDirection;
 8001298:	8870      	ldrh	r0, [r6, #2]
 800129a:	f7ff fd25 	bl	8000ce8 <__aeabi_ui2f>
 800129e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80012a2:	2300      	movs	r3, #0
 80012a4:	462a      	mov	r2, r5
 80012a6:	4619      	mov	r1, r3
 80012a8:	9500      	str	r5, [sp, #0]
 80012aa:	f7ff ff7d 	bl	80011a8 <map>
 80012ae:	4607      	mov	r7, r0
 80012b0:	f994 0002 	ldrsb.w	r0, [r4, #2]
 80012b4:	f7ff fd1c 	bl	8000cf0 <__aeabi_i2f>
 80012b8:	4639      	mov	r1, r7
 80012ba:	f7ff fd6d 	bl	8000d98 <__aeabi_fmul>
 80012be:	6060      	str	r0, [r4, #4]
	var->Sense_24V = map(ADC_buffer[0], 0, 4096, 0, 24);
 80012c0:	8830      	ldrh	r0, [r6, #0]
 80012c2:	f7ff fd11 	bl	8000ce8 <__aeabi_ui2f>
 80012c6:	2318      	movs	r3, #24
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	462a      	mov	r2, r5
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff ff6a 	bl	80011a8 <map>
 80012d4:	60e0      	str	r0, [r4, #12]
	var->Sense_48V = map(ADC_buffer[2], 0, 4096, 0, 48);
 80012d6:	88b0      	ldrh	r0, [r6, #4]
 80012d8:	f7ff fd06 	bl	8000ce8 <__aeabi_ui2f>
 80012dc:	2330      	movs	r3, #48	; 0x30
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	462a      	mov	r2, r5
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff ff5f 	bl	80011a8 <map>
 80012ea:	60a0      	str	r0, [r4, #8]
}
 80012ec:	b003      	add	sp, #12
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		var->DrivingMode = MODE_AUTO;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e7a2      	b.n	800123a <IO_read_write+0x1e>
		} else if (R) {
 80012f4:	2e00      	cmp	r6, #0
 80012f6:	d1c0      	bne.n	800127a <IO_read_write+0x5e>
		} else if (N) {
 80012f8:	b10d      	cbz	r5, 80012fe <IO_read_write+0xe2>
			var->Gear = GEAR_N;
 80012fa:	2302      	movs	r3, #2
 80012fc:	e7bd      	b.n	800127a <IO_read_write+0x5e>
		} else if (D) {
 80012fe:	2800      	cmp	r0, #0
 8001300:	d0bc      	beq.n	800127c <IO_read_write+0x60>
			var->Gear = GEAR_D;
 8001302:	2303      	movs	r3, #3
 8001304:	e7b9      	b.n	800127a <IO_read_write+0x5e>
 8001306:	bf00      	nop
 8001308:	40010800 	.word	0x40010800
 800130c:	40010c00 	.word	0x40010c00
 8001310:	200001fc 	.word	0x200001fc

08001314 <UART_PC_Set>:
int rxIndex = 0;

// FUNCTIONS ======================================================================================

void UART_PC_Set(UART_HandleTypeDef *huart) {
	PChuart = huart;
 8001314:	4b02      	ldr	r3, [pc, #8]	; (8001320 <UART_PC_Set+0xc>)
	HAL_UART_Receive_IT(PChuart, RxBuffer, 1);
 8001316:	2201      	movs	r2, #1
 8001318:	4902      	ldr	r1, [pc, #8]	; (8001324 <UART_PC_Set+0x10>)
	PChuart = huart;
 800131a:	6018      	str	r0, [r3, #0]
	HAL_UART_Receive_IT(PChuart, RxBuffer, 1);
 800131c:	f002 bd93 	b.w	8003e46 <HAL_UART_Receive_IT>
 8001320:	20000204 	.word	0x20000204
 8001324:	20000208 	.word	0x20000208

08001328 <ProcessCommand>:
	}

	HAL_UART_Receive_IT(PChuart, RxBuffer, 1);
}

void ProcessCommand(const char *command) {
 8001328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *token;
	int paramIndex = 0;

	// Split the command into parameters
	token = strtok((char*) command, " ");
 800132a:	4918      	ldr	r1, [pc, #96]	; (800138c <ProcessCommand+0x64>)
 800132c:	f004 fab6 	bl	800589c <strtok>
	int paramIndex = 0;
 8001330:	2400      	movs	r4, #0
	token = strtok((char*) command, " ");
 8001332:	4601      	mov	r1, r0
	while (token != NULL && paramIndex < MAX_PARAMS_COUNT) {
		strncpy(rxParameters[paramIndex], token, MAX_PARAM_SIZE - 1);
		rxParameters[paramIndex][MAX_PARAM_SIZE - 1] = '\0'; // Ensure null-termination
 8001334:	4626      	mov	r6, r4
 8001336:	4d16      	ldr	r5, [pc, #88]	; (8001390 <ProcessCommand+0x68>)
		paramIndex++;
		token = strtok(NULL, " ");
 8001338:	4f14      	ldr	r7, [pc, #80]	; (800138c <ProcessCommand+0x64>)
	while (token != NULL && paramIndex < MAX_PARAMS_COUNT) {
 800133a:	b109      	cbz	r1, 8001340 <ProcessCommand+0x18>
 800133c:	2c05      	cmp	r4, #5
 800133e:	d10e      	bne.n	800135e <ProcessCommand+0x36>
	}

	// Compare the command and perform actions
	if (strcmp(rxParameters[0], "1") == 0) {
 8001340:	4914      	ldr	r1, [pc, #80]	; (8001394 <ProcessCommand+0x6c>)
 8001342:	4813      	ldr	r0, [pc, #76]	; (8001390 <ProcessCommand+0x68>)
 8001344:	f7fe ff04 	bl	8000150 <strcmp>
 8001348:	b9b0      	cbnz	r0, 8001378 <ProcessCommand+0x50>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800134a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001352:	f500 3088 	add.w	r0, r0, #69632	; 0x11000

//	sprintf(output, "PARAMETERS %d\r\n", paramIndex);
//	HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
//	sprintf(output, "%s %s %s %s %s\r\n", rxParameters[0], rxParameters[1], rxParameters[2], rxParameters[3], rxParameters[4]);
//	HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
}
 8001356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800135a:	f001 bc08 	b.w	8002b6e <HAL_GPIO_TogglePin>
		strncpy(rxParameters[paramIndex], token, MAX_PARAM_SIZE - 1);
 800135e:	2213      	movs	r2, #19
 8001360:	4628      	mov	r0, r5
 8001362:	f003 fc79 	bl	8004c58 <strncpy>
		token = strtok(NULL, " ");
 8001366:	4639      	mov	r1, r7
 8001368:	2000      	movs	r0, #0
		rxParameters[paramIndex][MAX_PARAM_SIZE - 1] = '\0'; // Ensure null-termination
 800136a:	74ee      	strb	r6, [r5, #19]
		token = strtok(NULL, " ");
 800136c:	f004 fa96 	bl	800589c <strtok>
		paramIndex++;
 8001370:	3401      	adds	r4, #1
		token = strtok(NULL, " ");
 8001372:	4601      	mov	r1, r0
 8001374:	3514      	adds	r5, #20
 8001376:	e7e0      	b.n	800133a <ProcessCommand+0x12>
	} else if (strcmp(rxParameters[0], "RELAY") == 0) {
 8001378:	4907      	ldr	r1, [pc, #28]	; (8001398 <ProcessCommand+0x70>)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <ProcessCommand+0x68>)
 800137c:	f7fe fee8 	bl	8000150 <strcmp>
 8001380:	b918      	cbnz	r0, 800138a <ProcessCommand+0x62>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <ProcessCommand+0x74>)
 8001388:	e7e5      	b.n	8001356 <ProcessCommand+0x2e>
}
 800138a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800138c:	08008d70 	.word	0x08008d70
 8001390:	20000288 	.word	0x20000288
 8001394:	08008890 	.word	0x08008890
 8001398:	08008892 	.word	0x08008892
 800139c:	40010c00 	.word	0x40010c00

080013a0 <UART_PC_Callback>:
void UART_PC_Callback(UART_HandleTypeDef *huart) {
 80013a0:	b570      	push	{r4, r5, r6, lr}
	if (huart != PChuart) {
 80013a2:	4d11      	ldr	r5, [pc, #68]	; (80013e8 <UART_PC_Callback+0x48>)
 80013a4:	682b      	ldr	r3, [r5, #0]
 80013a6:	4283      	cmp	r3, r0
 80013a8:	d11d      	bne.n	80013e6 <UART_PC_Callback+0x46>
	if (RxBuffer[0] == '\r') {
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <UART_PC_Callback+0x4c>)
 80013ac:	781a      	ldrb	r2, [r3, #0]
 80013ae:	2a0d      	cmp	r2, #13
 80013b0:	d00b      	beq.n	80013ca <UART_PC_Callback+0x2a>
		if (rxIndex > 0) {
 80013b2:	4c0f      	ldr	r4, [pc, #60]	; (80013f0 <UART_PC_Callback+0x50>)
	} else if (RxBuffer[0] == '\n') {
 80013b4:	2a0a      	cmp	r2, #10
		if (rxIndex > 0) {
 80013b6:	6823      	ldr	r3, [r4, #0]
	} else if (RxBuffer[0] == '\n') {
 80013b8:	d10e      	bne.n	80013d8 <UART_PC_Callback+0x38>
		if (rxIndex > 0) {
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dd05      	ble.n	80013ca <UART_PC_Callback+0x2a>
			rxCommand[rxIndex] = '\0'; // Null-terminate the command string
 80013be:	2600      	movs	r6, #0
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <UART_PC_Callback+0x54>)
 80013c2:	54c6      	strb	r6, [r0, r3]
			ProcessCommand(rxCommand);
 80013c4:	f7ff ffb0 	bl	8001328 <ProcessCommand>
			rxIndex = 0;
 80013c8:	6026      	str	r6, [r4, #0]
	HAL_UART_Receive_IT(PChuart, RxBuffer, 1);
 80013ca:	6828      	ldr	r0, [r5, #0]
 80013cc:	2201      	movs	r2, #1
}
 80013ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_IT(PChuart, RxBuffer, 1);
 80013d2:	4906      	ldr	r1, [pc, #24]	; (80013ec <UART_PC_Callback+0x4c>)
 80013d4:	f002 bd37 	b.w	8003e46 <HAL_UART_Receive_IT>
		if (rxIndex < MAX_CMD_SIZE - 1) {
 80013d8:	2b30      	cmp	r3, #48	; 0x30
			rxCommand[rxIndex] = RxBuffer[0];
 80013da:	bfdf      	itttt	le
 80013dc:	4905      	ldrle	r1, [pc, #20]	; (80013f4 <UART_PC_Callback+0x54>)
 80013de:	54ca      	strble	r2, [r1, r3]
			rxIndex++;
 80013e0:	3301      	addle	r3, #1
 80013e2:	6023      	strle	r3, [r4, #0]
 80013e4:	e7f1      	b.n	80013ca <UART_PC_Callback+0x2a>
}
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
 80013e8:	20000204 	.word	0x20000204
 80013ec:	20000208 	.word	0x20000208
 80013f0:	20000284 	.word	0x20000284
 80013f4:	20000250 	.word	0x20000250

080013f8 <UART_PC_Streamer>:

void UART_PC_Streamer(IOtypedef *var) {
 80013f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013fa:	4604      	mov	r4, r0
	static uint32_t next_run;
	static uint8_t iterator;
	if (HAL_GetTick() - next_run < 0) {
 80013fc:	f000 fde4 	bl	8001fc8 <HAL_GetTick>
		return;
	}
	next_run = HAL_GetTick() + 5;
 8001400:	f000 fde2 	bl	8001fc8 <HAL_GetTick>
	iterator = (iterator + 1) % 2; // adjust this based on how many commands to be sent.
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <UART_PC_Streamer+0x60>)
 8001406:	4d15      	ldr	r5, [pc, #84]	; (800145c <UART_PC_Streamer+0x64>)
 8001408:	7813      	ldrb	r3, [r2, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	7013      	strb	r3, [r2, #0]

	switch (iterator) {
 8001412:	b96b      	cbnz	r3, 8001430 <UART_PC_Streamer+0x38>
	case 0: // Control Mode
		if (var->DrivingMode == MODE_AUTO) {
 8001414:	7823      	ldrb	r3, [r4, #0]
			HAL_UART_Transmit(PChuart, (uint8_t*) "MOD A\n", 7, HAL_MAX_DELAY);
 8001416:	2207      	movs	r2, #7
		if (var->DrivingMode == MODE_AUTO) {
 8001418:	2b01      	cmp	r3, #1
			HAL_UART_Transmit(PChuart, (uint8_t*) "MOD A\n", 7, HAL_MAX_DELAY);
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	6828      	ldr	r0, [r5, #0]
 8001420:	bf0c      	ite	eq
 8001422:	490f      	ldreq	r1, [pc, #60]	; (8001460 <UART_PC_Streamer+0x68>)
		} else {
			HAL_UART_Transmit(PChuart, (uint8_t*) "MOD M\n", 7, HAL_MAX_DELAY);
 8001424:	490f      	ldrne	r1, [pc, #60]	; (8001464 <UART_PC_Streamer+0x6c>)
	case 3:
		break;
	default:
		break;
	}
}
 8001426:	b003      	add	sp, #12
 8001428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
 800142c:	f002 baf3 	b.w	8003a16 <HAL_UART_Transmit>
		snprintf(output, sizeof(output), "TRQ %.2f\n", var->Throttle);
 8001430:	6860      	ldr	r0, [r4, #4]
 8001432:	f7ff f803 	bl	800043c <__aeabi_f2d>
 8001436:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <UART_PC_Streamer+0x70>)
 8001438:	e9cd 0100 	strd	r0, r1, [sp]
 800143c:	2146      	movs	r1, #70	; 0x46
 800143e:	480b      	ldr	r0, [pc, #44]	; (800146c <UART_PC_Streamer+0x74>)
 8001440:	f003 fbb6 	bl	8004bb0 <sniprintf>
		HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <UART_PC_Streamer+0x74>)
 8001446:	f7fe fe8d 	bl	8000164 <strlen>
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	b282      	uxth	r2, r0
 8001450:	4906      	ldr	r1, [pc, #24]	; (800146c <UART_PC_Streamer+0x74>)
 8001452:	6828      	ldr	r0, [r5, #0]
 8001454:	e7e7      	b.n	8001426 <UART_PC_Streamer+0x2e>
 8001456:	bf00      	nop
 8001458:	20000209 	.word	0x20000209
 800145c:	20000204 	.word	0x20000204
 8001460:	08008898 	.word	0x08008898
 8001464:	0800889f 	.word	0x0800889f
 8001468:	080088a6 	.word	0x080088a6
 800146c:	2000020a 	.word	0x2000020a

08001470 <MX_ADC1_Init>:

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001470:	4824      	ldr	r0, [pc, #144]	; (8001504 <MX_ADC1_Init+0x94>)
 8001472:	4a25      	ldr	r2, [pc, #148]	; (8001508 <MX_ADC1_Init+0x98>)
{
 8001474:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8001476:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001478:	f44f 7280 	mov.w	r2, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 800147c:	2300      	movs	r3, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 800147e:	2401      	movs	r4, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8001480:	2504      	movs	r5, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001482:	6082      	str	r2, [r0, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001484:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
{
 8001488:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800148e:	9303      	str	r3, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001490:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001492:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001494:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001496:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001498:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800149a:	f000 ffb7 	bl	800240c <HAL_ADC_Init>
 800149e:	b108      	cbz	r0, 80014a4 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 80014a0:	f000 fa30 	bl	8001904 <Error_Handler>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80014a4:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a6:	4817      	ldr	r0, [pc, #92]	; (8001504 <MX_ADC1_Init+0x94>)
 80014a8:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014aa:	e9cd 5401 	strd	r5, r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80014ae:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b0:	f000 fe3e 	bl	8002130 <HAL_ADC_ConfigChannel>
 80014b4:	b108      	cbz	r0, 80014ba <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 80014b6:	f000 fa25 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014ba:	2005      	movs	r0, #5
 80014bc:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014be:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014c0:	e9cd 0301 	strd	r0, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	480f      	ldr	r0, [pc, #60]	; (8001504 <MX_ADC1_Init+0x94>)
 80014c6:	f000 fe33 	bl	8002130 <HAL_ADC_ConfigChannel>
 80014ca:	b108      	cbz	r0, 80014d0 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80014cc:	f000 fa1a 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014d0:	2106      	movs	r1, #6
 80014d2:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014d6:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	a901      	add	r1, sp, #4
 80014dc:	f000 fe28 	bl	8002130 <HAL_ADC_ConfigChannel>
 80014e0:	b108      	cbz	r0, 80014e6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80014e2:	f000 fa0f 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014e6:	2304      	movs	r3, #4
 80014e8:	2207      	movs	r2, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ea:	4806      	ldr	r0, [pc, #24]	; (8001504 <MX_ADC1_Init+0x94>)
 80014ec:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014f0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f4:	f000 fe1c 	bl	8002130 <HAL_ADC_ConfigChannel>
 80014f8:	b108      	cbz	r0, 80014fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014fa:	f000 fa03 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014fe:	b005      	add	sp, #20
 8001500:	bd30      	pop	{r4, r5, pc}
 8001502:	bf00      	nop
 8001504:	200002ec 	.word	0x200002ec
 8001508:	40012400 	.word	0x40012400

0800150c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800150c:	b530      	push	{r4, r5, lr}
 800150e:	4605      	mov	r5, r0
 8001510:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	2210      	movs	r2, #16
 8001514:	2100      	movs	r1, #0
 8001516:	a802      	add	r0, sp, #8
 8001518:	f002 fcd0 	bl	8003ebc <memset>
  if(adcHandle->Instance==ADC1)
 800151c:	682a      	ldr	r2, [r5, #0]
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_ADC_MspInit+0x98>)
 8001520:	429a      	cmp	r2, r3
 8001522:	d13c      	bne.n	800159e <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001524:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001528:	699a      	ldr	r2, [r3, #24]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_24VSENSE_Pin|ADC_POTEN_SIG_Pin|ADC_48VSENSE_Pin|ADC_BRAKE_CUR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	481f      	ldr	r0, [pc, #124]	; (80015a8 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800152c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001530:	619a      	str	r2, [r3, #24]
 8001532:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001536:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001540:	4c1a      	ldr	r4, [pc, #104]	; (80015ac <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	f042 0204 	orr.w	r2, r2, #4
 8001546:	619a      	str	r2, [r3, #24]
 8001548:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154a:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001554:	2303      	movs	r3, #3
 8001556:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f001 fa23 	bl	80029a4 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155e:	2080      	movs	r0, #128	; 0x80
 8001560:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001564:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001566:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800156a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 800156e:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001570:	490f      	ldr	r1, [pc, #60]	; (80015b0 <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001572:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001574:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001578:	e9c4 c205 	strd	ip, r2, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800157c:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800157e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001580:	f001 f8a4 	bl	80026cc <HAL_DMA_Init>
 8001584:	b108      	cbz	r0, 800158a <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001586:	f000 f9bd 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800158e:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001590:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001592:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001594:	f001 f846 	bl	8002624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001598:	2012      	movs	r0, #18
 800159a:	f001 f875 	bl	8002688 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800159e:	b007      	add	sp, #28
 80015a0:	bd30      	pop	{r4, r5, pc}
 80015a2:	bf00      	nop
 80015a4:	40012400 	.word	0x40012400
 80015a8:	40010800 	.word	0x40010800
 80015ac:	2000031c 	.word	0x2000031c
 80015b0:	40020008 	.word	0x40020008

080015b4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80015b4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
 80015b6:	2310      	movs	r3, #16
  hcan.Instance = CAN1;
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <MX_CAN_Init+0x2c>)
  hcan.Init.Prescaler = 16;
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <MX_CAN_Init+0x30>)
 80015bc:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80015c0:	2300      	movs	r3, #0
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 80015c2:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80015c4:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80015ce:	f000 ff9c 	bl	800250a <HAL_CAN_Init>
 80015d2:	b118      	cbz	r0, 80015dc <MX_CAN_Init+0x28>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80015d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80015d8:	f000 b994 	b.w	8001904 <Error_Handler>
}
 80015dc:	bd08      	pop	{r3, pc}
 80015de:	bf00      	nop
 80015e0:	20000360 	.word	0x20000360
 80015e4:	40006400 	.word	0x40006400

080015e8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4604      	mov	r4, r0
 80015ec:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	2210      	movs	r2, #16
 80015f0:	2100      	movs	r1, #0
 80015f2:	a802      	add	r0, sp, #8
 80015f4:	f002 fc62 	bl	8003ebc <memset>
  if(canHandle->Instance==CAN1)
 80015f8:	6822      	ldr	r2, [r4, #0]
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_CAN_MspInit+0x68>)
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d125      	bne.n	800164c <HAL_CAN_MspInit+0x64>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001600:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001604:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	4813      	ldr	r0, [pc, #76]	; (8001654 <HAL_CAN_MspInit+0x6c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001608:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800160c:	61da      	str	r2, [r3, #28]
 800160e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001612:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001616:	9200      	str	r2, [sp, #0]
 8001618:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	699a      	ldr	r2, [r3, #24]
 800161c:	f042 0204 	orr.w	r2, r2, #4
 8001620:	619a      	str	r2, [r3, #24]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800162c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001630:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f001 f9b7 	bl	80029a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800163c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001640:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	4804      	ldr	r0, [pc, #16]	; (8001654 <HAL_CAN_MspInit+0x6c>)
 8001644:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001646:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f001 f9ac 	bl	80029a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800164c:	b006      	add	sp, #24
 800164e:	bd10      	pop	{r4, pc}
 8001650:	40006400 	.word	0x40006400
 8001654:	40010800 	.word	0x40010800

08001658 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_DMA_Init+0x3c>)
{
 800165a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165c:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800165e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001668:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800166a:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001674:	f000 ffd6 	bl	8002624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001678:	200b      	movs	r0, #11
 800167a:	f001 f805 	bl	8002688 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	200c      	movs	r0, #12
 8001682:	4611      	mov	r1, r2
 8001684:	f000 ffce 	bl	8002624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001688:	200c      	movs	r0, #12

}
 800168a:	b003      	add	sp, #12
 800168c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001690:	f000 bffa 	b.w	8002688 <HAL_NVIC_EnableIRQ>
 8001694:	40021000 	.word	0x40021000

08001698 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	2210      	movs	r2, #16
{
 800169a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800169e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	eb0d 0002 	add.w	r0, sp, r2
 80016a4:	2100      	movs	r1, #0
 80016a6:	f002 fc09 	bl	8003ebc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016ac:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800177c <MX_GPIO_Init+0xe4>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRAKE_DIR_Pin|STEERING_RELAY_Pin, GPIO_PIN_RESET);
 80016b2:	4d33      	ldr	r5, [pc, #204]	; (8001780 <MX_GPIO_Init+0xe8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b4:	f042 0210 	orr.w	r2, r2, #16
 80016b8:	619a      	str	r2, [r3, #24]
 80016ba:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016bc:	4640      	mov	r0, r8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	f002 0210 	and.w	r2, r2, #16
 80016c2:	9200      	str	r2, [sp, #0]
 80016c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016cc:	f042 0220 	orr.w	r2, r2, #32
 80016d0:	619a      	str	r2, [r3, #24]
 80016d2:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	f002 0220 	and.w	r2, r2, #32
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	f042 0204 	orr.w	r2, r2, #4
 80016e6:	619a      	str	r2, [r3, #24]
 80016e8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	f002 0204 	and.w	r2, r2, #4
 80016f0:	9202      	str	r2, [sp, #8]
 80016f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	f042 0208 	orr.w	r2, r2, #8
 80016fa:	619a      	str	r2, [r3, #24]
 80016fc:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	9303      	str	r3, [sp, #12]
 8001706:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001708:	f001 fa2c 	bl	8002b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, BRAKE_DIR_Pin|STEERING_RELAY_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	4628      	mov	r0, r5
 8001710:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001714:	f001 fa26 	bl	8002b64 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800171c:	4640      	mov	r0, r8
 800171e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001728:	f001 f93c 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AUTO_CMD_Pin|MANUAL_CMD_Pin;
 800172c:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	a904      	add	r1, sp, #16
 8001730:	4814      	ldr	r0, [pc, #80]	; (8001784 <MX_GPIO_Init+0xec>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001732:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f001 f934 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMER_SIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_GPIO_Init+0xf0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(EMER_SIG_GPIO_Port, &GPIO_InitStruct);
 800173e:	4628      	mov	r0, r5
 8001740:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pin = EMER_SIG_Pin;
 8001746:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(EMER_SIG_GPIO_Port, &GPIO_InitStruct);
 8001748:	f001 f92c 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_SIG_Pin|Gear_P_Pin|Gear_R_Pin|Gear_N_Pin
 800174c:	f24f 2302 	movw	r3, #61954	; 0xf202
                          |Gear_D_Pin|BRAKE_SIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	4628      	mov	r0, r5
 8001752:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175a:	f001 f923 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BRAKE_DIR_Pin|STEERING_RELAY_Pin;
 800175e:	f44f 7390 	mov.w	r3, #288	; 0x120
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	4628      	mov	r0, r5
 8001764:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f001 f919 	bl	80029a4 <HAL_GPIO_Init>

}
 8001772:	b008      	add	sp, #32
 8001774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	40011000 	.word	0x40011000
 8001780:	40010c00 	.word	0x40010c00
 8001784:	40010800 	.word	0x40010800
 8001788:	10210000 	.word	0x10210000

0800178c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800178c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800178e:	480b      	ldr	r0, [pc, #44]	; (80017bc <MX_I2C2_Init+0x30>)
  hi2c2.Init.ClockSpeed = 100000;
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <MX_I2C2_Init+0x34>)
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_I2C2_Init+0x38>)
 8001794:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001798:	2300      	movs	r3, #0
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 800179e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017aa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017ac:	f001 f9e8 	bl	8002b80 <HAL_I2C_Init>
 80017b0:	b118      	cbz	r0, 80017ba <MX_I2C2_Init+0x2e>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017b6:	f000 b8a5 	b.w	8001904 <Error_Handler>
}
 80017ba:	bd08      	pop	{r3, pc}
 80017bc:	20000388 	.word	0x20000388
 80017c0:	40005800 	.word	0x40005800
 80017c4:	000186a0 	.word	0x000186a0

080017c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017c8:	b510      	push	{r4, lr}
 80017ca:	4604      	mov	r4, r0
 80017cc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	2210      	movs	r2, #16
 80017d0:	2100      	movs	r1, #0
 80017d2:	a802      	add	r0, sp, #8
 80017d4:	f002 fb72 	bl	8003ebc <memset>
  if(i2cHandle->Instance==I2C2)
 80017d8:	6822      	ldr	r2, [r4, #0]
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_I2C_MspInit+0x58>)
 80017dc:	429a      	cmp	r2, r3
 80017de:	d11d      	bne.n	800181c <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4c10      	ldr	r4, [pc, #64]	; (8001824 <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	480f      	ldr	r0, [pc, #60]	; (8001828 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	61a3      	str	r3, [r4, #24]
 80017f0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fc:	2312      	movs	r3, #18
 80017fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f001 f8cd 	bl	80029a4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800180a:	69e3      	ldr	r3, [r4, #28]
 800180c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001810:	61e3      	str	r3, [r4, #28]
 8001812:	69e3      	ldr	r3, [r4, #28]
 8001814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800181c:	b006      	add	sp, #24
 800181e:	bd10      	pop	{r4, pc}
 8001820:	40005800 	.word	0x40005800
 8001824:	40021000 	.word	0x40021000
 8001828:	40010c00 	.word	0x40010c00

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b510      	push	{r4, lr}
 800182e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001830:	2214      	movs	r2, #20
 8001832:	2100      	movs	r1, #0
 8001834:	a80c      	add	r0, sp, #48	; 0x30
 8001836:	f002 fb41 	bl	8003ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183a:	2214      	movs	r2, #20
 800183c:	2100      	movs	r1, #0
 800183e:	eb0d 0002 	add.w	r0, sp, r2
 8001842:	f002 fb3b 	bl	8003ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001846:	2210      	movs	r2, #16
 8001848:	2100      	movs	r1, #0
 800184a:	a801      	add	r0, sp, #4
 800184c:	f002 fb36 	bl	8003ebc <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001850:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001856:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001858:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800185c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001860:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001864:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001866:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001868:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186a:	f001 fa31 	bl	8002cd0 <HAL_RCC_OscConfig>
 800186e:	b108      	cbz	r0, 8001874 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001872:	e7fe      	b.n	8001872 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001876:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800187a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187e:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001880:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001884:	4621      	mov	r1, r4
 8001886:	a805      	add	r0, sp, #20
 8001888:	f001 fbe4 	bl	8003054 <HAL_RCC_ClockConfig>
 800188c:	b108      	cbz	r0, 8001892 <SystemClock_Config+0x66>
 800188e:	b672      	cpsid	i
	while (1) {
 8001890:	e7fe      	b.n	8001890 <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001896:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001898:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800189a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189c:	f001 fc96 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 80018a0:	b108      	cbz	r0, 80018a6 <SystemClock_Config+0x7a>
 80018a2:	b672      	cpsid	i
	while (1) {
 80018a4:	e7fe      	b.n	80018a4 <SystemClock_Config+0x78>
}
 80018a6:	b014      	add	sp, #80	; 0x50
 80018a8:	bd10      	pop	{r4, pc}
	...

080018ac <main>:
{
 80018ac:	b508      	push	{r3, lr}
  HAL_Init();
 80018ae:	f000 fb6d 	bl	8001f8c <HAL_Init>
  SystemClock_Config();
 80018b2:	f7ff ffbb 	bl	800182c <SystemClock_Config>
  MX_GPIO_Init();
 80018b6:	f7ff feef 	bl	8001698 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ba:	f7ff fecd 	bl	8001658 <MX_DMA_Init>
  MX_CAN_Init();
 80018be:	f7ff fe79 	bl	80015b4 <MX_CAN_Init>
  MX_TIM1_Init();
 80018c2:	f000 f9af 	bl	8001c24 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80018c6:	f000 fa67 	bl	8001d98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80018ca:	f000 fa81 	bl	8001dd0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80018ce:	f7ff fdcf 	bl	8001470 <MX_ADC1_Init>
  MX_TIM3_Init();
 80018d2:	f000 fa11 	bl	8001cf8 <MX_TIM3_Init>
  MX_I2C2_Init();
 80018d6:	f7ff ff59 	bl	800178c <MX_I2C2_Init>
  MX_TIM4_Init();
 80018da:	f000 f8b9 	bl	8001a50 <MX_TIM4_Init>
	UART_PC_Set(&huart1);
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <main+0x4c>)
 80018e0:	f7ff fd18 	bl	8001314 <UART_PC_Set>
	IO_init_ADC_DMA();
 80018e4:	f7ff fc56 	bl	8001194 <IO_init_ADC_DMA>
		IO_read_write(&IOVar);
 80018e8:	4c04      	ldr	r4, [pc, #16]	; (80018fc <main+0x50>)
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff fc96 	bl	800121c <IO_read_write>
		UART_PC_Streamer(&IOVar);
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff fd81 	bl	80013f8 <UART_PC_Streamer>
	while (1) {
 80018f6:	e7f8      	b.n	80018ea <main+0x3e>
 80018f8:	2000050c 	.word	0x2000050c
 80018fc:	200003dc 	.word	0x200003dc

08001900 <HAL_UART_RxCpltCallback>:
	UART_PC_Callback(huart);
 8001900:	f7ff bd4e 	b.w	80013a0 <UART_PC_Callback>

08001904 <Error_Handler>:
 8001904:	b672      	cpsid	i
	while (1) {
 8001906:	e7fe      	b.n	8001906 <Error_Handler+0x2>

08001908 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_MspInit+0x3c>)
{
 800190a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	619a      	str	r2, [r3, #24]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	f002 0201 	and.w	r2, r2, #1
 800191a:	9200      	str	r2, [sp, #0]
 800191c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	69da      	ldr	r2, [r3, #28]
 8001920:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001924:	61da      	str	r2, [r3, #28]
 8001926:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001932:	6853      	ldr	r3, [r2, #4]
 8001934:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800193c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193e:	b002      	add	sp, #8
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	40010000 	.word	0x40010000

0800194c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler>

0800194e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler>

08001950 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler>

08001952 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler>

08001954 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler>

08001956 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:
 800195a:	4770      	bx	lr

0800195c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195c:	f000 bb28 	b.w	8001fb0 <HAL_IncTick>

08001960 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001960:	4801      	ldr	r0, [pc, #4]	; (8001968 <DMA1_Channel1_IRQHandler+0x8>)
 8001962:	f000 bf8b 	b.w	800287c <HAL_DMA_IRQHandler>
 8001966:	bf00      	nop
 8001968:	2000031c 	.word	0x2000031c

0800196c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800196c:	4801      	ldr	r0, [pc, #4]	; (8001974 <DMA1_Channel2_IRQHandler+0x8>)
 800196e:	f000 bf85 	b.w	800287c <HAL_DMA_IRQHandler>
 8001972:	bf00      	nop
 8001974:	200003f0 	.word	0x200003f0

08001978 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001978:	4801      	ldr	r0, [pc, #4]	; (8001980 <ADC1_2_IRQHandler+0x8>)
 800197a:	f000 bb5a 	b.w	8002032 <HAL_ADC_IRQHandler>
 800197e:	bf00      	nop
 8001980:	200002ec 	.word	0x200002ec

08001984 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001984:	4801      	ldr	r0, [pc, #4]	; (800198c <USART1_IRQHandler+0x8>)
 8001986:	f002 b8f3 	b.w	8003b70 <HAL_UART_IRQHandler>
 800198a:	bf00      	nop
 800198c:	2000050c 	.word	0x2000050c

08001990 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001990:	4801      	ldr	r0, [pc, #4]	; (8001998 <USART2_IRQHandler+0x8>)
 8001992:	f002 b8ed 	b.w	8003b70 <HAL_UART_IRQHandler>
 8001996:	bf00      	nop
 8001998:	20000554 	.word	0x20000554

0800199c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800199c:	2001      	movs	r0, #1
 800199e:	4770      	bx	lr

080019a0 <_kill>:

int _kill(int pid, int sig)
{
 80019a0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019a2:	f002 fa61 	bl	8003e68 <__errno>
 80019a6:	2316      	movs	r3, #22
 80019a8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80019aa:	f04f 30ff 	mov.w	r0, #4294967295
 80019ae:	bd08      	pop	{r3, pc}

080019b0 <_exit>:

void _exit (int status)
{
 80019b0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80019b2:	f002 fa59 	bl	8003e68 <__errno>
 80019b6:	2316      	movs	r3, #22
 80019b8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80019ba:	e7fe      	b.n	80019ba <_exit+0xa>

080019bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	460d      	mov	r5, r1
 80019c0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	460e      	mov	r6, r1
 80019c4:	1b73      	subs	r3, r6, r5
 80019c6:	429c      	cmp	r4, r3
 80019c8:	dc01      	bgt.n	80019ce <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80019ca:	4620      	mov	r0, r4
 80019cc:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80019ce:	f3af 8000 	nop.w
 80019d2:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	e7f5      	b.n	80019c4 <_read+0x8>

080019d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	460d      	mov	r5, r1
 80019dc:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	460e      	mov	r6, r1
 80019e0:	1b73      	subs	r3, r6, r5
 80019e2:	429c      	cmp	r4, r3
 80019e4:	dc01      	bgt.n	80019ea <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80019e6:	4620      	mov	r0, r4
 80019e8:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80019ea:	f816 0b01 	ldrb.w	r0, [r6], #1
 80019ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	e7f5      	b.n	80019e0 <_write+0x8>

080019f4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	4770      	bx	lr

080019fa <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 80019fe:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001a00:	604b      	str	r3, [r1, #4]
}
 8001a02:	4770      	bx	lr

08001a04 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001a04:	2001      	movs	r0, #1
 8001a06:	4770      	bx	lr

08001a08 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001a08:	2000      	movs	r0, #0
 8001a0a:	4770      	bx	lr

08001a0c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <_sbrk+0x30>)
{
 8001a0e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001a10:	6811      	ldr	r1, [r2, #0]
{
 8001a12:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001a14:	b909      	cbnz	r1, 8001a1a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001a16:	490a      	ldr	r1, [pc, #40]	; (8001a40 <_sbrk+0x34>)
 8001a18:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	6810      	ldr	r0, [r2, #0]
 8001a1c:	4909      	ldr	r1, [pc, #36]	; (8001a44 <_sbrk+0x38>)
 8001a1e:	4c0a      	ldr	r4, [pc, #40]	; (8001a48 <_sbrk+0x3c>)
 8001a20:	4403      	add	r3, r0
 8001a22:	1b09      	subs	r1, r1, r4
 8001a24:	428b      	cmp	r3, r1
 8001a26:	d906      	bls.n	8001a36 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001a28:	f002 fa1e 	bl	8003e68 <__errno>
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001a34:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001a36:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001a38:	e7fc      	b.n	8001a34 <_sbrk+0x28>
 8001a3a:	bf00      	nop
 8001a3c:	200003ec 	.word	0x200003ec
 8001a40:	200005b0 	.word	0x200005b0
 8001a44:	20005000 	.word	0x20005000
 8001a48:	00000400 	.word	0x00000400

08001a4c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	4770      	bx	lr
	...

08001a50 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a50:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a52:	2400      	movs	r4, #0
{
 8001a54:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a56:	2100      	movs	r1, #0
 8001a58:	2220      	movs	r2, #32
 8001a5a:	a804      	add	r0, sp, #16
 8001a5c:	f002 fa2e 	bl	8003ebc <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a60:	4810      	ldr	r0, [pc, #64]	; (8001aa4 <MX_TIM4_Init+0x54>)
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_TIM4_Init+0x58>)
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a64:	a903      	add	r1, sp, #12
  htim4.Init.Prescaler = 0;
 8001a66:	e9c0 3400 	strd	r3, r4, [r0]
  htim4.Init.Period = 65535;
 8001a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	e9c0 3403 	strd	r3, r4, [r0, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a72:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	e9cd 4401 	strd	r4, r4, [sp, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	6084      	str	r4, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	6184      	str	r4, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a7c:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a7e:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a80:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a82:	f001 fd23 	bl	80034cc <HAL_TIM_Encoder_Init>
 8001a86:	b108      	cbz	r0, 8001a8c <MX_TIM4_Init+0x3c>
  {
    Error_Handler();
 8001a88:	f7ff ff3c 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM4_Init+0x54>)
 8001a8e:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a94:	f001 fe9e 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	b108      	cbz	r0, 8001a9e <MX_TIM4_Init+0x4e>
  {
    Error_Handler();
 8001a9a:	f7ff ff33 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a9e:	b00c      	add	sp, #48	; 0x30
 8001aa0:	bd10      	pop	{r4, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200004c4 	.word	0x200004c4
 8001aa8:	40000800 	.word	0x40000800

08001aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aac:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(tim_baseHandle->Instance==TIM1)
 8001aae:	6803      	ldr	r3, [r0, #0]
 8001ab0:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <HAL_TIM_Base_MspInit+0x70>)
{
 8001ab2:	4605      	mov	r5, r0
  if(tim_baseHandle->Instance==TIM1)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d123      	bne.n	8001b00 <HAL_TIM_Base_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_TIM_Base_MspInit+0x74>)

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001aba:	4c1a      	ldr	r4, [pc, #104]	; (8001b24 <HAL_TIM_Base_MspInit+0x78>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001abc:	699a      	ldr	r2, [r3, #24]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001abe:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ac4:	619a      	str	r2, [r3, #24]
 8001ac6:	699b      	ldr	r3, [r3, #24]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_TIM_Base_MspInit+0x7c>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001adc:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001ae4:	4620      	mov	r0, r4
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001ae6:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aea:	60a3      	str	r3, [r4, #8]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001aec:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001aee:	f000 fded 	bl	80026cc <HAL_DMA_Init>
 8001af2:	b108      	cbz	r0, 8001af8 <HAL_TIM_Base_MspInit+0x4c>
    {
      Error_Handler();
 8001af4:	f7ff ff06 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001af8:	626c      	str	r4, [r5, #36]	; 0x24
 8001afa:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001afc:	b003      	add	sp, #12
 8001afe:	bd30      	pop	{r4, r5, pc}
  else if(tim_baseHandle->Instance==TIM3)
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_TIM_Base_MspInit+0x80>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d1fa      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_TIM_Base_MspInit+0x74>)
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	f042 0202 	orr.w	r2, r2, #2
 8001b0e:	61da      	str	r2, [r3, #28]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	9b01      	ldr	r3, [sp, #4]
}
 8001b1a:	e7ef      	b.n	8001afc <HAL_TIM_Base_MspInit+0x50>
 8001b1c:	40012c00 	.word	0x40012c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	200003f0 	.word	0x200003f0
 8001b28:	4002001c 	.word	0x4002001c
 8001b2c:	40000400 	.word	0x40000400

08001b30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b30:	b510      	push	{r4, lr}
 8001b32:	4604      	mov	r4, r0
 8001b34:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	2210      	movs	r2, #16
 8001b38:	2100      	movs	r1, #0
 8001b3a:	a802      	add	r0, sp, #8
 8001b3c:	f002 f9be 	bl	8003ebc <memset>
  if(tim_encoderHandle->Instance==TIM4)
 8001b40:	6822      	ldr	r2, [r4, #0]
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_TIM_Encoder_MspInit+0x50>)
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d119      	bne.n	8001b7c <HAL_TIM_Encoder_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b48:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b4c:	69da      	ldr	r2, [r3, #28]
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <HAL_TIM_Encoder_MspInit+0x54>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b50:	f042 0204 	orr.w	r2, r2, #4
 8001b54:	61da      	str	r2, [r3, #28]
 8001b56:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5a:	f002 0204 	and.w	r2, r2, #4
 8001b5e:	9200      	str	r2, [sp, #0]
 8001b60:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	f042 0208 	orr.w	r2, r2, #8
 8001b68:	619a      	str	r2, [r3, #24]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001b74:	23c0      	movs	r3, #192	; 0xc0
 8001b76:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f000 ff14 	bl	80029a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b7c:	b006      	add	sp, #24
 8001b7e:	bd10      	pop	{r4, pc}
 8001b80:	40000800 	.word	0x40000800
 8001b84:	40010c00 	.word	0x40010c00

08001b88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b88:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	2510      	movs	r5, #16
{
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	462a      	mov	r2, r5
 8001b92:	2100      	movs	r1, #0
 8001b94:	a802      	add	r0, sp, #8
 8001b96:	f002 f991 	bl	8003ebc <memset>
  if(timHandle->Instance==TIM1)
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <HAL_TIM_MspPostInit+0x84>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d115      	bne.n	8001bce <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_TIM_MspPostInit+0x88>)
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_WS2812_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	481b      	ldr	r0, [pc, #108]	; (8001c14 <HAL_TIM_MspPostInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	f042 0204 	orr.w	r2, r2, #4
 8001bae:	619a      	str	r2, [r3, #24]
 8001bb0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f000 feed 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bca:	b007      	add	sp, #28
 8001bcc:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM3)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_TIM_MspPostInit+0x90>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d1fa      	bne.n	8001bca <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_TIM_MspPostInit+0x88>)
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	4811      	ldr	r0, [pc, #68]	; (8001c1c <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	6999      	ldr	r1, [r3, #24]
 8001bda:	f041 0108 	orr.w	r1, r1, #8
 8001bde:	6199      	str	r1, [r3, #24]
 8001be0:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001be2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = BRAKE_PWM_Pin;
 8001bee:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f000 fed6 	bl	80029a4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001bf8:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <HAL_TIM_MspPostInit+0x98>)
 8001bfa:	6853      	ldr	r3, [r2, #4]
 8001bfc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c00:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c08:	6053      	str	r3, [r2, #4]
}
 8001c0a:	e7de      	b.n	8001bca <HAL_TIM_MspPostInit+0x42>
 8001c0c:	40012c00 	.word	0x40012c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40010800 	.word	0x40010800
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	40010c00 	.word	0x40010c00
 8001c20:	40010000 	.word	0x40010000

08001c24 <MX_TIM1_Init>:
{
 8001c24:	b510      	push	{r4, lr}
 8001c26:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c28:	2210      	movs	r2, #16
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2e:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c30:	f002 f944 	bl	8003ebc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c34:	221c      	movs	r2, #28
 8001c36:	4621      	mov	r1, r4
 8001c38:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c40:	f002 f93c 	bl	8003ebc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c44:	2220      	movs	r2, #32
 8001c46:	4621      	mov	r1, r4
 8001c48:	a80e      	add	r0, sp, #56	; 0x38
 8001c4a:	f002 f937 	bl	8003ebc <memset>
  htim1.Instance = TIM1;
 8001c4e:	4828      	ldr	r0, [pc, #160]	; (8001cf0 <MX_TIM1_Init+0xcc>)
 8001c50:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <MX_TIM1_Init+0xd0>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim1.Init.Prescaler = 0;
 8001c56:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 65535;
 8001c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c64:	f001 fbda 	bl	800341c <HAL_TIM_Base_Init>
 8001c68:	b108      	cbz	r0, 8001c6e <MX_TIM1_Init+0x4a>
    Error_Handler();
 8001c6a:	f7ff fe4b 	bl	8001904 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c72:	481f      	ldr	r0, [pc, #124]	; (8001cf0 <MX_TIM1_Init+0xcc>)
 8001c74:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c76:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c78:	f001 fd10 	bl	800369c <HAL_TIM_ConfigClockSource>
 8001c7c:	b108      	cbz	r0, 8001c82 <MX_TIM1_Init+0x5e>
    Error_Handler();
 8001c7e:	f7ff fe41 	bl	8001904 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c82:	481b      	ldr	r0, [pc, #108]	; (8001cf0 <MX_TIM1_Init+0xcc>)
 8001c84:	f001 fbf6 	bl	8003474 <HAL_TIM_PWM_Init>
 8001c88:	b108      	cbz	r0, 8001c8e <MX_TIM1_Init+0x6a>
    Error_Handler();
 8001c8a:	f7ff fe3b 	bl	8001904 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8e:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c90:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <MX_TIM1_Init+0xcc>)
 8001c92:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c94:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c98:	f001 fd9c 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	b108      	cbz	r0, 8001ca2 <MX_TIM1_Init+0x7e>
    Error_Handler();
 8001c9e:	f7ff fe31 	bl	8001904 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca2:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <MX_TIM1_Init+0xcc>)
 8001ca8:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8001caa:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cae:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cb6:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb8:	f001 fc8a 	bl	80035d0 <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	b108      	cbz	r0, 8001cc2 <MX_TIM1_Init+0x9e>
    Error_Handler();
 8001cbe:	f7ff fe21 	bl	8001904 <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cc2:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cc8:	4809      	ldr	r0, [pc, #36]	; (8001cf0 <MX_TIM1_Init+0xcc>)
 8001cca:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ccc:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cd0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cd4:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cd6:	9213      	str	r2, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cd8:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cda:	f001 fda9 	bl	8003830 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cde:	b108      	cbz	r0, 8001ce4 <MX_TIM1_Init+0xc0>
    Error_Handler();
 8001ce0:	f7ff fe10 	bl	8001904 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <MX_TIM1_Init+0xcc>)
 8001ce6:	f7ff ff4f 	bl	8001b88 <HAL_TIM_MspPostInit>
}
 8001cea:	b016      	add	sp, #88	; 0x58
 8001cec:	bd10      	pop	{r4, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000434 	.word	0x20000434
 8001cf4:	40012c00 	.word	0x40012c00

08001cf8 <MX_TIM3_Init>:
{
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	2100      	movs	r1, #0
 8001d00:	a803      	add	r0, sp, #12
 8001d02:	f002 f8db 	bl	8003ebc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d06:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d08:	221c      	movs	r2, #28
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d10:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d14:	f002 f8d2 	bl	8003ebc <memset>
  htim3.Instance = TIM3;
 8001d18:	481d      	ldr	r0, [pc, #116]	; (8001d90 <MX_TIM3_Init+0x98>)
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <MX_TIM3_Init+0x9c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8001d1e:	e9c0 3400 	strd	r3, r4, [r0]
  htim3.Init.Period = 65535;
 8001d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d26:	6184      	str	r4, [r0, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d28:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d2c:	f001 fb76 	bl	800341c <HAL_TIM_Base_Init>
 8001d30:	b108      	cbz	r0, 8001d36 <MX_TIM3_Init+0x3e>
    Error_Handler();
 8001d32:	f7ff fde7 	bl	8001904 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d3a:	4815      	ldr	r0, [pc, #84]	; (8001d90 <MX_TIM3_Init+0x98>)
 8001d3c:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d40:	f001 fcac 	bl	800369c <HAL_TIM_ConfigClockSource>
 8001d44:	b108      	cbz	r0, 8001d4a <MX_TIM3_Init+0x52>
    Error_Handler();
 8001d46:	f7ff fddd 	bl	8001904 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d4a:	4811      	ldr	r0, [pc, #68]	; (8001d90 <MX_TIM3_Init+0x98>)
 8001d4c:	f001 fb92 	bl	8003474 <HAL_TIM_PWM_Init>
 8001d50:	b108      	cbz	r0, 8001d56 <MX_TIM3_Init+0x5e>
    Error_Handler();
 8001d52:	f7ff fdd7 	bl	8001904 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d58:	480d      	ldr	r0, [pc, #52]	; (8001d90 <MX_TIM3_Init+0x98>)
 8001d5a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d60:	f001 fd38 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d64:	b108      	cbz	r0, 8001d6a <MX_TIM3_Init+0x72>
    Error_Handler();
 8001d66:	f7ff fdcd 	bl	8001904 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4808      	ldr	r0, [pc, #32]	; (8001d90 <MX_TIM3_Init+0x98>)
 8001d70:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8001d72:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d76:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d78:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d7a:	f001 fc29 	bl	80035d0 <HAL_TIM_PWM_ConfigChannel>
 8001d7e:	b108      	cbz	r0, 8001d84 <MX_TIM3_Init+0x8c>
    Error_Handler();
 8001d80:	f7ff fdc0 	bl	8001904 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <MX_TIM3_Init+0x98>)
 8001d86:	f7ff feff 	bl	8001b88 <HAL_TIM_MspPostInit>
}
 8001d8a:	b00e      	add	sp, #56	; 0x38
 8001d8c:	bd10      	pop	{r4, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000047c 	.word	0x2000047c
 8001d94:	40000400 	.word	0x40000400

08001d98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d98:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d9a:	480a      	ldr	r0, [pc, #40]	; (8001dc4 <MX_USART1_UART_Init+0x2c>)
  huart1.Init.BaudRate = 2000000;
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <MX_USART1_UART_Init+0x30>)
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MX_USART1_UART_Init+0x34>)
 8001da0:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da4:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001da6:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001da8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dac:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001db0:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db2:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001db4:	f001 fe00 	bl	80039b8 <HAL_UART_Init>
 8001db8:	b118      	cbz	r0, 8001dc2 <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001dbe:	f7ff bda1 	b.w	8001904 <Error_Handler>
}
 8001dc2:	bd08      	pop	{r3, pc}
 8001dc4:	2000050c 	.word	0x2000050c
 8001dc8:	40013800 	.word	0x40013800
 8001dcc:	001e8480 	.word	0x001e8480

08001dd0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dd0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8001dd2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001dd6:	480a      	ldr	r0, [pc, #40]	; (8001e00 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <MX_USART2_UART_Init+0x34>)
 8001dda:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dde:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001de2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dea:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dee:	f001 fde3 	bl	80039b8 <HAL_UART_Init>
 8001df2:	b118      	cbz	r0, 8001dfc <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001df8:	f7ff bd84 	b.w	8001904 <Error_Handler>
}
 8001dfc:	bd08      	pop	{r3, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000554 	.word	0x20000554
 8001e04:	40004400 	.word	0x40004400

08001e08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	2210      	movs	r2, #16
{
 8001e0a:	b510      	push	{r4, lr}
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	eb0d 0002 	add.w	r0, sp, r2
 8001e14:	2100      	movs	r1, #0
 8001e16:	f002 f851 	bl	8003ebc <memset>
  if(uartHandle->Instance==USART1)
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <HAL_UART_MspInit+0xe0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d131      	bne.n	8001e86 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <HAL_UART_MspInit+0xe4>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e28:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	4831      	ldr	r0, [pc, #196]	; (8001ef0 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e30:	619a      	str	r2, [r3, #24]
 8001e32:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e36:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e3a:	9200      	str	r2, [sp, #0]
 8001e3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	f042 0204 	orr.w	r2, r2, #4
 8001e44:	619a      	str	r2, [r3, #24]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e56:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f000 fda2 	bl	80029a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	4822      	ldr	r0, [pc, #136]	; (8001ef0 <HAL_UART_MspInit+0xe8>)
 8001e66:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e68:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f000 fd99 	bl	80029a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e72:	2025      	movs	r0, #37	; 0x25
 8001e74:	4622      	mov	r2, r4
 8001e76:	4621      	mov	r1, r4
 8001e78:	f000 fbd4 	bl	8002624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e7c:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e7e:	f000 fc03 	bl	8002688 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e82:	b008      	add	sp, #32
 8001e84:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 8001e86:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <HAL_UART_MspInit+0xec>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d1fa      	bne.n	8001e82 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e90:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e98:	61da      	str	r2, [r3, #28]
 8001e9a:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9c:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ea2:	9202      	str	r2, [sp, #8]
 8001ea4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	699a      	ldr	r2, [r3, #24]
 8001ea8:	f042 0204 	orr.w	r2, r2, #4
 8001eac:	619a      	str	r2, [r3, #24]
 8001eae:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	9303      	str	r3, [sp, #12]
 8001eb8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f000 fd6e 	bl	80029a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <HAL_UART_MspInit+0xe8>)
 8001ecc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ece:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f000 fd66 	bl	80029a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ed8:	2026      	movs	r0, #38	; 0x26
 8001eda:	4622      	mov	r2, r4
 8001edc:	4621      	mov	r1, r4
 8001ede:	f000 fba1 	bl	8002624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ee2:	2026      	movs	r0, #38	; 0x26
 8001ee4:	e7cb      	b.n	8001e7e <HAL_UART_MspInit+0x76>
 8001ee6:	bf00      	nop
 8001ee8:	40013800 	.word	0x40013800
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef8:	f7ff fda8 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001efe:	490c      	ldr	r1, [pc, #48]	; (8001f30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f00:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f14:	4c09      	ldr	r4, [pc, #36]	; (8001f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f22:	f001 ffa7 	bl	8003e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f26:	f7ff fcc1 	bl	80018ac <main>
  bx lr
 8001f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f30:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f34:	08008de8 	.word	0x08008de8
  ldr r2, =_sbss
 8001f38:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f3c:	200005b0 	.word	0x200005b0

08001f40 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <CAN1_RX1_IRQHandler>
	...

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_InitTick+0x3c>)
{
 8001f48:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4a:	7818      	ldrb	r0, [r3, #0]
 8001f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f50:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_InitTick+0x40>)
 8001f56:	6810      	ldr	r0, [r2, #0]
 8001f58:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f5c:	f000 fba2 	bl	80026a4 <HAL_SYSTICK_Config>
 8001f60:	4604      	mov	r4, r0
 8001f62:	b958      	cbnz	r0, 8001f7c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f64:	2d0f      	cmp	r5, #15
 8001f66:	d809      	bhi.n	8001f7c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f000 fb58 	bl	8002624 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4620      	mov	r0, r4
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_InitTick+0x44>)
 8001f78:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	e7fc      	b.n	8001f7a <HAL_InitTick+0x36>
 8001f80:	20000004 	.word	0x20000004
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000008 	.word	0x20000008

08001f8c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_Init+0x20>)
{
 8001f8e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f90:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f92:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9a:	f000 fb31 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f7ff ffd0 	bl	8001f44 <HAL_InitTick>
  HAL_MspInit();
 8001fa4:	f7ff fcb0 	bl	8001908 <HAL_MspInit>
}
 8001fa8:	2000      	movs	r0, #0
 8001faa:	bd08      	pop	{r3, pc}
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_IncTick+0x10>)
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_IncTick+0x14>)
 8001fb4:	6811      	ldr	r1, [r2, #0]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	440b      	add	r3, r1
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	2000059c 	.word	0x2000059c
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fc8:	4b01      	ldr	r3, [pc, #4]	; (8001fd0 <HAL_GetTick+0x8>)
 8001fca:	6818      	ldr	r0, [r3, #0]
}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	2000059c 	.word	0x2000059c

08001fd4 <HAL_ADC_ConvCpltCallback>:
 8001fd4:	4770      	bx	lr

08001fd6 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001fd8:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fdc:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001fe0:	d11b      	bne.n	800201a <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	6892      	ldr	r2, [r2, #8]
 8001fee:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001ff2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001ff6:	d10c      	bne.n	8002012 <ADC_DMAConvCplt+0x3c>
 8001ff8:	7b1a      	ldrb	r2, [r3, #12]
 8001ffa:	b952      	cbnz	r2, 8002012 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ffe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002006:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002008:	bf5e      	ittt	pl
 800200a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800200c:	f042 0201 	orrpl.w	r2, r2, #1
 8002010:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ffde 	bl	8001fd4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002018:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800201a:	6a1b      	ldr	r3, [r3, #32]
}
 800201c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4718      	bx	r3

08002024 <HAL_ADC_ConvHalfCpltCallback>:
 8002024:	4770      	bx	lr

08002026 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002026:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002028:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800202a:	f7ff fffb 	bl	8002024 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800202e:	bd08      	pop	{r3, pc}

08002030 <HAL_ADC_LevelOutOfWindowCallback>:
 8002030:	4770      	bx	lr

08002032 <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 8002032:	6803      	ldr	r3, [r0, #0]
{
 8002034:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8002036:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002038:	685e      	ldr	r6, [r3, #4]
{
 800203a:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800203c:	06b0      	lsls	r0, r6, #26
 800203e:	d526      	bpl.n	800208e <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002040:	07a9      	lsls	r1, r5, #30
 8002042:	d524      	bpl.n	800208e <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002044:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002046:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002048:	bf5e      	ittt	pl
 800204a:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800204c:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8002050:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002058:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800205c:	d110      	bne.n	8002080 <HAL_ADC_IRQHandler+0x4e>
 800205e:	7b22      	ldrb	r2, [r4, #12]
 8002060:	b972      	cbnz	r2, 8002080 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	f022 0220 	bic.w	r2, r2, #32
 8002068:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800206a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800206c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002070:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002072:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002074:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002076:	bf5e      	ittt	pl
 8002078:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800207a:	f043 0301 	orrpl.w	r3, r3, #1
 800207e:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8002080:	4620      	mov	r0, r4
 8002082:	f7ff ffa7 	bl	8001fd4 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002086:	f06f 0212 	mvn.w	r2, #18
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800208e:	0631      	lsls	r1, r6, #24
 8002090:	d530      	bpl.n	80020f4 <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002092:	076a      	lsls	r2, r5, #29
 8002094:	d52e      	bpl.n	80020f4 <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002098:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800209a:	bf5e      	ittt	pl
 800209c:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800209e:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 80020a2:	62a3      	strpl	r3, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80020ac:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80020b0:	d00a      	beq.n	80020c8 <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80020b2:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020b4:	0550      	lsls	r0, r2, #21
 80020b6:	d416      	bmi.n	80020e6 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80020be:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80020c2:	d110      	bne.n	80020e6 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80020c4:	7b22      	ldrb	r2, [r4, #12]
 80020c6:	b972      	cbnz	r2, 80020e6 <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ce:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80020d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020d6:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020da:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020dc:	bf5e      	ittt	pl
 80020de:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80020e0:	f043 0301 	orrpl.w	r3, r3, #1
 80020e4:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020e6:	4620      	mov	r0, r4
 80020e8:	f000 fa0e 	bl	8002508 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020ec:	f06f 020c 	mvn.w	r2, #12
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80020f4:	0672      	lsls	r2, r6, #25
 80020f6:	d50c      	bpl.n	8002112 <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80020f8:	07eb      	lsls	r3, r5, #31
 80020fa:	d50a      	bpl.n	8002112 <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020fe:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002106:	f7ff ff93 	bl	8002030 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800210a:	f06f 0201 	mvn.w	r2, #1
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	601a      	str	r2, [r3, #0]
}
 8002112:	bd70      	pop	{r4, r5, r6, pc}

08002114 <HAL_ADC_ErrorCallback>:
 8002114:	4770      	bx	lr

08002116 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002116:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002118:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800211a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800211c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002120:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002122:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800212a:	f7ff fff3 	bl	8002114 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800212e:	bd08      	pop	{r3, pc}

08002130 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002130:	2300      	movs	r3, #0
{ 
 8002132:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002134:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002136:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800213a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800213c:	2b01      	cmp	r3, #1
 800213e:	d06c      	beq.n	800221a <HAL_ADC_ConfigChannel+0xea>
 8002140:	2301      	movs	r3, #1
 8002142:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8002146:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002148:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 800214a:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800214c:	6808      	ldr	r0, [r1, #0]
 800214e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8002152:	d822      	bhi.n	800219a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002154:	261f      	movs	r6, #31
 8002156:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8002158:	3b05      	subs	r3, #5
 800215a:	409e      	lsls	r6, r3
 800215c:	ea25 0506 	bic.w	r5, r5, r6
 8002160:	fa00 f303 	lsl.w	r3, r0, r3
 8002164:	432b      	orrs	r3, r5
 8002166:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002168:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800216a:	688b      	ldr	r3, [r1, #8]
 800216c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8002170:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002174:	d929      	bls.n	80021ca <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002176:	68d6      	ldr	r6, [r2, #12]
 8002178:	3d1e      	subs	r5, #30
 800217a:	40a9      	lsls	r1, r5
 800217c:	ea26 0101 	bic.w	r1, r6, r1
 8002180:	40ab      	lsls	r3, r5
 8002182:	430b      	orrs	r3, r1
 8002184:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002186:	f1a0 0310 	sub.w	r3, r0, #16
 800218a:	2b01      	cmp	r3, #1
 800218c:	d925      	bls.n	80021da <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002190:	2300      	movs	r3, #0
 8002192:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002196:	b002      	add	sp, #8
 8002198:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800219a:	2d0c      	cmp	r5, #12
 800219c:	f04f 051f 	mov.w	r5, #31
 80021a0:	d809      	bhi.n	80021b6 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021a2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80021a4:	3b23      	subs	r3, #35	; 0x23
 80021a6:	409d      	lsls	r5, r3
 80021a8:	ea26 0505 	bic.w	r5, r6, r5
 80021ac:	fa00 f303 	lsl.w	r3, r0, r3
 80021b0:	432b      	orrs	r3, r5
 80021b2:	6313      	str	r3, [r2, #48]	; 0x30
 80021b4:	e7d8      	b.n	8002168 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021b6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80021b8:	3b41      	subs	r3, #65	; 0x41
 80021ba:	409d      	lsls	r5, r3
 80021bc:	ea26 0505 	bic.w	r5, r6, r5
 80021c0:	fa00 f303 	lsl.w	r3, r0, r3
 80021c4:	432b      	orrs	r3, r5
 80021c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80021c8:	e7ce      	b.n	8002168 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021ca:	6910      	ldr	r0, [r2, #16]
 80021cc:	40a9      	lsls	r1, r5
 80021ce:	ea20 0101 	bic.w	r1, r0, r1
 80021d2:	40ab      	lsls	r3, r5
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6113      	str	r3, [r2, #16]
 80021d8:	e7d9      	b.n	800218e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_ADC_ConfigChannel+0xf0>)
 80021dc:	429a      	cmp	r2, r3
 80021de:	d116      	bne.n	800220e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021e0:	6893      	ldr	r3, [r2, #8]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	d4d3      	bmi.n	800218e <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021e6:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021ee:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021f0:	d1cd      	bne.n	800218e <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_ADC_ConfigChannel+0xf4>)
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <HAL_ADC_ConfigChannel+0xf8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80021fc:	220a      	movs	r2, #10
 80021fe:	4353      	muls	r3, r2
            wait_loop_index--;
 8002200:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0c2      	beq.n	800218e <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8002208:	9b01      	ldr	r3, [sp, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	e7f8      	b.n	8002200 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002210:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002212:	f043 0320 	orr.w	r3, r3, #32
 8002216:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002218:	e7ba      	b.n	8002190 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 800221a:	2002      	movs	r0, #2
 800221c:	e7bb      	b.n	8002196 <HAL_ADC_ConfigChannel+0x66>
 800221e:	bf00      	nop
 8002220:	40012400 	.word	0x40012400
 8002224:	20000000 	.word	0x20000000
 8002228:	000f4240 	.word	0x000f4240

0800222c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800222c:	2300      	movs	r3, #0
{
 800222e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002230:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002232:	6803      	ldr	r3, [r0, #0]
{
 8002234:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	07d2      	lsls	r2, r2, #31
 800223a:	d502      	bpl.n	8002242 <ADC_Enable+0x16>
  return HAL_OK;
 800223c:	2000      	movs	r0, #0
}
 800223e:	b003      	add	sp, #12
 8002240:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <ADC_Enable+0x70>)
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <ADC_Enable+0x74>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002254:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002256:	9b01      	ldr	r3, [sp, #4]
 8002258:	b9e3      	cbnz	r3, 8002294 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800225a:	f7ff feb5 	bl	8001fc8 <HAL_GetTick>
 800225e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	07db      	lsls	r3, r3, #31
 8002266:	d4e9      	bmi.n	800223c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002268:	f7ff feae 	bl	8001fc8 <HAL_GetTick>
 800226c:	1b40      	subs	r0, r0, r5
 800226e:	2802      	cmp	r0, #2
 8002270:	d9f6      	bls.n	8002260 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f013 0301 	ands.w	r3, r3, #1
 800227a:	d1f1      	bne.n	8002260 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 800227e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002280:	f042 0210 	orr.w	r2, r2, #16
 8002284:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002288:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228c:	f042 0201 	orr.w	r2, r2, #1
 8002290:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002292:	e7d4      	b.n	800223e <ADC_Enable+0x12>
      wait_loop_index--;
 8002294:	9b01      	ldr	r3, [sp, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	e7dc      	b.n	8002254 <ADC_Enable+0x28>
 800229a:	bf00      	nop
 800229c:	20000000 	.word	0x20000000
 80022a0:	000f4240 	.word	0x000f4240

080022a4 <HAL_ADC_Start_DMA>:
{
 80022a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022a8:	4b40      	ldr	r3, [pc, #256]	; (80023ac <HAL_ADC_Start_DMA+0x108>)
{
 80022aa:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022ac:	6802      	ldr	r2, [r0, #0]
{
 80022ae:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022b0:	429a      	cmp	r2, r3
{
 80022b2:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022b4:	d002      	beq.n	80022bc <HAL_ADC_Start_DMA+0x18>
 80022b6:	493e      	ldr	r1, [pc, #248]	; (80023b0 <HAL_ADC_Start_DMA+0x10c>)
 80022b8:	428a      	cmp	r2, r1
 80022ba:	d103      	bne.n	80022c4 <HAL_ADC_Start_DMA+0x20>
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80022c2:	d16e      	bne.n	80023a2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80022c4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d06c      	beq.n	80023a6 <HAL_ADC_Start_DMA+0x102>
 80022cc:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80022ce:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80022d0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80022d4:	f7ff ffaa 	bl	800222c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80022d8:	4606      	mov	r6, r0
 80022da:	2800      	cmp	r0, #0
 80022dc:	d15d      	bne.n	800239a <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80022de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022e0:	6821      	ldr	r1, [r4, #0]
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80022e4:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 80022e8:	f025 0501 	bic.w	r5, r5, #1
 80022ec:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022f0:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80022f2:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022f4:	d104      	bne.n	8002300 <HAL_ADC_Start_DMA+0x5c>
 80022f6:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <HAL_ADC_Start_DMA+0x108>)
 80022f8:	6853      	ldr	r3, [r2, #4]
 80022fa:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80022fe:	d13e      	bne.n	800237e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002302:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002306:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002308:	684b      	ldr	r3, [r1, #4]
 800230a:	055a      	lsls	r2, r3, #21
 800230c:	d505      	bpl.n	800231a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800230e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002310:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002318:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800231a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800231c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800231e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002322:	bf18      	it	ne
 8002324:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002326:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002328:	bf18      	it	ne
 800232a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800232e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002330:	2300      	movs	r3, #0
 8002332:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002336:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002338:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800233a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_ADC_Start_DMA+0x114>)
 800233e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002340:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <HAL_ADC_Start_DMA+0x118>)
 8002342:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002344:	f06f 0302 	mvn.w	r3, #2
 8002348:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800234c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002358:	4643      	mov	r3, r8
 800235a:	f000 f9e9 	bl	8002730 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002366:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	bf0c      	ite	eq
 800236e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002372:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8002376:	609a      	str	r2, [r3, #8]
}
 8002378:	4630      	mov	r0, r6
 800237a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800237e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002384:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002386:	6853      	ldr	r3, [r2, #4]
 8002388:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800238a:	bf41      	itttt	mi
 800238c:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800238e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8002392:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8002396:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8002398:	e7bf      	b.n	800231a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800239a:	2300      	movs	r3, #0
 800239c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80023a0:	e7ea      	b.n	8002378 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80023a2:	2601      	movs	r6, #1
 80023a4:	e7e8      	b.n	8002378 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80023a6:	2602      	movs	r6, #2
 80023a8:	e7e6      	b.n	8002378 <HAL_ADC_Start_DMA+0xd4>
 80023aa:	bf00      	nop
 80023ac:	40012400 	.word	0x40012400
 80023b0:	40012800 	.word	0x40012800
 80023b4:	08001fd7 	.word	0x08001fd7
 80023b8:	08002027 	.word	0x08002027
 80023bc:	08002117 	.word	0x08002117

080023c0 <ADC_ConversionStop_Disable>:
{
 80023c0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023c2:	6803      	ldr	r3, [r0, #0]
{
 80023c4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	07d1      	lsls	r1, r2, #31
 80023ca:	d401      	bmi.n	80023d0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80023cc:	2000      	movs	r0, #0
}
 80023ce:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80023d8:	f7ff fdf6 	bl	8001fc8 <HAL_GetTick>
 80023dc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	07db      	lsls	r3, r3, #31
 80023e4:	d5f2      	bpl.n	80023cc <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023e6:	f7ff fdef 	bl	8001fc8 <HAL_GetTick>
 80023ea:	1b40      	subs	r0, r0, r5
 80023ec:	2802      	cmp	r0, #2
 80023ee:	d9f6      	bls.n	80023de <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	07da      	lsls	r2, r3, #31
 80023f6:	d5f2      	bpl.n	80023de <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fc:	f043 0310 	orr.w	r3, r3, #16
 8002400:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002402:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800240a:	e7e0      	b.n	80023ce <ADC_ConversionStop_Disable+0xe>

0800240c <HAL_ADC_Init>:
{
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800240e:	4604      	mov	r4, r0
 8002410:	2800      	cmp	r0, #0
 8002412:	d06e      	beq.n	80024f2 <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002414:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002416:	b923      	cbnz	r3, 8002422 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002418:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800241a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800241e:	f7ff f875 	bl	800150c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002422:	4620      	mov	r0, r4
 8002424:	f7ff ffcc 	bl	80023c0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002428:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800242a:	f013 0310 	ands.w	r3, r3, #16
 800242e:	d162      	bne.n	80024f6 <HAL_ADC_Init+0xea>
 8002430:	2800      	cmp	r0, #0
 8002432:	d160      	bne.n	80024f6 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8002434:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002436:	69e5      	ldr	r5, [r4, #28]
 8002438:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800243a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800243e:	f022 0202 	bic.w	r2, r2, #2
 8002442:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002446:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002448:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800244a:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800244c:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800244e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002452:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002456:	d037      	beq.n	80024c8 <HAL_ADC_Init+0xbc>
 8002458:	2d01      	cmp	r5, #1
 800245a:	bf14      	ite	ne
 800245c:	2700      	movne	r7, #0
 800245e:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002462:	7d26      	ldrb	r6, [r4, #20]
 8002464:	2e01      	cmp	r6, #1
 8002466:	d106      	bne.n	8002476 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002468:	bb82      	cbnz	r2, 80024cc <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800246a:	69a2      	ldr	r2, [r4, #24]
 800246c:	3a01      	subs	r2, #1
 800246e:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8002472:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002476:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002478:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800247c:	6856      	ldr	r6, [r2, #4]
 800247e:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8002482:	ea46 0607 	orr.w	r6, r6, r7
 8002486:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002488:	6897      	ldr	r7, [r2, #8]
 800248a:	4e1d      	ldr	r6, [pc, #116]	; (8002500 <HAL_ADC_Init+0xf4>)
 800248c:	ea06 0607 	and.w	r6, r6, r7
 8002490:	ea46 0601 	orr.w	r6, r6, r1
 8002494:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002496:	d001      	beq.n	800249c <HAL_ADC_Init+0x90>
 8002498:	2d01      	cmp	r5, #1
 800249a:	d102      	bne.n	80024a2 <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800249c:	6923      	ldr	r3, [r4, #16]
 800249e:	3b01      	subs	r3, #1
 80024a0:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80024a2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80024a4:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80024a8:	432b      	orrs	r3, r5
 80024aa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024ac:	6892      	ldr	r2, [r2, #8]
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_ADC_Init+0xf8>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	4299      	cmp	r1, r3
 80024b4:	d113      	bne.n	80024de <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 80024b6:	2300      	movs	r3, #0
 80024b8:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80024ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024bc:	f023 0303 	bic.w	r3, r3, #3
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80024c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80024c8:	462f      	mov	r7, r5
 80024ca:	e7ca      	b.n	8002462 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024ce:	f042 0220 	orr.w	r2, r2, #32
 80024d2:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	62e2      	str	r2, [r4, #44]	; 0x2c
 80024dc:	e7cb      	b.n	8002476 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 80024de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024e0:	f023 0312 	bic.w	r3, r3, #18
 80024e4:	f043 0310 	orr.w	r3, r3, #16
 80024e8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80024f2:	2001      	movs	r0, #1
 80024f4:	e7e7      	b.n	80024c6 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024f8:	f043 0310 	orr.w	r3, r3, #16
 80024fc:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80024fe:	e7f8      	b.n	80024f2 <HAL_ADC_Init+0xe6>
 8002500:	ffe1f7fd 	.word	0xffe1f7fd
 8002504:	ff1f0efe 	.word	0xff1f0efe

08002508 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002508:	4770      	bx	lr

0800250a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800250a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800250c:	4604      	mov	r4, r0
 800250e:	2800      	cmp	r0, #0
 8002510:	d06e      	beq.n	80025f0 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002512:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002516:	b90b      	cbnz	r3, 800251c <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002518:	f7ff f866 	bl	80015e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800251c:	6822      	ldr	r2, [r4, #0]
 800251e:	6813      	ldr	r3, [r2, #0]
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002526:	f7ff fd4f 	bl	8001fc8 <HAL_GetTick>
 800252a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	07d1      	lsls	r1, r2, #31
 8002532:	d551      	bpl.n	80025d8 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f022 0202 	bic.w	r2, r2, #2
 800253a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800253c:	f7ff fd44 	bl	8001fc8 <HAL_GetTick>
 8002540:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	0792      	lsls	r2, r2, #30
 8002548:	d454      	bmi.n	80025f4 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800254a:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800254c:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800254e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	bf0c      	ite	eq
 8002554:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002558:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800255c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800255e:	7e62      	ldrb	r2, [r4, #25]
 8002560:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	bf0c      	ite	eq
 8002566:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800256a:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800256e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002570:	7ea2      	ldrb	r2, [r4, #26]
 8002572:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	bf0c      	ite	eq
 8002578:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800257c:	f022 0220 	bicne.w	r2, r2, #32
 8002580:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002582:	7ee2      	ldrb	r2, [r4, #27]
 8002584:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	bf0c      	ite	eq
 800258a:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800258e:	f042 0210 	orrne.w	r2, r2, #16
 8002592:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002594:	7f22      	ldrb	r2, [r4, #28]
 8002596:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	bf0c      	ite	eq
 800259c:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025a0:	f022 0208 	bicne.w	r2, r2, #8
 80025a4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025a6:	7f62      	ldrb	r2, [r4, #29]
 80025a8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	bf0c      	ite	eq
 80025ae:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025b2:	f022 0204 	bicne.w	r2, r2, #4
 80025b6:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80025bc:	430a      	orrs	r2, r1
 80025be:	6921      	ldr	r1, [r4, #16]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	6961      	ldr	r1, [r4, #20]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	6861      	ldr	r1, [r4, #4]
 80025c8:	3901      	subs	r1, #1
 80025ca:	430a      	orrs	r2, r1
 80025cc:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025ce:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025d0:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80025d2:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80025d6:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025d8:	f7ff fcf6 	bl	8001fc8 <HAL_GetTick>
 80025dc:	1b40      	subs	r0, r0, r5
 80025de:	280a      	cmp	r0, #10
 80025e0:	d9a4      	bls.n	800252c <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e8:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80025ea:	2305      	movs	r3, #5
 80025ec:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80025f0:	2001      	movs	r0, #1
 80025f2:	e7f0      	b.n	80025d6 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025f4:	f7ff fce8 	bl	8001fc8 <HAL_GetTick>
 80025f8:	1b40      	subs	r0, r0, r5
 80025fa:	280a      	cmp	r0, #10
 80025fc:	d9a1      	bls.n	8002542 <HAL_CAN_Init+0x38>
 80025fe:	e7f0      	b.n	80025e2 <HAL_CAN_Init+0xd8>

08002600 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4907      	ldr	r1, [pc, #28]	; (8002620 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002602:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800260e:	0412      	lsls	r2, r2, #16
 8002610:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800261c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002626:	b530      	push	{r4, r5, lr}
 8002628:	68dc      	ldr	r4, [r3, #12]
 800262a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	2b04      	cmp	r3, #4
 8002636:	bf28      	it	cs
 8002638:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002640:	bf98      	it	ls
 8002642:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002648:	bf88      	it	hi
 800264a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	ea21 0303 	bic.w	r3, r1, r3
 8002650:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002652:	fa05 f404 	lsl.w	r4, r5, r4
 8002656:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800265a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	bfac      	ite	ge
 8002662:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	4a07      	ldrlt	r2, [pc, #28]	; (8002684 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800266c:	b2db      	uxtb	r3, r3
 800266e:	bfab      	itete	ge
 8002670:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800267e:	bd30      	pop	{r4, r5, pc}
 8002680:	e000ed00 	.word	0xe000ed00
 8002684:	e000ed14 	.word	0xe000ed14

08002688 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002688:	2800      	cmp	r0, #0
 800268a:	db08      	blt.n	800269e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268c:	2301      	movs	r3, #1
 800268e:	0942      	lsrs	r2, r0, #5
 8002690:	f000 001f 	and.w	r0, r0, #31
 8002694:	fa03 f000 	lsl.w	r0, r3, r0
 8002698:	4b01      	ldr	r3, [pc, #4]	; (80026a0 <HAL_NVIC_EnableIRQ+0x18>)
 800269a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a4:	3801      	subs	r0, #1
 80026a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80026aa:	d20b      	bcs.n	80026c4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	21f0      	movs	r1, #240	; 0xf0
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ba:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026bc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026be:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80026c4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026cc:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026ce:	b348      	cbz	r0, 8002724 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026d0:	2214      	movs	r2, #20
 80026d2:	6801      	ldr	r1, [r0, #0]
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <HAL_DMA_Init+0x5c>)
 80026d6:	440b      	add	r3, r1
 80026d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_DMA_Init+0x60>)
 80026e2:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e4:	2302      	movs	r3, #2
 80026e6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026ea:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80026ee:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f0:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80026f2:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f4:	4323      	orrs	r3, r4
 80026f6:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026f8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fc:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fe:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002700:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002704:	4323      	orrs	r3, r4
 8002706:	6984      	ldr	r4, [r0, #24]
 8002708:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800270a:	69c4      	ldr	r4, [r0, #28]
 800270c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800270e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002710:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002712:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002714:	2300      	movs	r3, #0
 8002716:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002718:	f880 3020 	strb.w	r3, [r0, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800271c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  return HAL_OK;
 8002720:	4618      	mov	r0, r3
}
 8002722:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002724:	2001      	movs	r0, #1
 8002726:	e7fc      	b.n	8002722 <HAL_DMA_Init+0x56>
 8002728:	bffdfff8 	.word	0xbffdfff8
 800272c:	40020000 	.word	0x40020000

08002730 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002730:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002732:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002736:	2c01      	cmp	r4, #1
 8002738:	d034      	beq.n	80027a4 <HAL_DMA_Start_IT+0x74>
 800273a:	2401      	movs	r4, #1
 800273c:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002740:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8002744:	2600      	movs	r6, #0
 8002746:	2c01      	cmp	r4, #1
 8002748:	b2e5      	uxtb	r5, r4
 800274a:	f04f 0402 	mov.w	r4, #2
 800274e:	d127      	bne.n	80027a0 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002750:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002754:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002756:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002758:	6826      	ldr	r6, [r4, #0]
 800275a:	f026 0601 	bic.w	r6, r6, #1
 800275e:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002760:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8002764:	40bd      	lsls	r5, r7
 8002766:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002768:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276a:	6843      	ldr	r3, [r0, #4]
 800276c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800276e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002770:	bf0b      	itete	eq
 8002772:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002774:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002776:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002778:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800277a:	b14b      	cbz	r3, 8002790 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002784:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6023      	str	r3, [r4, #0]
}
 800278e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	f043 030a 	orr.w	r3, r3, #10
 800279e:	e7f0      	b.n	8002782 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80027a0:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80027a4:	2002      	movs	r0, #2
 80027a6:	e7f2      	b.n	800278e <HAL_DMA_Start_IT+0x5e>

080027a8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d006      	beq.n	80027be <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b0:	2304      	movs	r3, #4
 80027b2:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80027b4:	2300      	movs	r3, #0
 80027b6:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80027ba:	2001      	movs	r0, #1
 80027bc:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027be:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027c0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	f022 020e 	bic.w	r2, r2, #14
 80027c8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027d2:	2201      	movs	r2, #1
 80027d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	604b      	str	r3, [r1, #4]
  __HAL_UNLOCK(hdma);      
 80027dc:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80027de:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80027e2:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 80027e6:	4618      	mov	r0, r3
}
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_DMA_Abort_IT>:
{  
 80027ec:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027ee:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d003      	beq.n	80027fe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f6:	2304      	movs	r3, #4
 80027f8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
}
 80027fc:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027fe:	6803      	ldr	r3, [r0, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	f022 020e 	bic.w	r2, r2, #14
 8002806:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002810:	4a18      	ldr	r2, [pc, #96]	; (8002874 <HAL_DMA_Abort_IT+0x88>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01f      	beq.n	8002856 <HAL_DMA_Abort_IT+0x6a>
 8002816:	3214      	adds	r2, #20
 8002818:	4293      	cmp	r3, r2
 800281a:	d01e      	beq.n	800285a <HAL_DMA_Abort_IT+0x6e>
 800281c:	3214      	adds	r2, #20
 800281e:	4293      	cmp	r3, r2
 8002820:	d01d      	beq.n	800285e <HAL_DMA_Abort_IT+0x72>
 8002822:	3214      	adds	r2, #20
 8002824:	4293      	cmp	r3, r2
 8002826:	d01d      	beq.n	8002864 <HAL_DMA_Abort_IT+0x78>
 8002828:	3214      	adds	r2, #20
 800282a:	4293      	cmp	r3, r2
 800282c:	d01d      	beq.n	800286a <HAL_DMA_Abort_IT+0x7e>
 800282e:	3214      	adds	r2, #20
 8002830:	4293      	cmp	r3, r2
 8002832:	bf0c      	ite	eq
 8002834:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002838:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800283e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002840:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002842:	2301      	movs	r3, #1
 8002844:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002848:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800284a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800284e:	b17b      	cbz	r3, 8002870 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002850:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	4620      	mov	r0, r4
 8002854:	e7d2      	b.n	80027fc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002856:	2301      	movs	r3, #1
 8002858:	e7f0      	b.n	800283c <HAL_DMA_Abort_IT+0x50>
 800285a:	2310      	movs	r3, #16
 800285c:	e7ee      	b.n	800283c <HAL_DMA_Abort_IT+0x50>
 800285e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002862:	e7eb      	b.n	800283c <HAL_DMA_Abort_IT+0x50>
 8002864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002868:	e7e8      	b.n	800283c <HAL_DMA_Abort_IT+0x50>
 800286a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800286e:	e7e5      	b.n	800283c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002870:	4618      	mov	r0, r3
 8002872:	e7c3      	b.n	80027fc <HAL_DMA_Abort_IT+0x10>
 8002874:	40020008 	.word	0x40020008
 8002878:	40020000 	.word	0x40020000

0800287c <HAL_DMA_IRQHandler>:
{
 800287c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800287e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002880:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002882:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002884:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002886:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002888:	4095      	lsls	r5, r2
 800288a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800288c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800288e:	d032      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x7a>
 8002890:	074d      	lsls	r5, r1, #29
 8002892:	d530      	bpl.n	80028f6 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002898:	bf5e      	ittt	pl
 800289a:	681a      	ldrpl	r2, [r3, #0]
 800289c:	f022 0204 	bicpl.w	r2, r2, #4
 80028a0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028a2:	4a3e      	ldr	r2, [pc, #248]	; (800299c <HAL_DMA_IRQHandler+0x120>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d019      	beq.n	80028dc <HAL_DMA_IRQHandler+0x60>
 80028a8:	3214      	adds	r2, #20
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d018      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x64>
 80028ae:	3214      	adds	r2, #20
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d017      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x68>
 80028b4:	3214      	adds	r2, #20
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d017      	beq.n	80028ea <HAL_DMA_IRQHandler+0x6e>
 80028ba:	3214      	adds	r2, #20
 80028bc:	4293      	cmp	r3, r2
 80028be:	d017      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x74>
 80028c0:	3214      	adds	r2, #20
 80028c2:	4293      	cmp	r3, r2
 80028c4:	bf0c      	ite	eq
 80028c6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80028ca:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80028ce:	4a34      	ldr	r2, [pc, #208]	; (80029a0 <HAL_DMA_IRQHandler+0x124>)
 80028d0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80028d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d05e      	beq.n	8002996 <HAL_DMA_IRQHandler+0x11a>
}
 80028d8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80028da:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028dc:	2304      	movs	r3, #4
 80028de:	e7f6      	b.n	80028ce <HAL_DMA_IRQHandler+0x52>
 80028e0:	2340      	movs	r3, #64	; 0x40
 80028e2:	e7f4      	b.n	80028ce <HAL_DMA_IRQHandler+0x52>
 80028e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e8:	e7f1      	b.n	80028ce <HAL_DMA_IRQHandler+0x52>
 80028ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ee:	e7ee      	b.n	80028ce <HAL_DMA_IRQHandler+0x52>
 80028f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028f4:	e7eb      	b.n	80028ce <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028f6:	2502      	movs	r5, #2
 80028f8:	4095      	lsls	r5, r2
 80028fa:	4225      	tst	r5, r4
 80028fc:	d035      	beq.n	800296a <HAL_DMA_IRQHandler+0xee>
 80028fe:	078d      	lsls	r5, r1, #30
 8002900:	d533      	bpl.n	800296a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	0694      	lsls	r4, r2, #26
 8002906:	d406      	bmi.n	8002916 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	f022 020a 	bic.w	r2, r2, #10
 800290e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002910:	2201      	movs	r2, #1
 8002912:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002916:	4a21      	ldr	r2, [pc, #132]	; (800299c <HAL_DMA_IRQHandler+0x120>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d019      	beq.n	8002950 <HAL_DMA_IRQHandler+0xd4>
 800291c:	3214      	adds	r2, #20
 800291e:	4293      	cmp	r3, r2
 8002920:	d018      	beq.n	8002954 <HAL_DMA_IRQHandler+0xd8>
 8002922:	3214      	adds	r2, #20
 8002924:	4293      	cmp	r3, r2
 8002926:	d017      	beq.n	8002958 <HAL_DMA_IRQHandler+0xdc>
 8002928:	3214      	adds	r2, #20
 800292a:	4293      	cmp	r3, r2
 800292c:	d017      	beq.n	800295e <HAL_DMA_IRQHandler+0xe2>
 800292e:	3214      	adds	r2, #20
 8002930:	4293      	cmp	r3, r2
 8002932:	d017      	beq.n	8002964 <HAL_DMA_IRQHandler+0xe8>
 8002934:	3214      	adds	r2, #20
 8002936:	4293      	cmp	r3, r2
 8002938:	bf0c      	ite	eq
 800293a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800293e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002942:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_DMA_IRQHandler+0x124>)
 8002944:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002946:	2300      	movs	r3, #0
 8002948:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800294c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800294e:	e7c1      	b.n	80028d4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002950:	2302      	movs	r3, #2
 8002952:	e7f6      	b.n	8002942 <HAL_DMA_IRQHandler+0xc6>
 8002954:	2320      	movs	r3, #32
 8002956:	e7f4      	b.n	8002942 <HAL_DMA_IRQHandler+0xc6>
 8002958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800295c:	e7f1      	b.n	8002942 <HAL_DMA_IRQHandler+0xc6>
 800295e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002962:	e7ee      	b.n	8002942 <HAL_DMA_IRQHandler+0xc6>
 8002964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002968:	e7eb      	b.n	8002942 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800296a:	2508      	movs	r5, #8
 800296c:	4095      	lsls	r5, r2
 800296e:	4225      	tst	r5, r4
 8002970:	d011      	beq.n	8002996 <HAL_DMA_IRQHandler+0x11a>
 8002972:	0709      	lsls	r1, r1, #28
 8002974:	d50f      	bpl.n	8002996 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	f021 010e 	bic.w	r1, r1, #14
 800297c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800297e:	2301      	movs	r3, #1
 8002980:	fa03 f202 	lsl.w	r2, r3, r2
 8002984:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002986:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002988:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800298c:	2300      	movs	r3, #0
 800298e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002992:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002994:	e79e      	b.n	80028d4 <HAL_DMA_IRQHandler+0x58>
}
 8002996:	bc70      	pop	{r4, r5, r6}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40020008 	.word	0x40020008
 80029a0:	40020000 	.word	0x40020000

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029a8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80029aa:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029ac:	4f64      	ldr	r7, [pc, #400]	; (8002b40 <HAL_GPIO_Init+0x19c>)
 80029ae:	4b65      	ldr	r3, [pc, #404]	; (8002b44 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80029b0:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002b48 <HAL_GPIO_Init+0x1a4>
 80029b4:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002b4c <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b8:	680d      	ldr	r5, [r1, #0]
 80029ba:	fa35 f406 	lsrs.w	r4, r5, r6
 80029be:	d102      	bne.n	80029c6 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80029c0:	b003      	add	sp, #12
 80029c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80029c6:	f04f 0801 	mov.w	r8, #1
 80029ca:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ce:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80029d2:	ea38 0505 	bics.w	r5, r8, r5
 80029d6:	d17b      	bne.n	8002ad0 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80029d8:	684d      	ldr	r5, [r1, #4]
 80029da:	2d03      	cmp	r5, #3
 80029dc:	d807      	bhi.n	80029ee <HAL_GPIO_Init+0x4a>
 80029de:	3d01      	subs	r5, #1
 80029e0:	2d02      	cmp	r5, #2
 80029e2:	f200 8088 	bhi.w	8002af6 <HAL_GPIO_Init+0x152>
 80029e6:	e8df f005 	tbb	[pc, r5]
 80029ea:	9b96      	.short	0x9b96
 80029ec:	a1          	.byte	0xa1
 80029ed:	00          	.byte	0x00
 80029ee:	2d12      	cmp	r5, #18
 80029f0:	f000 8099 	beq.w	8002b26 <HAL_GPIO_Init+0x182>
 80029f4:	d86e      	bhi.n	8002ad4 <HAL_GPIO_Init+0x130>
 80029f6:	2d11      	cmp	r5, #17
 80029f8:	f000 808f 	beq.w	8002b1a <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029fc:	2cff      	cmp	r4, #255	; 0xff
 80029fe:	bf98      	it	ls
 8002a00:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a02:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a06:	bf88      	it	hi
 8002a08:	f100 0a04 	addhi.w	sl, r0, #4
 8002a0c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a10:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a14:	bf88      	it	hi
 8002a16:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a18:	fa09 fb05 	lsl.w	fp, r9, r5
 8002a1c:	ea28 080b 	bic.w	r8, r8, fp
 8002a20:	fa02 f505 	lsl.w	r5, r2, r5
 8002a24:	ea48 0505 	orr.w	r5, r8, r5
 8002a28:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a2c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002a30:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002a34:	d04c      	beq.n	8002ad0 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a36:	69bd      	ldr	r5, [r7, #24]
 8002a38:	f026 0803 	bic.w	r8, r6, #3
 8002a3c:	f045 0501 	orr.w	r5, r5, #1
 8002a40:	61bd      	str	r5, [r7, #24]
 8002a42:	69bd      	ldr	r5, [r7, #24]
 8002a44:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002a48:	f005 0501 	and.w	r5, r5, #1
 8002a4c:	9501      	str	r5, [sp, #4]
 8002a4e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a52:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a56:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a58:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002a5c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a60:	fa09 f90b 	lsl.w	r9, r9, fp
 8002a64:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a68:	4d39      	ldr	r5, [pc, #228]	; (8002b50 <HAL_GPIO_Init+0x1ac>)
 8002a6a:	42a8      	cmp	r0, r5
 8002a6c:	d062      	beq.n	8002b34 <HAL_GPIO_Init+0x190>
 8002a6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a72:	42a8      	cmp	r0, r5
 8002a74:	d060      	beq.n	8002b38 <HAL_GPIO_Init+0x194>
 8002a76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a7a:	42a8      	cmp	r0, r5
 8002a7c:	d05e      	beq.n	8002b3c <HAL_GPIO_Init+0x198>
 8002a7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a82:	42a8      	cmp	r0, r5
 8002a84:	bf0c      	ite	eq
 8002a86:	2503      	moveq	r5, #3
 8002a88:	2504      	movne	r5, #4
 8002a8a:	fa05 f50b 	lsl.w	r5, r5, fp
 8002a8e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002a92:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a96:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a98:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a9c:	bf14      	ite	ne
 8002a9e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aa0:	43a5      	biceq	r5, r4
 8002aa2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aa4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aaa:	bf14      	ite	ne
 8002aac:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aae:	43a5      	biceq	r5, r4
 8002ab0:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002ab2:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab4:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002ab8:	bf14      	ite	ne
 8002aba:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002abc:	43a5      	biceq	r5, r4
 8002abe:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002ac0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002ac6:	bf14      	ite	ne
 8002ac8:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aca:	ea25 0404 	biceq.w	r4, r5, r4
 8002ace:	601c      	str	r4, [r3, #0]
	position++;
 8002ad0:	3601      	adds	r6, #1
 8002ad2:	e771      	b.n	80029b8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002ad4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002b54 <HAL_GPIO_Init+0x1b0>
 8002ad8:	454d      	cmp	r5, r9
 8002ada:	d00c      	beq.n	8002af6 <HAL_GPIO_Init+0x152>
 8002adc:	d817      	bhi.n	8002b0e <HAL_GPIO_Init+0x16a>
 8002ade:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002ae2:	454d      	cmp	r5, r9
 8002ae4:	d007      	beq.n	8002af6 <HAL_GPIO_Init+0x152>
 8002ae6:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002aea:	454d      	cmp	r5, r9
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x152>
 8002aee:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002af2:	454d      	cmp	r5, r9
 8002af4:	d182      	bne.n	80029fc <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002af6:	688a      	ldr	r2, [r1, #8]
 8002af8:	b1d2      	cbz	r2, 8002b30 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002afa:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002afc:	bf08      	it	eq
 8002afe:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b02:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002b06:	bf18      	it	ne
 8002b08:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002b0c:	e776      	b.n	80029fc <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002b0e:	4565      	cmp	r5, ip
 8002b10:	d0f1      	beq.n	8002af6 <HAL_GPIO_Init+0x152>
 8002b12:	4575      	cmp	r5, lr
 8002b14:	e7ee      	b.n	8002af4 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b16:	68ca      	ldr	r2, [r1, #12]
          break;
 8002b18:	e770      	b.n	80029fc <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b1a:	68ca      	ldr	r2, [r1, #12]
 8002b1c:	3204      	adds	r2, #4
          break;
 8002b1e:	e76d      	b.n	80029fc <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b20:	68ca      	ldr	r2, [r1, #12]
 8002b22:	3208      	adds	r2, #8
          break;
 8002b24:	e76a      	b.n	80029fc <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b26:	68ca      	ldr	r2, [r1, #12]
 8002b28:	320c      	adds	r2, #12
          break;
 8002b2a:	e767      	b.n	80029fc <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	e765      	b.n	80029fc <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b30:	2204      	movs	r2, #4
 8002b32:	e763      	b.n	80029fc <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b34:	2500      	movs	r5, #0
 8002b36:	e7a8      	b.n	8002a8a <HAL_GPIO_Init+0xe6>
 8002b38:	2501      	movs	r5, #1
 8002b3a:	e7a6      	b.n	8002a8a <HAL_GPIO_Init+0xe6>
 8002b3c:	2502      	movs	r5, #2
 8002b3e:	e7a4      	b.n	8002a8a <HAL_GPIO_Init+0xe6>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40010400 	.word	0x40010400
 8002b48:	10310000 	.word	0x10310000
 8002b4c:	10320000 	.word	0x10320000
 8002b50:	40010800 	.word	0x40010800
 8002b54:	10220000 	.word	0x10220000

08002b58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b58:	6883      	ldr	r3, [r0, #8]
 8002b5a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002b5c:	bf14      	ite	ne
 8002b5e:	2001      	movne	r0, #1
 8002b60:	2000      	moveq	r0, #0
 8002b62:	4770      	bx	lr

08002b64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b64:	b10a      	cbz	r2, 8002b6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b66:	6101      	str	r1, [r0, #16]
  }
}
 8002b68:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b6a:	0409      	lsls	r1, r1, #16
 8002b6c:	e7fb      	b.n	8002b66 <HAL_GPIO_WritePin+0x2>

08002b6e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b6e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b70:	ea01 0203 	and.w	r2, r1, r3
 8002b74:	ea21 0103 	bic.w	r1, r1, r3
 8002b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002b7c:	6101      	str	r1, [r0, #16]
}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b80:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b82:	4604      	mov	r4, r0
 8002b84:	b908      	cbnz	r0, 8002b8a <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8002b86:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8002b88:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b92:	b91b      	cbnz	r3, 8002b9c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002b94:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002b98:	f7fe fe16 	bl	80017c8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9c:	2324      	movs	r3, #36	; 0x24
 8002b9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bba:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bbc:	f000 fae6 	bl	800318c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bc0:	4a3f      	ldr	r2, [pc, #252]	; (8002cc0 <HAL_I2C_Init+0x140>)
 8002bc2:	6863      	ldr	r3, [r4, #4]
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	bf94      	ite	ls
 8002bc8:	4a3e      	ldrls	r2, [pc, #248]	; (8002cc4 <HAL_I2C_Init+0x144>)
 8002bca:	4a3f      	ldrhi	r2, [pc, #252]	; (8002cc8 <HAL_I2C_Init+0x148>)
 8002bcc:	4290      	cmp	r0, r2
 8002bce:	bf8c      	ite	hi
 8002bd0:	2200      	movhi	r2, #0
 8002bd2:	2201      	movls	r2, #1
 8002bd4:	2a00      	cmp	r2, #0
 8002bd6:	d1d6      	bne.n	8002b86 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bd8:	4e39      	ldr	r6, [pc, #228]	; (8002cc0 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002bda:	493c      	ldr	r1, [pc, #240]	; (8002ccc <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bdc:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8002bde:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002be2:	bf88      	it	hi
 8002be4:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002be8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bea:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bee:	6855      	ldr	r5, [r2, #4]
 8002bf0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002bf4:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bf8:	bf82      	ittt	hi
 8002bfa:	4371      	mulhi	r1, r6
 8002bfc:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002c00:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c04:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c06:	6a15      	ldr	r5, [r2, #32]
 8002c08:	3101      	adds	r1, #1
 8002c0a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002c0e:	4329      	orrs	r1, r5
 8002c10:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c12:	69d1      	ldr	r1, [r2, #28]
 8002c14:	4d2a      	ldr	r5, [pc, #168]	; (8002cc0 <HAL_I2C_Init+0x140>)
 8002c16:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002c1a:	42ab      	cmp	r3, r5
 8002c1c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002c20:	d832      	bhi.n	8002c88 <HAL_I2C_Init+0x108>
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002c2e:	4203      	tst	r3, r0
 8002c30:	d042      	beq.n	8002cb8 <HAL_I2C_Init+0x138>
 8002c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c36:	430b      	orrs	r3, r1
 8002c38:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c3a:	6811      	ldr	r1, [r2, #0]
 8002c3c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002c40:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002c44:	4303      	orrs	r3, r0
 8002c46:	430b      	orrs	r3, r1
 8002c48:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c4a:	6891      	ldr	r1, [r2, #8]
 8002c4c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002c50:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002c54:	4303      	orrs	r3, r0
 8002c56:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c5e:	68d1      	ldr	r1, [r2, #12]
 8002c60:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002c64:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002c68:	4303      	orrs	r3, r0
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002c6e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c80:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c82:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002c86:	e77f      	b.n	8002b88 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c88:	68a5      	ldr	r5, [r4, #8]
 8002c8a:	b955      	cbnz	r5, 8002ca2 <HAL_I2C_Init+0x122>
 8002c8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	b17b      	cbz	r3, 8002cbc <HAL_I2C_Init+0x13c>
 8002c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca0:	e7c9      	b.n	8002c36 <HAL_I2C_Init+0xb6>
 8002ca2:	2519      	movs	r5, #25
 8002ca4:	436b      	muls	r3, r5
 8002ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb0:	b123      	cbz	r3, 8002cbc <HAL_I2C_Init+0x13c>
 8002cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb6:	e7be      	b.n	8002c36 <HAL_I2C_Init+0xb6>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	e7bc      	b.n	8002c36 <HAL_I2C_Init+0xb6>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e7ba      	b.n	8002c36 <HAL_I2C_Init+0xb6>
 8002cc0:	000186a0 	.word	0x000186a0
 8002cc4:	001e847f 	.word	0x001e847f
 8002cc8:	003d08ff 	.word	0x003d08ff
 8002ccc:	000f4240 	.word	0x000f4240

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	b338      	cbz	r0, 8002d28 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd8:	6803      	ldr	r3, [r0, #0]
 8002cda:	07db      	lsls	r3, r3, #31
 8002cdc:	d410      	bmi.n	8002d00 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	682b      	ldr	r3, [r5, #0]
 8002ce0:	079f      	lsls	r7, r3, #30
 8002ce2:	d45e      	bmi.n	8002da2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	0719      	lsls	r1, r3, #28
 8002ce8:	f100 8095 	bmi.w	8002e16 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cec:	682b      	ldr	r3, [r5, #0]
 8002cee:	075a      	lsls	r2, r3, #29
 8002cf0:	f100 80c1 	bmi.w	8002e76 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf4:	69e8      	ldr	r0, [r5, #28]
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	f040 812c 	bne.w	8002f54 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	e029      	b.n	8002d54 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d00:	4c90      	ldr	r4, [pc, #576]	; (8002f44 <HAL_RCC_OscConfig+0x274>)
 8002d02:	6863      	ldr	r3, [r4, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d007      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d0c:	6863      	ldr	r3, [r4, #4]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d10a      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5c>
 8002d16:	6863      	ldr	r3, [r4, #4]
 8002d18:	03de      	lsls	r6, r3, #15
 8002d1a:	d507      	bpl.n	8002d2c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	039c      	lsls	r4, r3, #14
 8002d20:	d5dd      	bpl.n	8002cde <HAL_RCC_OscConfig+0xe>
 8002d22:	686b      	ldr	r3, [r5, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1da      	bne.n	8002cde <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002d28:	2001      	movs	r0, #1
 8002d2a:	e013      	b.n	8002d54 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2c:	686b      	ldr	r3, [r5, #4]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d112      	bne.n	8002d5a <HAL_RCC_OscConfig+0x8a>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d3c:	f7ff f944 	bl	8001fc8 <HAL_GetTick>
 8002d40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	0398      	lsls	r0, r3, #14
 8002d46:	d4ca      	bmi.n	8002cde <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d48:	f7ff f93e 	bl	8001fc8 <HAL_GetTick>
 8002d4c:	1b80      	subs	r0, r0, r6
 8002d4e:	2864      	cmp	r0, #100	; 0x64
 8002d50:	d9f7      	bls.n	8002d42 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002d52:	2003      	movs	r0, #3
}
 8002d54:	b002      	add	sp, #8
 8002d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5a:	b99b      	cbnz	r3, 8002d84 <HAL_RCC_OscConfig+0xb4>
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d62:	6023      	str	r3, [r4, #0]
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d6c:	f7ff f92c 	bl	8001fc8 <HAL_GetTick>
 8002d70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	0399      	lsls	r1, r3, #14
 8002d76:	d5b2      	bpl.n	8002cde <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d78:	f7ff f926 	bl	8001fc8 <HAL_GetTick>
 8002d7c:	1b80      	subs	r0, r0, r6
 8002d7e:	2864      	cmp	r0, #100	; 0x64
 8002d80:	d9f7      	bls.n	8002d72 <HAL_RCC_OscConfig+0xa2>
 8002d82:	e7e6      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	d103      	bne.n	8002d94 <HAL_RCC_OscConfig+0xc4>
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6023      	str	r3, [r4, #0]
 8002d92:	e7cf      	b.n	8002d34 <HAL_RCC_OscConfig+0x64>
 8002d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d98:	6023      	str	r3, [r4, #0]
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da0:	e7cb      	b.n	8002d3a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002da2:	4c68      	ldr	r4, [pc, #416]	; (8002f44 <HAL_RCC_OscConfig+0x274>)
 8002da4:	6863      	ldr	r3, [r4, #4]
 8002da6:	f013 0f0c 	tst.w	r3, #12
 8002daa:	d007      	beq.n	8002dbc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dac:	6863      	ldr	r3, [r4, #4]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d110      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x108>
 8002db6:	6863      	ldr	r3, [r4, #4]
 8002db8:	03da      	lsls	r2, r3, #15
 8002dba:	d40d      	bmi.n	8002dd8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	079b      	lsls	r3, r3, #30
 8002dc0:	d502      	bpl.n	8002dc8 <HAL_RCC_OscConfig+0xf8>
 8002dc2:	692b      	ldr	r3, [r5, #16]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d1af      	bne.n	8002d28 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	696a      	ldr	r2, [r5, #20]
 8002dcc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002dd0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	e785      	b.n	8002ce4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd8:	692a      	ldr	r2, [r5, #16]
 8002dda:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002ddc:	b16a      	cbz	r2, 8002dfa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002de2:	f7ff f8f1 	bl	8001fc8 <HAL_GetTick>
 8002de6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	079f      	lsls	r7, r3, #30
 8002dec:	d4ec      	bmi.n	8002dc8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dee:	f7ff f8eb 	bl	8001fc8 <HAL_GetTick>
 8002df2:	1b80      	subs	r0, r0, r6
 8002df4:	2802      	cmp	r0, #2
 8002df6:	d9f7      	bls.n	8002de8 <HAL_RCC_OscConfig+0x118>
 8002df8:	e7ab      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002dfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f8e4 	bl	8001fc8 <HAL_GetTick>
 8002e00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	0798      	lsls	r0, r3, #30
 8002e06:	f57f af6d 	bpl.w	8002ce4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7ff f8dd 	bl	8001fc8 <HAL_GetTick>
 8002e0e:	1b80      	subs	r0, r0, r6
 8002e10:	2802      	cmp	r0, #2
 8002e12:	d9f6      	bls.n	8002e02 <HAL_RCC_OscConfig+0x132>
 8002e14:	e79d      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e16:	69aa      	ldr	r2, [r5, #24]
 8002e18:	4e4a      	ldr	r6, [pc, #296]	; (8002f44 <HAL_RCC_OscConfig+0x274>)
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002e1c:	b1e2      	cbz	r2, 8002e58 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002e24:	f7ff f8d0 	bl	8001fc8 <HAL_GetTick>
 8002e28:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e2c:	079b      	lsls	r3, r3, #30
 8002e2e:	d50d      	bpl.n	8002e4c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e30:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002e34:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <HAL_RCC_OscConfig+0x27c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e3c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002e3e:	bf00      	nop
  }
  while (Delay --);
 8002e40:	9b01      	ldr	r3, [sp, #4]
 8002e42:	1e5a      	subs	r2, r3, #1
 8002e44:	9201      	str	r2, [sp, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f9      	bne.n	8002e3e <HAL_RCC_OscConfig+0x16e>
 8002e4a:	e74f      	b.n	8002cec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7ff f8bc 	bl	8001fc8 <HAL_GetTick>
 8002e50:	1b00      	subs	r0, r0, r4
 8002e52:	2802      	cmp	r0, #2
 8002e54:	d9e9      	bls.n	8002e2a <HAL_RCC_OscConfig+0x15a>
 8002e56:	e77c      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002e58:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002e5c:	f7ff f8b4 	bl	8001fc8 <HAL_GetTick>
 8002e60:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e64:	079f      	lsls	r7, r3, #30
 8002e66:	f57f af41 	bpl.w	8002cec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6a:	f7ff f8ad 	bl	8001fc8 <HAL_GetTick>
 8002e6e:	1b00      	subs	r0, r0, r4
 8002e70:	2802      	cmp	r0, #2
 8002e72:	d9f6      	bls.n	8002e62 <HAL_RCC_OscConfig+0x192>
 8002e74:	e76d      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4c33      	ldr	r4, [pc, #204]	; (8002f44 <HAL_RCC_OscConfig+0x274>)
 8002e78:	69e3      	ldr	r3, [r4, #28]
 8002e7a:	00d8      	lsls	r0, r3, #3
 8002e7c:	d424      	bmi.n	8002ec8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8002e7e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e80:	69e3      	ldr	r3, [r4, #28]
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	61e3      	str	r3, [r4, #28]
 8002e88:	69e3      	ldr	r3, [r4, #28]
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4e2f      	ldr	r6, [pc, #188]	; (8002f50 <HAL_RCC_OscConfig+0x280>)
 8002e94:	6833      	ldr	r3, [r6, #0]
 8002e96:	05d9      	lsls	r1, r3, #23
 8002e98:	d518      	bpl.n	8002ecc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9a:	68eb      	ldr	r3, [r5, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d126      	bne.n	8002eee <HAL_RCC_OscConfig+0x21e>
 8002ea0:	6a23      	ldr	r3, [r4, #32]
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002ea8:	f7ff f88e 	bl	8001fc8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eac:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002eb0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb2:	6a23      	ldr	r3, [r4, #32]
 8002eb4:	079b      	lsls	r3, r3, #30
 8002eb6:	d53f      	bpl.n	8002f38 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002eb8:	2f00      	cmp	r7, #0
 8002eba:	f43f af1b 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebe:	69e3      	ldr	r3, [r4, #28]
 8002ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	61e3      	str	r3, [r4, #28]
 8002ec6:	e715      	b.n	8002cf4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002ec8:	2700      	movs	r7, #0
 8002eca:	e7e2      	b.n	8002e92 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ecc:	6833      	ldr	r3, [r6, #0]
 8002ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002ed4:	f7ff f878 	bl	8001fc8 <HAL_GetTick>
 8002ed8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	6833      	ldr	r3, [r6, #0]
 8002edc:	05da      	lsls	r2, r3, #23
 8002ede:	d4dc      	bmi.n	8002e9a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee0:	f7ff f872 	bl	8001fc8 <HAL_GetTick>
 8002ee4:	eba0 0008 	sub.w	r0, r0, r8
 8002ee8:	2864      	cmp	r0, #100	; 0x64
 8002eea:	d9f6      	bls.n	8002eda <HAL_RCC_OscConfig+0x20a>
 8002eec:	e731      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eee:	b9ab      	cbnz	r3, 8002f1c <HAL_RCC_OscConfig+0x24c>
 8002ef0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	6223      	str	r3, [r4, #32]
 8002efc:	6a23      	ldr	r3, [r4, #32]
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002f04:	f7ff f860 	bl	8001fc8 <HAL_GetTick>
 8002f08:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	6a23      	ldr	r3, [r4, #32]
 8002f0c:	0798      	lsls	r0, r3, #30
 8002f0e:	d5d3      	bpl.n	8002eb8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7ff f85a 	bl	8001fc8 <HAL_GetTick>
 8002f14:	1b80      	subs	r0, r0, r6
 8002f16:	4540      	cmp	r0, r8
 8002f18:	d9f7      	bls.n	8002f0a <HAL_RCC_OscConfig+0x23a>
 8002f1a:	e71a      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	6a23      	ldr	r3, [r4, #32]
 8002f20:	d103      	bne.n	8002f2a <HAL_RCC_OscConfig+0x25a>
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	6223      	str	r3, [r4, #32]
 8002f28:	e7ba      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1d0>
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6223      	str	r3, [r4, #32]
 8002f30:	6a23      	ldr	r3, [r4, #32]
 8002f32:	f023 0304 	bic.w	r3, r3, #4
 8002f36:	e7b6      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7ff f846 	bl	8001fc8 <HAL_GetTick>
 8002f3c:	1b80      	subs	r0, r0, r6
 8002f3e:	4540      	cmp	r0, r8
 8002f40:	d9b7      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1e2>
 8002f42:	e706      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
 8002f44:	40021000 	.word	0x40021000
 8002f48:	42420000 	.word	0x42420000
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f54:	4c2a      	ldr	r4, [pc, #168]	; (8003000 <HAL_RCC_OscConfig+0x330>)
 8002f56:	6863      	ldr	r3, [r4, #4]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d03e      	beq.n	8002fde <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f60:	2200      	movs	r2, #0
 8002f62:	4b28      	ldr	r3, [pc, #160]	; (8003004 <HAL_RCC_OscConfig+0x334>)
 8002f64:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002f66:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f68:	d12c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002f6a:	f7ff f82d 	bl	8001fc8 <HAL_GetTick>
 8002f6e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	0199      	lsls	r1, r3, #6
 8002f74:	d420      	bmi.n	8002fb8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f76:	6a2b      	ldr	r3, [r5, #32]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d105      	bne.n	8002f8a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f7e:	6862      	ldr	r2, [r4, #4]
 8002f80:	68a9      	ldr	r1, [r5, #8]
 8002f82:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f86:	430a      	orrs	r2, r1
 8002f88:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002f8c:	6862      	ldr	r2, [r4, #4]
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002f94:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002f96:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f98:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <HAL_RCC_OscConfig+0x334>)
 8002f9c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002f9e:	f7ff f813 	bl	8001fc8 <HAL_GetTick>
 8002fa2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	019a      	lsls	r2, r3, #6
 8002fa8:	f53f aea8 	bmi.w	8002cfc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7ff f80c 	bl	8001fc8 <HAL_GetTick>
 8002fb0:	1b40      	subs	r0, r0, r5
 8002fb2:	2802      	cmp	r0, #2
 8002fb4:	d9f6      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x2d4>
 8002fb6:	e6cc      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7ff f806 	bl	8001fc8 <HAL_GetTick>
 8002fbc:	1b80      	subs	r0, r0, r6
 8002fbe:	2802      	cmp	r0, #2
 8002fc0:	d9d6      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2a0>
 8002fc2:	e6c6      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002fc4:	f7ff f800 	bl	8001fc8 <HAL_GetTick>
 8002fc8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	f57f ae95 	bpl.w	8002cfc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe fff9 	bl	8001fc8 <HAL_GetTick>
 8002fd6:	1b40      	subs	r0, r0, r5
 8002fd8:	2802      	cmp	r0, #2
 8002fda:	d9f6      	bls.n	8002fca <HAL_RCC_OscConfig+0x2fa>
 8002fdc:	e6b9      	b.n	8002d52 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fde:	2801      	cmp	r0, #1
 8002fe0:	f43f aeb8 	beq.w	8002d54 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8002fe4:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	6a2a      	ldr	r2, [r5, #32]
 8002fe8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002fec:	4291      	cmp	r1, r2
 8002fee:	f47f ae9b 	bne.w	8002d28 <HAL_RCC_OscConfig+0x58>
 8002ff2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ff4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	f43f ae7f 	beq.w	8002cfc <HAL_RCC_OscConfig+0x2c>
 8002ffe:	e693      	b.n	8002d28 <HAL_RCC_OscConfig+0x58>
 8003000:	40021000 	.word	0x40021000
 8003004:	42420000 	.word	0x42420000

08003008 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003008:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <HAL_RCC_GetSysClockFreq+0x38>)
 800300a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800300c:	f003 010c 	and.w	r1, r3, #12
 8003010:	2908      	cmp	r1, #8
 8003012:	d112      	bne.n	800303a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003014:	480b      	ldr	r0, [pc, #44]	; (8003044 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003016:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800301a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800301c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800301e:	d509      	bpl.n	8003034 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003020:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003024:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003028:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_RCC_GetSysClockFreq+0x44>)
 800302c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800302e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003032:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_GetSysClockFreq+0x48>)
 8003036:	4358      	muls	r0, r3
 8003038:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800303a:	4803      	ldr	r0, [pc, #12]	; (8003048 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	080088c8 	.word	0x080088c8
 8003048:	007a1200 	.word	0x007a1200
 800304c:	080088d8 	.word	0x080088d8
 8003050:	003d0900 	.word	0x003d0900

08003054 <HAL_RCC_ClockConfig>:
{
 8003054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003058:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800305a:	4604      	mov	r4, r0
 800305c:	b910      	cbnz	r0, 8003064 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800305e:	2001      	movs	r0, #1
}
 8003060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003064:	4a44      	ldr	r2, [pc, #272]	; (8003178 <HAL_RCC_ClockConfig+0x124>)
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	428b      	cmp	r3, r1
 800306e:	d328      	bcc.n	80030c2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	6821      	ldr	r1, [r4, #0]
 8003072:	078e      	lsls	r6, r1, #30
 8003074:	d430      	bmi.n	80030d8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003076:	07ca      	lsls	r2, r1, #31
 8003078:	d443      	bmi.n	8003102 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307a:	4a3f      	ldr	r2, [pc, #252]	; (8003178 <HAL_RCC_ClockConfig+0x124>)
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	42ab      	cmp	r3, r5
 8003084:	d865      	bhi.n	8003152 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	4d3c      	ldr	r5, [pc, #240]	; (800317c <HAL_RCC_ClockConfig+0x128>)
 800308a:	f012 0f04 	tst.w	r2, #4
 800308e:	d16c      	bne.n	800316a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003090:	0713      	lsls	r3, r2, #28
 8003092:	d506      	bpl.n	80030a2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003094:	686b      	ldr	r3, [r5, #4]
 8003096:	6922      	ldr	r2, [r4, #16]
 8003098:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800309c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80030a0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a2:	f7ff ffb1 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 80030a6:	686b      	ldr	r3, [r5, #4]
 80030a8:	4a35      	ldr	r2, [pc, #212]	; (8003180 <HAL_RCC_ClockConfig+0x12c>)
 80030aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	40d8      	lsrs	r0, r3
 80030b2:	4b34      	ldr	r3, [pc, #208]	; (8003184 <HAL_RCC_ClockConfig+0x130>)
 80030b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80030b6:	4b34      	ldr	r3, [pc, #208]	; (8003188 <HAL_RCC_ClockConfig+0x134>)
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	f7fe ff43 	bl	8001f44 <HAL_InitTick>
  return HAL_OK;
 80030be:	2000      	movs	r0, #0
 80030c0:	e7ce      	b.n	8003060 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	6813      	ldr	r3, [r2, #0]
 80030c4:	f023 0307 	bic.w	r3, r3, #7
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030cc:	6813      	ldr	r3, [r2, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	428b      	cmp	r3, r1
 80030d4:	d1c3      	bne.n	800305e <HAL_RCC_ClockConfig+0xa>
 80030d6:	e7cb      	b.n	8003070 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_RCC_ClockConfig+0x128>)
 80030da:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030de:	bf1e      	ittt	ne
 80030e0:	685a      	ldrne	r2, [r3, #4]
 80030e2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80030e6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ea:	bf42      	ittt	mi
 80030ec:	685a      	ldrmi	r2, [r3, #4]
 80030ee:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80030f2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68a0      	ldr	r0, [r4, #8]
 80030f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030fc:	4302      	orrs	r2, r0
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	e7b9      	b.n	8003076 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	6862      	ldr	r2, [r4, #4]
 8003104:	4e1d      	ldr	r6, [pc, #116]	; (800317c <HAL_RCC_ClockConfig+0x128>)
 8003106:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003108:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	d11a      	bne.n	8003142 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	d0a5      	beq.n	800305e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003112:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003114:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003118:	f023 0303 	bic.w	r3, r3, #3
 800311c:	4313      	orrs	r3, r2
 800311e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003120:	f7fe ff52 	bl	8001fc8 <HAL_GetTick>
 8003124:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	6873      	ldr	r3, [r6, #4]
 8003128:	6862      	ldr	r2, [r4, #4]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003132:	d0a2      	beq.n	800307a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fe ff48 	bl	8001fc8 <HAL_GetTick>
 8003138:	1bc0      	subs	r0, r0, r7
 800313a:	4540      	cmp	r0, r8
 800313c:	d9f3      	bls.n	8003126 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800313e:	2003      	movs	r0, #3
 8003140:	e78e      	b.n	8003060 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	2a02      	cmp	r2, #2
 8003144:	d102      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800314a:	e7e1      	b.n	8003110 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	f013 0f02 	tst.w	r3, #2
 8003150:	e7de      	b.n	8003110 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	f023 0307 	bic.w	r3, r3, #7
 8003158:	432b      	orrs	r3, r5
 800315a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315c:	6813      	ldr	r3, [r2, #0]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	42ab      	cmp	r3, r5
 8003164:	f47f af7b 	bne.w	800305e <HAL_RCC_ClockConfig+0xa>
 8003168:	e78d      	b.n	8003086 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316a:	686b      	ldr	r3, [r5, #4]
 800316c:	68e1      	ldr	r1, [r4, #12]
 800316e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003172:	430b      	orrs	r3, r1
 8003174:	606b      	str	r3, [r5, #4]
 8003176:	e78b      	b.n	8003090 <HAL_RCC_ClockConfig+0x3c>
 8003178:	40022000 	.word	0x40022000
 800317c:	40021000 	.word	0x40021000
 8003180:	080088b0 	.word	0x080088b0
 8003184:	20000000 	.word	0x20000000
 8003188:	20000008 	.word	0x20000008

0800318c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800319a:	6810      	ldr	r0, [r2, #0]
}
 800319c:	40d8      	lsrs	r0, r3
 800319e:	4770      	bx	lr
 80031a0:	40021000 	.word	0x40021000
 80031a4:	080088c0 	.word	0x080088c0
 80031a8:	20000000 	.word	0x20000000

080031ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80031ae:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	4a03      	ldr	r2, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031ba:	6810      	ldr	r0, [r2, #0]
}
 80031bc:	40d8      	lsrs	r0, r3
 80031be:	4770      	bx	lr
 80031c0:	40021000 	.word	0x40021000
 80031c4:	080088c0 	.word	0x080088c0
 80031c8:	20000000 	.word	0x20000000

080031cc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031cc:	6803      	ldr	r3, [r0, #0]
{
 80031ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031d2:	07d9      	lsls	r1, r3, #31
{
 80031d4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031d6:	d520      	bpl.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d8:	4c36      	ldr	r4, [pc, #216]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031da:	69e3      	ldr	r3, [r4, #28]
 80031dc:	00da      	lsls	r2, r3, #3
 80031de:	d432      	bmi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80031e0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	69e3      	ldr	r3, [r4, #28]
 80031e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e8:	61e3      	str	r3, [r4, #28]
 80031ea:	69e3      	ldr	r3, [r4, #28]
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4f30      	ldr	r7, [pc, #192]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	05db      	lsls	r3, r3, #23
 80031fa:	d526      	bpl.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031fc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031fe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003202:	d136      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003204:	6a23      	ldr	r3, [r4, #32]
 8003206:	686a      	ldr	r2, [r5, #4]
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	4313      	orrs	r3, r2
 800320e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003210:	b11e      	cbz	r6, 800321a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003212:	69e3      	ldr	r3, [r4, #28]
 8003214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003218:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800321a:	6828      	ldr	r0, [r5, #0]
 800321c:	0783      	lsls	r3, r0, #30
 800321e:	d506      	bpl.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003220:	4924      	ldr	r1, [pc, #144]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003222:	68ab      	ldr	r3, [r5, #8]
 8003224:	684a      	ldr	r2, [r1, #4]
 8003226:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800322a:	431a      	orrs	r2, r3
 800322c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800322e:	f010 0010 	ands.w	r0, r0, #16
 8003232:	d01b      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003234:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003236:	68e9      	ldr	r1, [r5, #12]
 8003238:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800323a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800323c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003240:	430b      	orrs	r3, r1
 8003242:	6053      	str	r3, [r2, #4]
 8003244:	e012      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8003246:	2600      	movs	r6, #0
 8003248:	e7d4      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003250:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003252:	f7fe feb9 	bl	8001fc8 <HAL_GetTick>
 8003256:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	05d8      	lsls	r0, r3, #23
 800325c:	d4ce      	bmi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325e:	f7fe feb3 	bl	8001fc8 <HAL_GetTick>
 8003262:	eba0 0008 	sub.w	r0, r0, r8
 8003266:	2864      	cmp	r0, #100	; 0x64
 8003268:	d9f6      	bls.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800326a:	2003      	movs	r0, #3
}
 800326c:	b002      	add	sp, #8
 800326e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003272:	686a      	ldr	r2, [r5, #4]
 8003274:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003278:	429a      	cmp	r2, r3
 800327a:	d0c3      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800327c:	2001      	movs	r0, #1
 800327e:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003280:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003282:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003286:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003288:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800328c:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8003290:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003292:	07d9      	lsls	r1, r3, #31
 8003294:	d5b6      	bpl.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003296:	f7fe fe97 	bl	8001fc8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800329e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	6a23      	ldr	r3, [r4, #32]
 80032a2:	079a      	lsls	r2, r3, #30
 80032a4:	d4ae      	bmi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fe fe8f 	bl	8001fc8 <HAL_GetTick>
 80032aa:	1bc0      	subs	r0, r0, r7
 80032ac:	4540      	cmp	r0, r8
 80032ae:	d9f7      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032b0:	e7db      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40007000 	.word	0x40007000
 80032bc:	42420000 	.word	0x42420000

080032c0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c2:	6a02      	ldr	r2, [r0, #32]
{
 80032c4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ce:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032d2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80032d6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032d8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80032da:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80032de:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e0:	4d0a      	ldr	r5, [pc, #40]	; (800330c <TIM_OC1_SetConfig+0x4c>)
 80032e2:	42a8      	cmp	r0, r5
 80032e4:	d10b      	bne.n	80032fe <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032e6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80032e8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80032ec:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032ee:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032f2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80032f6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80032f8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80032fc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003300:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003302:	684a      	ldr	r2, [r1, #4]
 8003304:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003306:	6203      	str	r3, [r0, #32]
}
 8003308:	bd70      	pop	{r4, r5, r6, pc}
 800330a:	bf00      	nop
 800330c:	40012c00 	.word	0x40012c00

08003310 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003310:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003312:	6a02      	ldr	r2, [r0, #32]
{
 8003314:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800331a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003320:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003322:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003326:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003328:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800332a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800332e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003332:	4d0b      	ldr	r5, [pc, #44]	; (8003360 <TIM_OC3_SetConfig+0x50>)
 8003334:	42a8      	cmp	r0, r5
 8003336:	d10d      	bne.n	8003354 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003338:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800333a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800333e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003342:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003346:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800334a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800334c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003350:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003354:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003356:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003358:	684a      	ldr	r2, [r1, #4]
 800335a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335c:	6203      	str	r3, [r0, #32]
}
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	40012c00 	.word	0x40012c00

08003364 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003364:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003366:	6a02      	ldr	r2, [r0, #32]
{
 8003368:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800336a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800336e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003370:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003372:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003374:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003376:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800337a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800337e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003384:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003388:	4d06      	ldr	r5, [pc, #24]	; (80033a4 <TIM_OC4_SetConfig+0x40>)
 800338a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800338c:	bf02      	ittt	eq
 800338e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003390:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003394:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003398:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800339a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800339c:	684a      	ldr	r2, [r1, #4]
 800339e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a0:	6203      	str	r3, [r0, #32]
}
 80033a2:	bd30      	pop	{r4, r5, pc}
 80033a4:	40012c00 	.word	0x40012c00

080033a8 <HAL_TIM_PWM_MspInit>:
 80033a8:	4770      	bx	lr
	...

080033ac <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033ac:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80033ae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b0:	4290      	cmp	r0, r2
 80033b2:	d00a      	beq.n	80033ca <TIM_Base_SetConfig+0x1e>
 80033b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033b8:	d007      	beq.n	80033ca <TIM_Base_SetConfig+0x1e>
 80033ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80033be:	4290      	cmp	r0, r2
 80033c0:	d003      	beq.n	80033ca <TIM_Base_SetConfig+0x1e>
 80033c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033c6:	4290      	cmp	r0, r2
 80033c8:	d115      	bne.n	80033f6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80033ca:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80033d0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d2:	4a11      	ldr	r2, [pc, #68]	; (8003418 <TIM_Base_SetConfig+0x6c>)
 80033d4:	4290      	cmp	r0, r2
 80033d6:	d00a      	beq.n	80033ee <TIM_Base_SetConfig+0x42>
 80033d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033dc:	d007      	beq.n	80033ee <TIM_Base_SetConfig+0x42>
 80033de:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80033e2:	4290      	cmp	r0, r2
 80033e4:	d003      	beq.n	80033ee <TIM_Base_SetConfig+0x42>
 80033e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033ea:	4290      	cmp	r0, r2
 80033ec:	d103      	bne.n	80033f6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ee:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80033f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f6:	694a      	ldr	r2, [r1, #20]
 80033f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80033fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003400:	688b      	ldr	r3, [r1, #8]
 8003402:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003404:	680b      	ldr	r3, [r1, #0]
 8003406:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <TIM_Base_SetConfig+0x6c>)
 800340a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800340c:	bf04      	itt	eq
 800340e:	690b      	ldreq	r3, [r1, #16]
 8003410:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003412:	2301      	movs	r3, #1
 8003414:	6143      	str	r3, [r0, #20]
}
 8003416:	4770      	bx	lr
 8003418:	40012c00 	.word	0x40012c00

0800341c <HAL_TIM_Base_Init>:
{
 800341c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800341e:	4604      	mov	r4, r0
 8003420:	b330      	cbz	r0, 8003470 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003422:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003426:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800342a:	b91b      	cbnz	r3, 8003434 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800342c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003430:	f7fe fb3c 	bl	8001aac <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003436:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800343c:	1d21      	adds	r1, r4, #4
 800343e:	f7ff ffb5 	bl	80033ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003442:	2301      	movs	r3, #1
  return HAL_OK;
 8003444:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003446:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800344e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003452:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003456:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800345e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003462:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800346a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800346e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003470:	2001      	movs	r0, #1
 8003472:	e7fc      	b.n	800346e <HAL_TIM_Base_Init+0x52>

08003474 <HAL_TIM_PWM_Init>:
{
 8003474:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003476:	4604      	mov	r4, r0
 8003478:	b330      	cbz	r0, 80034c8 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800347a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800347e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003482:	b91b      	cbnz	r3, 800348c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003484:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003488:	f7ff ff8e 	bl	80033a8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800348e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003494:	1d21      	adds	r1, r4, #4
 8003496:	f7ff ff89 	bl	80033ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349a:	2301      	movs	r3, #1
  return HAL_OK;
 800349c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80034a6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80034aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80034ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80034be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80034c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80034c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80034c8:	2001      	movs	r0, #1
 80034ca:	e7fc      	b.n	80034c6 <HAL_TIM_PWM_Init+0x52>

080034cc <HAL_TIM_Encoder_Init>:
{
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	460d      	mov	r5, r1
  if (htim == NULL)
 80034d0:	4604      	mov	r4, r0
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d04d      	beq.n	8003572 <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 80034d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034de:	b91b      	cbnz	r3, 80034e8 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80034e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80034e4:	f7fe fb24 	bl	8001b30 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034ea:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80034f4:	6883      	ldr	r3, [r0, #8]
 80034f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034fa:	f023 0307 	bic.w	r3, r3, #7
 80034fe:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003500:	f7ff ff54 	bl	80033ac <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003504:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8003506:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003508:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800350a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800350c:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800350e:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003510:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003516:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800351a:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800351e:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003520:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003524:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003526:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800352e:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8003530:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003532:	430b      	orrs	r3, r1
 8003534:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003536:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800353a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800353e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003540:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003542:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003546:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8003548:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800354a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800354e:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003550:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003552:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8003554:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8003556:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003558:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003560:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 800356c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003572:	2001      	movs	r0, #1
 8003574:	e7fc      	b.n	8003570 <HAL_TIM_Encoder_Init+0xa4>
	...

08003578 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8003578:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800357a:	6a02      	ldr	r2, [r0, #32]
{
 800357c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800357e:	f022 0210 	bic.w	r2, r2, #16
 8003582:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003584:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003586:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003588:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800358a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800358e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003592:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003594:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003598:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800359c:	4d0b      	ldr	r5, [pc, #44]	; (80035cc <TIM_OC2_SetConfig+0x54>)
 800359e:	42a8      	cmp	r0, r5
 80035a0:	d10d      	bne.n	80035be <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80035a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ac:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035b0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80035b4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80035b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035ba:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80035be:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80035c0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80035c2:	684a      	ldr	r2, [r1, #4]
 80035c4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80035c6:	6203      	str	r3, [r0, #32]
}
 80035c8:	bd70      	pop	{r4, r5, r6, pc}
 80035ca:	bf00      	nop
 80035cc:	40012c00 	.word	0x40012c00

080035d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80035d0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80035d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80035d6:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d053      	beq.n	8003684 <HAL_TIM_PWM_ConfigChannel+0xb4>
 80035dc:	2001      	movs	r0, #1
  switch (Channel)
 80035de:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80035e0:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 80035e4:	d03d      	beq.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x92>
 80035e6:	d806      	bhi.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x26>
 80035e8:	b1c2      	cbz	r2, 800361c <HAL_TIM_PWM_ConfigChannel+0x4c>
 80035ea:	2a04      	cmp	r2, #4
 80035ec:	d028      	beq.n	8003640 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_UNLOCK(htim);
 80035ee:	2300      	movs	r3, #0
 80035f0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80035f4:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80035f6:	2a0c      	cmp	r2, #12
 80035f8:	d1f9      	bne.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035fa:	6828      	ldr	r0, [r5, #0]
 80035fc:	f7ff feb2 	bl	8003364 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003600:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003602:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003612:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800361a:	e031      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800361c:	6828      	ldr	r0, [r5, #0]
 800361e:	f7ff fe4f 	bl	80032c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003622:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003624:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	f042 0208 	orr.w	r2, r2, #8
 800362c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800362e:	699a      	ldr	r2, [r3, #24]
 8003630:	f022 0204 	bic.w	r2, r2, #4
 8003634:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800363a:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800363c:	2000      	movs	r0, #0
      break;
 800363e:	e7d6      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003640:	6828      	ldr	r0, [r5, #0]
 8003642:	f7ff ff99 	bl	8003578 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003646:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003648:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003650:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003658:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003660:	e7eb      	b.n	800363a <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003662:	6828      	ldr	r0, [r5, #0]
 8003664:	f7ff fe54 	bl	8003310 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003668:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800366a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	f042 0208 	orr.w	r2, r2, #8
 8003672:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003680:	61da      	str	r2, [r3, #28]
 8003682:	e7db      	b.n	800363c <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_LOCK(htim);
 8003684:	2002      	movs	r0, #2
 8003686:	e7b5      	b.n	80035f4 <HAL_TIM_PWM_ConfigChannel+0x24>

08003688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003688:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800368a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800368c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003692:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003696:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003698:	6082      	str	r2, [r0, #8]
}
 800369a:	bd10      	pop	{r4, pc}

0800369c <HAL_TIM_ConfigClockSource>:
{
 800369c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800369e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80036a2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	f04f 0302 	mov.w	r3, #2
 80036aa:	f000 8091 	beq.w	80037d0 <HAL_TIM_ConfigClockSource+0x134>
 80036ae:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80036b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80036b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80036b8:	6800      	ldr	r0, [r0, #0]
 80036ba:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80036c4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80036c6:	680b      	ldr	r3, [r1, #0]
 80036c8:	2b60      	cmp	r3, #96	; 0x60
 80036ca:	d052      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0xd6>
 80036cc:	d833      	bhi.n	8003736 <HAL_TIM_ConfigClockSource+0x9a>
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d067      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0x106>
 80036d2:	d816      	bhi.n	8003702 <HAL_TIM_ConfigClockSource+0x66>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d00d      	beq.n	80036f4 <HAL_TIM_ConfigClockSource+0x58>
 80036d8:	d80a      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x54>
 80036da:	f033 0110 	bics.w	r1, r3, #16
 80036de:	d009      	beq.n	80036f4 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80036e6:	2300      	movs	r3, #0
 80036e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80036ec:	4610      	mov	r0, r2
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80036f0:	2b30      	cmp	r3, #48	; 0x30
 80036f2:	d1f5      	bne.n	80036e0 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80036f4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f043 0307 	orr.w	r3, r3, #7
 8003700:	e017      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003702:	2b50      	cmp	r3, #80	; 0x50
 8003704:	d1ec      	bne.n	80036e0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	684a      	ldr	r2, [r1, #4]
 8003708:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800370a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800370e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003712:	f025 0501 	bic.w	r5, r5, #1
 8003716:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003718:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800371a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800371c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003720:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003724:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003726:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003728:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800372e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003732:	6083      	str	r3, [r0, #8]
 8003734:	e011      	b.n	800375a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8003736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373a:	d00e      	beq.n	800375a <HAL_TIM_ConfigClockSource+0xbe>
 800373c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003740:	d00d      	beq.n	800375e <HAL_TIM_ConfigClockSource+0xc2>
 8003742:	2b70      	cmp	r3, #112	; 0x70
 8003744:	d1cc      	bne.n	80036e0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003746:	68cb      	ldr	r3, [r1, #12]
 8003748:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800374c:	f7ff ff9c 	bl	8003688 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003750:	6822      	ldr	r2, [r4, #0]
 8003752:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003754:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003758:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2200      	movs	r2, #0
 800375c:	e7c0      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800375e:	68cb      	ldr	r3, [r1, #12]
 8003760:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003764:	f7ff ff90 	bl	8003688 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	6893      	ldr	r3, [r2, #8]
 800376c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003770:	e7f2      	b.n	8003758 <HAL_TIM_ConfigClockSource+0xbc>
  tmpccer = TIMx->CCER;
 8003772:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003774:	684d      	ldr	r5, [r1, #4]
 8003776:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003778:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800377a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800377e:	f021 0110 	bic.w	r1, r1, #16
 8003782:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003784:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003786:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800378a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800378e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003792:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003794:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003796:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800379c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80037a0:	e7c7      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a2:	684a      	ldr	r2, [r1, #4]
 80037a4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80037a6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037aa:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ae:	f025 0501 	bic.w	r5, r5, #1
 80037b2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80037b6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037bc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80037c0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80037c2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80037c4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80037c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ca:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80037ce:	e7b0      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80037d0:	461a      	mov	r2, r3
 80037d2:	e78b      	b.n	80036ec <HAL_TIM_ConfigClockSource+0x50>

080037d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80037da:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80037dc:	2b01      	cmp	r3, #1
 80037de:	f04f 0002 	mov.w	r0, #2
 80037e2:	d022      	beq.n	800382a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e4:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80037e6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80037ea:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ec:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ee:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80037f4:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037f6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f8:	4c0c      	ldr	r4, [pc, #48]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80037fa:	42a3      	cmp	r3, r4
 80037fc:	d00a      	beq.n	8003814 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003802:	d007      	beq.n	8003814 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003804:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003808:	42a3      	cmp	r3, r4
 800380a:	d003      	beq.n	8003814 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800380c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003810:	42a3      	cmp	r3, r4
 8003812:	d104      	bne.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003814:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003816:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800381a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800381e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003820:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003822:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003826:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800382a:	bd30      	pop	{r4, r5, pc}
 800382c:	40012c00 	.word	0x40012c00

08003830 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003830:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d01f      	beq.n	8003878 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003838:	68cb      	ldr	r3, [r1, #12]
 800383a:	688a      	ldr	r2, [r1, #8]
 800383c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003840:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003842:	684a      	ldr	r2, [r1, #4]
 8003844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003848:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800384a:	680a      	ldr	r2, [r1, #0]
 800384c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003850:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003852:	690a      	ldr	r2, [r1, #16]
 8003854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003858:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800385a:	694a      	ldr	r2, [r1, #20]
 800385c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003860:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003862:	69ca      	ldr	r2, [r1, #28]
 8003864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003868:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800386a:	6802      	ldr	r2, [r0, #0]
 800386c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800386e:	2300      	movs	r3, #0
 8003870:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003874:	4618      	mov	r0, r3
 8003876:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003878:	2002      	movs	r0, #2
}
 800387a:	4770      	bx	lr

0800387c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	f102 030c 	add.w	r3, r2, #12
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	320c      	adds	r2, #12
 800388c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003890:	6802      	ldr	r2, [r0, #0]
 8003892:	2900      	cmp	r1, #0
 8003894:	d1f2      	bne.n	800387c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	f102 0314 	add.w	r3, r2, #20
 800389a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	f102 0c14 	add.w	ip, r2, #20
 80038a6:	e84c 3100 	strex	r1, r3, [ip]
 80038aa:	2900      	cmp	r1, #0
 80038ac:	d1f3      	bne.n	8003896 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d10b      	bne.n	80038cc <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	f102 030c 	add.w	r3, r2, #12
 80038b8:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038bc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	f102 0c0c 	add.w	ip, r2, #12
 80038c4:	e84c 3100 	strex	r1, r3, [ip]
 80038c8:	2900      	cmp	r1, #0
 80038ca:	d1f3      	bne.n	80038b4 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038cc:	2320      	movs	r3, #32
 80038ce:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d2:	2300      	movs	r3, #0
 80038d4:	6303      	str	r3, [r0, #48]	; 0x30
}
 80038d6:	4770      	bx	lr

080038d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d8:	b510      	push	{r4, lr}
 80038da:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038dc:	6803      	ldr	r3, [r0, #0]
 80038de:	68c1      	ldr	r1, [r0, #12]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80038e6:	430a      	orrs	r2, r1
 80038e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038ea:	6882      	ldr	r2, [r0, #8]
 80038ec:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80038ee:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038f0:	4302      	orrs	r2, r0
 80038f2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80038f4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80038f8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038fc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80038fe:	430a      	orrs	r2, r1
 8003900:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	69a1      	ldr	r1, [r4, #24]
 8003906:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800390a:	430a      	orrs	r2, r1
 800390c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800390e:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <UART_SetConfig+0x70>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d115      	bne.n	8003940 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003914:	f7ff fc4a 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003918:	2319      	movs	r3, #25
 800391a:	4343      	muls	r3, r0
 800391c:	6862      	ldr	r2, [r4, #4]
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	0092      	lsls	r2, r2, #2
 8003922:	fbb3 f3f2 	udiv	r3, r3, r2
 8003926:	2264      	movs	r2, #100	; 0x64
 8003928:	fbb3 f1f2 	udiv	r1, r3, r2
 800392c:	fb02 3311 	mls	r3, r2, r1, r3
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	3332      	adds	r3, #50	; 0x32
 8003934:	fbb3 f3f2 	udiv	r3, r3, r2
 8003938:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800393c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800393e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003940:	f7ff fc24 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8003944:	e7e8      	b.n	8003918 <UART_SetConfig+0x40>
 8003946:	bf00      	nop
 8003948:	40013800 	.word	0x40013800

0800394c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	4604      	mov	r4, r0
 8003950:	460e      	mov	r6, r1
 8003952:	4617      	mov	r7, r2
 8003954:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	6813      	ldr	r3, [r2, #0]
 800395a:	ea36 0303 	bics.w	r3, r6, r3
 800395e:	d101      	bne.n	8003964 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003960:	2000      	movs	r0, #0
 8003962:	e028      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003964:	1c6b      	adds	r3, r5, #1
 8003966:	d0f7      	beq.n	8003958 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003968:	b125      	cbz	r5, 8003974 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800396a:	f7fe fb2d 	bl	8001fc8 <HAL_GetTick>
 800396e:	1bc0      	subs	r0, r0, r7
 8003970:	4285      	cmp	r5, r0
 8003972:	d2f0      	bcs.n	8003956 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003974:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	f102 030c 	add.w	r3, r2, #12
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	320c      	adds	r2, #12
 8003984:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8003988:	6821      	ldr	r1, [r4, #0]
 800398a:	2800      	cmp	r0, #0
 800398c:	d1f2      	bne.n	8003974 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	f101 0314 	add.w	r3, r1, #20
 8003992:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003996:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	f101 0014 	add.w	r0, r1, #20
 800399e:	e840 3200 	strex	r2, r3, [r0]
 80039a2:	2a00      	cmp	r2, #0
 80039a4:	d1f3      	bne.n	800398e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80039a6:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80039a8:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80039aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 80039ae:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80039b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039b8 <HAL_UART_Init>:
{
 80039b8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80039ba:	4604      	mov	r4, r0
 80039bc:	b348      	cbz	r0, 8003a12 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80039be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80039c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039c6:	b91b      	cbnz	r3, 80039d0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80039c8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80039cc:	f7fe fa1c 	bl	8001e08 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80039d0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80039d2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80039d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80039d8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80039da:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80039dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80039e2:	f7ff ff79 	bl	80038d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a00:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003a02:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a0e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003a10:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a12:	2001      	movs	r0, #1
 8003a14:	e7fc      	b.n	8003a10 <HAL_UART_Init+0x58>

08003a16 <HAL_UART_Transmit>:
{
 8003a16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a1a:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003a1c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003a20:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003a22:	2b20      	cmp	r3, #32
{
 8003a24:	460e      	mov	r6, r1
 8003a26:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003a28:	d13c      	bne.n	8003aa4 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8003a2a:	2900      	cmp	r1, #0
 8003a2c:	d03c      	beq.n	8003aa8 <HAL_UART_Transmit+0x92>
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	d03a      	beq.n	8003aa8 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a32:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	2500      	movs	r5, #0
 8003a36:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a38:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8003a3c:	f7fe fac4 	bl	8001fc8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a40:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003a42:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003a48:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a4a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4c:	d103      	bne.n	8003a56 <HAL_UART_Transmit+0x40>
 8003a4e:	6923      	ldr	r3, [r4, #16]
 8003a50:	b90b      	cbnz	r3, 8003a56 <HAL_UART_Transmit+0x40>
 8003a52:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003a54:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003a56:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	b953      	cbnz	r3, 8003a72 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	4642      	mov	r2, r8
 8003a60:	2140      	movs	r1, #64	; 0x40
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7ff ff72 	bl	800394c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003a68:	b950      	cbnz	r0, 8003a80 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8003a70:	e007      	b.n	8003a82 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a72:	464b      	mov	r3, r9
 8003a74:	4642      	mov	r2, r8
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7ff ff67 	bl	800394c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003a7e:	b110      	cbz	r0, 8003a86 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8003a80:	2003      	movs	r0, #3
}
 8003a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a86:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003a88:	b94e      	cbnz	r6, 8003a9e <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a92:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003a94:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003a96:	3901      	subs	r1, #1
 8003a98:	b289      	uxth	r1, r1
 8003a9a:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003a9c:	e7db      	b.n	8003a56 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a9e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003aa2:	e7f6      	b.n	8003a92 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8003aa4:	2002      	movs	r0, #2
 8003aa6:	e7ec      	b.n	8003a82 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	e7ea      	b.n	8003a82 <HAL_UART_Transmit+0x6c>

08003aac <HAL_UART_TxCpltCallback>:
 8003aac:	4770      	bx	lr

08003aae <HAL_UART_ErrorCallback>:
 8003aae:	4770      	bx	lr

08003ab0 <UART_DMAAbortOnError>:
{
 8003ab0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003ab2:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ab4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003ab6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ab8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003aba:	f7ff fff8 	bl	8003aae <HAL_UART_ErrorCallback>
}
 8003abe:	bd08      	pop	{r3, pc}

08003ac0 <HAL_UARTEx_RxEventCallback>:
}
 8003ac0:	4770      	bx	lr

08003ac2 <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003ac2:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac4:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ac6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003acc:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	d13f      	bne.n	8003b50 <UART_Receive_IT.part.0.isra.0+0x8e>
 8003ad0:	6901      	ldr	r1, [r0, #16]
 8003ad2:	2900      	cmp	r1, #0
 8003ad4:	d13f      	bne.n	8003b56 <UART_Receive_IT.part.0.isra.0+0x94>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ad6:	6852      	ldr	r2, [r2, #4]
 8003ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003adc:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 8003ae0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003ae2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d12d      	bne.n	8003b4a <UART_Receive_IT.part.0.isra.0+0x88>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003aee:	6802      	ldr	r2, [r0, #0]
 8003af0:	68d1      	ldr	r1, [r2, #12]
 8003af2:	f021 0120 	bic.w	r1, r1, #32
 8003af6:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003af8:	68d1      	ldr	r1, [r2, #12]
 8003afa:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003afe:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b00:	6951      	ldr	r1, [r2, #20]
 8003b02:	f021 0101 	bic.w	r1, r1, #1
 8003b06:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b0e:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b10:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003b12:	2a01      	cmp	r2, #1
 8003b14:	6802      	ldr	r2, [r0, #0]
 8003b16:	d128      	bne.n	8003b6a <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b18:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	f102 030c 	add.w	r3, r2, #12
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b22:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	f102 0c0c 	add.w	ip, r2, #12
 8003b2a:	e84c 3100 	strex	r1, r3, [ip]
 8003b2e:	2900      	cmp	r1, #0
 8003b30:	d1f3      	bne.n	8003b1a <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	06db      	lsls	r3, r3, #27
 8003b36:	d505      	bpl.n	8003b44 <UART_Receive_IT.part.0.isra.0+0x82>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b38:	9101      	str	r1, [sp, #4]
 8003b3a:	6813      	ldr	r3, [r2, #0]
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	6853      	ldr	r3, [r2, #4]
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b44:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003b46:	f7ff ffbb 	bl	8003ac0 <HAL_UARTEx_RxEventCallback>
}
 8003b4a:	b003      	add	sp, #12
 8003b4c:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b50:	b939      	cbnz	r1, 8003b62 <UART_Receive_IT.part.0.isra.0+0xa0>
 8003b52:	6901      	ldr	r1, [r0, #16]
 8003b54:	b929      	cbnz	r1, 8003b62 <UART_Receive_IT.part.0.isra.0+0xa0>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b56:	6852      	ldr	r2, [r2, #4]
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8003b5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003b5e:	3301      	adds	r3, #1
 8003b60:	e7be      	b.n	8003ae0 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b62:	6852      	ldr	r2, [r2, #4]
 8003b64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b68:	e7f7      	b.n	8003b5a <UART_Receive_IT.part.0.isra.0+0x98>
        HAL_UART_RxCpltCallback(huart);
 8003b6a:	f7fd fec9 	bl	8001900 <HAL_UART_RxCpltCallback>
 8003b6e:	e7ec      	b.n	8003b4a <UART_Receive_IT.part.0.isra.0+0x88>

08003b70 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b70:	6803      	ldr	r3, [r0, #0]
{
 8003b72:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b74:	681a      	ldr	r2, [r3, #0]
{
 8003b76:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003b78:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b7c:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b7e:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003b80:	d10c      	bne.n	8003b9c <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b82:	0695      	lsls	r5, r2, #26
 8003b84:	d570      	bpl.n	8003c68 <HAL_UART_IRQHandler+0xf8>
 8003b86:	068d      	lsls	r5, r1, #26
 8003b88:	d56e      	bpl.n	8003c68 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b8a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003b8e:	2b22      	cmp	r3, #34	; 0x22
 8003b90:	d164      	bne.n	8003c5c <HAL_UART_IRQHandler+0xec>
}
 8003b92:	b003      	add	sp, #12
 8003b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b98:	f7ff bf93 	b.w	8003ac2 <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b9c:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ba0:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8003ba4:	4305      	orrs	r5, r0
 8003ba6:	d05f      	beq.n	8003c68 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ba8:	07d5      	lsls	r5, r2, #31
 8003baa:	d505      	bpl.n	8003bb8 <HAL_UART_IRQHandler+0x48>
 8003bac:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bae:	bf42      	ittt	mi
 8003bb0:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8003bb2:	f043 0301 	orrmi.w	r3, r3, #1
 8003bb6:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bb8:	0755      	lsls	r5, r2, #29
 8003bba:	d504      	bpl.n	8003bc6 <HAL_UART_IRQHandler+0x56>
 8003bbc:	b118      	cbz	r0, 8003bc6 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc6:	0793      	lsls	r3, r2, #30
 8003bc8:	d504      	bpl.n	8003bd4 <HAL_UART_IRQHandler+0x64>
 8003bca:	b118      	cbz	r0, 8003bd4 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bd4:	0715      	lsls	r5, r2, #28
 8003bd6:	d507      	bpl.n	8003be8 <HAL_UART_IRQHandler+0x78>
 8003bd8:	f001 0320 	and.w	r3, r1, #32
 8003bdc:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bde:	bf1e      	ittt	ne
 8003be0:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8003be2:	f043 0308 	orrne.w	r3, r3, #8
 8003be6:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003be8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d036      	beq.n	8003c5c <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bee:	0690      	lsls	r0, r2, #26
 8003bf0:	d508      	bpl.n	8003c04 <HAL_UART_IRQHandler+0x94>
 8003bf2:	068a      	lsls	r2, r1, #26
 8003bf4:	d506      	bpl.n	8003c04 <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bf6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003bfa:	2b22      	cmp	r3, #34	; 0x22
 8003bfc:	d102      	bne.n	8003c04 <HAL_UART_IRQHandler+0x94>
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f7ff ff5f 	bl	8003ac2 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c04:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003c06:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c08:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c0a:	6c65      	ldr	r5, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c10:	f005 0508 	and.w	r5, r5, #8
 8003c14:	431d      	orrs	r5, r3
 8003c16:	d023      	beq.n	8003c60 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8003c18:	f7ff fe30 	bl	800387c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	6822      	ldr	r2, [r4, #0]
 8003c1e:	6953      	ldr	r3, [r2, #20]
 8003c20:	065b      	lsls	r3, r3, #25
 8003c22:	d518      	bpl.n	8003c56 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	f102 0314 	add.w	r3, r2, #20
 8003c28:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	f102 0014 	add.w	r0, r2, #20
 8003c34:	e840 3100 	strex	r1, r3, [r0]
 8003c38:	2900      	cmp	r1, #0
 8003c3a:	d1f3      	bne.n	8003c24 <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8003c3c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003c3e:	b150      	cbz	r0, 8003c56 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c40:	4b73      	ldr	r3, [pc, #460]	; (8003e10 <HAL_UART_IRQHandler+0x2a0>)
 8003c42:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c44:	f7fe fdd2 	bl	80027ec <HAL_DMA_Abort_IT>
 8003c48:	b140      	cbz	r0, 8003c5c <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003c4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8003c4e:	b003      	add	sp, #12
 8003c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c54:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff ff29 	bl	8003aae <HAL_UART_ErrorCallback>
}
 8003c5c:	b003      	add	sp, #12
 8003c5e:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003c60:	f7ff ff25 	bl	8003aae <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	6465      	str	r5, [r4, #68]	; 0x44
 8003c66:	e7f9      	b.n	8003c5c <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c68:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003c6a:	2801      	cmp	r0, #1
 8003c6c:	f040 8094 	bne.w	8003d98 <HAL_UART_IRQHandler+0x228>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c70:	06d5      	lsls	r5, r2, #27
 8003c72:	f140 8091 	bpl.w	8003d98 <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c76:	06c8      	lsls	r0, r1, #27
 8003c78:	f140 808e 	bpl.w	8003d98 <HAL_UART_IRQHandler+0x228>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	9201      	str	r2, [sp, #4]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	9201      	str	r2, [sp, #4]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	9201      	str	r2, [sp, #4]
 8003c88:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	0655      	lsls	r5, r2, #25
 8003c8e:	d54d      	bpl.n	8003d2c <HAL_UART_IRQHandler+0x1bc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003c92:	680a      	ldr	r2, [r1, #0]
 8003c94:	6852      	ldr	r2, [r2, #4]
 8003c96:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003c98:	2a00      	cmp	r2, #0
 8003c9a:	d0df      	beq.n	8003c5c <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c9c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8003c9e:	4290      	cmp	r0, r2
 8003ca0:	d9dc      	bls.n	8003c5c <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 8003ca2:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ca4:	698a      	ldr	r2, [r1, #24]
 8003ca6:	2a20      	cmp	r2, #32
 8003ca8:	d036      	beq.n	8003d18 <HAL_UART_IRQHandler+0x1a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	f103 020c 	add.w	r2, r3, #12
 8003cae:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	f103 000c 	add.w	r0, r3, #12
 8003cba:	e840 2100 	strex	r1, r2, [r0]
 8003cbe:	2900      	cmp	r1, #0
 8003cc0:	d1f3      	bne.n	8003caa <HAL_UART_IRQHandler+0x13a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	f103 0214 	add.w	r2, r3, #20
 8003cc6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	f103 0014 	add.w	r0, r3, #20
 8003cd2:	e840 2100 	strex	r1, r2, [r0]
 8003cd6:	2900      	cmp	r1, #0
 8003cd8:	d1f3      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x152>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	f103 0214 	add.w	r2, r3, #20
 8003cde:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	f103 0014 	add.w	r0, r3, #20
 8003cea:	e840 2100 	strex	r1, r2, [r0]
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	d1f3      	bne.n	8003cda <HAL_UART_IRQHandler+0x16a>
          huart->RxState = HAL_UART_STATE_READY;
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf8:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	f103 020c 	add.w	r2, r3, #12
 8003cfe:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d02:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	f103 000c 	add.w	r0, r3, #12
 8003d0a:	e840 2100 	strex	r1, r2, [r0]
 8003d0e:	2900      	cmp	r1, #0
 8003d10:	d1f3      	bne.n	8003cfa <HAL_UART_IRQHandler+0x18a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003d14:	f7fe fd48 	bl	80027a8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d1c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003d1e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003d20:	1ac9      	subs	r1, r1, r3
 8003d22:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d24:	4620      	mov	r0, r4
 8003d26:	f7ff fecb 	bl	8003ac0 <HAL_UARTEx_RxEventCallback>
 8003d2a:	e797      	b.n	8003c5c <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d2c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003d2e:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8003d30:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003d32:	b289      	uxth	r1, r1
 8003d34:	2900      	cmp	r1, #0
 8003d36:	d091      	beq.n	8003c5c <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d38:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003d3a:	1a89      	subs	r1, r1, r2
 8003d3c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003d3e:	2900      	cmp	r1, #0
 8003d40:	d08c      	beq.n	8003c5c <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	f103 020c 	add.w	r2, r3, #12
 8003d46:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	f103 050c 	add.w	r5, r3, #12
 8003d52:	e845 2000 	strex	r0, r2, [r5]
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d1f3      	bne.n	8003d42 <HAL_UART_IRQHandler+0x1d2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	f103 0214 	add.w	r2, r3, #20
 8003d5e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	f103 0514 	add.w	r5, r3, #20
 8003d6a:	e845 2000 	strex	r0, r2, [r5]
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d1f3      	bne.n	8003d5a <HAL_UART_IRQHandler+0x1ea>
        huart->RxState = HAL_UART_STATE_READY;
 8003d72:	2220      	movs	r2, #32
 8003d74:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d78:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	f103 020c 	add.w	r2, r3, #12
 8003d7e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	f103 050c 	add.w	r5, r3, #12
 8003d8a:	e845 2000 	strex	r0, r2, [r5]
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d1f3      	bne.n	8003d7a <HAL_UART_IRQHandler+0x20a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d92:	2302      	movs	r3, #2
 8003d94:	6363      	str	r3, [r4, #52]	; 0x34
 8003d96:	e7c5      	b.n	8003d24 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d98:	0610      	lsls	r0, r2, #24
 8003d9a:	d528      	bpl.n	8003dee <HAL_UART_IRQHandler+0x27e>
 8003d9c:	060d      	lsls	r5, r1, #24
 8003d9e:	d526      	bpl.n	8003dee <HAL_UART_IRQHandler+0x27e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003da0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003da4:	2a21      	cmp	r2, #33	; 0x21
 8003da6:	f47f af59 	bne.w	8003c5c <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003daa:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dac:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dae:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003db2:	d117      	bne.n	8003de4 <HAL_UART_IRQHandler+0x274>
 8003db4:	6921      	ldr	r1, [r4, #16]
 8003db6:	b9a9      	cbnz	r1, 8003de4 <HAL_UART_IRQHandler+0x274>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003db8:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003dbc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003dc0:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dc2:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8003dc4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003dc6:	3a01      	subs	r2, #1
 8003dc8:	b292      	uxth	r2, r2
 8003dca:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003dcc:	2a00      	cmp	r2, #0
 8003dce:	f47f af45 	bne.w	8003c5c <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	e73b      	b.n	8003c5c <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003de4:	1c51      	adds	r1, r2, #1
 8003de6:	6221      	str	r1, [r4, #32]
 8003de8:	7812      	ldrb	r2, [r2, #0]
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	e7ea      	b.n	8003dc4 <HAL_UART_IRQHandler+0x254>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dee:	0650      	lsls	r0, r2, #25
 8003df0:	f57f af34 	bpl.w	8003c5c <HAL_UART_IRQHandler+0xec>
 8003df4:	064a      	lsls	r2, r1, #25
 8003df6:	f57f af31 	bpl.w	8003c5c <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dfa:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003dfc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e02:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	2320      	movs	r3, #32
 8003e06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8003e0a:	f7ff fe4f 	bl	8003aac <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003e0e:	e725      	b.n	8003c5c <HAL_UART_IRQHandler+0xec>
 8003e10:	08003ab1 	.word	0x08003ab1

08003e14 <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 8003e16:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e1a:	2322      	movs	r3, #34	; 0x22
  huart->RxXferSize = Size;
 8003e1c:	8582      	strh	r2, [r0, #44]	; 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e1e:	6902      	ldr	r2, [r0, #16]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e20:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->pRxBuffPtr = pData;
 8003e24:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e26:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e28:	b11a      	cbz	r2, 8003e32 <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e30:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e32:	695a      	ldr	r2, [r3, #20]
}
 8003e34:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	f042 0220 	orr.w	r2, r2, #32
 8003e42:	60da      	str	r2, [r3, #12]
}
 8003e44:	4770      	bx	lr

08003e46 <HAL_UART_Receive_IT>:
{
 8003e46:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e48:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8003e4c:	2e20      	cmp	r6, #32
 8003e4e:	d106      	bne.n	8003e5e <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 8003e50:	b141      	cbz	r1, 8003e64 <HAL_UART_Receive_IT+0x1e>
 8003e52:	b13a      	cbz	r2, 8003e64 <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e54:	2400      	movs	r4, #0
 8003e56:	6304      	str	r4, [r0, #48]	; 0x30
}
 8003e58:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e5a:	f7ff bfdb 	b.w	8003e14 <UART_Start_Receive_IT>
    return HAL_BUSY;
 8003e5e:	2002      	movs	r0, #2
}
 8003e60:	bc70      	pop	{r4, r5, r6}
 8003e62:	4770      	bx	lr
      return HAL_ERROR;
 8003e64:	2001      	movs	r0, #1
 8003e66:	e7fb      	b.n	8003e60 <HAL_UART_Receive_IT+0x1a>

08003e68 <__errno>:
 8003e68:	4b01      	ldr	r3, [pc, #4]	; (8003e70 <__errno+0x8>)
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	2000000c 	.word	0x2000000c

08003e74 <__libc_init_array>:
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	2600      	movs	r6, #0
 8003e78:	4d0c      	ldr	r5, [pc, #48]	; (8003eac <__libc_init_array+0x38>)
 8003e7a:	4c0d      	ldr	r4, [pc, #52]	; (8003eb0 <__libc_init_array+0x3c>)
 8003e7c:	1b64      	subs	r4, r4, r5
 8003e7e:	10a4      	asrs	r4, r4, #2
 8003e80:	42a6      	cmp	r6, r4
 8003e82:	d109      	bne.n	8003e98 <__libc_init_array+0x24>
 8003e84:	f004 fcf6 	bl	8008874 <_init>
 8003e88:	2600      	movs	r6, #0
 8003e8a:	4d0a      	ldr	r5, [pc, #40]	; (8003eb4 <__libc_init_array+0x40>)
 8003e8c:	4c0a      	ldr	r4, [pc, #40]	; (8003eb8 <__libc_init_array+0x44>)
 8003e8e:	1b64      	subs	r4, r4, r5
 8003e90:	10a4      	asrs	r4, r4, #2
 8003e92:	42a6      	cmp	r6, r4
 8003e94:	d105      	bne.n	8003ea2 <__libc_init_array+0x2e>
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9c:	4798      	blx	r3
 8003e9e:	3601      	adds	r6, #1
 8003ea0:	e7ee      	b.n	8003e80 <__libc_init_array+0xc>
 8003ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea6:	4798      	blx	r3
 8003ea8:	3601      	adds	r6, #1
 8003eaa:	e7f2      	b.n	8003e92 <__libc_init_array+0x1e>
 8003eac:	08008de0 	.word	0x08008de0
 8003eb0:	08008de0 	.word	0x08008de0
 8003eb4:	08008de0 	.word	0x08008de0
 8003eb8:	08008de4 	.word	0x08008de4

08003ebc <memset>:
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4402      	add	r2, r0
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <memset+0xa>
 8003ec4:	4770      	bx	lr
 8003ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eca:	e7f9      	b.n	8003ec0 <memset+0x4>

08003ecc <__cvt>:
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed2:	461f      	mov	r7, r3
 8003ed4:	bfbb      	ittet	lt
 8003ed6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003eda:	461f      	movlt	r7, r3
 8003edc:	2300      	movge	r3, #0
 8003ede:	232d      	movlt	r3, #45	; 0x2d
 8003ee0:	b088      	sub	sp, #32
 8003ee2:	4614      	mov	r4, r2
 8003ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ee6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003ee8:	7013      	strb	r3, [r2, #0]
 8003eea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003eec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003ef0:	f023 0820 	bic.w	r8, r3, #32
 8003ef4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ef8:	d005      	beq.n	8003f06 <__cvt+0x3a>
 8003efa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003efe:	d100      	bne.n	8003f02 <__cvt+0x36>
 8003f00:	3501      	adds	r5, #1
 8003f02:	2302      	movs	r3, #2
 8003f04:	e000      	b.n	8003f08 <__cvt+0x3c>
 8003f06:	2303      	movs	r3, #3
 8003f08:	aa07      	add	r2, sp, #28
 8003f0a:	9204      	str	r2, [sp, #16]
 8003f0c:	aa06      	add	r2, sp, #24
 8003f0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f12:	e9cd 3500 	strd	r3, r5, [sp]
 8003f16:	4622      	mov	r2, r4
 8003f18:	463b      	mov	r3, r7
 8003f1a:	f001 fe45 	bl	8005ba8 <_dtoa_r>
 8003f1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f22:	4606      	mov	r6, r0
 8003f24:	d102      	bne.n	8003f2c <__cvt+0x60>
 8003f26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f28:	07db      	lsls	r3, r3, #31
 8003f2a:	d522      	bpl.n	8003f72 <__cvt+0xa6>
 8003f2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f30:	eb06 0905 	add.w	r9, r6, r5
 8003f34:	d110      	bne.n	8003f58 <__cvt+0x8c>
 8003f36:	7833      	ldrb	r3, [r6, #0]
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	d10a      	bne.n	8003f52 <__cvt+0x86>
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2300      	movs	r3, #0
 8003f40:	4620      	mov	r0, r4
 8003f42:	4639      	mov	r1, r7
 8003f44:	f7fc fd3a 	bl	80009bc <__aeabi_dcmpeq>
 8003f48:	b918      	cbnz	r0, 8003f52 <__cvt+0x86>
 8003f4a:	f1c5 0501 	rsb	r5, r5, #1
 8003f4e:	f8ca 5000 	str.w	r5, [sl]
 8003f52:	f8da 3000 	ldr.w	r3, [sl]
 8003f56:	4499      	add	r9, r3
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	4639      	mov	r1, r7
 8003f60:	f7fc fd2c 	bl	80009bc <__aeabi_dcmpeq>
 8003f64:	b108      	cbz	r0, 8003f6a <__cvt+0x9e>
 8003f66:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f6a:	2230      	movs	r2, #48	; 0x30
 8003f6c:	9b07      	ldr	r3, [sp, #28]
 8003f6e:	454b      	cmp	r3, r9
 8003f70:	d307      	bcc.n	8003f82 <__cvt+0xb6>
 8003f72:	4630      	mov	r0, r6
 8003f74:	9b07      	ldr	r3, [sp, #28]
 8003f76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003f78:	1b9b      	subs	r3, r3, r6
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	b008      	add	sp, #32
 8003f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f82:	1c59      	adds	r1, r3, #1
 8003f84:	9107      	str	r1, [sp, #28]
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	e7f0      	b.n	8003f6c <__cvt+0xa0>

08003f8a <__exponent>:
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f8e:	2900      	cmp	r1, #0
 8003f90:	f803 2b02 	strb.w	r2, [r3], #2
 8003f94:	bfb6      	itet	lt
 8003f96:	222d      	movlt	r2, #45	; 0x2d
 8003f98:	222b      	movge	r2, #43	; 0x2b
 8003f9a:	4249      	neglt	r1, r1
 8003f9c:	2909      	cmp	r1, #9
 8003f9e:	7042      	strb	r2, [r0, #1]
 8003fa0:	dd2b      	ble.n	8003ffa <__exponent+0x70>
 8003fa2:	f10d 0407 	add.w	r4, sp, #7
 8003fa6:	46a4      	mov	ip, r4
 8003fa8:	270a      	movs	r7, #10
 8003faa:	fb91 f6f7 	sdiv	r6, r1, r7
 8003fae:	460a      	mov	r2, r1
 8003fb0:	46a6      	mov	lr, r4
 8003fb2:	fb07 1516 	mls	r5, r7, r6, r1
 8003fb6:	2a63      	cmp	r2, #99	; 0x63
 8003fb8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003fbc:	4631      	mov	r1, r6
 8003fbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8003fc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003fc6:	dcf0      	bgt.n	8003faa <__exponent+0x20>
 8003fc8:	3130      	adds	r1, #48	; 0x30
 8003fca:	f1ae 0502 	sub.w	r5, lr, #2
 8003fce:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	1c44      	adds	r4, r0, #1
 8003fd6:	4561      	cmp	r1, ip
 8003fd8:	d30a      	bcc.n	8003ff0 <__exponent+0x66>
 8003fda:	f10d 0209 	add.w	r2, sp, #9
 8003fde:	eba2 020e 	sub.w	r2, r2, lr
 8003fe2:	4565      	cmp	r5, ip
 8003fe4:	bf88      	it	hi
 8003fe6:	2200      	movhi	r2, #0
 8003fe8:	4413      	add	r3, r2
 8003fea:	1a18      	subs	r0, r3, r0
 8003fec:	b003      	add	sp, #12
 8003fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ff4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003ff8:	e7ed      	b.n	8003fd6 <__exponent+0x4c>
 8003ffa:	2330      	movs	r3, #48	; 0x30
 8003ffc:	3130      	adds	r1, #48	; 0x30
 8003ffe:	7083      	strb	r3, [r0, #2]
 8004000:	70c1      	strb	r1, [r0, #3]
 8004002:	1d03      	adds	r3, r0, #4
 8004004:	e7f1      	b.n	8003fea <__exponent+0x60>
	...

08004008 <_printf_float>:
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	b091      	sub	sp, #68	; 0x44
 800400e:	460c      	mov	r4, r1
 8004010:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004014:	4616      	mov	r6, r2
 8004016:	461f      	mov	r7, r3
 8004018:	4605      	mov	r5, r0
 800401a:	f002 ff2b 	bl	8006e74 <_localeconv_r>
 800401e:	6803      	ldr	r3, [r0, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	9309      	str	r3, [sp, #36]	; 0x24
 8004024:	f7fc f89e 	bl	8000164 <strlen>
 8004028:	2300      	movs	r3, #0
 800402a:	930e      	str	r3, [sp, #56]	; 0x38
 800402c:	f8d8 3000 	ldr.w	r3, [r8]
 8004030:	900a      	str	r0, [sp, #40]	; 0x28
 8004032:	3307      	adds	r3, #7
 8004034:	f023 0307 	bic.w	r3, r3, #7
 8004038:	f103 0208 	add.w	r2, r3, #8
 800403c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004040:	f8d4 b000 	ldr.w	fp, [r4]
 8004044:	f8c8 2000 	str.w	r2, [r8]
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004050:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004054:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004058:	930b      	str	r3, [sp, #44]	; 0x2c
 800405a:	f04f 32ff 	mov.w	r2, #4294967295
 800405e:	4640      	mov	r0, r8
 8004060:	4b9c      	ldr	r3, [pc, #624]	; (80042d4 <_printf_float+0x2cc>)
 8004062:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004064:	f7fc fcdc 	bl	8000a20 <__aeabi_dcmpun>
 8004068:	bb70      	cbnz	r0, 80040c8 <_printf_float+0xc0>
 800406a:	f04f 32ff 	mov.w	r2, #4294967295
 800406e:	4640      	mov	r0, r8
 8004070:	4b98      	ldr	r3, [pc, #608]	; (80042d4 <_printf_float+0x2cc>)
 8004072:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004074:	f7fc fcb6 	bl	80009e4 <__aeabi_dcmple>
 8004078:	bb30      	cbnz	r0, 80040c8 <_printf_float+0xc0>
 800407a:	2200      	movs	r2, #0
 800407c:	2300      	movs	r3, #0
 800407e:	4640      	mov	r0, r8
 8004080:	4651      	mov	r1, sl
 8004082:	f7fc fca5 	bl	80009d0 <__aeabi_dcmplt>
 8004086:	b110      	cbz	r0, 800408e <_printf_float+0x86>
 8004088:	232d      	movs	r3, #45	; 0x2d
 800408a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800408e:	4b92      	ldr	r3, [pc, #584]	; (80042d8 <_printf_float+0x2d0>)
 8004090:	4892      	ldr	r0, [pc, #584]	; (80042dc <_printf_float+0x2d4>)
 8004092:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004096:	bf94      	ite	ls
 8004098:	4698      	movls	r8, r3
 800409a:	4680      	movhi	r8, r0
 800409c:	2303      	movs	r3, #3
 800409e:	f04f 0a00 	mov.w	sl, #0
 80040a2:	6123      	str	r3, [r4, #16]
 80040a4:	f02b 0304 	bic.w	r3, fp, #4
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	4633      	mov	r3, r6
 80040ac:	4621      	mov	r1, r4
 80040ae:	4628      	mov	r0, r5
 80040b0:	9700      	str	r7, [sp, #0]
 80040b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80040b4:	f000 f9d4 	bl	8004460 <_printf_common>
 80040b8:	3001      	adds	r0, #1
 80040ba:	f040 8090 	bne.w	80041de <_printf_float+0x1d6>
 80040be:	f04f 30ff 	mov.w	r0, #4294967295
 80040c2:	b011      	add	sp, #68	; 0x44
 80040c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c8:	4642      	mov	r2, r8
 80040ca:	4653      	mov	r3, sl
 80040cc:	4640      	mov	r0, r8
 80040ce:	4651      	mov	r1, sl
 80040d0:	f7fc fca6 	bl	8000a20 <__aeabi_dcmpun>
 80040d4:	b148      	cbz	r0, 80040ea <_printf_float+0xe2>
 80040d6:	f1ba 0f00 	cmp.w	sl, #0
 80040da:	bfb8      	it	lt
 80040dc:	232d      	movlt	r3, #45	; 0x2d
 80040de:	4880      	ldr	r0, [pc, #512]	; (80042e0 <_printf_float+0x2d8>)
 80040e0:	bfb8      	it	lt
 80040e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80040e6:	4b7f      	ldr	r3, [pc, #508]	; (80042e4 <_printf_float+0x2dc>)
 80040e8:	e7d3      	b.n	8004092 <_printf_float+0x8a>
 80040ea:	6863      	ldr	r3, [r4, #4]
 80040ec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	d142      	bne.n	800417a <_printf_float+0x172>
 80040f4:	2306      	movs	r3, #6
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	9206      	str	r2, [sp, #24]
 80040fc:	aa0e      	add	r2, sp, #56	; 0x38
 80040fe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004102:	aa0d      	add	r2, sp, #52	; 0x34
 8004104:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004108:	9203      	str	r2, [sp, #12]
 800410a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800410e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	6863      	ldr	r3, [r4, #4]
 8004116:	4642      	mov	r2, r8
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	4628      	mov	r0, r5
 800411c:	4653      	mov	r3, sl
 800411e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004120:	f7ff fed4 	bl	8003ecc <__cvt>
 8004124:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004126:	4680      	mov	r8, r0
 8004128:	2947      	cmp	r1, #71	; 0x47
 800412a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800412c:	d108      	bne.n	8004140 <_printf_float+0x138>
 800412e:	1cc8      	adds	r0, r1, #3
 8004130:	db02      	blt.n	8004138 <_printf_float+0x130>
 8004132:	6863      	ldr	r3, [r4, #4]
 8004134:	4299      	cmp	r1, r3
 8004136:	dd40      	ble.n	80041ba <_printf_float+0x1b2>
 8004138:	f1a9 0902 	sub.w	r9, r9, #2
 800413c:	fa5f f989 	uxtb.w	r9, r9
 8004140:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004144:	d81f      	bhi.n	8004186 <_printf_float+0x17e>
 8004146:	464a      	mov	r2, r9
 8004148:	3901      	subs	r1, #1
 800414a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800414e:	910d      	str	r1, [sp, #52]	; 0x34
 8004150:	f7ff ff1b 	bl	8003f8a <__exponent>
 8004154:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004156:	4682      	mov	sl, r0
 8004158:	1813      	adds	r3, r2, r0
 800415a:	2a01      	cmp	r2, #1
 800415c:	6123      	str	r3, [r4, #16]
 800415e:	dc02      	bgt.n	8004166 <_printf_float+0x15e>
 8004160:	6822      	ldr	r2, [r4, #0]
 8004162:	07d2      	lsls	r2, r2, #31
 8004164:	d501      	bpl.n	800416a <_printf_float+0x162>
 8004166:	3301      	adds	r3, #1
 8004168:	6123      	str	r3, [r4, #16]
 800416a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800416e:	2b00      	cmp	r3, #0
 8004170:	d09b      	beq.n	80040aa <_printf_float+0xa2>
 8004172:	232d      	movs	r3, #45	; 0x2d
 8004174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004178:	e797      	b.n	80040aa <_printf_float+0xa2>
 800417a:	2947      	cmp	r1, #71	; 0x47
 800417c:	d1bc      	bne.n	80040f8 <_printf_float+0xf0>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ba      	bne.n	80040f8 <_printf_float+0xf0>
 8004182:	2301      	movs	r3, #1
 8004184:	e7b7      	b.n	80040f6 <_printf_float+0xee>
 8004186:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800418a:	d118      	bne.n	80041be <_printf_float+0x1b6>
 800418c:	2900      	cmp	r1, #0
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	dd0b      	ble.n	80041aa <_printf_float+0x1a2>
 8004192:	6121      	str	r1, [r4, #16]
 8004194:	b913      	cbnz	r3, 800419c <_printf_float+0x194>
 8004196:	6822      	ldr	r2, [r4, #0]
 8004198:	07d0      	lsls	r0, r2, #31
 800419a:	d502      	bpl.n	80041a2 <_printf_float+0x19a>
 800419c:	3301      	adds	r3, #1
 800419e:	440b      	add	r3, r1
 80041a0:	6123      	str	r3, [r4, #16]
 80041a2:	f04f 0a00 	mov.w	sl, #0
 80041a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80041a8:	e7df      	b.n	800416a <_printf_float+0x162>
 80041aa:	b913      	cbnz	r3, 80041b2 <_printf_float+0x1aa>
 80041ac:	6822      	ldr	r2, [r4, #0]
 80041ae:	07d2      	lsls	r2, r2, #31
 80041b0:	d501      	bpl.n	80041b6 <_printf_float+0x1ae>
 80041b2:	3302      	adds	r3, #2
 80041b4:	e7f4      	b.n	80041a0 <_printf_float+0x198>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e7f2      	b.n	80041a0 <_printf_float+0x198>
 80041ba:	f04f 0967 	mov.w	r9, #103	; 0x67
 80041be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041c0:	4299      	cmp	r1, r3
 80041c2:	db05      	blt.n	80041d0 <_printf_float+0x1c8>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	6121      	str	r1, [r4, #16]
 80041c8:	07d8      	lsls	r0, r3, #31
 80041ca:	d5ea      	bpl.n	80041a2 <_printf_float+0x19a>
 80041cc:	1c4b      	adds	r3, r1, #1
 80041ce:	e7e7      	b.n	80041a0 <_printf_float+0x198>
 80041d0:	2900      	cmp	r1, #0
 80041d2:	bfcc      	ite	gt
 80041d4:	2201      	movgt	r2, #1
 80041d6:	f1c1 0202 	rsble	r2, r1, #2
 80041da:	4413      	add	r3, r2
 80041dc:	e7e0      	b.n	80041a0 <_printf_float+0x198>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	055a      	lsls	r2, r3, #21
 80041e2:	d407      	bmi.n	80041f4 <_printf_float+0x1ec>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	4642      	mov	r2, r8
 80041e8:	4631      	mov	r1, r6
 80041ea:	4628      	mov	r0, r5
 80041ec:	47b8      	blx	r7
 80041ee:	3001      	adds	r0, #1
 80041f0:	d12b      	bne.n	800424a <_printf_float+0x242>
 80041f2:	e764      	b.n	80040be <_printf_float+0xb6>
 80041f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80041f8:	f240 80dd 	bls.w	80043b6 <_printf_float+0x3ae>
 80041fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004200:	2200      	movs	r2, #0
 8004202:	2300      	movs	r3, #0
 8004204:	f7fc fbda 	bl	80009bc <__aeabi_dcmpeq>
 8004208:	2800      	cmp	r0, #0
 800420a:	d033      	beq.n	8004274 <_printf_float+0x26c>
 800420c:	2301      	movs	r3, #1
 800420e:	4631      	mov	r1, r6
 8004210:	4628      	mov	r0, r5
 8004212:	4a35      	ldr	r2, [pc, #212]	; (80042e8 <_printf_float+0x2e0>)
 8004214:	47b8      	blx	r7
 8004216:	3001      	adds	r0, #1
 8004218:	f43f af51 	beq.w	80040be <_printf_float+0xb6>
 800421c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004220:	429a      	cmp	r2, r3
 8004222:	db02      	blt.n	800422a <_printf_float+0x222>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	07d8      	lsls	r0, r3, #31
 8004228:	d50f      	bpl.n	800424a <_printf_float+0x242>
 800422a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800422e:	4631      	mov	r1, r6
 8004230:	4628      	mov	r0, r5
 8004232:	47b8      	blx	r7
 8004234:	3001      	adds	r0, #1
 8004236:	f43f af42 	beq.w	80040be <_printf_float+0xb6>
 800423a:	f04f 0800 	mov.w	r8, #0
 800423e:	f104 091a 	add.w	r9, r4, #26
 8004242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004244:	3b01      	subs	r3, #1
 8004246:	4543      	cmp	r3, r8
 8004248:	dc09      	bgt.n	800425e <_printf_float+0x256>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	079b      	lsls	r3, r3, #30
 800424e:	f100 8102 	bmi.w	8004456 <_printf_float+0x44e>
 8004252:	68e0      	ldr	r0, [r4, #12]
 8004254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004256:	4298      	cmp	r0, r3
 8004258:	bfb8      	it	lt
 800425a:	4618      	movlt	r0, r3
 800425c:	e731      	b.n	80040c2 <_printf_float+0xba>
 800425e:	2301      	movs	r3, #1
 8004260:	464a      	mov	r2, r9
 8004262:	4631      	mov	r1, r6
 8004264:	4628      	mov	r0, r5
 8004266:	47b8      	blx	r7
 8004268:	3001      	adds	r0, #1
 800426a:	f43f af28 	beq.w	80040be <_printf_float+0xb6>
 800426e:	f108 0801 	add.w	r8, r8, #1
 8004272:	e7e6      	b.n	8004242 <_printf_float+0x23a>
 8004274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004276:	2b00      	cmp	r3, #0
 8004278:	dc38      	bgt.n	80042ec <_printf_float+0x2e4>
 800427a:	2301      	movs	r3, #1
 800427c:	4631      	mov	r1, r6
 800427e:	4628      	mov	r0, r5
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <_printf_float+0x2e0>)
 8004282:	47b8      	blx	r7
 8004284:	3001      	adds	r0, #1
 8004286:	f43f af1a 	beq.w	80040be <_printf_float+0xb6>
 800428a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800428e:	4313      	orrs	r3, r2
 8004290:	d102      	bne.n	8004298 <_printf_float+0x290>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	07d9      	lsls	r1, r3, #31
 8004296:	d5d8      	bpl.n	800424a <_printf_float+0x242>
 8004298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800429c:	4631      	mov	r1, r6
 800429e:	4628      	mov	r0, r5
 80042a0:	47b8      	blx	r7
 80042a2:	3001      	adds	r0, #1
 80042a4:	f43f af0b 	beq.w	80040be <_printf_float+0xb6>
 80042a8:	f04f 0900 	mov.w	r9, #0
 80042ac:	f104 0a1a 	add.w	sl, r4, #26
 80042b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042b2:	425b      	negs	r3, r3
 80042b4:	454b      	cmp	r3, r9
 80042b6:	dc01      	bgt.n	80042bc <_printf_float+0x2b4>
 80042b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042ba:	e794      	b.n	80041e6 <_printf_float+0x1de>
 80042bc:	2301      	movs	r3, #1
 80042be:	4652      	mov	r2, sl
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	f43f aef9 	beq.w	80040be <_printf_float+0xb6>
 80042cc:	f109 0901 	add.w	r9, r9, #1
 80042d0:	e7ee      	b.n	80042b0 <_printf_float+0x2a8>
 80042d2:	bf00      	nop
 80042d4:	7fefffff 	.word	0x7fefffff
 80042d8:	080088e0 	.word	0x080088e0
 80042dc:	080088e4 	.word	0x080088e4
 80042e0:	080088ec 	.word	0x080088ec
 80042e4:	080088e8 	.word	0x080088e8
 80042e8:	080088f0 	.word	0x080088f0
 80042ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042f0:	429a      	cmp	r2, r3
 80042f2:	bfa8      	it	ge
 80042f4:	461a      	movge	r2, r3
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	4691      	mov	r9, r2
 80042fa:	dc37      	bgt.n	800436c <_printf_float+0x364>
 80042fc:	f04f 0b00 	mov.w	fp, #0
 8004300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004304:	f104 021a 	add.w	r2, r4, #26
 8004308:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800430c:	ebaa 0309 	sub.w	r3, sl, r9
 8004310:	455b      	cmp	r3, fp
 8004312:	dc33      	bgt.n	800437c <_printf_float+0x374>
 8004314:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004318:	429a      	cmp	r2, r3
 800431a:	db3b      	blt.n	8004394 <_printf_float+0x38c>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	07da      	lsls	r2, r3, #31
 8004320:	d438      	bmi.n	8004394 <_printf_float+0x38c>
 8004322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004324:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004326:	eba3 020a 	sub.w	r2, r3, sl
 800432a:	eba3 0901 	sub.w	r9, r3, r1
 800432e:	4591      	cmp	r9, r2
 8004330:	bfa8      	it	ge
 8004332:	4691      	movge	r9, r2
 8004334:	f1b9 0f00 	cmp.w	r9, #0
 8004338:	dc34      	bgt.n	80043a4 <_printf_float+0x39c>
 800433a:	f04f 0800 	mov.w	r8, #0
 800433e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004342:	f104 0a1a 	add.w	sl, r4, #26
 8004346:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	eba3 0309 	sub.w	r3, r3, r9
 8004350:	4543      	cmp	r3, r8
 8004352:	f77f af7a 	ble.w	800424a <_printf_float+0x242>
 8004356:	2301      	movs	r3, #1
 8004358:	4652      	mov	r2, sl
 800435a:	4631      	mov	r1, r6
 800435c:	4628      	mov	r0, r5
 800435e:	47b8      	blx	r7
 8004360:	3001      	adds	r0, #1
 8004362:	f43f aeac 	beq.w	80040be <_printf_float+0xb6>
 8004366:	f108 0801 	add.w	r8, r8, #1
 800436a:	e7ec      	b.n	8004346 <_printf_float+0x33e>
 800436c:	4613      	mov	r3, r2
 800436e:	4631      	mov	r1, r6
 8004370:	4642      	mov	r2, r8
 8004372:	4628      	mov	r0, r5
 8004374:	47b8      	blx	r7
 8004376:	3001      	adds	r0, #1
 8004378:	d1c0      	bne.n	80042fc <_printf_float+0x2f4>
 800437a:	e6a0      	b.n	80040be <_printf_float+0xb6>
 800437c:	2301      	movs	r3, #1
 800437e:	4631      	mov	r1, r6
 8004380:	4628      	mov	r0, r5
 8004382:	920b      	str	r2, [sp, #44]	; 0x2c
 8004384:	47b8      	blx	r7
 8004386:	3001      	adds	r0, #1
 8004388:	f43f ae99 	beq.w	80040be <_printf_float+0xb6>
 800438c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800438e:	f10b 0b01 	add.w	fp, fp, #1
 8004392:	e7b9      	b.n	8004308 <_printf_float+0x300>
 8004394:	4631      	mov	r1, r6
 8004396:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800439a:	4628      	mov	r0, r5
 800439c:	47b8      	blx	r7
 800439e:	3001      	adds	r0, #1
 80043a0:	d1bf      	bne.n	8004322 <_printf_float+0x31a>
 80043a2:	e68c      	b.n	80040be <_printf_float+0xb6>
 80043a4:	464b      	mov	r3, r9
 80043a6:	4631      	mov	r1, r6
 80043a8:	4628      	mov	r0, r5
 80043aa:	eb08 020a 	add.w	r2, r8, sl
 80043ae:	47b8      	blx	r7
 80043b0:	3001      	adds	r0, #1
 80043b2:	d1c2      	bne.n	800433a <_printf_float+0x332>
 80043b4:	e683      	b.n	80040be <_printf_float+0xb6>
 80043b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043b8:	2a01      	cmp	r2, #1
 80043ba:	dc01      	bgt.n	80043c0 <_printf_float+0x3b8>
 80043bc:	07db      	lsls	r3, r3, #31
 80043be:	d537      	bpl.n	8004430 <_printf_float+0x428>
 80043c0:	2301      	movs	r3, #1
 80043c2:	4642      	mov	r2, r8
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b8      	blx	r7
 80043ca:	3001      	adds	r0, #1
 80043cc:	f43f ae77 	beq.w	80040be <_printf_float+0xb6>
 80043d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043d4:	4631      	mov	r1, r6
 80043d6:	4628      	mov	r0, r5
 80043d8:	47b8      	blx	r7
 80043da:	3001      	adds	r0, #1
 80043dc:	f43f ae6f 	beq.w	80040be <_printf_float+0xb6>
 80043e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043e4:	2200      	movs	r2, #0
 80043e6:	2300      	movs	r3, #0
 80043e8:	f7fc fae8 	bl	80009bc <__aeabi_dcmpeq>
 80043ec:	b9d8      	cbnz	r0, 8004426 <_printf_float+0x41e>
 80043ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043f0:	f108 0201 	add.w	r2, r8, #1
 80043f4:	3b01      	subs	r3, #1
 80043f6:	4631      	mov	r1, r6
 80043f8:	4628      	mov	r0, r5
 80043fa:	47b8      	blx	r7
 80043fc:	3001      	adds	r0, #1
 80043fe:	d10e      	bne.n	800441e <_printf_float+0x416>
 8004400:	e65d      	b.n	80040be <_printf_float+0xb6>
 8004402:	2301      	movs	r3, #1
 8004404:	464a      	mov	r2, r9
 8004406:	4631      	mov	r1, r6
 8004408:	4628      	mov	r0, r5
 800440a:	47b8      	blx	r7
 800440c:	3001      	adds	r0, #1
 800440e:	f43f ae56 	beq.w	80040be <_printf_float+0xb6>
 8004412:	f108 0801 	add.w	r8, r8, #1
 8004416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004418:	3b01      	subs	r3, #1
 800441a:	4543      	cmp	r3, r8
 800441c:	dcf1      	bgt.n	8004402 <_printf_float+0x3fa>
 800441e:	4653      	mov	r3, sl
 8004420:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004424:	e6e0      	b.n	80041e8 <_printf_float+0x1e0>
 8004426:	f04f 0800 	mov.w	r8, #0
 800442a:	f104 091a 	add.w	r9, r4, #26
 800442e:	e7f2      	b.n	8004416 <_printf_float+0x40e>
 8004430:	2301      	movs	r3, #1
 8004432:	4642      	mov	r2, r8
 8004434:	e7df      	b.n	80043f6 <_printf_float+0x3ee>
 8004436:	2301      	movs	r3, #1
 8004438:	464a      	mov	r2, r9
 800443a:	4631      	mov	r1, r6
 800443c:	4628      	mov	r0, r5
 800443e:	47b8      	blx	r7
 8004440:	3001      	adds	r0, #1
 8004442:	f43f ae3c 	beq.w	80040be <_printf_float+0xb6>
 8004446:	f108 0801 	add.w	r8, r8, #1
 800444a:	68e3      	ldr	r3, [r4, #12]
 800444c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800444e:	1a5b      	subs	r3, r3, r1
 8004450:	4543      	cmp	r3, r8
 8004452:	dcf0      	bgt.n	8004436 <_printf_float+0x42e>
 8004454:	e6fd      	b.n	8004252 <_printf_float+0x24a>
 8004456:	f04f 0800 	mov.w	r8, #0
 800445a:	f104 0919 	add.w	r9, r4, #25
 800445e:	e7f4      	b.n	800444a <_printf_float+0x442>

08004460 <_printf_common>:
 8004460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004464:	4616      	mov	r6, r2
 8004466:	4699      	mov	r9, r3
 8004468:	688a      	ldr	r2, [r1, #8]
 800446a:	690b      	ldr	r3, [r1, #16]
 800446c:	4607      	mov	r7, r0
 800446e:	4293      	cmp	r3, r2
 8004470:	bfb8      	it	lt
 8004472:	4613      	movlt	r3, r2
 8004474:	6033      	str	r3, [r6, #0]
 8004476:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800447a:	460c      	mov	r4, r1
 800447c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004480:	b10a      	cbz	r2, 8004486 <_printf_common+0x26>
 8004482:	3301      	adds	r3, #1
 8004484:	6033      	str	r3, [r6, #0]
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	0699      	lsls	r1, r3, #26
 800448a:	bf42      	ittt	mi
 800448c:	6833      	ldrmi	r3, [r6, #0]
 800448e:	3302      	addmi	r3, #2
 8004490:	6033      	strmi	r3, [r6, #0]
 8004492:	6825      	ldr	r5, [r4, #0]
 8004494:	f015 0506 	ands.w	r5, r5, #6
 8004498:	d106      	bne.n	80044a8 <_printf_common+0x48>
 800449a:	f104 0a19 	add.w	sl, r4, #25
 800449e:	68e3      	ldr	r3, [r4, #12]
 80044a0:	6832      	ldr	r2, [r6, #0]
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	42ab      	cmp	r3, r5
 80044a6:	dc28      	bgt.n	80044fa <_printf_common+0x9a>
 80044a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044ac:	1e13      	subs	r3, r2, #0
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	bf18      	it	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	0692      	lsls	r2, r2, #26
 80044b6:	d42d      	bmi.n	8004514 <_printf_common+0xb4>
 80044b8:	4649      	mov	r1, r9
 80044ba:	4638      	mov	r0, r7
 80044bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044c0:	47c0      	blx	r8
 80044c2:	3001      	adds	r0, #1
 80044c4:	d020      	beq.n	8004508 <_printf_common+0xa8>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	68e5      	ldr	r5, [r4, #12]
 80044ca:	f003 0306 	and.w	r3, r3, #6
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	bf18      	it	ne
 80044d2:	2500      	movne	r5, #0
 80044d4:	6832      	ldr	r2, [r6, #0]
 80044d6:	f04f 0600 	mov.w	r6, #0
 80044da:	68a3      	ldr	r3, [r4, #8]
 80044dc:	bf08      	it	eq
 80044de:	1aad      	subeq	r5, r5, r2
 80044e0:	6922      	ldr	r2, [r4, #16]
 80044e2:	bf08      	it	eq
 80044e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e8:	4293      	cmp	r3, r2
 80044ea:	bfc4      	itt	gt
 80044ec:	1a9b      	subgt	r3, r3, r2
 80044ee:	18ed      	addgt	r5, r5, r3
 80044f0:	341a      	adds	r4, #26
 80044f2:	42b5      	cmp	r5, r6
 80044f4:	d11a      	bne.n	800452c <_printf_common+0xcc>
 80044f6:	2000      	movs	r0, #0
 80044f8:	e008      	b.n	800450c <_printf_common+0xac>
 80044fa:	2301      	movs	r3, #1
 80044fc:	4652      	mov	r2, sl
 80044fe:	4649      	mov	r1, r9
 8004500:	4638      	mov	r0, r7
 8004502:	47c0      	blx	r8
 8004504:	3001      	adds	r0, #1
 8004506:	d103      	bne.n	8004510 <_printf_common+0xb0>
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004510:	3501      	adds	r5, #1
 8004512:	e7c4      	b.n	800449e <_printf_common+0x3e>
 8004514:	2030      	movs	r0, #48	; 0x30
 8004516:	18e1      	adds	r1, r4, r3
 8004518:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004522:	4422      	add	r2, r4
 8004524:	3302      	adds	r3, #2
 8004526:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800452a:	e7c5      	b.n	80044b8 <_printf_common+0x58>
 800452c:	2301      	movs	r3, #1
 800452e:	4622      	mov	r2, r4
 8004530:	4649      	mov	r1, r9
 8004532:	4638      	mov	r0, r7
 8004534:	47c0      	blx	r8
 8004536:	3001      	adds	r0, #1
 8004538:	d0e6      	beq.n	8004508 <_printf_common+0xa8>
 800453a:	3601      	adds	r6, #1
 800453c:	e7d9      	b.n	80044f2 <_printf_common+0x92>
	...

08004540 <_printf_i>:
 8004540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004544:	7e0f      	ldrb	r7, [r1, #24]
 8004546:	4691      	mov	r9, r2
 8004548:	2f78      	cmp	r7, #120	; 0x78
 800454a:	4680      	mov	r8, r0
 800454c:	460c      	mov	r4, r1
 800454e:	469a      	mov	sl, r3
 8004550:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004552:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004556:	d807      	bhi.n	8004568 <_printf_i+0x28>
 8004558:	2f62      	cmp	r7, #98	; 0x62
 800455a:	d80a      	bhi.n	8004572 <_printf_i+0x32>
 800455c:	2f00      	cmp	r7, #0
 800455e:	f000 80d9 	beq.w	8004714 <_printf_i+0x1d4>
 8004562:	2f58      	cmp	r7, #88	; 0x58
 8004564:	f000 80a4 	beq.w	80046b0 <_printf_i+0x170>
 8004568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800456c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004570:	e03a      	b.n	80045e8 <_printf_i+0xa8>
 8004572:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004576:	2b15      	cmp	r3, #21
 8004578:	d8f6      	bhi.n	8004568 <_printf_i+0x28>
 800457a:	a101      	add	r1, pc, #4	; (adr r1, 8004580 <_printf_i+0x40>)
 800457c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045ed 	.word	0x080045ed
 8004588:	08004569 	.word	0x08004569
 800458c:	08004569 	.word	0x08004569
 8004590:	08004569 	.word	0x08004569
 8004594:	08004569 	.word	0x08004569
 8004598:	080045ed 	.word	0x080045ed
 800459c:	08004569 	.word	0x08004569
 80045a0:	08004569 	.word	0x08004569
 80045a4:	08004569 	.word	0x08004569
 80045a8:	08004569 	.word	0x08004569
 80045ac:	080046fb 	.word	0x080046fb
 80045b0:	0800461d 	.word	0x0800461d
 80045b4:	080046dd 	.word	0x080046dd
 80045b8:	08004569 	.word	0x08004569
 80045bc:	08004569 	.word	0x08004569
 80045c0:	0800471d 	.word	0x0800471d
 80045c4:	08004569 	.word	0x08004569
 80045c8:	0800461d 	.word	0x0800461d
 80045cc:	08004569 	.word	0x08004569
 80045d0:	08004569 	.word	0x08004569
 80045d4:	080046e5 	.word	0x080046e5
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	1d1a      	adds	r2, r3, #4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0a4      	b.n	8004736 <_printf_i+0x1f6>
 80045ec:	6820      	ldr	r0, [r4, #0]
 80045ee:	6829      	ldr	r1, [r5, #0]
 80045f0:	0606      	lsls	r6, r0, #24
 80045f2:	f101 0304 	add.w	r3, r1, #4
 80045f6:	d50a      	bpl.n	800460e <_printf_i+0xce>
 80045f8:	680e      	ldr	r6, [r1, #0]
 80045fa:	602b      	str	r3, [r5, #0]
 80045fc:	2e00      	cmp	r6, #0
 80045fe:	da03      	bge.n	8004608 <_printf_i+0xc8>
 8004600:	232d      	movs	r3, #45	; 0x2d
 8004602:	4276      	negs	r6, r6
 8004604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004608:	230a      	movs	r3, #10
 800460a:	485e      	ldr	r0, [pc, #376]	; (8004784 <_printf_i+0x244>)
 800460c:	e019      	b.n	8004642 <_printf_i+0x102>
 800460e:	680e      	ldr	r6, [r1, #0]
 8004610:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	bf18      	it	ne
 8004618:	b236      	sxthne	r6, r6
 800461a:	e7ef      	b.n	80045fc <_printf_i+0xbc>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	6820      	ldr	r0, [r4, #0]
 8004620:	1d19      	adds	r1, r3, #4
 8004622:	6029      	str	r1, [r5, #0]
 8004624:	0601      	lsls	r1, r0, #24
 8004626:	d501      	bpl.n	800462c <_printf_i+0xec>
 8004628:	681e      	ldr	r6, [r3, #0]
 800462a:	e002      	b.n	8004632 <_printf_i+0xf2>
 800462c:	0646      	lsls	r6, r0, #25
 800462e:	d5fb      	bpl.n	8004628 <_printf_i+0xe8>
 8004630:	881e      	ldrh	r6, [r3, #0]
 8004632:	2f6f      	cmp	r7, #111	; 0x6f
 8004634:	bf0c      	ite	eq
 8004636:	2308      	moveq	r3, #8
 8004638:	230a      	movne	r3, #10
 800463a:	4852      	ldr	r0, [pc, #328]	; (8004784 <_printf_i+0x244>)
 800463c:	2100      	movs	r1, #0
 800463e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004642:	6865      	ldr	r5, [r4, #4]
 8004644:	2d00      	cmp	r5, #0
 8004646:	bfa8      	it	ge
 8004648:	6821      	ldrge	r1, [r4, #0]
 800464a:	60a5      	str	r5, [r4, #8]
 800464c:	bfa4      	itt	ge
 800464e:	f021 0104 	bicge.w	r1, r1, #4
 8004652:	6021      	strge	r1, [r4, #0]
 8004654:	b90e      	cbnz	r6, 800465a <_printf_i+0x11a>
 8004656:	2d00      	cmp	r5, #0
 8004658:	d04d      	beq.n	80046f6 <_printf_i+0x1b6>
 800465a:	4615      	mov	r5, r2
 800465c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004660:	fb03 6711 	mls	r7, r3, r1, r6
 8004664:	5dc7      	ldrb	r7, [r0, r7]
 8004666:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800466a:	4637      	mov	r7, r6
 800466c:	42bb      	cmp	r3, r7
 800466e:	460e      	mov	r6, r1
 8004670:	d9f4      	bls.n	800465c <_printf_i+0x11c>
 8004672:	2b08      	cmp	r3, #8
 8004674:	d10b      	bne.n	800468e <_printf_i+0x14e>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	07de      	lsls	r6, r3, #31
 800467a:	d508      	bpl.n	800468e <_printf_i+0x14e>
 800467c:	6923      	ldr	r3, [r4, #16]
 800467e:	6861      	ldr	r1, [r4, #4]
 8004680:	4299      	cmp	r1, r3
 8004682:	bfde      	ittt	le
 8004684:	2330      	movle	r3, #48	; 0x30
 8004686:	f805 3c01 	strble.w	r3, [r5, #-1]
 800468a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800468e:	1b52      	subs	r2, r2, r5
 8004690:	6122      	str	r2, [r4, #16]
 8004692:	464b      	mov	r3, r9
 8004694:	4621      	mov	r1, r4
 8004696:	4640      	mov	r0, r8
 8004698:	f8cd a000 	str.w	sl, [sp]
 800469c:	aa03      	add	r2, sp, #12
 800469e:	f7ff fedf 	bl	8004460 <_printf_common>
 80046a2:	3001      	adds	r0, #1
 80046a4:	d14c      	bne.n	8004740 <_printf_i+0x200>
 80046a6:	f04f 30ff 	mov.w	r0, #4294967295
 80046aa:	b004      	add	sp, #16
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	4834      	ldr	r0, [pc, #208]	; (8004784 <_printf_i+0x244>)
 80046b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046b6:	6829      	ldr	r1, [r5, #0]
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80046be:	6029      	str	r1, [r5, #0]
 80046c0:	061d      	lsls	r5, r3, #24
 80046c2:	d514      	bpl.n	80046ee <_printf_i+0x1ae>
 80046c4:	07df      	lsls	r7, r3, #31
 80046c6:	bf44      	itt	mi
 80046c8:	f043 0320 	orrmi.w	r3, r3, #32
 80046cc:	6023      	strmi	r3, [r4, #0]
 80046ce:	b91e      	cbnz	r6, 80046d8 <_printf_i+0x198>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	f023 0320 	bic.w	r3, r3, #32
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	2310      	movs	r3, #16
 80046da:	e7af      	b.n	800463c <_printf_i+0xfc>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	f043 0320 	orr.w	r3, r3, #32
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	2378      	movs	r3, #120	; 0x78
 80046e6:	4828      	ldr	r0, [pc, #160]	; (8004788 <_printf_i+0x248>)
 80046e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046ec:	e7e3      	b.n	80046b6 <_printf_i+0x176>
 80046ee:	0659      	lsls	r1, r3, #25
 80046f0:	bf48      	it	mi
 80046f2:	b2b6      	uxthmi	r6, r6
 80046f4:	e7e6      	b.n	80046c4 <_printf_i+0x184>
 80046f6:	4615      	mov	r5, r2
 80046f8:	e7bb      	b.n	8004672 <_printf_i+0x132>
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	6826      	ldr	r6, [r4, #0]
 80046fe:	1d18      	adds	r0, r3, #4
 8004700:	6961      	ldr	r1, [r4, #20]
 8004702:	6028      	str	r0, [r5, #0]
 8004704:	0635      	lsls	r5, r6, #24
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	d501      	bpl.n	800470e <_printf_i+0x1ce>
 800470a:	6019      	str	r1, [r3, #0]
 800470c:	e002      	b.n	8004714 <_printf_i+0x1d4>
 800470e:	0670      	lsls	r0, r6, #25
 8004710:	d5fb      	bpl.n	800470a <_printf_i+0x1ca>
 8004712:	8019      	strh	r1, [r3, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	4615      	mov	r5, r2
 8004718:	6123      	str	r3, [r4, #16]
 800471a:	e7ba      	b.n	8004692 <_printf_i+0x152>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	2100      	movs	r1, #0
 8004720:	1d1a      	adds	r2, r3, #4
 8004722:	602a      	str	r2, [r5, #0]
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	6862      	ldr	r2, [r4, #4]
 8004728:	4628      	mov	r0, r5
 800472a:	f002 fbc1 	bl	8006eb0 <memchr>
 800472e:	b108      	cbz	r0, 8004734 <_printf_i+0x1f4>
 8004730:	1b40      	subs	r0, r0, r5
 8004732:	6060      	str	r0, [r4, #4]
 8004734:	6863      	ldr	r3, [r4, #4]
 8004736:	6123      	str	r3, [r4, #16]
 8004738:	2300      	movs	r3, #0
 800473a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473e:	e7a8      	b.n	8004692 <_printf_i+0x152>
 8004740:	462a      	mov	r2, r5
 8004742:	4649      	mov	r1, r9
 8004744:	4640      	mov	r0, r8
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	47d0      	blx	sl
 800474a:	3001      	adds	r0, #1
 800474c:	d0ab      	beq.n	80046a6 <_printf_i+0x166>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	079b      	lsls	r3, r3, #30
 8004752:	d413      	bmi.n	800477c <_printf_i+0x23c>
 8004754:	68e0      	ldr	r0, [r4, #12]
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	4298      	cmp	r0, r3
 800475a:	bfb8      	it	lt
 800475c:	4618      	movlt	r0, r3
 800475e:	e7a4      	b.n	80046aa <_printf_i+0x16a>
 8004760:	2301      	movs	r3, #1
 8004762:	4632      	mov	r2, r6
 8004764:	4649      	mov	r1, r9
 8004766:	4640      	mov	r0, r8
 8004768:	47d0      	blx	sl
 800476a:	3001      	adds	r0, #1
 800476c:	d09b      	beq.n	80046a6 <_printf_i+0x166>
 800476e:	3501      	adds	r5, #1
 8004770:	68e3      	ldr	r3, [r4, #12]
 8004772:	9903      	ldr	r1, [sp, #12]
 8004774:	1a5b      	subs	r3, r3, r1
 8004776:	42ab      	cmp	r3, r5
 8004778:	dcf2      	bgt.n	8004760 <_printf_i+0x220>
 800477a:	e7eb      	b.n	8004754 <_printf_i+0x214>
 800477c:	2500      	movs	r5, #0
 800477e:	f104 0619 	add.w	r6, r4, #25
 8004782:	e7f5      	b.n	8004770 <_printf_i+0x230>
 8004784:	080088f2 	.word	0x080088f2
 8004788:	08008903 	.word	0x08008903

0800478c <_scanf_float>:
 800478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004790:	b087      	sub	sp, #28
 8004792:	9303      	str	r3, [sp, #12]
 8004794:	688b      	ldr	r3, [r1, #8]
 8004796:	4617      	mov	r7, r2
 8004798:	1e5a      	subs	r2, r3, #1
 800479a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800479e:	bf85      	ittet	hi
 80047a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80047a4:	195b      	addhi	r3, r3, r5
 80047a6:	2300      	movls	r3, #0
 80047a8:	9302      	strhi	r3, [sp, #8]
 80047aa:	bf88      	it	hi
 80047ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80047b0:	468b      	mov	fp, r1
 80047b2:	f04f 0500 	mov.w	r5, #0
 80047b6:	bf8c      	ite	hi
 80047b8:	608b      	strhi	r3, [r1, #8]
 80047ba:	9302      	strls	r3, [sp, #8]
 80047bc:	680b      	ldr	r3, [r1, #0]
 80047be:	4680      	mov	r8, r0
 80047c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80047c4:	f84b 3b1c 	str.w	r3, [fp], #28
 80047c8:	460c      	mov	r4, r1
 80047ca:	465e      	mov	r6, fp
 80047cc:	46aa      	mov	sl, r5
 80047ce:	46a9      	mov	r9, r5
 80047d0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80047d4:	9501      	str	r5, [sp, #4]
 80047d6:	68a2      	ldr	r2, [r4, #8]
 80047d8:	b152      	cbz	r2, 80047f0 <_scanf_float+0x64>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b4e      	cmp	r3, #78	; 0x4e
 80047e0:	d864      	bhi.n	80048ac <_scanf_float+0x120>
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	d83c      	bhi.n	8004860 <_scanf_float+0xd4>
 80047e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80047ea:	b2c8      	uxtb	r0, r1
 80047ec:	280e      	cmp	r0, #14
 80047ee:	d93a      	bls.n	8004866 <_scanf_float+0xda>
 80047f0:	f1b9 0f00 	cmp.w	r9, #0
 80047f4:	d003      	beq.n	80047fe <_scanf_float+0x72>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004802:	f1ba 0f01 	cmp.w	sl, #1
 8004806:	f200 8113 	bhi.w	8004a30 <_scanf_float+0x2a4>
 800480a:	455e      	cmp	r6, fp
 800480c:	f200 8105 	bhi.w	8004a1a <_scanf_float+0x28e>
 8004810:	2501      	movs	r5, #1
 8004812:	4628      	mov	r0, r5
 8004814:	b007      	add	sp, #28
 8004816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800481e:	2a0d      	cmp	r2, #13
 8004820:	d8e6      	bhi.n	80047f0 <_scanf_float+0x64>
 8004822:	a101      	add	r1, pc, #4	; (adr r1, 8004828 <_scanf_float+0x9c>)
 8004824:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004828:	08004967 	.word	0x08004967
 800482c:	080047f1 	.word	0x080047f1
 8004830:	080047f1 	.word	0x080047f1
 8004834:	080047f1 	.word	0x080047f1
 8004838:	080049c7 	.word	0x080049c7
 800483c:	0800499f 	.word	0x0800499f
 8004840:	080047f1 	.word	0x080047f1
 8004844:	080047f1 	.word	0x080047f1
 8004848:	08004975 	.word	0x08004975
 800484c:	080047f1 	.word	0x080047f1
 8004850:	080047f1 	.word	0x080047f1
 8004854:	080047f1 	.word	0x080047f1
 8004858:	080047f1 	.word	0x080047f1
 800485c:	0800492d 	.word	0x0800492d
 8004860:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004864:	e7db      	b.n	800481e <_scanf_float+0x92>
 8004866:	290e      	cmp	r1, #14
 8004868:	d8c2      	bhi.n	80047f0 <_scanf_float+0x64>
 800486a:	a001      	add	r0, pc, #4	; (adr r0, 8004870 <_scanf_float+0xe4>)
 800486c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004870:	0800491f 	.word	0x0800491f
 8004874:	080047f1 	.word	0x080047f1
 8004878:	0800491f 	.word	0x0800491f
 800487c:	080049b3 	.word	0x080049b3
 8004880:	080047f1 	.word	0x080047f1
 8004884:	080048cd 	.word	0x080048cd
 8004888:	08004909 	.word	0x08004909
 800488c:	08004909 	.word	0x08004909
 8004890:	08004909 	.word	0x08004909
 8004894:	08004909 	.word	0x08004909
 8004898:	08004909 	.word	0x08004909
 800489c:	08004909 	.word	0x08004909
 80048a0:	08004909 	.word	0x08004909
 80048a4:	08004909 	.word	0x08004909
 80048a8:	08004909 	.word	0x08004909
 80048ac:	2b6e      	cmp	r3, #110	; 0x6e
 80048ae:	d809      	bhi.n	80048c4 <_scanf_float+0x138>
 80048b0:	2b60      	cmp	r3, #96	; 0x60
 80048b2:	d8b2      	bhi.n	800481a <_scanf_float+0x8e>
 80048b4:	2b54      	cmp	r3, #84	; 0x54
 80048b6:	d077      	beq.n	80049a8 <_scanf_float+0x21c>
 80048b8:	2b59      	cmp	r3, #89	; 0x59
 80048ba:	d199      	bne.n	80047f0 <_scanf_float+0x64>
 80048bc:	2d07      	cmp	r5, #7
 80048be:	d197      	bne.n	80047f0 <_scanf_float+0x64>
 80048c0:	2508      	movs	r5, #8
 80048c2:	e029      	b.n	8004918 <_scanf_float+0x18c>
 80048c4:	2b74      	cmp	r3, #116	; 0x74
 80048c6:	d06f      	beq.n	80049a8 <_scanf_float+0x21c>
 80048c8:	2b79      	cmp	r3, #121	; 0x79
 80048ca:	e7f6      	b.n	80048ba <_scanf_float+0x12e>
 80048cc:	6821      	ldr	r1, [r4, #0]
 80048ce:	05c8      	lsls	r0, r1, #23
 80048d0:	d51a      	bpl.n	8004908 <_scanf_float+0x17c>
 80048d2:	9b02      	ldr	r3, [sp, #8]
 80048d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80048d8:	6021      	str	r1, [r4, #0]
 80048da:	f109 0901 	add.w	r9, r9, #1
 80048de:	b11b      	cbz	r3, 80048e8 <_scanf_float+0x15c>
 80048e0:	3b01      	subs	r3, #1
 80048e2:	3201      	adds	r2, #1
 80048e4:	9302      	str	r3, [sp, #8]
 80048e6:	60a2      	str	r2, [r4, #8]
 80048e8:	68a3      	ldr	r3, [r4, #8]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	60a3      	str	r3, [r4, #8]
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	3301      	adds	r3, #1
 80048f2:	6123      	str	r3, [r4, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	f340 8084 	ble.w	8004a08 <_scanf_float+0x27c>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	e766      	b.n	80047d6 <_scanf_float+0x4a>
 8004908:	eb1a 0f05 	cmn.w	sl, r5
 800490c:	f47f af70 	bne.w	80047f0 <_scanf_float+0x64>
 8004910:	6822      	ldr	r2, [r4, #0]
 8004912:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004916:	6022      	str	r2, [r4, #0]
 8004918:	f806 3b01 	strb.w	r3, [r6], #1
 800491c:	e7e4      	b.n	80048e8 <_scanf_float+0x15c>
 800491e:	6822      	ldr	r2, [r4, #0]
 8004920:	0610      	lsls	r0, r2, #24
 8004922:	f57f af65 	bpl.w	80047f0 <_scanf_float+0x64>
 8004926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800492a:	e7f4      	b.n	8004916 <_scanf_float+0x18a>
 800492c:	f1ba 0f00 	cmp.w	sl, #0
 8004930:	d10e      	bne.n	8004950 <_scanf_float+0x1c4>
 8004932:	f1b9 0f00 	cmp.w	r9, #0
 8004936:	d10e      	bne.n	8004956 <_scanf_float+0x1ca>
 8004938:	6822      	ldr	r2, [r4, #0]
 800493a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800493e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004942:	d108      	bne.n	8004956 <_scanf_float+0x1ca>
 8004944:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004948:	f04f 0a01 	mov.w	sl, #1
 800494c:	6022      	str	r2, [r4, #0]
 800494e:	e7e3      	b.n	8004918 <_scanf_float+0x18c>
 8004950:	f1ba 0f02 	cmp.w	sl, #2
 8004954:	d055      	beq.n	8004a02 <_scanf_float+0x276>
 8004956:	2d01      	cmp	r5, #1
 8004958:	d002      	beq.n	8004960 <_scanf_float+0x1d4>
 800495a:	2d04      	cmp	r5, #4
 800495c:	f47f af48 	bne.w	80047f0 <_scanf_float+0x64>
 8004960:	3501      	adds	r5, #1
 8004962:	b2ed      	uxtb	r5, r5
 8004964:	e7d8      	b.n	8004918 <_scanf_float+0x18c>
 8004966:	f1ba 0f01 	cmp.w	sl, #1
 800496a:	f47f af41 	bne.w	80047f0 <_scanf_float+0x64>
 800496e:	f04f 0a02 	mov.w	sl, #2
 8004972:	e7d1      	b.n	8004918 <_scanf_float+0x18c>
 8004974:	b97d      	cbnz	r5, 8004996 <_scanf_float+0x20a>
 8004976:	f1b9 0f00 	cmp.w	r9, #0
 800497a:	f47f af3c 	bne.w	80047f6 <_scanf_float+0x6a>
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004984:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004988:	f47f af39 	bne.w	80047fe <_scanf_float+0x72>
 800498c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004990:	2501      	movs	r5, #1
 8004992:	6022      	str	r2, [r4, #0]
 8004994:	e7c0      	b.n	8004918 <_scanf_float+0x18c>
 8004996:	2d03      	cmp	r5, #3
 8004998:	d0e2      	beq.n	8004960 <_scanf_float+0x1d4>
 800499a:	2d05      	cmp	r5, #5
 800499c:	e7de      	b.n	800495c <_scanf_float+0x1d0>
 800499e:	2d02      	cmp	r5, #2
 80049a0:	f47f af26 	bne.w	80047f0 <_scanf_float+0x64>
 80049a4:	2503      	movs	r5, #3
 80049a6:	e7b7      	b.n	8004918 <_scanf_float+0x18c>
 80049a8:	2d06      	cmp	r5, #6
 80049aa:	f47f af21 	bne.w	80047f0 <_scanf_float+0x64>
 80049ae:	2507      	movs	r5, #7
 80049b0:	e7b2      	b.n	8004918 <_scanf_float+0x18c>
 80049b2:	6822      	ldr	r2, [r4, #0]
 80049b4:	0591      	lsls	r1, r2, #22
 80049b6:	f57f af1b 	bpl.w	80047f0 <_scanf_float+0x64>
 80049ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80049be:	6022      	str	r2, [r4, #0]
 80049c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80049c4:	e7a8      	b.n	8004918 <_scanf_float+0x18c>
 80049c6:	6822      	ldr	r2, [r4, #0]
 80049c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80049cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80049d0:	d006      	beq.n	80049e0 <_scanf_float+0x254>
 80049d2:	0550      	lsls	r0, r2, #21
 80049d4:	f57f af0c 	bpl.w	80047f0 <_scanf_float+0x64>
 80049d8:	f1b9 0f00 	cmp.w	r9, #0
 80049dc:	f43f af0f 	beq.w	80047fe <_scanf_float+0x72>
 80049e0:	0591      	lsls	r1, r2, #22
 80049e2:	bf58      	it	pl
 80049e4:	9901      	ldrpl	r1, [sp, #4]
 80049e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049ea:	bf58      	it	pl
 80049ec:	eba9 0101 	subpl.w	r1, r9, r1
 80049f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80049f4:	f04f 0900 	mov.w	r9, #0
 80049f8:	bf58      	it	pl
 80049fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80049fe:	6022      	str	r2, [r4, #0]
 8004a00:	e78a      	b.n	8004918 <_scanf_float+0x18c>
 8004a02:	f04f 0a03 	mov.w	sl, #3
 8004a06:	e787      	b.n	8004918 <_scanf_float+0x18c>
 8004a08:	4639      	mov	r1, r7
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a10:	4798      	blx	r3
 8004a12:	2800      	cmp	r0, #0
 8004a14:	f43f aedf 	beq.w	80047d6 <_scanf_float+0x4a>
 8004a18:	e6ea      	b.n	80047f0 <_scanf_float+0x64>
 8004a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a1e:	463a      	mov	r2, r7
 8004a20:	4640      	mov	r0, r8
 8004a22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a26:	4798      	blx	r3
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6123      	str	r3, [r4, #16]
 8004a2e:	e6ec      	b.n	800480a <_scanf_float+0x7e>
 8004a30:	1e6b      	subs	r3, r5, #1
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d825      	bhi.n	8004a82 <_scanf_float+0x2f6>
 8004a36:	2d02      	cmp	r5, #2
 8004a38:	d836      	bhi.n	8004aa8 <_scanf_float+0x31c>
 8004a3a:	455e      	cmp	r6, fp
 8004a3c:	f67f aee8 	bls.w	8004810 <_scanf_float+0x84>
 8004a40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a44:	463a      	mov	r2, r7
 8004a46:	4640      	mov	r0, r8
 8004a48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a4c:	4798      	blx	r3
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	6123      	str	r3, [r4, #16]
 8004a54:	e7f1      	b.n	8004a3a <_scanf_float+0x2ae>
 8004a56:	9802      	ldr	r0, [sp, #8]
 8004a58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a5c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004a60:	463a      	mov	r2, r7
 8004a62:	9002      	str	r0, [sp, #8]
 8004a64:	4640      	mov	r0, r8
 8004a66:	4798      	blx	r3
 8004a68:	6923      	ldr	r3, [r4, #16]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	6123      	str	r3, [r4, #16]
 8004a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a72:	fa5f fa8a 	uxtb.w	sl, sl
 8004a76:	f1ba 0f02 	cmp.w	sl, #2
 8004a7a:	d1ec      	bne.n	8004a56 <_scanf_float+0x2ca>
 8004a7c:	3d03      	subs	r5, #3
 8004a7e:	b2ed      	uxtb	r5, r5
 8004a80:	1b76      	subs	r6, r6, r5
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	05da      	lsls	r2, r3, #23
 8004a86:	d52f      	bpl.n	8004ae8 <_scanf_float+0x35c>
 8004a88:	055b      	lsls	r3, r3, #21
 8004a8a:	d510      	bpl.n	8004aae <_scanf_float+0x322>
 8004a8c:	455e      	cmp	r6, fp
 8004a8e:	f67f aebf 	bls.w	8004810 <_scanf_float+0x84>
 8004a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a96:	463a      	mov	r2, r7
 8004a98:	4640      	mov	r0, r8
 8004a9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a9e:	4798      	blx	r3
 8004aa0:	6923      	ldr	r3, [r4, #16]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	e7f1      	b.n	8004a8c <_scanf_float+0x300>
 8004aa8:	46aa      	mov	sl, r5
 8004aaa:	9602      	str	r6, [sp, #8]
 8004aac:	e7df      	b.n	8004a6e <_scanf_float+0x2e2>
 8004aae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	2965      	cmp	r1, #101	; 0x65
 8004ab6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004aba:	f106 35ff 	add.w	r5, r6, #4294967295
 8004abe:	6123      	str	r3, [r4, #16]
 8004ac0:	d00c      	beq.n	8004adc <_scanf_float+0x350>
 8004ac2:	2945      	cmp	r1, #69	; 0x45
 8004ac4:	d00a      	beq.n	8004adc <_scanf_float+0x350>
 8004ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aca:	463a      	mov	r2, r7
 8004acc:	4640      	mov	r0, r8
 8004ace:	4798      	blx	r3
 8004ad0:	6923      	ldr	r3, [r4, #16]
 8004ad2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	1eb5      	subs	r5, r6, #2
 8004ada:	6123      	str	r3, [r4, #16]
 8004adc:	463a      	mov	r2, r7
 8004ade:	4640      	mov	r0, r8
 8004ae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ae4:	4798      	blx	r3
 8004ae6:	462e      	mov	r6, r5
 8004ae8:	6825      	ldr	r5, [r4, #0]
 8004aea:	f015 0510 	ands.w	r5, r5, #16
 8004aee:	d155      	bne.n	8004b9c <_scanf_float+0x410>
 8004af0:	7035      	strb	r5, [r6, #0]
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afc:	d11b      	bne.n	8004b36 <_scanf_float+0x3aa>
 8004afe:	9b01      	ldr	r3, [sp, #4]
 8004b00:	454b      	cmp	r3, r9
 8004b02:	eba3 0209 	sub.w	r2, r3, r9
 8004b06:	d123      	bne.n	8004b50 <_scanf_float+0x3c4>
 8004b08:	2200      	movs	r2, #0
 8004b0a:	4659      	mov	r1, fp
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	f000 febf 	bl	8005890 <_strtod_r>
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	9b03      	ldr	r3, [sp, #12]
 8004b16:	f012 0f02 	tst.w	r2, #2
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	460f      	mov	r7, r1
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	d021      	beq.n	8004b66 <_scanf_float+0x3da>
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	9903      	ldr	r1, [sp, #12]
 8004b26:	600a      	str	r2, [r1, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	e9c3 6700 	strd	r6, r7, [r3]
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	3301      	adds	r3, #1
 8004b32:	60e3      	str	r3, [r4, #12]
 8004b34:	e66d      	b.n	8004812 <_scanf_float+0x86>
 8004b36:	9b04      	ldr	r3, [sp, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0e5      	beq.n	8004b08 <_scanf_float+0x37c>
 8004b3c:	9905      	ldr	r1, [sp, #20]
 8004b3e:	230a      	movs	r3, #10
 8004b40:	462a      	mov	r2, r5
 8004b42:	4640      	mov	r0, r8
 8004b44:	3101      	adds	r1, #1
 8004b46:	f000 ff81 	bl	8005a4c <_strtol_r>
 8004b4a:	9b04      	ldr	r3, [sp, #16]
 8004b4c:	9e05      	ldr	r6, [sp, #20]
 8004b4e:	1ac2      	subs	r2, r0, r3
 8004b50:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004b54:	429e      	cmp	r6, r3
 8004b56:	bf28      	it	cs
 8004b58:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	4910      	ldr	r1, [pc, #64]	; (8004ba0 <_scanf_float+0x414>)
 8004b60:	f000 f85a 	bl	8004c18 <siprintf>
 8004b64:	e7d0      	b.n	8004b08 <_scanf_float+0x37c>
 8004b66:	f012 0f04 	tst.w	r2, #4
 8004b6a:	f103 0204 	add.w	r2, r3, #4
 8004b6e:	d1d9      	bne.n	8004b24 <_scanf_float+0x398>
 8004b70:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004b74:	f8cc 2000 	str.w	r2, [ip]
 8004b78:	f8d3 8000 	ldr.w	r8, [r3]
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	f7fb ff4e 	bl	8000a20 <__aeabi_dcmpun>
 8004b84:	b128      	cbz	r0, 8004b92 <_scanf_float+0x406>
 8004b86:	4807      	ldr	r0, [pc, #28]	; (8004ba4 <_scanf_float+0x418>)
 8004b88:	f000 f80e 	bl	8004ba8 <nanf>
 8004b8c:	f8c8 0000 	str.w	r0, [r8]
 8004b90:	e7cd      	b.n	8004b2e <_scanf_float+0x3a2>
 8004b92:	4630      	mov	r0, r6
 8004b94:	4639      	mov	r1, r7
 8004b96:	f7fb ffa1 	bl	8000adc <__aeabi_d2f>
 8004b9a:	e7f7      	b.n	8004b8c <_scanf_float+0x400>
 8004b9c:	2500      	movs	r5, #0
 8004b9e:	e638      	b.n	8004812 <_scanf_float+0x86>
 8004ba0:	08008914 	.word	0x08008914
 8004ba4:	0800889e 	.word	0x0800889e

08004ba8 <nanf>:
 8004ba8:	4800      	ldr	r0, [pc, #0]	; (8004bac <nanf+0x4>)
 8004baa:	4770      	bx	lr
 8004bac:	7fc00000 	.word	0x7fc00000

08004bb0 <sniprintf>:
 8004bb0:	b40c      	push	{r2, r3}
 8004bb2:	b530      	push	{r4, r5, lr}
 8004bb4:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <sniprintf+0x64>)
 8004bb6:	1e0c      	subs	r4, r1, #0
 8004bb8:	681d      	ldr	r5, [r3, #0]
 8004bba:	b09d      	sub	sp, #116	; 0x74
 8004bbc:	da08      	bge.n	8004bd0 <sniprintf+0x20>
 8004bbe:	238b      	movs	r3, #139	; 0x8b
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc4:	602b      	str	r3, [r5, #0]
 8004bc6:	b01d      	add	sp, #116	; 0x74
 8004bc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bcc:	b002      	add	sp, #8
 8004bce:	4770      	bx	lr
 8004bd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004bd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004bd8:	bf0c      	ite	eq
 8004bda:	4623      	moveq	r3, r4
 8004bdc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004be0:	9304      	str	r3, [sp, #16]
 8004be2:	9307      	str	r3, [sp, #28]
 8004be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004be8:	9002      	str	r0, [sp, #8]
 8004bea:	9006      	str	r0, [sp, #24]
 8004bec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	ab21      	add	r3, sp, #132	; 0x84
 8004bf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004bf6:	a902      	add	r1, sp, #8
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	f002 ff79 	bl	8007af0 <_svfiprintf_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	bfbc      	itt	lt
 8004c02:	238b      	movlt	r3, #139	; 0x8b
 8004c04:	602b      	strlt	r3, [r5, #0]
 8004c06:	2c00      	cmp	r4, #0
 8004c08:	d0dd      	beq.n	8004bc6 <sniprintf+0x16>
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	9b02      	ldr	r3, [sp, #8]
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	e7d9      	b.n	8004bc6 <sniprintf+0x16>
 8004c12:	bf00      	nop
 8004c14:	2000000c 	.word	0x2000000c

08004c18 <siprintf>:
 8004c18:	b40e      	push	{r1, r2, r3}
 8004c1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c1e:	b500      	push	{lr}
 8004c20:	b09c      	sub	sp, #112	; 0x70
 8004c22:	ab1d      	add	r3, sp, #116	; 0x74
 8004c24:	9002      	str	r0, [sp, #8]
 8004c26:	9006      	str	r0, [sp, #24]
 8004c28:	9107      	str	r1, [sp, #28]
 8004c2a:	9104      	str	r1, [sp, #16]
 8004c2c:	4808      	ldr	r0, [pc, #32]	; (8004c50 <siprintf+0x38>)
 8004c2e:	4909      	ldr	r1, [pc, #36]	; (8004c54 <siprintf+0x3c>)
 8004c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c34:	9105      	str	r1, [sp, #20]
 8004c36:	6800      	ldr	r0, [r0, #0]
 8004c38:	a902      	add	r1, sp, #8
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	f002 ff58 	bl	8007af0 <_svfiprintf_r>
 8004c40:	2200      	movs	r2, #0
 8004c42:	9b02      	ldr	r3, [sp, #8]
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	b01c      	add	sp, #112	; 0x70
 8004c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c4c:	b003      	add	sp, #12
 8004c4e:	4770      	bx	lr
 8004c50:	2000000c 	.word	0x2000000c
 8004c54:	ffff0208 	.word	0xffff0208

08004c58 <strncpy>:
 8004c58:	4603      	mov	r3, r0
 8004c5a:	b510      	push	{r4, lr}
 8004c5c:	3901      	subs	r1, #1
 8004c5e:	b132      	cbz	r2, 8004c6e <strncpy+0x16>
 8004c60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004c64:	3a01      	subs	r2, #1
 8004c66:	f803 4b01 	strb.w	r4, [r3], #1
 8004c6a:	2c00      	cmp	r4, #0
 8004c6c:	d1f7      	bne.n	8004c5e <strncpy+0x6>
 8004c6e:	2100      	movs	r1, #0
 8004c70:	441a      	add	r2, r3
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d100      	bne.n	8004c78 <strncpy+0x20>
 8004c76:	bd10      	pop	{r4, pc}
 8004c78:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7c:	e7f9      	b.n	8004c72 <strncpy+0x1a>

08004c7e <sulp>:
 8004c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c82:	460f      	mov	r7, r1
 8004c84:	4690      	mov	r8, r2
 8004c86:	f002 fc9f 	bl	80075c8 <__ulp>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	f1b8 0f00 	cmp.w	r8, #0
 8004c92:	d011      	beq.n	8004cb8 <sulp+0x3a>
 8004c94:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004c98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	dd0b      	ble.n	8004cb8 <sulp+0x3a>
 8004ca0:	2400      	movs	r4, #0
 8004ca2:	051b      	lsls	r3, r3, #20
 8004ca4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004ca8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004cac:	4622      	mov	r2, r4
 8004cae:	462b      	mov	r3, r5
 8004cb0:	f7fb fc1c 	bl	80004ec <__aeabi_dmul>
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	460d      	mov	r5, r1
 8004cb8:	4620      	mov	r0, r4
 8004cba:	4629      	mov	r1, r5
 8004cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004cc0 <_strtod_l>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	469b      	mov	fp, r3
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	b09f      	sub	sp, #124	; 0x7c
 8004cca:	931a      	str	r3, [sp, #104]	; 0x68
 8004ccc:	4b9e      	ldr	r3, [pc, #632]	; (8004f48 <_strtod_l+0x288>)
 8004cce:	4682      	mov	sl, r0
 8004cd0:	681f      	ldr	r7, [r3, #0]
 8004cd2:	460e      	mov	r6, r1
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	9215      	str	r2, [sp, #84]	; 0x54
 8004cd8:	f7fb fa44 	bl	8000164 <strlen>
 8004cdc:	f04f 0800 	mov.w	r8, #0
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	f04f 0900 	mov.w	r9, #0
 8004ce6:	9619      	str	r6, [sp, #100]	; 0x64
 8004ce8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cea:	781a      	ldrb	r2, [r3, #0]
 8004cec:	2a2b      	cmp	r2, #43	; 0x2b
 8004cee:	d04c      	beq.n	8004d8a <_strtod_l+0xca>
 8004cf0:	d83a      	bhi.n	8004d68 <_strtod_l+0xa8>
 8004cf2:	2a0d      	cmp	r2, #13
 8004cf4:	d833      	bhi.n	8004d5e <_strtod_l+0x9e>
 8004cf6:	2a08      	cmp	r2, #8
 8004cf8:	d833      	bhi.n	8004d62 <_strtod_l+0xa2>
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	d03d      	beq.n	8004d7a <_strtod_l+0xba>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	930a      	str	r3, [sp, #40]	; 0x28
 8004d02:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004d04:	782b      	ldrb	r3, [r5, #0]
 8004d06:	2b30      	cmp	r3, #48	; 0x30
 8004d08:	f040 80aa 	bne.w	8004e60 <_strtod_l+0x1a0>
 8004d0c:	786b      	ldrb	r3, [r5, #1]
 8004d0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004d12:	2b58      	cmp	r3, #88	; 0x58
 8004d14:	d166      	bne.n	8004de4 <_strtod_l+0x124>
 8004d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d18:	4650      	mov	r0, sl
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	ab1a      	add	r3, sp, #104	; 0x68
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	4a8a      	ldr	r2, [pc, #552]	; (8004f4c <_strtod_l+0x28c>)
 8004d22:	f8cd b008 	str.w	fp, [sp, #8]
 8004d26:	ab1b      	add	r3, sp, #108	; 0x6c
 8004d28:	a919      	add	r1, sp, #100	; 0x64
 8004d2a:	f001 fda5 	bl	8006878 <__gethex>
 8004d2e:	f010 0607 	ands.w	r6, r0, #7
 8004d32:	4604      	mov	r4, r0
 8004d34:	d005      	beq.n	8004d42 <_strtod_l+0x82>
 8004d36:	2e06      	cmp	r6, #6
 8004d38:	d129      	bne.n	8004d8e <_strtod_l+0xce>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	3501      	adds	r5, #1
 8004d3e:	9519      	str	r5, [sp, #100]	; 0x64
 8004d40:	930a      	str	r3, [sp, #40]	; 0x28
 8004d42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f040 858a 	bne.w	800585e <_strtod_l+0xb9e>
 8004d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d4c:	b1d3      	cbz	r3, 8004d84 <_strtod_l+0xc4>
 8004d4e:	4642      	mov	r2, r8
 8004d50:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	b01f      	add	sp, #124	; 0x7c
 8004d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5e:	2a20      	cmp	r2, #32
 8004d60:	d1cd      	bne.n	8004cfe <_strtod_l+0x3e>
 8004d62:	3301      	adds	r3, #1
 8004d64:	9319      	str	r3, [sp, #100]	; 0x64
 8004d66:	e7bf      	b.n	8004ce8 <_strtod_l+0x28>
 8004d68:	2a2d      	cmp	r2, #45	; 0x2d
 8004d6a:	d1c8      	bne.n	8004cfe <_strtod_l+0x3e>
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	920a      	str	r2, [sp, #40]	; 0x28
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	9219      	str	r2, [sp, #100]	; 0x64
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1c3      	bne.n	8004d02 <_strtod_l+0x42>
 8004d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d7c:	9619      	str	r6, [sp, #100]	; 0x64
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f040 856b 	bne.w	800585a <_strtod_l+0xb9a>
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	e7e4      	b.n	8004d54 <_strtod_l+0x94>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	e7ef      	b.n	8004d6e <_strtod_l+0xae>
 8004d8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d90:	b13a      	cbz	r2, 8004da2 <_strtod_l+0xe2>
 8004d92:	2135      	movs	r1, #53	; 0x35
 8004d94:	a81c      	add	r0, sp, #112	; 0x70
 8004d96:	f002 fd1b 	bl	80077d0 <__copybits>
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d9e:	f002 f8e3 	bl	8006f68 <_Bfree>
 8004da2:	3e01      	subs	r6, #1
 8004da4:	2e04      	cmp	r6, #4
 8004da6:	d806      	bhi.n	8004db6 <_strtod_l+0xf6>
 8004da8:	e8df f006 	tbb	[pc, r6]
 8004dac:	1714030a 	.word	0x1714030a
 8004db0:	0a          	.byte	0x0a
 8004db1:	00          	.byte	0x00
 8004db2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004db6:	0721      	lsls	r1, r4, #28
 8004db8:	d5c3      	bpl.n	8004d42 <_strtod_l+0x82>
 8004dba:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004dbe:	e7c0      	b.n	8004d42 <_strtod_l+0x82>
 8004dc0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004dc2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004dc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004dca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004dce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004dd2:	e7f0      	b.n	8004db6 <_strtod_l+0xf6>
 8004dd4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004f50 <_strtod_l+0x290>
 8004dd8:	e7ed      	b.n	8004db6 <_strtod_l+0xf6>
 8004dda:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004dde:	f04f 38ff 	mov.w	r8, #4294967295
 8004de2:	e7e8      	b.n	8004db6 <_strtod_l+0xf6>
 8004de4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	9219      	str	r2, [sp, #100]	; 0x64
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	2b30      	cmp	r3, #48	; 0x30
 8004dee:	d0f9      	beq.n	8004de4 <_strtod_l+0x124>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0a6      	beq.n	8004d42 <_strtod_l+0x82>
 8004df4:	2301      	movs	r3, #1
 8004df6:	9307      	str	r3, [sp, #28]
 8004df8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dfa:	220a      	movs	r2, #10
 8004dfc:	9308      	str	r3, [sp, #32]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	469b      	mov	fp, r3
 8004e02:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004e06:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004e08:	7805      	ldrb	r5, [r0, #0]
 8004e0a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004e0e:	b2d9      	uxtb	r1, r3
 8004e10:	2909      	cmp	r1, #9
 8004e12:	d927      	bls.n	8004e64 <_strtod_l+0x1a4>
 8004e14:	4622      	mov	r2, r4
 8004e16:	4639      	mov	r1, r7
 8004e18:	f003 f8d8 	bl	8007fcc <strncmp>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d033      	beq.n	8004e88 <_strtod_l+0x1c8>
 8004e20:	2000      	movs	r0, #0
 8004e22:	462a      	mov	r2, r5
 8004e24:	465c      	mov	r4, fp
 8004e26:	4603      	mov	r3, r0
 8004e28:	9004      	str	r0, [sp, #16]
 8004e2a:	2a65      	cmp	r2, #101	; 0x65
 8004e2c:	d001      	beq.n	8004e32 <_strtod_l+0x172>
 8004e2e:	2a45      	cmp	r2, #69	; 0x45
 8004e30:	d114      	bne.n	8004e5c <_strtod_l+0x19c>
 8004e32:	b91c      	cbnz	r4, 8004e3c <_strtod_l+0x17c>
 8004e34:	9a07      	ldr	r2, [sp, #28]
 8004e36:	4302      	orrs	r2, r0
 8004e38:	d09f      	beq.n	8004d7a <_strtod_l+0xba>
 8004e3a:	2400      	movs	r4, #0
 8004e3c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004e3e:	1c72      	adds	r2, r6, #1
 8004e40:	9219      	str	r2, [sp, #100]	; 0x64
 8004e42:	7872      	ldrb	r2, [r6, #1]
 8004e44:	2a2b      	cmp	r2, #43	; 0x2b
 8004e46:	d079      	beq.n	8004f3c <_strtod_l+0x27c>
 8004e48:	2a2d      	cmp	r2, #45	; 0x2d
 8004e4a:	f000 8083 	beq.w	8004f54 <_strtod_l+0x294>
 8004e4e:	2700      	movs	r7, #0
 8004e50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e54:	2909      	cmp	r1, #9
 8004e56:	f240 8083 	bls.w	8004f60 <_strtod_l+0x2a0>
 8004e5a:	9619      	str	r6, [sp, #100]	; 0x64
 8004e5c:	2500      	movs	r5, #0
 8004e5e:	e09f      	b.n	8004fa0 <_strtod_l+0x2e0>
 8004e60:	2300      	movs	r3, #0
 8004e62:	e7c8      	b.n	8004df6 <_strtod_l+0x136>
 8004e64:	f1bb 0f08 	cmp.w	fp, #8
 8004e68:	bfd5      	itete	le
 8004e6a:	9906      	ldrle	r1, [sp, #24]
 8004e6c:	9905      	ldrgt	r1, [sp, #20]
 8004e6e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e72:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004e76:	f100 0001 	add.w	r0, r0, #1
 8004e7a:	bfd4      	ite	le
 8004e7c:	9306      	strle	r3, [sp, #24]
 8004e7e:	9305      	strgt	r3, [sp, #20]
 8004e80:	f10b 0b01 	add.w	fp, fp, #1
 8004e84:	9019      	str	r0, [sp, #100]	; 0x64
 8004e86:	e7be      	b.n	8004e06 <_strtod_l+0x146>
 8004e88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e8a:	191a      	adds	r2, r3, r4
 8004e8c:	9219      	str	r2, [sp, #100]	; 0x64
 8004e8e:	5d1a      	ldrb	r2, [r3, r4]
 8004e90:	f1bb 0f00 	cmp.w	fp, #0
 8004e94:	d036      	beq.n	8004f04 <_strtod_l+0x244>
 8004e96:	465c      	mov	r4, fp
 8004e98:	9004      	str	r0, [sp, #16]
 8004e9a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	d912      	bls.n	8004ec8 <_strtod_l+0x208>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e7c1      	b.n	8004e2a <_strtod_l+0x16a>
 8004ea6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	9219      	str	r2, [sp, #100]	; 0x64
 8004eae:	785a      	ldrb	r2, [r3, #1]
 8004eb0:	2a30      	cmp	r2, #48	; 0x30
 8004eb2:	d0f8      	beq.n	8004ea6 <_strtod_l+0x1e6>
 8004eb4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	f200 84d5 	bhi.w	8005868 <_strtod_l+0xba8>
 8004ebe:	9004      	str	r0, [sp, #16]
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ec6:	9308      	str	r3, [sp, #32]
 8004ec8:	3a30      	subs	r2, #48	; 0x30
 8004eca:	f100 0301 	add.w	r3, r0, #1
 8004ece:	d013      	beq.n	8004ef8 <_strtod_l+0x238>
 8004ed0:	9904      	ldr	r1, [sp, #16]
 8004ed2:	1905      	adds	r5, r0, r4
 8004ed4:	4419      	add	r1, r3
 8004ed6:	9104      	str	r1, [sp, #16]
 8004ed8:	4623      	mov	r3, r4
 8004eda:	210a      	movs	r1, #10
 8004edc:	42ab      	cmp	r3, r5
 8004ede:	d113      	bne.n	8004f08 <_strtod_l+0x248>
 8004ee0:	1823      	adds	r3, r4, r0
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	f104 0401 	add.w	r4, r4, #1
 8004ee8:	4404      	add	r4, r0
 8004eea:	dc1b      	bgt.n	8004f24 <_strtod_l+0x264>
 8004eec:	230a      	movs	r3, #10
 8004eee:	9906      	ldr	r1, [sp, #24]
 8004ef0:	fb03 2301 	mla	r3, r3, r1, r2
 8004ef4:	9306      	str	r3, [sp, #24]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004efa:	4618      	mov	r0, r3
 8004efc:	1c51      	adds	r1, r2, #1
 8004efe:	9119      	str	r1, [sp, #100]	; 0x64
 8004f00:	7852      	ldrb	r2, [r2, #1]
 8004f02:	e7ca      	b.n	8004e9a <_strtod_l+0x1da>
 8004f04:	4658      	mov	r0, fp
 8004f06:	e7d3      	b.n	8004eb0 <_strtod_l+0x1f0>
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	dc04      	bgt.n	8004f16 <_strtod_l+0x256>
 8004f0c:	9f06      	ldr	r7, [sp, #24]
 8004f0e:	434f      	muls	r7, r1
 8004f10:	9706      	str	r7, [sp, #24]
 8004f12:	3301      	adds	r3, #1
 8004f14:	e7e2      	b.n	8004edc <_strtod_l+0x21c>
 8004f16:	1c5f      	adds	r7, r3, #1
 8004f18:	2f10      	cmp	r7, #16
 8004f1a:	bfde      	ittt	le
 8004f1c:	9f05      	ldrle	r7, [sp, #20]
 8004f1e:	434f      	mulle	r7, r1
 8004f20:	9705      	strle	r7, [sp, #20]
 8004f22:	e7f6      	b.n	8004f12 <_strtod_l+0x252>
 8004f24:	2c10      	cmp	r4, #16
 8004f26:	bfdf      	itttt	le
 8004f28:	230a      	movle	r3, #10
 8004f2a:	9905      	ldrle	r1, [sp, #20]
 8004f2c:	fb03 2301 	mlale	r3, r3, r1, r2
 8004f30:	9305      	strle	r3, [sp, #20]
 8004f32:	e7e0      	b.n	8004ef6 <_strtod_l+0x236>
 8004f34:	2300      	movs	r3, #0
 8004f36:	9304      	str	r3, [sp, #16]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e77b      	b.n	8004e34 <_strtod_l+0x174>
 8004f3c:	2700      	movs	r7, #0
 8004f3e:	1cb2      	adds	r2, r6, #2
 8004f40:	9219      	str	r2, [sp, #100]	; 0x64
 8004f42:	78b2      	ldrb	r2, [r6, #2]
 8004f44:	e784      	b.n	8004e50 <_strtod_l+0x190>
 8004f46:	bf00      	nop
 8004f48:	08008c00 	.word	0x08008c00
 8004f4c:	0800891c 	.word	0x0800891c
 8004f50:	7ff00000 	.word	0x7ff00000
 8004f54:	2701      	movs	r7, #1
 8004f56:	e7f2      	b.n	8004f3e <_strtod_l+0x27e>
 8004f58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f5a:	1c51      	adds	r1, r2, #1
 8004f5c:	9119      	str	r1, [sp, #100]	; 0x64
 8004f5e:	7852      	ldrb	r2, [r2, #1]
 8004f60:	2a30      	cmp	r2, #48	; 0x30
 8004f62:	d0f9      	beq.n	8004f58 <_strtod_l+0x298>
 8004f64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004f68:	2908      	cmp	r1, #8
 8004f6a:	f63f af77 	bhi.w	8004e5c <_strtod_l+0x19c>
 8004f6e:	f04f 0e0a 	mov.w	lr, #10
 8004f72:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004f76:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f78:	9209      	str	r2, [sp, #36]	; 0x24
 8004f7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f7c:	1c51      	adds	r1, r2, #1
 8004f7e:	9119      	str	r1, [sp, #100]	; 0x64
 8004f80:	7852      	ldrb	r2, [r2, #1]
 8004f82:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004f86:	2d09      	cmp	r5, #9
 8004f88:	d935      	bls.n	8004ff6 <_strtod_l+0x336>
 8004f8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f8c:	1b49      	subs	r1, r1, r5
 8004f8e:	2908      	cmp	r1, #8
 8004f90:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004f94:	dc02      	bgt.n	8004f9c <_strtod_l+0x2dc>
 8004f96:	4565      	cmp	r5, ip
 8004f98:	bfa8      	it	ge
 8004f9a:	4665      	movge	r5, ip
 8004f9c:	b107      	cbz	r7, 8004fa0 <_strtod_l+0x2e0>
 8004f9e:	426d      	negs	r5, r5
 8004fa0:	2c00      	cmp	r4, #0
 8004fa2:	d14c      	bne.n	800503e <_strtod_l+0x37e>
 8004fa4:	9907      	ldr	r1, [sp, #28]
 8004fa6:	4301      	orrs	r1, r0
 8004fa8:	f47f aecb 	bne.w	8004d42 <_strtod_l+0x82>
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f47f aee4 	bne.w	8004d7a <_strtod_l+0xba>
 8004fb2:	2a69      	cmp	r2, #105	; 0x69
 8004fb4:	d026      	beq.n	8005004 <_strtod_l+0x344>
 8004fb6:	dc23      	bgt.n	8005000 <_strtod_l+0x340>
 8004fb8:	2a49      	cmp	r2, #73	; 0x49
 8004fba:	d023      	beq.n	8005004 <_strtod_l+0x344>
 8004fbc:	2a4e      	cmp	r2, #78	; 0x4e
 8004fbe:	f47f aedc 	bne.w	8004d7a <_strtod_l+0xba>
 8004fc2:	499d      	ldr	r1, [pc, #628]	; (8005238 <_strtod_l+0x578>)
 8004fc4:	a819      	add	r0, sp, #100	; 0x64
 8004fc6:	f001 fea5 	bl	8006d14 <__match>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	f43f aed5 	beq.w	8004d7a <_strtod_l+0xba>
 8004fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b28      	cmp	r3, #40	; 0x28
 8004fd6:	d12c      	bne.n	8005032 <_strtod_l+0x372>
 8004fd8:	4998      	ldr	r1, [pc, #608]	; (800523c <_strtod_l+0x57c>)
 8004fda:	aa1c      	add	r2, sp, #112	; 0x70
 8004fdc:	a819      	add	r0, sp, #100	; 0x64
 8004fde:	f001 fead 	bl	8006d3c <__hexnan>
 8004fe2:	2805      	cmp	r0, #5
 8004fe4:	d125      	bne.n	8005032 <_strtod_l+0x372>
 8004fe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004fe8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004fec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004ff0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004ff4:	e6a5      	b.n	8004d42 <_strtod_l+0x82>
 8004ff6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004ffa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004ffe:	e7bc      	b.n	8004f7a <_strtod_l+0x2ba>
 8005000:	2a6e      	cmp	r2, #110	; 0x6e
 8005002:	e7dc      	b.n	8004fbe <_strtod_l+0x2fe>
 8005004:	498e      	ldr	r1, [pc, #568]	; (8005240 <_strtod_l+0x580>)
 8005006:	a819      	add	r0, sp, #100	; 0x64
 8005008:	f001 fe84 	bl	8006d14 <__match>
 800500c:	2800      	cmp	r0, #0
 800500e:	f43f aeb4 	beq.w	8004d7a <_strtod_l+0xba>
 8005012:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005014:	498b      	ldr	r1, [pc, #556]	; (8005244 <_strtod_l+0x584>)
 8005016:	3b01      	subs	r3, #1
 8005018:	a819      	add	r0, sp, #100	; 0x64
 800501a:	9319      	str	r3, [sp, #100]	; 0x64
 800501c:	f001 fe7a 	bl	8006d14 <__match>
 8005020:	b910      	cbnz	r0, 8005028 <_strtod_l+0x368>
 8005022:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005024:	3301      	adds	r3, #1
 8005026:	9319      	str	r3, [sp, #100]	; 0x64
 8005028:	f04f 0800 	mov.w	r8, #0
 800502c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005248 <_strtod_l+0x588>
 8005030:	e687      	b.n	8004d42 <_strtod_l+0x82>
 8005032:	4886      	ldr	r0, [pc, #536]	; (800524c <_strtod_l+0x58c>)
 8005034:	f002 ffb4 	bl	8007fa0 <nan>
 8005038:	4680      	mov	r8, r0
 800503a:	4689      	mov	r9, r1
 800503c:	e681      	b.n	8004d42 <_strtod_l+0x82>
 800503e:	9b04      	ldr	r3, [sp, #16]
 8005040:	f1bb 0f00 	cmp.w	fp, #0
 8005044:	bf08      	it	eq
 8005046:	46a3      	moveq	fp, r4
 8005048:	1aeb      	subs	r3, r5, r3
 800504a:	2c10      	cmp	r4, #16
 800504c:	9806      	ldr	r0, [sp, #24]
 800504e:	4626      	mov	r6, r4
 8005050:	9307      	str	r3, [sp, #28]
 8005052:	bfa8      	it	ge
 8005054:	2610      	movge	r6, #16
 8005056:	f7fb f9cf 	bl	80003f8 <__aeabi_ui2d>
 800505a:	2c09      	cmp	r4, #9
 800505c:	4680      	mov	r8, r0
 800505e:	4689      	mov	r9, r1
 8005060:	dd13      	ble.n	800508a <_strtod_l+0x3ca>
 8005062:	4b7b      	ldr	r3, [pc, #492]	; (8005250 <_strtod_l+0x590>)
 8005064:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005068:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800506c:	f7fb fa3e 	bl	80004ec <__aeabi_dmul>
 8005070:	4680      	mov	r8, r0
 8005072:	9805      	ldr	r0, [sp, #20]
 8005074:	4689      	mov	r9, r1
 8005076:	f7fb f9bf 	bl	80003f8 <__aeabi_ui2d>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4640      	mov	r0, r8
 8005080:	4649      	mov	r1, r9
 8005082:	f7fb f87d 	bl	8000180 <__adddf3>
 8005086:	4680      	mov	r8, r0
 8005088:	4689      	mov	r9, r1
 800508a:	2c0f      	cmp	r4, #15
 800508c:	dc36      	bgt.n	80050fc <_strtod_l+0x43c>
 800508e:	9b07      	ldr	r3, [sp, #28]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f43f ae56 	beq.w	8004d42 <_strtod_l+0x82>
 8005096:	dd22      	ble.n	80050de <_strtod_l+0x41e>
 8005098:	2b16      	cmp	r3, #22
 800509a:	dc09      	bgt.n	80050b0 <_strtod_l+0x3f0>
 800509c:	496c      	ldr	r1, [pc, #432]	; (8005250 <_strtod_l+0x590>)
 800509e:	4642      	mov	r2, r8
 80050a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050a4:	464b      	mov	r3, r9
 80050a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050aa:	f7fb fa1f 	bl	80004ec <__aeabi_dmul>
 80050ae:	e7c3      	b.n	8005038 <_strtod_l+0x378>
 80050b0:	9a07      	ldr	r2, [sp, #28]
 80050b2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80050b6:	4293      	cmp	r3, r2
 80050b8:	db20      	blt.n	80050fc <_strtod_l+0x43c>
 80050ba:	4d65      	ldr	r5, [pc, #404]	; (8005250 <_strtod_l+0x590>)
 80050bc:	f1c4 040f 	rsb	r4, r4, #15
 80050c0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80050c4:	4642      	mov	r2, r8
 80050c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ca:	464b      	mov	r3, r9
 80050cc:	f7fb fa0e 	bl	80004ec <__aeabi_dmul>
 80050d0:	9b07      	ldr	r3, [sp, #28]
 80050d2:	1b1c      	subs	r4, r3, r4
 80050d4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80050d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050dc:	e7e5      	b.n	80050aa <_strtod_l+0x3ea>
 80050de:	9b07      	ldr	r3, [sp, #28]
 80050e0:	3316      	adds	r3, #22
 80050e2:	db0b      	blt.n	80050fc <_strtod_l+0x43c>
 80050e4:	9b04      	ldr	r3, [sp, #16]
 80050e6:	4640      	mov	r0, r8
 80050e8:	1b5d      	subs	r5, r3, r5
 80050ea:	4b59      	ldr	r3, [pc, #356]	; (8005250 <_strtod_l+0x590>)
 80050ec:	4649      	mov	r1, r9
 80050ee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80050f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050f6:	f7fb fb23 	bl	8000740 <__aeabi_ddiv>
 80050fa:	e79d      	b.n	8005038 <_strtod_l+0x378>
 80050fc:	9b07      	ldr	r3, [sp, #28]
 80050fe:	1ba6      	subs	r6, r4, r6
 8005100:	441e      	add	r6, r3
 8005102:	2e00      	cmp	r6, #0
 8005104:	dd74      	ble.n	80051f0 <_strtod_l+0x530>
 8005106:	f016 030f 	ands.w	r3, r6, #15
 800510a:	d00a      	beq.n	8005122 <_strtod_l+0x462>
 800510c:	4950      	ldr	r1, [pc, #320]	; (8005250 <_strtod_l+0x590>)
 800510e:	4642      	mov	r2, r8
 8005110:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005118:	464b      	mov	r3, r9
 800511a:	f7fb f9e7 	bl	80004ec <__aeabi_dmul>
 800511e:	4680      	mov	r8, r0
 8005120:	4689      	mov	r9, r1
 8005122:	f036 060f 	bics.w	r6, r6, #15
 8005126:	d052      	beq.n	80051ce <_strtod_l+0x50e>
 8005128:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800512c:	dd27      	ble.n	800517e <_strtod_l+0x4be>
 800512e:	f04f 0b00 	mov.w	fp, #0
 8005132:	f8cd b010 	str.w	fp, [sp, #16]
 8005136:	f8cd b020 	str.w	fp, [sp, #32]
 800513a:	f8cd b018 	str.w	fp, [sp, #24]
 800513e:	2322      	movs	r3, #34	; 0x22
 8005140:	f04f 0800 	mov.w	r8, #0
 8005144:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005248 <_strtod_l+0x588>
 8005148:	f8ca 3000 	str.w	r3, [sl]
 800514c:	9b08      	ldr	r3, [sp, #32]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f43f adf7 	beq.w	8004d42 <_strtod_l+0x82>
 8005154:	4650      	mov	r0, sl
 8005156:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005158:	f001 ff06 	bl	8006f68 <_Bfree>
 800515c:	4650      	mov	r0, sl
 800515e:	9906      	ldr	r1, [sp, #24]
 8005160:	f001 ff02 	bl	8006f68 <_Bfree>
 8005164:	4650      	mov	r0, sl
 8005166:	9904      	ldr	r1, [sp, #16]
 8005168:	f001 fefe 	bl	8006f68 <_Bfree>
 800516c:	4650      	mov	r0, sl
 800516e:	9908      	ldr	r1, [sp, #32]
 8005170:	f001 fefa 	bl	8006f68 <_Bfree>
 8005174:	4659      	mov	r1, fp
 8005176:	4650      	mov	r0, sl
 8005178:	f001 fef6 	bl	8006f68 <_Bfree>
 800517c:	e5e1      	b.n	8004d42 <_strtod_l+0x82>
 800517e:	4b35      	ldr	r3, [pc, #212]	; (8005254 <_strtod_l+0x594>)
 8005180:	4640      	mov	r0, r8
 8005182:	9305      	str	r3, [sp, #20]
 8005184:	2300      	movs	r3, #0
 8005186:	4649      	mov	r1, r9
 8005188:	461f      	mov	r7, r3
 800518a:	1136      	asrs	r6, r6, #4
 800518c:	2e01      	cmp	r6, #1
 800518e:	dc21      	bgt.n	80051d4 <_strtod_l+0x514>
 8005190:	b10b      	cbz	r3, 8005196 <_strtod_l+0x4d6>
 8005192:	4680      	mov	r8, r0
 8005194:	4689      	mov	r9, r1
 8005196:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <_strtod_l+0x594>)
 8005198:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800519c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80051a0:	4642      	mov	r2, r8
 80051a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051a6:	464b      	mov	r3, r9
 80051a8:	f7fb f9a0 	bl	80004ec <__aeabi_dmul>
 80051ac:	4b26      	ldr	r3, [pc, #152]	; (8005248 <_strtod_l+0x588>)
 80051ae:	460a      	mov	r2, r1
 80051b0:	400b      	ands	r3, r1
 80051b2:	4929      	ldr	r1, [pc, #164]	; (8005258 <_strtod_l+0x598>)
 80051b4:	4680      	mov	r8, r0
 80051b6:	428b      	cmp	r3, r1
 80051b8:	d8b9      	bhi.n	800512e <_strtod_l+0x46e>
 80051ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80051be:	428b      	cmp	r3, r1
 80051c0:	bf86      	itte	hi
 80051c2:	f04f 38ff 	movhi.w	r8, #4294967295
 80051c6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800525c <_strtod_l+0x59c>
 80051ca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80051ce:	2300      	movs	r3, #0
 80051d0:	9305      	str	r3, [sp, #20]
 80051d2:	e07f      	b.n	80052d4 <_strtod_l+0x614>
 80051d4:	07f2      	lsls	r2, r6, #31
 80051d6:	d505      	bpl.n	80051e4 <_strtod_l+0x524>
 80051d8:	9b05      	ldr	r3, [sp, #20]
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb f985 	bl	80004ec <__aeabi_dmul>
 80051e2:	2301      	movs	r3, #1
 80051e4:	9a05      	ldr	r2, [sp, #20]
 80051e6:	3701      	adds	r7, #1
 80051e8:	3208      	adds	r2, #8
 80051ea:	1076      	asrs	r6, r6, #1
 80051ec:	9205      	str	r2, [sp, #20]
 80051ee:	e7cd      	b.n	800518c <_strtod_l+0x4cc>
 80051f0:	d0ed      	beq.n	80051ce <_strtod_l+0x50e>
 80051f2:	4276      	negs	r6, r6
 80051f4:	f016 020f 	ands.w	r2, r6, #15
 80051f8:	d00a      	beq.n	8005210 <_strtod_l+0x550>
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <_strtod_l+0x590>)
 80051fc:	4640      	mov	r0, r8
 80051fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005202:	4649      	mov	r1, r9
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f7fb fa9a 	bl	8000740 <__aeabi_ddiv>
 800520c:	4680      	mov	r8, r0
 800520e:	4689      	mov	r9, r1
 8005210:	1136      	asrs	r6, r6, #4
 8005212:	d0dc      	beq.n	80051ce <_strtod_l+0x50e>
 8005214:	2e1f      	cmp	r6, #31
 8005216:	dd23      	ble.n	8005260 <_strtod_l+0x5a0>
 8005218:	f04f 0b00 	mov.w	fp, #0
 800521c:	f8cd b010 	str.w	fp, [sp, #16]
 8005220:	f8cd b020 	str.w	fp, [sp, #32]
 8005224:	f8cd b018 	str.w	fp, [sp, #24]
 8005228:	2322      	movs	r3, #34	; 0x22
 800522a:	f04f 0800 	mov.w	r8, #0
 800522e:	f04f 0900 	mov.w	r9, #0
 8005232:	f8ca 3000 	str.w	r3, [sl]
 8005236:	e789      	b.n	800514c <_strtod_l+0x48c>
 8005238:	080088ed 	.word	0x080088ed
 800523c:	08008930 	.word	0x08008930
 8005240:	080088e5 	.word	0x080088e5
 8005244:	08008b24 	.word	0x08008b24
 8005248:	7ff00000 	.word	0x7ff00000
 800524c:	0800889e 	.word	0x0800889e
 8005250:	08008c98 	.word	0x08008c98
 8005254:	08008c70 	.word	0x08008c70
 8005258:	7ca00000 	.word	0x7ca00000
 800525c:	7fefffff 	.word	0x7fefffff
 8005260:	f016 0310 	ands.w	r3, r6, #16
 8005264:	bf18      	it	ne
 8005266:	236a      	movne	r3, #106	; 0x6a
 8005268:	4640      	mov	r0, r8
 800526a:	9305      	str	r3, [sp, #20]
 800526c:	4649      	mov	r1, r9
 800526e:	2300      	movs	r3, #0
 8005270:	4fb0      	ldr	r7, [pc, #704]	; (8005534 <_strtod_l+0x874>)
 8005272:	07f2      	lsls	r2, r6, #31
 8005274:	d504      	bpl.n	8005280 <_strtod_l+0x5c0>
 8005276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800527a:	f7fb f937 	bl	80004ec <__aeabi_dmul>
 800527e:	2301      	movs	r3, #1
 8005280:	1076      	asrs	r6, r6, #1
 8005282:	f107 0708 	add.w	r7, r7, #8
 8005286:	d1f4      	bne.n	8005272 <_strtod_l+0x5b2>
 8005288:	b10b      	cbz	r3, 800528e <_strtod_l+0x5ce>
 800528a:	4680      	mov	r8, r0
 800528c:	4689      	mov	r9, r1
 800528e:	9b05      	ldr	r3, [sp, #20]
 8005290:	b1c3      	cbz	r3, 80052c4 <_strtod_l+0x604>
 8005292:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005296:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800529a:	2b00      	cmp	r3, #0
 800529c:	4649      	mov	r1, r9
 800529e:	dd11      	ble.n	80052c4 <_strtod_l+0x604>
 80052a0:	2b1f      	cmp	r3, #31
 80052a2:	f340 8127 	ble.w	80054f4 <_strtod_l+0x834>
 80052a6:	2b34      	cmp	r3, #52	; 0x34
 80052a8:	bfd8      	it	le
 80052aa:	f04f 33ff 	movle.w	r3, #4294967295
 80052ae:	f04f 0800 	mov.w	r8, #0
 80052b2:	bfcf      	iteee	gt
 80052b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80052b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80052bc:	fa03 f202 	lslle.w	r2, r3, r2
 80052c0:	ea02 0901 	andle.w	r9, r2, r1
 80052c4:	2200      	movs	r2, #0
 80052c6:	2300      	movs	r3, #0
 80052c8:	4640      	mov	r0, r8
 80052ca:	4649      	mov	r1, r9
 80052cc:	f7fb fb76 	bl	80009bc <__aeabi_dcmpeq>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d1a1      	bne.n	8005218 <_strtod_l+0x558>
 80052d4:	9b06      	ldr	r3, [sp, #24]
 80052d6:	465a      	mov	r2, fp
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	4650      	mov	r0, sl
 80052dc:	4623      	mov	r3, r4
 80052de:	9908      	ldr	r1, [sp, #32]
 80052e0:	f001 feaa 	bl	8007038 <__s2b>
 80052e4:	9008      	str	r0, [sp, #32]
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f43f af21 	beq.w	800512e <_strtod_l+0x46e>
 80052ec:	9b04      	ldr	r3, [sp, #16]
 80052ee:	f04f 0b00 	mov.w	fp, #0
 80052f2:	1b5d      	subs	r5, r3, r5
 80052f4:	9b07      	ldr	r3, [sp, #28]
 80052f6:	f8cd b010 	str.w	fp, [sp, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bfb4      	ite	lt
 80052fe:	462b      	movlt	r3, r5
 8005300:	2300      	movge	r3, #0
 8005302:	930e      	str	r3, [sp, #56]	; 0x38
 8005304:	9b07      	ldr	r3, [sp, #28]
 8005306:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800530a:	9314      	str	r3, [sp, #80]	; 0x50
 800530c:	9b08      	ldr	r3, [sp, #32]
 800530e:	4650      	mov	r0, sl
 8005310:	6859      	ldr	r1, [r3, #4]
 8005312:	f001 fde9 	bl	8006ee8 <_Balloc>
 8005316:	9006      	str	r0, [sp, #24]
 8005318:	2800      	cmp	r0, #0
 800531a:	f43f af10 	beq.w	800513e <_strtod_l+0x47e>
 800531e:	9b08      	ldr	r3, [sp, #32]
 8005320:	300c      	adds	r0, #12
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	f103 010c 	add.w	r1, r3, #12
 8005328:	3202      	adds	r2, #2
 800532a:	0092      	lsls	r2, r2, #2
 800532c:	f001 fdce 	bl	8006ecc <memcpy>
 8005330:	ab1c      	add	r3, sp, #112	; 0x70
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	ab1b      	add	r3, sp, #108	; 0x6c
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	4642      	mov	r2, r8
 800533a:	464b      	mov	r3, r9
 800533c:	4650      	mov	r0, sl
 800533e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005342:	f002 f9bb 	bl	80076bc <__d2b>
 8005346:	901a      	str	r0, [sp, #104]	; 0x68
 8005348:	2800      	cmp	r0, #0
 800534a:	f43f aef8 	beq.w	800513e <_strtod_l+0x47e>
 800534e:	2101      	movs	r1, #1
 8005350:	4650      	mov	r0, sl
 8005352:	f001 ff09 	bl	8007168 <__i2b>
 8005356:	4603      	mov	r3, r0
 8005358:	9004      	str	r0, [sp, #16]
 800535a:	2800      	cmp	r0, #0
 800535c:	f43f aeef 	beq.w	800513e <_strtod_l+0x47e>
 8005360:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005362:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005364:	2d00      	cmp	r5, #0
 8005366:	bfab      	itete	ge
 8005368:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800536a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800536c:	18ee      	addge	r6, r5, r3
 800536e:	1b5c      	sublt	r4, r3, r5
 8005370:	9b05      	ldr	r3, [sp, #20]
 8005372:	bfa8      	it	ge
 8005374:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005376:	eba5 0503 	sub.w	r5, r5, r3
 800537a:	4415      	add	r5, r2
 800537c:	4b6e      	ldr	r3, [pc, #440]	; (8005538 <_strtod_l+0x878>)
 800537e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005382:	bfb8      	it	lt
 8005384:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005386:	429d      	cmp	r5, r3
 8005388:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800538c:	f280 80c4 	bge.w	8005518 <_strtod_l+0x858>
 8005390:	1b5b      	subs	r3, r3, r5
 8005392:	2b1f      	cmp	r3, #31
 8005394:	f04f 0701 	mov.w	r7, #1
 8005398:	eba2 0203 	sub.w	r2, r2, r3
 800539c:	f300 80b1 	bgt.w	8005502 <_strtod_l+0x842>
 80053a0:	2500      	movs	r5, #0
 80053a2:	fa07 f303 	lsl.w	r3, r7, r3
 80053a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80053a8:	18b7      	adds	r7, r6, r2
 80053aa:	9b05      	ldr	r3, [sp, #20]
 80053ac:	42be      	cmp	r6, r7
 80053ae:	4414      	add	r4, r2
 80053b0:	441c      	add	r4, r3
 80053b2:	4633      	mov	r3, r6
 80053b4:	bfa8      	it	ge
 80053b6:	463b      	movge	r3, r7
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	bfa8      	it	ge
 80053bc:	4623      	movge	r3, r4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bfc2      	ittt	gt
 80053c2:	1aff      	subgt	r7, r7, r3
 80053c4:	1ae4      	subgt	r4, r4, r3
 80053c6:	1af6      	subgt	r6, r6, r3
 80053c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	dd17      	ble.n	80053fe <_strtod_l+0x73e>
 80053ce:	461a      	mov	r2, r3
 80053d0:	4650      	mov	r0, sl
 80053d2:	9904      	ldr	r1, [sp, #16]
 80053d4:	f001 ff86 	bl	80072e4 <__pow5mult>
 80053d8:	9004      	str	r0, [sp, #16]
 80053da:	2800      	cmp	r0, #0
 80053dc:	f43f aeaf 	beq.w	800513e <_strtod_l+0x47e>
 80053e0:	4601      	mov	r1, r0
 80053e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80053e4:	4650      	mov	r0, sl
 80053e6:	f001 fed5 	bl	8007194 <__multiply>
 80053ea:	9009      	str	r0, [sp, #36]	; 0x24
 80053ec:	2800      	cmp	r0, #0
 80053ee:	f43f aea6 	beq.w	800513e <_strtod_l+0x47e>
 80053f2:	4650      	mov	r0, sl
 80053f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80053f6:	f001 fdb7 	bl	8006f68 <_Bfree>
 80053fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fc:	931a      	str	r3, [sp, #104]	; 0x68
 80053fe:	2f00      	cmp	r7, #0
 8005400:	f300 808e 	bgt.w	8005520 <_strtod_l+0x860>
 8005404:	9b07      	ldr	r3, [sp, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	dd08      	ble.n	800541c <_strtod_l+0x75c>
 800540a:	4650      	mov	r0, sl
 800540c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800540e:	9906      	ldr	r1, [sp, #24]
 8005410:	f001 ff68 	bl	80072e4 <__pow5mult>
 8005414:	9006      	str	r0, [sp, #24]
 8005416:	2800      	cmp	r0, #0
 8005418:	f43f ae91 	beq.w	800513e <_strtod_l+0x47e>
 800541c:	2c00      	cmp	r4, #0
 800541e:	dd08      	ble.n	8005432 <_strtod_l+0x772>
 8005420:	4622      	mov	r2, r4
 8005422:	4650      	mov	r0, sl
 8005424:	9906      	ldr	r1, [sp, #24]
 8005426:	f001 ffb7 	bl	8007398 <__lshift>
 800542a:	9006      	str	r0, [sp, #24]
 800542c:	2800      	cmp	r0, #0
 800542e:	f43f ae86 	beq.w	800513e <_strtod_l+0x47e>
 8005432:	2e00      	cmp	r6, #0
 8005434:	dd08      	ble.n	8005448 <_strtod_l+0x788>
 8005436:	4632      	mov	r2, r6
 8005438:	4650      	mov	r0, sl
 800543a:	9904      	ldr	r1, [sp, #16]
 800543c:	f001 ffac 	bl	8007398 <__lshift>
 8005440:	9004      	str	r0, [sp, #16]
 8005442:	2800      	cmp	r0, #0
 8005444:	f43f ae7b 	beq.w	800513e <_strtod_l+0x47e>
 8005448:	4650      	mov	r0, sl
 800544a:	9a06      	ldr	r2, [sp, #24]
 800544c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800544e:	f002 f82f 	bl	80074b0 <__mdiff>
 8005452:	4683      	mov	fp, r0
 8005454:	2800      	cmp	r0, #0
 8005456:	f43f ae72 	beq.w	800513e <_strtod_l+0x47e>
 800545a:	2400      	movs	r4, #0
 800545c:	68c3      	ldr	r3, [r0, #12]
 800545e:	9904      	ldr	r1, [sp, #16]
 8005460:	60c4      	str	r4, [r0, #12]
 8005462:	930b      	str	r3, [sp, #44]	; 0x2c
 8005464:	f002 f808 	bl	8007478 <__mcmp>
 8005468:	42a0      	cmp	r0, r4
 800546a:	da6b      	bge.n	8005544 <_strtod_l+0x884>
 800546c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546e:	ea53 0308 	orrs.w	r3, r3, r8
 8005472:	f040 8091 	bne.w	8005598 <_strtod_l+0x8d8>
 8005476:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 808c 	bne.w	8005598 <_strtod_l+0x8d8>
 8005480:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005484:	0d1b      	lsrs	r3, r3, #20
 8005486:	051b      	lsls	r3, r3, #20
 8005488:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800548c:	f240 8084 	bls.w	8005598 <_strtod_l+0x8d8>
 8005490:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005494:	b91b      	cbnz	r3, 800549e <_strtod_l+0x7de>
 8005496:	f8db 3010 	ldr.w	r3, [fp, #16]
 800549a:	2b01      	cmp	r3, #1
 800549c:	dd7c      	ble.n	8005598 <_strtod_l+0x8d8>
 800549e:	4659      	mov	r1, fp
 80054a0:	2201      	movs	r2, #1
 80054a2:	4650      	mov	r0, sl
 80054a4:	f001 ff78 	bl	8007398 <__lshift>
 80054a8:	9904      	ldr	r1, [sp, #16]
 80054aa:	4683      	mov	fp, r0
 80054ac:	f001 ffe4 	bl	8007478 <__mcmp>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	dd71      	ble.n	8005598 <_strtod_l+0x8d8>
 80054b4:	9905      	ldr	r1, [sp, #20]
 80054b6:	464b      	mov	r3, r9
 80054b8:	4a20      	ldr	r2, [pc, #128]	; (800553c <_strtod_l+0x87c>)
 80054ba:	2900      	cmp	r1, #0
 80054bc:	f000 808c 	beq.w	80055d8 <_strtod_l+0x918>
 80054c0:	ea02 0109 	and.w	r1, r2, r9
 80054c4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80054c8:	f300 8086 	bgt.w	80055d8 <_strtod_l+0x918>
 80054cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80054d0:	f77f aeaa 	ble.w	8005228 <_strtod_l+0x568>
 80054d4:	4640      	mov	r0, r8
 80054d6:	4649      	mov	r1, r9
 80054d8:	4b19      	ldr	r3, [pc, #100]	; (8005540 <_strtod_l+0x880>)
 80054da:	2200      	movs	r2, #0
 80054dc:	f7fb f806 	bl	80004ec <__aeabi_dmul>
 80054e0:	460b      	mov	r3, r1
 80054e2:	4303      	orrs	r3, r0
 80054e4:	bf08      	it	eq
 80054e6:	2322      	moveq	r3, #34	; 0x22
 80054e8:	4680      	mov	r8, r0
 80054ea:	4689      	mov	r9, r1
 80054ec:	bf08      	it	eq
 80054ee:	f8ca 3000 	streq.w	r3, [sl]
 80054f2:	e62f      	b.n	8005154 <_strtod_l+0x494>
 80054f4:	f04f 32ff 	mov.w	r2, #4294967295
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	ea03 0808 	and.w	r8, r3, r8
 8005500:	e6e0      	b.n	80052c4 <_strtod_l+0x604>
 8005502:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005506:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800550a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800550e:	35e2      	adds	r5, #226	; 0xe2
 8005510:	fa07 f505 	lsl.w	r5, r7, r5
 8005514:	970f      	str	r7, [sp, #60]	; 0x3c
 8005516:	e747      	b.n	80053a8 <_strtod_l+0x6e8>
 8005518:	2301      	movs	r3, #1
 800551a:	2500      	movs	r5, #0
 800551c:	930f      	str	r3, [sp, #60]	; 0x3c
 800551e:	e743      	b.n	80053a8 <_strtod_l+0x6e8>
 8005520:	463a      	mov	r2, r7
 8005522:	4650      	mov	r0, sl
 8005524:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005526:	f001 ff37 	bl	8007398 <__lshift>
 800552a:	901a      	str	r0, [sp, #104]	; 0x68
 800552c:	2800      	cmp	r0, #0
 800552e:	f47f af69 	bne.w	8005404 <_strtod_l+0x744>
 8005532:	e604      	b.n	800513e <_strtod_l+0x47e>
 8005534:	08008948 	.word	0x08008948
 8005538:	fffffc02 	.word	0xfffffc02
 800553c:	7ff00000 	.word	0x7ff00000
 8005540:	39500000 	.word	0x39500000
 8005544:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005548:	d165      	bne.n	8005616 <_strtod_l+0x956>
 800554a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800554c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005550:	b35a      	cbz	r2, 80055aa <_strtod_l+0x8ea>
 8005552:	4a99      	ldr	r2, [pc, #612]	; (80057b8 <_strtod_l+0xaf8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d12b      	bne.n	80055b0 <_strtod_l+0x8f0>
 8005558:	9b05      	ldr	r3, [sp, #20]
 800555a:	4641      	mov	r1, r8
 800555c:	b303      	cbz	r3, 80055a0 <_strtod_l+0x8e0>
 800555e:	464a      	mov	r2, r9
 8005560:	4b96      	ldr	r3, [pc, #600]	; (80057bc <_strtod_l+0xafc>)
 8005562:	4013      	ands	r3, r2
 8005564:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005568:	f04f 32ff 	mov.w	r2, #4294967295
 800556c:	d81b      	bhi.n	80055a6 <_strtod_l+0x8e6>
 800556e:	0d1b      	lsrs	r3, r3, #20
 8005570:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	4299      	cmp	r1, r3
 800557a:	d119      	bne.n	80055b0 <_strtod_l+0x8f0>
 800557c:	4b90      	ldr	r3, [pc, #576]	; (80057c0 <_strtod_l+0xb00>)
 800557e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005580:	429a      	cmp	r2, r3
 8005582:	d102      	bne.n	800558a <_strtod_l+0x8ca>
 8005584:	3101      	adds	r1, #1
 8005586:	f43f adda 	beq.w	800513e <_strtod_l+0x47e>
 800558a:	f04f 0800 	mov.w	r8, #0
 800558e:	4b8b      	ldr	r3, [pc, #556]	; (80057bc <_strtod_l+0xafc>)
 8005590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005592:	401a      	ands	r2, r3
 8005594:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005598:	9b05      	ldr	r3, [sp, #20]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d19a      	bne.n	80054d4 <_strtod_l+0x814>
 800559e:	e5d9      	b.n	8005154 <_strtod_l+0x494>
 80055a0:	f04f 33ff 	mov.w	r3, #4294967295
 80055a4:	e7e8      	b.n	8005578 <_strtod_l+0x8b8>
 80055a6:	4613      	mov	r3, r2
 80055a8:	e7e6      	b.n	8005578 <_strtod_l+0x8b8>
 80055aa:	ea53 0308 	orrs.w	r3, r3, r8
 80055ae:	d081      	beq.n	80054b4 <_strtod_l+0x7f4>
 80055b0:	b1e5      	cbz	r5, 80055ec <_strtod_l+0x92c>
 80055b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b4:	421d      	tst	r5, r3
 80055b6:	d0ef      	beq.n	8005598 <_strtod_l+0x8d8>
 80055b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ba:	4640      	mov	r0, r8
 80055bc:	4649      	mov	r1, r9
 80055be:	9a05      	ldr	r2, [sp, #20]
 80055c0:	b1c3      	cbz	r3, 80055f4 <_strtod_l+0x934>
 80055c2:	f7ff fb5c 	bl	8004c7e <sulp>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055ce:	f7fa fdd7 	bl	8000180 <__adddf3>
 80055d2:	4680      	mov	r8, r0
 80055d4:	4689      	mov	r9, r1
 80055d6:	e7df      	b.n	8005598 <_strtod_l+0x8d8>
 80055d8:	4013      	ands	r3, r2
 80055da:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80055de:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80055e2:	f04f 38ff 	mov.w	r8, #4294967295
 80055e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80055ea:	e7d5      	b.n	8005598 <_strtod_l+0x8d8>
 80055ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055ee:	ea13 0f08 	tst.w	r3, r8
 80055f2:	e7e0      	b.n	80055b6 <_strtod_l+0x8f6>
 80055f4:	f7ff fb43 	bl	8004c7e <sulp>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005600:	f7fa fdbc 	bl	800017c <__aeabi_dsub>
 8005604:	2200      	movs	r2, #0
 8005606:	2300      	movs	r3, #0
 8005608:	4680      	mov	r8, r0
 800560a:	4689      	mov	r9, r1
 800560c:	f7fb f9d6 	bl	80009bc <__aeabi_dcmpeq>
 8005610:	2800      	cmp	r0, #0
 8005612:	d0c1      	beq.n	8005598 <_strtod_l+0x8d8>
 8005614:	e608      	b.n	8005228 <_strtod_l+0x568>
 8005616:	4658      	mov	r0, fp
 8005618:	9904      	ldr	r1, [sp, #16]
 800561a:	f002 f8ab 	bl	8007774 <__ratio>
 800561e:	2200      	movs	r2, #0
 8005620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005624:	4606      	mov	r6, r0
 8005626:	460f      	mov	r7, r1
 8005628:	f7fb f9dc 	bl	80009e4 <__aeabi_dcmple>
 800562c:	2800      	cmp	r0, #0
 800562e:	d070      	beq.n	8005712 <_strtod_l+0xa52>
 8005630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d042      	beq.n	80056bc <_strtod_l+0x9fc>
 8005636:	2600      	movs	r6, #0
 8005638:	4f62      	ldr	r7, [pc, #392]	; (80057c4 <_strtod_l+0xb04>)
 800563a:	4d62      	ldr	r5, [pc, #392]	; (80057c4 <_strtod_l+0xb04>)
 800563c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005642:	0d1b      	lsrs	r3, r3, #20
 8005644:	051b      	lsls	r3, r3, #20
 8005646:	930f      	str	r3, [sp, #60]	; 0x3c
 8005648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800564a:	4b5f      	ldr	r3, [pc, #380]	; (80057c8 <_strtod_l+0xb08>)
 800564c:	429a      	cmp	r2, r3
 800564e:	f040 80c3 	bne.w	80057d8 <_strtod_l+0xb18>
 8005652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005654:	4640      	mov	r0, r8
 8005656:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800565a:	4649      	mov	r1, r9
 800565c:	f001 ffb4 	bl	80075c8 <__ulp>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4630      	mov	r0, r6
 8005666:	4639      	mov	r1, r7
 8005668:	f7fa ff40 	bl	80004ec <__aeabi_dmul>
 800566c:	4642      	mov	r2, r8
 800566e:	464b      	mov	r3, r9
 8005670:	f7fa fd86 	bl	8000180 <__adddf3>
 8005674:	460b      	mov	r3, r1
 8005676:	4951      	ldr	r1, [pc, #324]	; (80057bc <_strtod_l+0xafc>)
 8005678:	4a54      	ldr	r2, [pc, #336]	; (80057cc <_strtod_l+0xb0c>)
 800567a:	4019      	ands	r1, r3
 800567c:	4291      	cmp	r1, r2
 800567e:	4680      	mov	r8, r0
 8005680:	d95d      	bls.n	800573e <_strtod_l+0xa7e>
 8005682:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005684:	4b4e      	ldr	r3, [pc, #312]	; (80057c0 <_strtod_l+0xb00>)
 8005686:	429a      	cmp	r2, r3
 8005688:	d103      	bne.n	8005692 <_strtod_l+0x9d2>
 800568a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800568c:	3301      	adds	r3, #1
 800568e:	f43f ad56 	beq.w	800513e <_strtod_l+0x47e>
 8005692:	f04f 38ff 	mov.w	r8, #4294967295
 8005696:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80057c0 <_strtod_l+0xb00>
 800569a:	4650      	mov	r0, sl
 800569c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800569e:	f001 fc63 	bl	8006f68 <_Bfree>
 80056a2:	4650      	mov	r0, sl
 80056a4:	9906      	ldr	r1, [sp, #24]
 80056a6:	f001 fc5f 	bl	8006f68 <_Bfree>
 80056aa:	4650      	mov	r0, sl
 80056ac:	9904      	ldr	r1, [sp, #16]
 80056ae:	f001 fc5b 	bl	8006f68 <_Bfree>
 80056b2:	4659      	mov	r1, fp
 80056b4:	4650      	mov	r0, sl
 80056b6:	f001 fc57 	bl	8006f68 <_Bfree>
 80056ba:	e627      	b.n	800530c <_strtod_l+0x64c>
 80056bc:	f1b8 0f00 	cmp.w	r8, #0
 80056c0:	d119      	bne.n	80056f6 <_strtod_l+0xa36>
 80056c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c8:	b9e3      	cbnz	r3, 8005704 <_strtod_l+0xa44>
 80056ca:	2200      	movs	r2, #0
 80056cc:	4630      	mov	r0, r6
 80056ce:	4639      	mov	r1, r7
 80056d0:	4b3c      	ldr	r3, [pc, #240]	; (80057c4 <_strtod_l+0xb04>)
 80056d2:	f7fb f97d 	bl	80009d0 <__aeabi_dcmplt>
 80056d6:	b9c8      	cbnz	r0, 800570c <_strtod_l+0xa4c>
 80056d8:	2200      	movs	r2, #0
 80056da:	4630      	mov	r0, r6
 80056dc:	4639      	mov	r1, r7
 80056de:	4b3c      	ldr	r3, [pc, #240]	; (80057d0 <_strtod_l+0xb10>)
 80056e0:	f7fa ff04 	bl	80004ec <__aeabi_dmul>
 80056e4:	4604      	mov	r4, r0
 80056e6:	460d      	mov	r5, r1
 80056e8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80056ec:	9416      	str	r4, [sp, #88]	; 0x58
 80056ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80056f0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80056f4:	e7a2      	b.n	800563c <_strtod_l+0x97c>
 80056f6:	f1b8 0f01 	cmp.w	r8, #1
 80056fa:	d103      	bne.n	8005704 <_strtod_l+0xa44>
 80056fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f43f ad92 	beq.w	8005228 <_strtod_l+0x568>
 8005704:	2600      	movs	r6, #0
 8005706:	2400      	movs	r4, #0
 8005708:	4f32      	ldr	r7, [pc, #200]	; (80057d4 <_strtod_l+0xb14>)
 800570a:	e796      	b.n	800563a <_strtod_l+0x97a>
 800570c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800570e:	4d30      	ldr	r5, [pc, #192]	; (80057d0 <_strtod_l+0xb10>)
 8005710:	e7ea      	b.n	80056e8 <_strtod_l+0xa28>
 8005712:	4b2f      	ldr	r3, [pc, #188]	; (80057d0 <_strtod_l+0xb10>)
 8005714:	2200      	movs	r2, #0
 8005716:	4630      	mov	r0, r6
 8005718:	4639      	mov	r1, r7
 800571a:	f7fa fee7 	bl	80004ec <__aeabi_dmul>
 800571e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
 8005724:	b933      	cbnz	r3, 8005734 <_strtod_l+0xa74>
 8005726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800572a:	9010      	str	r0, [sp, #64]	; 0x40
 800572c:	9311      	str	r3, [sp, #68]	; 0x44
 800572e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005732:	e783      	b.n	800563c <_strtod_l+0x97c>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800573c:	e7f7      	b.n	800572e <_strtod_l+0xa6e>
 800573e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005742:	9b05      	ldr	r3, [sp, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1a8      	bne.n	800569a <_strtod_l+0x9da>
 8005748:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800574c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800574e:	0d1b      	lsrs	r3, r3, #20
 8005750:	051b      	lsls	r3, r3, #20
 8005752:	429a      	cmp	r2, r3
 8005754:	d1a1      	bne.n	800569a <_strtod_l+0x9da>
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fb fce3 	bl	8001124 <__aeabi_d2lz>
 800575e:	f7fa fe97 	bl	8000490 <__aeabi_l2d>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4620      	mov	r0, r4
 8005768:	4629      	mov	r1, r5
 800576a:	f7fa fd07 	bl	800017c <__aeabi_dsub>
 800576e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005770:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005774:	ea43 0308 	orr.w	r3, r3, r8
 8005778:	4313      	orrs	r3, r2
 800577a:	4604      	mov	r4, r0
 800577c:	460d      	mov	r5, r1
 800577e:	d066      	beq.n	800584e <_strtod_l+0xb8e>
 8005780:	a309      	add	r3, pc, #36	; (adr r3, 80057a8 <_strtod_l+0xae8>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f7fb f923 	bl	80009d0 <__aeabi_dcmplt>
 800578a:	2800      	cmp	r0, #0
 800578c:	f47f ace2 	bne.w	8005154 <_strtod_l+0x494>
 8005790:	a307      	add	r3, pc, #28	; (adr r3, 80057b0 <_strtod_l+0xaf0>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	4620      	mov	r0, r4
 8005798:	4629      	mov	r1, r5
 800579a:	f7fb f937 	bl	8000a0c <__aeabi_dcmpgt>
 800579e:	2800      	cmp	r0, #0
 80057a0:	f43f af7b 	beq.w	800569a <_strtod_l+0x9da>
 80057a4:	e4d6      	b.n	8005154 <_strtod_l+0x494>
 80057a6:	bf00      	nop
 80057a8:	94a03595 	.word	0x94a03595
 80057ac:	3fdfffff 	.word	0x3fdfffff
 80057b0:	35afe535 	.word	0x35afe535
 80057b4:	3fe00000 	.word	0x3fe00000
 80057b8:	000fffff 	.word	0x000fffff
 80057bc:	7ff00000 	.word	0x7ff00000
 80057c0:	7fefffff 	.word	0x7fefffff
 80057c4:	3ff00000 	.word	0x3ff00000
 80057c8:	7fe00000 	.word	0x7fe00000
 80057cc:	7c9fffff 	.word	0x7c9fffff
 80057d0:	3fe00000 	.word	0x3fe00000
 80057d4:	bff00000 	.word	0xbff00000
 80057d8:	9b05      	ldr	r3, [sp, #20]
 80057da:	b313      	cbz	r3, 8005822 <_strtod_l+0xb62>
 80057dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80057e2:	d81e      	bhi.n	8005822 <_strtod_l+0xb62>
 80057e4:	a326      	add	r3, pc, #152	; (adr r3, 8005880 <_strtod_l+0xbc0>)
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	4620      	mov	r0, r4
 80057ec:	4629      	mov	r1, r5
 80057ee:	f7fb f8f9 	bl	80009e4 <__aeabi_dcmple>
 80057f2:	b190      	cbz	r0, 800581a <_strtod_l+0xb5a>
 80057f4:	4629      	mov	r1, r5
 80057f6:	4620      	mov	r0, r4
 80057f8:	f7fb f950 	bl	8000a9c <__aeabi_d2uiz>
 80057fc:	2801      	cmp	r0, #1
 80057fe:	bf38      	it	cc
 8005800:	2001      	movcc	r0, #1
 8005802:	f7fa fdf9 	bl	80003f8 <__aeabi_ui2d>
 8005806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005808:	4604      	mov	r4, r0
 800580a:	460d      	mov	r5, r1
 800580c:	b9d3      	cbnz	r3, 8005844 <_strtod_l+0xb84>
 800580e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005812:	9012      	str	r0, [sp, #72]	; 0x48
 8005814:	9313      	str	r3, [sp, #76]	; 0x4c
 8005816:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800581a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800581c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005820:	1a9f      	subs	r7, r3, r2
 8005822:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005826:	f001 fecf 	bl	80075c8 <__ulp>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4630      	mov	r0, r6
 8005830:	4639      	mov	r1, r7
 8005832:	f7fa fe5b 	bl	80004ec <__aeabi_dmul>
 8005836:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800583a:	f7fa fca1 	bl	8000180 <__adddf3>
 800583e:	4680      	mov	r8, r0
 8005840:	4689      	mov	r9, r1
 8005842:	e77e      	b.n	8005742 <_strtod_l+0xa82>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800584c:	e7e3      	b.n	8005816 <_strtod_l+0xb56>
 800584e:	a30e      	add	r3, pc, #56	; (adr r3, 8005888 <_strtod_l+0xbc8>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f7fb f8bc 	bl	80009d0 <__aeabi_dcmplt>
 8005858:	e7a1      	b.n	800579e <_strtod_l+0xade>
 800585a:	2300      	movs	r3, #0
 800585c:	930a      	str	r3, [sp, #40]	; 0x28
 800585e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005860:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	f7ff ba71 	b.w	8004d4a <_strtod_l+0x8a>
 8005868:	2a65      	cmp	r2, #101	; 0x65
 800586a:	f43f ab63 	beq.w	8004f34 <_strtod_l+0x274>
 800586e:	2a45      	cmp	r2, #69	; 0x45
 8005870:	f43f ab60 	beq.w	8004f34 <_strtod_l+0x274>
 8005874:	2301      	movs	r3, #1
 8005876:	f7ff bb95 	b.w	8004fa4 <_strtod_l+0x2e4>
 800587a:	bf00      	nop
 800587c:	f3af 8000 	nop.w
 8005880:	ffc00000 	.word	0xffc00000
 8005884:	41dfffff 	.word	0x41dfffff
 8005888:	94a03595 	.word	0x94a03595
 800588c:	3fcfffff 	.word	0x3fcfffff

08005890 <_strtod_r>:
 8005890:	4b01      	ldr	r3, [pc, #4]	; (8005898 <_strtod_r+0x8>)
 8005892:	f7ff ba15 	b.w	8004cc0 <_strtod_l>
 8005896:	bf00      	nop
 8005898:	20000074 	.word	0x20000074

0800589c <strtok>:
 800589c:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <strtok+0x5c>)
 800589e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a2:	681f      	ldr	r7, [r3, #0]
 80058a4:	4605      	mov	r5, r0
 80058a6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80058a8:	460e      	mov	r6, r1
 80058aa:	b9ec      	cbnz	r4, 80058e8 <strtok+0x4c>
 80058ac:	2050      	movs	r0, #80	; 0x50
 80058ae:	f001 fae5 	bl	8006e7c <malloc>
 80058b2:	4602      	mov	r2, r0
 80058b4:	65b8      	str	r0, [r7, #88]	; 0x58
 80058b6:	b920      	cbnz	r0, 80058c2 <strtok+0x26>
 80058b8:	2157      	movs	r1, #87	; 0x57
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <strtok+0x60>)
 80058bc:	4810      	ldr	r0, [pc, #64]	; (8005900 <strtok+0x64>)
 80058be:	f000 f8c7 	bl	8005a50 <__assert_func>
 80058c2:	e9c0 4400 	strd	r4, r4, [r0]
 80058c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80058ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80058ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80058d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80058d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80058da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80058de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80058e2:	6184      	str	r4, [r0, #24]
 80058e4:	7704      	strb	r4, [r0, #28]
 80058e6:	6244      	str	r4, [r0, #36]	; 0x24
 80058e8:	4631      	mov	r1, r6
 80058ea:	4628      	mov	r0, r5
 80058ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ee:	2301      	movs	r3, #1
 80058f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058f4:	f000 b806 	b.w	8005904 <__strtok_r>
 80058f8:	2000000c 	.word	0x2000000c
 80058fc:	08008970 	.word	0x08008970
 8005900:	08008987 	.word	0x08008987

08005904 <__strtok_r>:
 8005904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005906:	b908      	cbnz	r0, 800590c <__strtok_r+0x8>
 8005908:	6810      	ldr	r0, [r2, #0]
 800590a:	b188      	cbz	r0, 8005930 <__strtok_r+0x2c>
 800590c:	4604      	mov	r4, r0
 800590e:	460f      	mov	r7, r1
 8005910:	4620      	mov	r0, r4
 8005912:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005916:	f817 6b01 	ldrb.w	r6, [r7], #1
 800591a:	b91e      	cbnz	r6, 8005924 <__strtok_r+0x20>
 800591c:	b965      	cbnz	r5, 8005938 <__strtok_r+0x34>
 800591e:	4628      	mov	r0, r5
 8005920:	6015      	str	r5, [r2, #0]
 8005922:	e005      	b.n	8005930 <__strtok_r+0x2c>
 8005924:	42b5      	cmp	r5, r6
 8005926:	d1f6      	bne.n	8005916 <__strtok_r+0x12>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f0      	bne.n	800590e <__strtok_r+0xa>
 800592c:	6014      	str	r4, [r2, #0]
 800592e:	7003      	strb	r3, [r0, #0]
 8005930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005932:	461c      	mov	r4, r3
 8005934:	e00c      	b.n	8005950 <__strtok_r+0x4c>
 8005936:	b915      	cbnz	r5, 800593e <__strtok_r+0x3a>
 8005938:	460e      	mov	r6, r1
 800593a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800593e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005942:	42ab      	cmp	r3, r5
 8005944:	d1f7      	bne.n	8005936 <__strtok_r+0x32>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f3      	beq.n	8005932 <__strtok_r+0x2e>
 800594a:	2300      	movs	r3, #0
 800594c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005950:	6014      	str	r4, [r2, #0]
 8005952:	e7ed      	b.n	8005930 <__strtok_r+0x2c>

08005954 <_strtol_l.constprop.0>:
 8005954:	2b01      	cmp	r3, #1
 8005956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800595a:	4680      	mov	r8, r0
 800595c:	d001      	beq.n	8005962 <_strtol_l.constprop.0+0xe>
 800595e:	2b24      	cmp	r3, #36	; 0x24
 8005960:	d906      	bls.n	8005970 <_strtol_l.constprop.0+0x1c>
 8005962:	f7fe fa81 	bl	8003e68 <__errno>
 8005966:	2316      	movs	r3, #22
 8005968:	6003      	str	r3, [r0, #0]
 800596a:	2000      	movs	r0, #0
 800596c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005970:	460d      	mov	r5, r1
 8005972:	4f35      	ldr	r7, [pc, #212]	; (8005a48 <_strtol_l.constprop.0+0xf4>)
 8005974:	4628      	mov	r0, r5
 8005976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800597a:	5de6      	ldrb	r6, [r4, r7]
 800597c:	f016 0608 	ands.w	r6, r6, #8
 8005980:	d1f8      	bne.n	8005974 <_strtol_l.constprop.0+0x20>
 8005982:	2c2d      	cmp	r4, #45	; 0x2d
 8005984:	d12f      	bne.n	80059e6 <_strtol_l.constprop.0+0x92>
 8005986:	2601      	movs	r6, #1
 8005988:	782c      	ldrb	r4, [r5, #0]
 800598a:	1c85      	adds	r5, r0, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d057      	beq.n	8005a40 <_strtol_l.constprop.0+0xec>
 8005990:	2b10      	cmp	r3, #16
 8005992:	d109      	bne.n	80059a8 <_strtol_l.constprop.0+0x54>
 8005994:	2c30      	cmp	r4, #48	; 0x30
 8005996:	d107      	bne.n	80059a8 <_strtol_l.constprop.0+0x54>
 8005998:	7828      	ldrb	r0, [r5, #0]
 800599a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800599e:	2858      	cmp	r0, #88	; 0x58
 80059a0:	d149      	bne.n	8005a36 <_strtol_l.constprop.0+0xe2>
 80059a2:	2310      	movs	r3, #16
 80059a4:	786c      	ldrb	r4, [r5, #1]
 80059a6:	3502      	adds	r5, #2
 80059a8:	2700      	movs	r7, #0
 80059aa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80059ae:	f10e 3eff 	add.w	lr, lr, #4294967295
 80059b2:	fbbe f9f3 	udiv	r9, lr, r3
 80059b6:	4638      	mov	r0, r7
 80059b8:	fb03 ea19 	mls	sl, r3, r9, lr
 80059bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80059c0:	f1bc 0f09 	cmp.w	ip, #9
 80059c4:	d814      	bhi.n	80059f0 <_strtol_l.constprop.0+0x9c>
 80059c6:	4664      	mov	r4, ip
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	dd22      	ble.n	8005a12 <_strtol_l.constprop.0+0xbe>
 80059cc:	2f00      	cmp	r7, #0
 80059ce:	db1d      	blt.n	8005a0c <_strtol_l.constprop.0+0xb8>
 80059d0:	4581      	cmp	r9, r0
 80059d2:	d31b      	bcc.n	8005a0c <_strtol_l.constprop.0+0xb8>
 80059d4:	d101      	bne.n	80059da <_strtol_l.constprop.0+0x86>
 80059d6:	45a2      	cmp	sl, r4
 80059d8:	db18      	blt.n	8005a0c <_strtol_l.constprop.0+0xb8>
 80059da:	2701      	movs	r7, #1
 80059dc:	fb00 4003 	mla	r0, r0, r3, r4
 80059e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059e4:	e7ea      	b.n	80059bc <_strtol_l.constprop.0+0x68>
 80059e6:	2c2b      	cmp	r4, #43	; 0x2b
 80059e8:	bf04      	itt	eq
 80059ea:	782c      	ldrbeq	r4, [r5, #0]
 80059ec:	1c85      	addeq	r5, r0, #2
 80059ee:	e7cd      	b.n	800598c <_strtol_l.constprop.0+0x38>
 80059f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80059f4:	f1bc 0f19 	cmp.w	ip, #25
 80059f8:	d801      	bhi.n	80059fe <_strtol_l.constprop.0+0xaa>
 80059fa:	3c37      	subs	r4, #55	; 0x37
 80059fc:	e7e4      	b.n	80059c8 <_strtol_l.constprop.0+0x74>
 80059fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005a02:	f1bc 0f19 	cmp.w	ip, #25
 8005a06:	d804      	bhi.n	8005a12 <_strtol_l.constprop.0+0xbe>
 8005a08:	3c57      	subs	r4, #87	; 0x57
 8005a0a:	e7dd      	b.n	80059c8 <_strtol_l.constprop.0+0x74>
 8005a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a10:	e7e6      	b.n	80059e0 <_strtol_l.constprop.0+0x8c>
 8005a12:	2f00      	cmp	r7, #0
 8005a14:	da07      	bge.n	8005a26 <_strtol_l.constprop.0+0xd2>
 8005a16:	2322      	movs	r3, #34	; 0x22
 8005a18:	4670      	mov	r0, lr
 8005a1a:	f8c8 3000 	str.w	r3, [r8]
 8005a1e:	2a00      	cmp	r2, #0
 8005a20:	d0a4      	beq.n	800596c <_strtol_l.constprop.0+0x18>
 8005a22:	1e69      	subs	r1, r5, #1
 8005a24:	e005      	b.n	8005a32 <_strtol_l.constprop.0+0xde>
 8005a26:	b106      	cbz	r6, 8005a2a <_strtol_l.constprop.0+0xd6>
 8005a28:	4240      	negs	r0, r0
 8005a2a:	2a00      	cmp	r2, #0
 8005a2c:	d09e      	beq.n	800596c <_strtol_l.constprop.0+0x18>
 8005a2e:	2f00      	cmp	r7, #0
 8005a30:	d1f7      	bne.n	8005a22 <_strtol_l.constprop.0+0xce>
 8005a32:	6011      	str	r1, [r2, #0]
 8005a34:	e79a      	b.n	800596c <_strtol_l.constprop.0+0x18>
 8005a36:	2430      	movs	r4, #48	; 0x30
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1b5      	bne.n	80059a8 <_strtol_l.constprop.0+0x54>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	e7b3      	b.n	80059a8 <_strtol_l.constprop.0+0x54>
 8005a40:	2c30      	cmp	r4, #48	; 0x30
 8005a42:	d0a9      	beq.n	8005998 <_strtol_l.constprop.0+0x44>
 8005a44:	230a      	movs	r3, #10
 8005a46:	e7af      	b.n	80059a8 <_strtol_l.constprop.0+0x54>
 8005a48:	08008a21 	.word	0x08008a21

08005a4c <_strtol_r>:
 8005a4c:	f7ff bf82 	b.w	8005954 <_strtol_l.constprop.0>

08005a50 <__assert_func>:
 8005a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a52:	4614      	mov	r4, r2
 8005a54:	461a      	mov	r2, r3
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <__assert_func+0x2c>)
 8005a58:	4605      	mov	r5, r0
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68d8      	ldr	r0, [r3, #12]
 8005a5e:	b14c      	cbz	r4, 8005a74 <__assert_func+0x24>
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <__assert_func+0x30>)
 8005a62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a66:	9100      	str	r1, [sp, #0]
 8005a68:	462b      	mov	r3, r5
 8005a6a:	4906      	ldr	r1, [pc, #24]	; (8005a84 <__assert_func+0x34>)
 8005a6c:	f000 fe8a 	bl	8006784 <fiprintf>
 8005a70:	f002 fb8e 	bl	8008190 <abort>
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <__assert_func+0x38>)
 8005a76:	461c      	mov	r4, r3
 8005a78:	e7f3      	b.n	8005a62 <__assert_func+0x12>
 8005a7a:	bf00      	nop
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	080089e4 	.word	0x080089e4
 8005a84:	080089f1 	.word	0x080089f1
 8005a88:	0800889e 	.word	0x0800889e

08005a8c <quorem>:
 8005a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	6903      	ldr	r3, [r0, #16]
 8005a92:	690c      	ldr	r4, [r1, #16]
 8005a94:	4607      	mov	r7, r0
 8005a96:	42a3      	cmp	r3, r4
 8005a98:	f2c0 8082 	blt.w	8005ba0 <quorem+0x114>
 8005a9c:	3c01      	subs	r4, #1
 8005a9e:	f100 0514 	add.w	r5, r0, #20
 8005aa2:	f101 0814 	add.w	r8, r1, #20
 8005aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005abc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ac0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ac4:	d331      	bcc.n	8005b2a <quorem+0x9e>
 8005ac6:	f04f 0e00 	mov.w	lr, #0
 8005aca:	4640      	mov	r0, r8
 8005acc:	46ac      	mov	ip, r5
 8005ace:	46f2      	mov	sl, lr
 8005ad0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ad4:	b293      	uxth	r3, r2
 8005ad6:	fb06 e303 	mla	r3, r6, r3, lr
 8005ada:	0c12      	lsrs	r2, r2, #16
 8005adc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	fb06 e202 	mla	r2, r6, r2, lr
 8005ae6:	ebaa 0303 	sub.w	r3, sl, r3
 8005aea:	f8dc a000 	ldr.w	sl, [ip]
 8005aee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005af2:	fa1f fa8a 	uxth.w	sl, sl
 8005af6:	4453      	add	r3, sl
 8005af8:	f8dc a000 	ldr.w	sl, [ip]
 8005afc:	b292      	uxth	r2, r2
 8005afe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005b02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b0c:	4581      	cmp	r9, r0
 8005b0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b12:	f84c 3b04 	str.w	r3, [ip], #4
 8005b16:	d2db      	bcs.n	8005ad0 <quorem+0x44>
 8005b18:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b1c:	b92b      	cbnz	r3, 8005b2a <quorem+0x9e>
 8005b1e:	9b01      	ldr	r3, [sp, #4]
 8005b20:	3b04      	subs	r3, #4
 8005b22:	429d      	cmp	r5, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	d32f      	bcc.n	8005b88 <quorem+0xfc>
 8005b28:	613c      	str	r4, [r7, #16]
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	f001 fca4 	bl	8007478 <__mcmp>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	db25      	blt.n	8005b80 <quorem+0xf4>
 8005b34:	4628      	mov	r0, r5
 8005b36:	f04f 0c00 	mov.w	ip, #0
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	f858 1b04 	ldr.w	r1, [r8], #4
 8005b40:	f8d0 e000 	ldr.w	lr, [r0]
 8005b44:	b28b      	uxth	r3, r1
 8005b46:	ebac 0303 	sub.w	r3, ip, r3
 8005b4a:	fa1f f28e 	uxth.w	r2, lr
 8005b4e:	4413      	add	r3, r2
 8005b50:	0c0a      	lsrs	r2, r1, #16
 8005b52:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b60:	45c1      	cmp	r9, r8
 8005b62:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b66:	f840 3b04 	str.w	r3, [r0], #4
 8005b6a:	d2e7      	bcs.n	8005b3c <quorem+0xb0>
 8005b6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b74:	b922      	cbnz	r2, 8005b80 <quorem+0xf4>
 8005b76:	3b04      	subs	r3, #4
 8005b78:	429d      	cmp	r5, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	d30a      	bcc.n	8005b94 <quorem+0x108>
 8005b7e:	613c      	str	r4, [r7, #16]
 8005b80:	4630      	mov	r0, r6
 8005b82:	b003      	add	sp, #12
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	3b04      	subs	r3, #4
 8005b8c:	2a00      	cmp	r2, #0
 8005b8e:	d1cb      	bne.n	8005b28 <quorem+0x9c>
 8005b90:	3c01      	subs	r4, #1
 8005b92:	e7c6      	b.n	8005b22 <quorem+0x96>
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	3b04      	subs	r3, #4
 8005b98:	2a00      	cmp	r2, #0
 8005b9a:	d1f0      	bne.n	8005b7e <quorem+0xf2>
 8005b9c:	3c01      	subs	r4, #1
 8005b9e:	e7eb      	b.n	8005b78 <quorem+0xec>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e7ee      	b.n	8005b82 <quorem+0xf6>
 8005ba4:	0000      	movs	r0, r0
	...

08005ba8 <_dtoa_r>:
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	4616      	mov	r6, r2
 8005bae:	461f      	mov	r7, r3
 8005bb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005bb2:	b099      	sub	sp, #100	; 0x64
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005bba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005bbe:	b974      	cbnz	r4, 8005bde <_dtoa_r+0x36>
 8005bc0:	2010      	movs	r0, #16
 8005bc2:	f001 f95b 	bl	8006e7c <malloc>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	6268      	str	r0, [r5, #36]	; 0x24
 8005bca:	b920      	cbnz	r0, 8005bd6 <_dtoa_r+0x2e>
 8005bcc:	21ea      	movs	r1, #234	; 0xea
 8005bce:	4ba8      	ldr	r3, [pc, #672]	; (8005e70 <_dtoa_r+0x2c8>)
 8005bd0:	48a8      	ldr	r0, [pc, #672]	; (8005e74 <_dtoa_r+0x2cc>)
 8005bd2:	f7ff ff3d 	bl	8005a50 <__assert_func>
 8005bd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bda:	6004      	str	r4, [r0, #0]
 8005bdc:	60c4      	str	r4, [r0, #12]
 8005bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005be0:	6819      	ldr	r1, [r3, #0]
 8005be2:	b151      	cbz	r1, 8005bfa <_dtoa_r+0x52>
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	2301      	movs	r3, #1
 8005be8:	4093      	lsls	r3, r2
 8005bea:	604a      	str	r2, [r1, #4]
 8005bec:	608b      	str	r3, [r1, #8]
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f001 f9ba 	bl	8006f68 <_Bfree>
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	1e3b      	subs	r3, r7, #0
 8005bfc:	bfaf      	iteee	ge
 8005bfe:	2300      	movge	r3, #0
 8005c00:	2201      	movlt	r2, #1
 8005c02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c06:	9305      	strlt	r3, [sp, #20]
 8005c08:	bfa8      	it	ge
 8005c0a:	f8c8 3000 	strge.w	r3, [r8]
 8005c0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005c12:	4b99      	ldr	r3, [pc, #612]	; (8005e78 <_dtoa_r+0x2d0>)
 8005c14:	bfb8      	it	lt
 8005c16:	f8c8 2000 	strlt.w	r2, [r8]
 8005c1a:	ea33 0309 	bics.w	r3, r3, r9
 8005c1e:	d119      	bne.n	8005c54 <_dtoa_r+0xac>
 8005c20:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c2c:	4333      	orrs	r3, r6
 8005c2e:	f000 857f 	beq.w	8006730 <_dtoa_r+0xb88>
 8005c32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c34:	b953      	cbnz	r3, 8005c4c <_dtoa_r+0xa4>
 8005c36:	4b91      	ldr	r3, [pc, #580]	; (8005e7c <_dtoa_r+0x2d4>)
 8005c38:	e022      	b.n	8005c80 <_dtoa_r+0xd8>
 8005c3a:	4b91      	ldr	r3, [pc, #580]	; (8005e80 <_dtoa_r+0x2d8>)
 8005c3c:	9303      	str	r3, [sp, #12]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	9803      	ldr	r0, [sp, #12]
 8005c46:	b019      	add	sp, #100	; 0x64
 8005c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4c:	4b8b      	ldr	r3, [pc, #556]	; (8005e7c <_dtoa_r+0x2d4>)
 8005c4e:	9303      	str	r3, [sp, #12]
 8005c50:	3303      	adds	r3, #3
 8005c52:	e7f5      	b.n	8005c40 <_dtoa_r+0x98>
 8005c54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005c5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c60:	2200      	movs	r2, #0
 8005c62:	2300      	movs	r3, #0
 8005c64:	f7fa feaa 	bl	80009bc <__aeabi_dcmpeq>
 8005c68:	4680      	mov	r8, r0
 8005c6a:	b158      	cbz	r0, 8005c84 <_dtoa_r+0xdc>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8558 	beq.w	800672a <_dtoa_r+0xb82>
 8005c7a:	4882      	ldr	r0, [pc, #520]	; (8005e84 <_dtoa_r+0x2dc>)
 8005c7c:	6018      	str	r0, [r3, #0]
 8005c7e:	1e43      	subs	r3, r0, #1
 8005c80:	9303      	str	r3, [sp, #12]
 8005c82:	e7df      	b.n	8005c44 <_dtoa_r+0x9c>
 8005c84:	ab16      	add	r3, sp, #88	; 0x58
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	ab17      	add	r3, sp, #92	; 0x5c
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c92:	f001 fd13 	bl	80076bc <__d2b>
 8005c96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005c9a:	4683      	mov	fp, r0
 8005c9c:	2c00      	cmp	r4, #0
 8005c9e:	d07f      	beq.n	8005da0 <_dtoa_r+0x1f8>
 8005ca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ca6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005cb2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005cb6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005cba:	2200      	movs	r2, #0
 8005cbc:	4b72      	ldr	r3, [pc, #456]	; (8005e88 <_dtoa_r+0x2e0>)
 8005cbe:	f7fa fa5d 	bl	800017c <__aeabi_dsub>
 8005cc2:	a365      	add	r3, pc, #404	; (adr r3, 8005e58 <_dtoa_r+0x2b0>)
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f7fa fc10 	bl	80004ec <__aeabi_dmul>
 8005ccc:	a364      	add	r3, pc, #400	; (adr r3, 8005e60 <_dtoa_r+0x2b8>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fa55 	bl	8000180 <__adddf3>
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	4620      	mov	r0, r4
 8005cda:	460f      	mov	r7, r1
 8005cdc:	f7fa fb9c 	bl	8000418 <__aeabi_i2d>
 8005ce0:	a361      	add	r3, pc, #388	; (adr r3, 8005e68 <_dtoa_r+0x2c0>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f7fa fc01 	bl	80004ec <__aeabi_dmul>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4630      	mov	r0, r6
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	f7fa fa45 	bl	8000180 <__adddf3>
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	f7fa fea7 	bl	8000a4c <__aeabi_d2iz>
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4682      	mov	sl, r0
 8005d02:	2300      	movs	r3, #0
 8005d04:	4630      	mov	r0, r6
 8005d06:	4639      	mov	r1, r7
 8005d08:	f7fa fe62 	bl	80009d0 <__aeabi_dcmplt>
 8005d0c:	b148      	cbz	r0, 8005d22 <_dtoa_r+0x17a>
 8005d0e:	4650      	mov	r0, sl
 8005d10:	f7fa fb82 	bl	8000418 <__aeabi_i2d>
 8005d14:	4632      	mov	r2, r6
 8005d16:	463b      	mov	r3, r7
 8005d18:	f7fa fe50 	bl	80009bc <__aeabi_dcmpeq>
 8005d1c:	b908      	cbnz	r0, 8005d22 <_dtoa_r+0x17a>
 8005d1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d22:	f1ba 0f16 	cmp.w	sl, #22
 8005d26:	d858      	bhi.n	8005dda <_dtoa_r+0x232>
 8005d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d2c:	4b57      	ldr	r3, [pc, #348]	; (8005e8c <_dtoa_r+0x2e4>)
 8005d2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	f7fa fe4b 	bl	80009d0 <__aeabi_dcmplt>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d04f      	beq.n	8005dde <_dtoa_r+0x236>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d48:	1b1c      	subs	r4, r3, r4
 8005d4a:	1e63      	subs	r3, r4, #1
 8005d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4e:	bf49      	itett	mi
 8005d50:	f1c4 0301 	rsbmi	r3, r4, #1
 8005d54:	2300      	movpl	r3, #0
 8005d56:	9306      	strmi	r3, [sp, #24]
 8005d58:	2300      	movmi	r3, #0
 8005d5a:	bf54      	ite	pl
 8005d5c:	9306      	strpl	r3, [sp, #24]
 8005d5e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005d60:	f1ba 0f00 	cmp.w	sl, #0
 8005d64:	db3d      	blt.n	8005de2 <_dtoa_r+0x23a>
 8005d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d68:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005d6c:	4453      	add	r3, sl
 8005d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d70:	2300      	movs	r3, #0
 8005d72:	930a      	str	r3, [sp, #40]	; 0x28
 8005d74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d76:	2b09      	cmp	r3, #9
 8005d78:	f200 808c 	bhi.w	8005e94 <_dtoa_r+0x2ec>
 8005d7c:	2b05      	cmp	r3, #5
 8005d7e:	bfc4      	itt	gt
 8005d80:	3b04      	subgt	r3, #4
 8005d82:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d86:	bfc8      	it	gt
 8005d88:	2400      	movgt	r4, #0
 8005d8a:	f1a3 0302 	sub.w	r3, r3, #2
 8005d8e:	bfd8      	it	le
 8005d90:	2401      	movle	r4, #1
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	f200 808a 	bhi.w	8005eac <_dtoa_r+0x304>
 8005d98:	e8df f003 	tbb	[pc, r3]
 8005d9c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005da0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005da4:	441c      	add	r4, r3
 8005da6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	bfc3      	ittte	gt
 8005dae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005db2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005db6:	fa09 f303 	lslgt.w	r3, r9, r3
 8005dba:	f1c3 0320 	rsble	r3, r3, #32
 8005dbe:	bfc6      	itte	gt
 8005dc0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005dc4:	4318      	orrgt	r0, r3
 8005dc6:	fa06 f003 	lslle.w	r0, r6, r3
 8005dca:	f7fa fb15 	bl	80003f8 <__aeabi_ui2d>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005dd4:	3c01      	subs	r4, #1
 8005dd6:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dd8:	e76f      	b.n	8005cba <_dtoa_r+0x112>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e7b2      	b.n	8005d44 <_dtoa_r+0x19c>
 8005dde:	900f      	str	r0, [sp, #60]	; 0x3c
 8005de0:	e7b1      	b.n	8005d46 <_dtoa_r+0x19e>
 8005de2:	9b06      	ldr	r3, [sp, #24]
 8005de4:	eba3 030a 	sub.w	r3, r3, sl
 8005de8:	9306      	str	r3, [sp, #24]
 8005dea:	f1ca 0300 	rsb	r3, sl, #0
 8005dee:	930a      	str	r3, [sp, #40]	; 0x28
 8005df0:	2300      	movs	r3, #0
 8005df2:	930e      	str	r3, [sp, #56]	; 0x38
 8005df4:	e7be      	b.n	8005d74 <_dtoa_r+0x1cc>
 8005df6:	2300      	movs	r3, #0
 8005df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	dc58      	bgt.n	8005eb2 <_dtoa_r+0x30a>
 8005e00:	f04f 0901 	mov.w	r9, #1
 8005e04:	464b      	mov	r3, r9
 8005e06:	f8cd 9020 	str.w	r9, [sp, #32]
 8005e0a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005e0e:	2200      	movs	r2, #0
 8005e10:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005e12:	6042      	str	r2, [r0, #4]
 8005e14:	2204      	movs	r2, #4
 8005e16:	f102 0614 	add.w	r6, r2, #20
 8005e1a:	429e      	cmp	r6, r3
 8005e1c:	6841      	ldr	r1, [r0, #4]
 8005e1e:	d94e      	bls.n	8005ebe <_dtoa_r+0x316>
 8005e20:	4628      	mov	r0, r5
 8005e22:	f001 f861 	bl	8006ee8 <_Balloc>
 8005e26:	9003      	str	r0, [sp, #12]
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d14c      	bne.n	8005ec6 <_dtoa_r+0x31e>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005e32:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <_dtoa_r+0x2e8>)
 8005e34:	e6cc      	b.n	8005bd0 <_dtoa_r+0x28>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e7de      	b.n	8005df8 <_dtoa_r+0x250>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e40:	eb0a 0903 	add.w	r9, sl, r3
 8005e44:	f109 0301 	add.w	r3, r9, #1
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	9308      	str	r3, [sp, #32]
 8005e4c:	bfb8      	it	lt
 8005e4e:	2301      	movlt	r3, #1
 8005e50:	e7dd      	b.n	8005e0e <_dtoa_r+0x266>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e7f2      	b.n	8005e3c <_dtoa_r+0x294>
 8005e56:	bf00      	nop
 8005e58:	636f4361 	.word	0x636f4361
 8005e5c:	3fd287a7 	.word	0x3fd287a7
 8005e60:	8b60c8b3 	.word	0x8b60c8b3
 8005e64:	3fc68a28 	.word	0x3fc68a28
 8005e68:	509f79fb 	.word	0x509f79fb
 8005e6c:	3fd34413 	.word	0x3fd34413
 8005e70:	08008970 	.word	0x08008970
 8005e74:	08008b2e 	.word	0x08008b2e
 8005e78:	7ff00000 	.word	0x7ff00000
 8005e7c:	08008b2a 	.word	0x08008b2a
 8005e80:	08008b21 	.word	0x08008b21
 8005e84:	080088f1 	.word	0x080088f1
 8005e88:	3ff80000 	.word	0x3ff80000
 8005e8c:	08008c98 	.word	0x08008c98
 8005e90:	08008b89 	.word	0x08008b89
 8005e94:	2401      	movs	r4, #1
 8005e96:	2300      	movs	r3, #0
 8005e98:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e9a:	9322      	str	r3, [sp, #136]	; 0x88
 8005e9c:	f04f 39ff 	mov.w	r9, #4294967295
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2312      	movs	r3, #18
 8005ea4:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ea8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005eaa:	e7b0      	b.n	8005e0e <_dtoa_r+0x266>
 8005eac:	2301      	movs	r3, #1
 8005eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eb0:	e7f4      	b.n	8005e9c <_dtoa_r+0x2f4>
 8005eb2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ebc:	e7a7      	b.n	8005e0e <_dtoa_r+0x266>
 8005ebe:	3101      	adds	r1, #1
 8005ec0:	6041      	str	r1, [r0, #4]
 8005ec2:	0052      	lsls	r2, r2, #1
 8005ec4:	e7a7      	b.n	8005e16 <_dtoa_r+0x26e>
 8005ec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ec8:	9a03      	ldr	r2, [sp, #12]
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	9b08      	ldr	r3, [sp, #32]
 8005ece:	2b0e      	cmp	r3, #14
 8005ed0:	f200 80a8 	bhi.w	8006024 <_dtoa_r+0x47c>
 8005ed4:	2c00      	cmp	r4, #0
 8005ed6:	f000 80a5 	beq.w	8006024 <_dtoa_r+0x47c>
 8005eda:	f1ba 0f00 	cmp.w	sl, #0
 8005ede:	dd34      	ble.n	8005f4a <_dtoa_r+0x3a2>
 8005ee0:	4a9a      	ldr	r2, [pc, #616]	; (800614c <_dtoa_r+0x5a4>)
 8005ee2:	f00a 030f 	and.w	r3, sl, #15
 8005ee6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005eea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005eee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ef2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ef6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005efa:	d016      	beq.n	8005f2a <_dtoa_r+0x382>
 8005efc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f00:	4b93      	ldr	r3, [pc, #588]	; (8006150 <_dtoa_r+0x5a8>)
 8005f02:	2703      	movs	r7, #3
 8005f04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f08:	f7fa fc1a 	bl	8000740 <__aeabi_ddiv>
 8005f0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f10:	f004 040f 	and.w	r4, r4, #15
 8005f14:	4e8e      	ldr	r6, [pc, #568]	; (8006150 <_dtoa_r+0x5a8>)
 8005f16:	b954      	cbnz	r4, 8005f2e <_dtoa_r+0x386>
 8005f18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f20:	f7fa fc0e 	bl	8000740 <__aeabi_ddiv>
 8005f24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f28:	e029      	b.n	8005f7e <_dtoa_r+0x3d6>
 8005f2a:	2702      	movs	r7, #2
 8005f2c:	e7f2      	b.n	8005f14 <_dtoa_r+0x36c>
 8005f2e:	07e1      	lsls	r1, r4, #31
 8005f30:	d508      	bpl.n	8005f44 <_dtoa_r+0x39c>
 8005f32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f3a:	f7fa fad7 	bl	80004ec <__aeabi_dmul>
 8005f3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f42:	3701      	adds	r7, #1
 8005f44:	1064      	asrs	r4, r4, #1
 8005f46:	3608      	adds	r6, #8
 8005f48:	e7e5      	b.n	8005f16 <_dtoa_r+0x36e>
 8005f4a:	f000 80a5 	beq.w	8006098 <_dtoa_r+0x4f0>
 8005f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f52:	f1ca 0400 	rsb	r4, sl, #0
 8005f56:	4b7d      	ldr	r3, [pc, #500]	; (800614c <_dtoa_r+0x5a4>)
 8005f58:	f004 020f 	and.w	r2, r4, #15
 8005f5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f7fa fac2 	bl	80004ec <__aeabi_dmul>
 8005f68:	2702      	movs	r7, #2
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f70:	4e77      	ldr	r6, [pc, #476]	; (8006150 <_dtoa_r+0x5a8>)
 8005f72:	1124      	asrs	r4, r4, #4
 8005f74:	2c00      	cmp	r4, #0
 8005f76:	f040 8084 	bne.w	8006082 <_dtoa_r+0x4da>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1d2      	bne.n	8005f24 <_dtoa_r+0x37c>
 8005f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 808b 	beq.w	800609c <_dtoa_r+0x4f4>
 8005f86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005f8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f92:	2200      	movs	r2, #0
 8005f94:	4b6f      	ldr	r3, [pc, #444]	; (8006154 <_dtoa_r+0x5ac>)
 8005f96:	f7fa fd1b 	bl	80009d0 <__aeabi_dcmplt>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d07e      	beq.n	800609c <_dtoa_r+0x4f4>
 8005f9e:	9b08      	ldr	r3, [sp, #32]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d07b      	beq.n	800609c <_dtoa_r+0x4f4>
 8005fa4:	f1b9 0f00 	cmp.w	r9, #0
 8005fa8:	dd38      	ble.n	800601c <_dtoa_r+0x474>
 8005faa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4b69      	ldr	r3, [pc, #420]	; (8006158 <_dtoa_r+0x5b0>)
 8005fb2:	f7fa fa9b 	bl	80004ec <__aeabi_dmul>
 8005fb6:	464c      	mov	r4, r9
 8005fb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fbc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005fc0:	3701      	adds	r7, #1
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	f7fa fa28 	bl	8000418 <__aeabi_i2d>
 8005fc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fcc:	f7fa fa8e 	bl	80004ec <__aeabi_dmul>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4b62      	ldr	r3, [pc, #392]	; (800615c <_dtoa_r+0x5b4>)
 8005fd4:	f7fa f8d4 	bl	8000180 <__adddf3>
 8005fd8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005fdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fe0:	9611      	str	r6, [sp, #68]	; 0x44
 8005fe2:	2c00      	cmp	r4, #0
 8005fe4:	d15d      	bne.n	80060a2 <_dtoa_r+0x4fa>
 8005fe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fea:	2200      	movs	r2, #0
 8005fec:	4b5c      	ldr	r3, [pc, #368]	; (8006160 <_dtoa_r+0x5b8>)
 8005fee:	f7fa f8c5 	bl	800017c <__aeabi_dsub>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ffa:	4633      	mov	r3, r6
 8005ffc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ffe:	f7fa fd05 	bl	8000a0c <__aeabi_dcmpgt>
 8006002:	2800      	cmp	r0, #0
 8006004:	f040 829c 	bne.w	8006540 <_dtoa_r+0x998>
 8006008:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800600c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800600e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006012:	f7fa fcdd 	bl	80009d0 <__aeabi_dcmplt>
 8006016:	2800      	cmp	r0, #0
 8006018:	f040 8290 	bne.w	800653c <_dtoa_r+0x994>
 800601c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006020:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006026:	2b00      	cmp	r3, #0
 8006028:	f2c0 8152 	blt.w	80062d0 <_dtoa_r+0x728>
 800602c:	f1ba 0f0e 	cmp.w	sl, #14
 8006030:	f300 814e 	bgt.w	80062d0 <_dtoa_r+0x728>
 8006034:	4b45      	ldr	r3, [pc, #276]	; (800614c <_dtoa_r+0x5a4>)
 8006036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800603a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800603e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006042:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006044:	2b00      	cmp	r3, #0
 8006046:	f280 80db 	bge.w	8006200 <_dtoa_r+0x658>
 800604a:	9b08      	ldr	r3, [sp, #32]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f300 80d7 	bgt.w	8006200 <_dtoa_r+0x658>
 8006052:	f040 8272 	bne.w	800653a <_dtoa_r+0x992>
 8006056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800605a:	2200      	movs	r2, #0
 800605c:	4b40      	ldr	r3, [pc, #256]	; (8006160 <_dtoa_r+0x5b8>)
 800605e:	f7fa fa45 	bl	80004ec <__aeabi_dmul>
 8006062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006066:	f7fa fcc7 	bl	80009f8 <__aeabi_dcmpge>
 800606a:	9c08      	ldr	r4, [sp, #32]
 800606c:	4626      	mov	r6, r4
 800606e:	2800      	cmp	r0, #0
 8006070:	f040 8248 	bne.w	8006504 <_dtoa_r+0x95c>
 8006074:	2331      	movs	r3, #49	; 0x31
 8006076:	9f03      	ldr	r7, [sp, #12]
 8006078:	f10a 0a01 	add.w	sl, sl, #1
 800607c:	f807 3b01 	strb.w	r3, [r7], #1
 8006080:	e244      	b.n	800650c <_dtoa_r+0x964>
 8006082:	07e2      	lsls	r2, r4, #31
 8006084:	d505      	bpl.n	8006092 <_dtoa_r+0x4ea>
 8006086:	e9d6 2300 	ldrd	r2, r3, [r6]
 800608a:	f7fa fa2f 	bl	80004ec <__aeabi_dmul>
 800608e:	2301      	movs	r3, #1
 8006090:	3701      	adds	r7, #1
 8006092:	1064      	asrs	r4, r4, #1
 8006094:	3608      	adds	r6, #8
 8006096:	e76d      	b.n	8005f74 <_dtoa_r+0x3cc>
 8006098:	2702      	movs	r7, #2
 800609a:	e770      	b.n	8005f7e <_dtoa_r+0x3d6>
 800609c:	46d0      	mov	r8, sl
 800609e:	9c08      	ldr	r4, [sp, #32]
 80060a0:	e78f      	b.n	8005fc2 <_dtoa_r+0x41a>
 80060a2:	9903      	ldr	r1, [sp, #12]
 80060a4:	4b29      	ldr	r3, [pc, #164]	; (800614c <_dtoa_r+0x5a4>)
 80060a6:	4421      	add	r1, r4
 80060a8:	9112      	str	r1, [sp, #72]	; 0x48
 80060aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80060b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060b8:	2900      	cmp	r1, #0
 80060ba:	d055      	beq.n	8006168 <_dtoa_r+0x5c0>
 80060bc:	2000      	movs	r0, #0
 80060be:	4929      	ldr	r1, [pc, #164]	; (8006164 <_dtoa_r+0x5bc>)
 80060c0:	f7fa fb3e 	bl	8000740 <__aeabi_ddiv>
 80060c4:	463b      	mov	r3, r7
 80060c6:	4632      	mov	r2, r6
 80060c8:	f7fa f858 	bl	800017c <__aeabi_dsub>
 80060cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060d0:	9f03      	ldr	r7, [sp, #12]
 80060d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d6:	f7fa fcb9 	bl	8000a4c <__aeabi_d2iz>
 80060da:	4604      	mov	r4, r0
 80060dc:	f7fa f99c 	bl	8000418 <__aeabi_i2d>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060e8:	f7fa f848 	bl	800017c <__aeabi_dsub>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	3430      	adds	r4, #48	; 0x30
 80060f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060fa:	f807 4b01 	strb.w	r4, [r7], #1
 80060fe:	f7fa fc67 	bl	80009d0 <__aeabi_dcmplt>
 8006102:	2800      	cmp	r0, #0
 8006104:	d174      	bne.n	80061f0 <_dtoa_r+0x648>
 8006106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610a:	2000      	movs	r0, #0
 800610c:	4911      	ldr	r1, [pc, #68]	; (8006154 <_dtoa_r+0x5ac>)
 800610e:	f7fa f835 	bl	800017c <__aeabi_dsub>
 8006112:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006116:	f7fa fc5b 	bl	80009d0 <__aeabi_dcmplt>
 800611a:	2800      	cmp	r0, #0
 800611c:	f040 80b7 	bne.w	800628e <_dtoa_r+0x6e6>
 8006120:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006122:	429f      	cmp	r7, r3
 8006124:	f43f af7a 	beq.w	800601c <_dtoa_r+0x474>
 8006128:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800612c:	2200      	movs	r2, #0
 800612e:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <_dtoa_r+0x5b0>)
 8006130:	f7fa f9dc 	bl	80004ec <__aeabi_dmul>
 8006134:	2200      	movs	r2, #0
 8006136:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800613a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800613e:	4b06      	ldr	r3, [pc, #24]	; (8006158 <_dtoa_r+0x5b0>)
 8006140:	f7fa f9d4 	bl	80004ec <__aeabi_dmul>
 8006144:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006148:	e7c3      	b.n	80060d2 <_dtoa_r+0x52a>
 800614a:	bf00      	nop
 800614c:	08008c98 	.word	0x08008c98
 8006150:	08008c70 	.word	0x08008c70
 8006154:	3ff00000 	.word	0x3ff00000
 8006158:	40240000 	.word	0x40240000
 800615c:	401c0000 	.word	0x401c0000
 8006160:	40140000 	.word	0x40140000
 8006164:	3fe00000 	.word	0x3fe00000
 8006168:	4630      	mov	r0, r6
 800616a:	4639      	mov	r1, r7
 800616c:	f7fa f9be 	bl	80004ec <__aeabi_dmul>
 8006170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006172:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006176:	9c03      	ldr	r4, [sp, #12]
 8006178:	9314      	str	r3, [sp, #80]	; 0x50
 800617a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800617e:	f7fa fc65 	bl	8000a4c <__aeabi_d2iz>
 8006182:	9015      	str	r0, [sp, #84]	; 0x54
 8006184:	f7fa f948 	bl	8000418 <__aeabi_i2d>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006190:	f7f9 fff4 	bl	800017c <__aeabi_dsub>
 8006194:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006196:	4606      	mov	r6, r0
 8006198:	3330      	adds	r3, #48	; 0x30
 800619a:	f804 3b01 	strb.w	r3, [r4], #1
 800619e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061a0:	460f      	mov	r7, r1
 80061a2:	429c      	cmp	r4, r3
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	d124      	bne.n	80061f4 <_dtoa_r+0x64c>
 80061aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061ae:	4bb0      	ldr	r3, [pc, #704]	; (8006470 <_dtoa_r+0x8c8>)
 80061b0:	f7f9 ffe6 	bl	8000180 <__adddf3>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4630      	mov	r0, r6
 80061ba:	4639      	mov	r1, r7
 80061bc:	f7fa fc26 	bl	8000a0c <__aeabi_dcmpgt>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d163      	bne.n	800628c <_dtoa_r+0x6e4>
 80061c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061c8:	2000      	movs	r0, #0
 80061ca:	49a9      	ldr	r1, [pc, #676]	; (8006470 <_dtoa_r+0x8c8>)
 80061cc:	f7f9 ffd6 	bl	800017c <__aeabi_dsub>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4630      	mov	r0, r6
 80061d6:	4639      	mov	r1, r7
 80061d8:	f7fa fbfa 	bl	80009d0 <__aeabi_dcmplt>
 80061dc:	2800      	cmp	r0, #0
 80061de:	f43f af1d 	beq.w	800601c <_dtoa_r+0x474>
 80061e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80061e4:	1e7b      	subs	r3, r7, #1
 80061e6:	9314      	str	r3, [sp, #80]	; 0x50
 80061e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80061ec:	2b30      	cmp	r3, #48	; 0x30
 80061ee:	d0f8      	beq.n	80061e2 <_dtoa_r+0x63a>
 80061f0:	46c2      	mov	sl, r8
 80061f2:	e03b      	b.n	800626c <_dtoa_r+0x6c4>
 80061f4:	4b9f      	ldr	r3, [pc, #636]	; (8006474 <_dtoa_r+0x8cc>)
 80061f6:	f7fa f979 	bl	80004ec <__aeabi_dmul>
 80061fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061fe:	e7bc      	b.n	800617a <_dtoa_r+0x5d2>
 8006200:	9f03      	ldr	r7, [sp, #12]
 8006202:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006206:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800620a:	4640      	mov	r0, r8
 800620c:	4649      	mov	r1, r9
 800620e:	f7fa fa97 	bl	8000740 <__aeabi_ddiv>
 8006212:	f7fa fc1b 	bl	8000a4c <__aeabi_d2iz>
 8006216:	4604      	mov	r4, r0
 8006218:	f7fa f8fe 	bl	8000418 <__aeabi_i2d>
 800621c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006220:	f7fa f964 	bl	80004ec <__aeabi_dmul>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4640      	mov	r0, r8
 800622a:	4649      	mov	r1, r9
 800622c:	f7f9 ffa6 	bl	800017c <__aeabi_dsub>
 8006230:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006234:	f807 6b01 	strb.w	r6, [r7], #1
 8006238:	9e03      	ldr	r6, [sp, #12]
 800623a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800623e:	1bbe      	subs	r6, r7, r6
 8006240:	45b4      	cmp	ip, r6
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	d136      	bne.n	80062b6 <_dtoa_r+0x70e>
 8006248:	f7f9 ff9a 	bl	8000180 <__adddf3>
 800624c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006250:	4680      	mov	r8, r0
 8006252:	4689      	mov	r9, r1
 8006254:	f7fa fbda 	bl	8000a0c <__aeabi_dcmpgt>
 8006258:	bb58      	cbnz	r0, 80062b2 <_dtoa_r+0x70a>
 800625a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800625e:	4640      	mov	r0, r8
 8006260:	4649      	mov	r1, r9
 8006262:	f7fa fbab 	bl	80009bc <__aeabi_dcmpeq>
 8006266:	b108      	cbz	r0, 800626c <_dtoa_r+0x6c4>
 8006268:	07e1      	lsls	r1, r4, #31
 800626a:	d422      	bmi.n	80062b2 <_dtoa_r+0x70a>
 800626c:	4628      	mov	r0, r5
 800626e:	4659      	mov	r1, fp
 8006270:	f000 fe7a 	bl	8006f68 <_Bfree>
 8006274:	2300      	movs	r3, #0
 8006276:	703b      	strb	r3, [r7, #0]
 8006278:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800627a:	f10a 0001 	add.w	r0, sl, #1
 800627e:	6018      	str	r0, [r3, #0]
 8006280:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006282:	2b00      	cmp	r3, #0
 8006284:	f43f acde 	beq.w	8005c44 <_dtoa_r+0x9c>
 8006288:	601f      	str	r7, [r3, #0]
 800628a:	e4db      	b.n	8005c44 <_dtoa_r+0x9c>
 800628c:	4627      	mov	r7, r4
 800628e:	463b      	mov	r3, r7
 8006290:	461f      	mov	r7, r3
 8006292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006296:	2a39      	cmp	r2, #57	; 0x39
 8006298:	d107      	bne.n	80062aa <_dtoa_r+0x702>
 800629a:	9a03      	ldr	r2, [sp, #12]
 800629c:	429a      	cmp	r2, r3
 800629e:	d1f7      	bne.n	8006290 <_dtoa_r+0x6e8>
 80062a0:	2230      	movs	r2, #48	; 0x30
 80062a2:	9903      	ldr	r1, [sp, #12]
 80062a4:	f108 0801 	add.w	r8, r8, #1
 80062a8:	700a      	strb	r2, [r1, #0]
 80062aa:	781a      	ldrb	r2, [r3, #0]
 80062ac:	3201      	adds	r2, #1
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	e79e      	b.n	80061f0 <_dtoa_r+0x648>
 80062b2:	46d0      	mov	r8, sl
 80062b4:	e7eb      	b.n	800628e <_dtoa_r+0x6e6>
 80062b6:	2200      	movs	r2, #0
 80062b8:	4b6e      	ldr	r3, [pc, #440]	; (8006474 <_dtoa_r+0x8cc>)
 80062ba:	f7fa f917 	bl	80004ec <__aeabi_dmul>
 80062be:	2200      	movs	r2, #0
 80062c0:	2300      	movs	r3, #0
 80062c2:	4680      	mov	r8, r0
 80062c4:	4689      	mov	r9, r1
 80062c6:	f7fa fb79 	bl	80009bc <__aeabi_dcmpeq>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d09b      	beq.n	8006206 <_dtoa_r+0x65e>
 80062ce:	e7cd      	b.n	800626c <_dtoa_r+0x6c4>
 80062d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	f000 80d0 	beq.w	8006478 <_dtoa_r+0x8d0>
 80062d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062da:	2a01      	cmp	r2, #1
 80062dc:	f300 80ae 	bgt.w	800643c <_dtoa_r+0x894>
 80062e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	f000 80a6 	beq.w	8006434 <_dtoa_r+0x88c>
 80062e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062ee:	9f06      	ldr	r7, [sp, #24]
 80062f0:	9a06      	ldr	r2, [sp, #24]
 80062f2:	2101      	movs	r1, #1
 80062f4:	441a      	add	r2, r3
 80062f6:	9206      	str	r2, [sp, #24]
 80062f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062fa:	4628      	mov	r0, r5
 80062fc:	441a      	add	r2, r3
 80062fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006300:	f000 ff32 	bl	8007168 <__i2b>
 8006304:	4606      	mov	r6, r0
 8006306:	2f00      	cmp	r7, #0
 8006308:	dd0c      	ble.n	8006324 <_dtoa_r+0x77c>
 800630a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800630c:	2b00      	cmp	r3, #0
 800630e:	dd09      	ble.n	8006324 <_dtoa_r+0x77c>
 8006310:	42bb      	cmp	r3, r7
 8006312:	bfa8      	it	ge
 8006314:	463b      	movge	r3, r7
 8006316:	9a06      	ldr	r2, [sp, #24]
 8006318:	1aff      	subs	r7, r7, r3
 800631a:	1ad2      	subs	r2, r2, r3
 800631c:	9206      	str	r2, [sp, #24]
 800631e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	9309      	str	r3, [sp, #36]	; 0x24
 8006324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006326:	b1f3      	cbz	r3, 8006366 <_dtoa_r+0x7be>
 8006328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80a8 	beq.w	8006480 <_dtoa_r+0x8d8>
 8006330:	2c00      	cmp	r4, #0
 8006332:	dd10      	ble.n	8006356 <_dtoa_r+0x7ae>
 8006334:	4631      	mov	r1, r6
 8006336:	4622      	mov	r2, r4
 8006338:	4628      	mov	r0, r5
 800633a:	f000 ffd3 	bl	80072e4 <__pow5mult>
 800633e:	465a      	mov	r2, fp
 8006340:	4601      	mov	r1, r0
 8006342:	4606      	mov	r6, r0
 8006344:	4628      	mov	r0, r5
 8006346:	f000 ff25 	bl	8007194 <__multiply>
 800634a:	4680      	mov	r8, r0
 800634c:	4659      	mov	r1, fp
 800634e:	4628      	mov	r0, r5
 8006350:	f000 fe0a 	bl	8006f68 <_Bfree>
 8006354:	46c3      	mov	fp, r8
 8006356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006358:	1b1a      	subs	r2, r3, r4
 800635a:	d004      	beq.n	8006366 <_dtoa_r+0x7be>
 800635c:	4659      	mov	r1, fp
 800635e:	4628      	mov	r0, r5
 8006360:	f000 ffc0 	bl	80072e4 <__pow5mult>
 8006364:	4683      	mov	fp, r0
 8006366:	2101      	movs	r1, #1
 8006368:	4628      	mov	r0, r5
 800636a:	f000 fefd 	bl	8007168 <__i2b>
 800636e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006370:	4604      	mov	r4, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	f340 8086 	ble.w	8006484 <_dtoa_r+0x8dc>
 8006378:	461a      	mov	r2, r3
 800637a:	4601      	mov	r1, r0
 800637c:	4628      	mov	r0, r5
 800637e:	f000 ffb1 	bl	80072e4 <__pow5mult>
 8006382:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006384:	4604      	mov	r4, r0
 8006386:	2b01      	cmp	r3, #1
 8006388:	dd7f      	ble.n	800648a <_dtoa_r+0x8e2>
 800638a:	f04f 0800 	mov.w	r8, #0
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006394:	6918      	ldr	r0, [r3, #16]
 8006396:	f000 fe99 	bl	80070cc <__hi0bits>
 800639a:	f1c0 0020 	rsb	r0, r0, #32
 800639e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a0:	4418      	add	r0, r3
 80063a2:	f010 001f 	ands.w	r0, r0, #31
 80063a6:	f000 8092 	beq.w	80064ce <_dtoa_r+0x926>
 80063aa:	f1c0 0320 	rsb	r3, r0, #32
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	f340 808a 	ble.w	80064c8 <_dtoa_r+0x920>
 80063b4:	f1c0 001c 	rsb	r0, r0, #28
 80063b8:	9b06      	ldr	r3, [sp, #24]
 80063ba:	4407      	add	r7, r0
 80063bc:	4403      	add	r3, r0
 80063be:	9306      	str	r3, [sp, #24]
 80063c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c2:	4403      	add	r3, r0
 80063c4:	9309      	str	r3, [sp, #36]	; 0x24
 80063c6:	9b06      	ldr	r3, [sp, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dd05      	ble.n	80063d8 <_dtoa_r+0x830>
 80063cc:	4659      	mov	r1, fp
 80063ce:	461a      	mov	r2, r3
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 ffe1 	bl	8007398 <__lshift>
 80063d6:	4683      	mov	fp, r0
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	dd05      	ble.n	80063ea <_dtoa_r+0x842>
 80063de:	4621      	mov	r1, r4
 80063e0:	461a      	mov	r2, r3
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 ffd8 	bl	8007398 <__lshift>
 80063e8:	4604      	mov	r4, r0
 80063ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d070      	beq.n	80064d2 <_dtoa_r+0x92a>
 80063f0:	4621      	mov	r1, r4
 80063f2:	4658      	mov	r0, fp
 80063f4:	f001 f840 	bl	8007478 <__mcmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	da6a      	bge.n	80064d2 <_dtoa_r+0x92a>
 80063fc:	2300      	movs	r3, #0
 80063fe:	4659      	mov	r1, fp
 8006400:	220a      	movs	r2, #10
 8006402:	4628      	mov	r0, r5
 8006404:	f000 fdd2 	bl	8006fac <__multadd>
 8006408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800640a:	4683      	mov	fp, r0
 800640c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 8194 	beq.w	800673e <_dtoa_r+0xb96>
 8006416:	4631      	mov	r1, r6
 8006418:	2300      	movs	r3, #0
 800641a:	220a      	movs	r2, #10
 800641c:	4628      	mov	r0, r5
 800641e:	f000 fdc5 	bl	8006fac <__multadd>
 8006422:	f1b9 0f00 	cmp.w	r9, #0
 8006426:	4606      	mov	r6, r0
 8006428:	f300 8093 	bgt.w	8006552 <_dtoa_r+0x9aa>
 800642c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800642e:	2b02      	cmp	r3, #2
 8006430:	dc57      	bgt.n	80064e2 <_dtoa_r+0x93a>
 8006432:	e08e      	b.n	8006552 <_dtoa_r+0x9aa>
 8006434:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800643a:	e757      	b.n	80062ec <_dtoa_r+0x744>
 800643c:	9b08      	ldr	r3, [sp, #32]
 800643e:	1e5c      	subs	r4, r3, #1
 8006440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006442:	42a3      	cmp	r3, r4
 8006444:	bfb7      	itett	lt
 8006446:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006448:	1b1c      	subge	r4, r3, r4
 800644a:	1ae2      	sublt	r2, r4, r3
 800644c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800644e:	bfbe      	ittt	lt
 8006450:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006452:	189b      	addlt	r3, r3, r2
 8006454:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006456:	9b08      	ldr	r3, [sp, #32]
 8006458:	bfb8      	it	lt
 800645a:	2400      	movlt	r4, #0
 800645c:	2b00      	cmp	r3, #0
 800645e:	bfbb      	ittet	lt
 8006460:	9b06      	ldrlt	r3, [sp, #24]
 8006462:	9a08      	ldrlt	r2, [sp, #32]
 8006464:	9f06      	ldrge	r7, [sp, #24]
 8006466:	1a9f      	sublt	r7, r3, r2
 8006468:	bfac      	ite	ge
 800646a:	9b08      	ldrge	r3, [sp, #32]
 800646c:	2300      	movlt	r3, #0
 800646e:	e73f      	b.n	80062f0 <_dtoa_r+0x748>
 8006470:	3fe00000 	.word	0x3fe00000
 8006474:	40240000 	.word	0x40240000
 8006478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800647a:	9f06      	ldr	r7, [sp, #24]
 800647c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800647e:	e742      	b.n	8006306 <_dtoa_r+0x75e>
 8006480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006482:	e76b      	b.n	800635c <_dtoa_r+0x7b4>
 8006484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006486:	2b01      	cmp	r3, #1
 8006488:	dc19      	bgt.n	80064be <_dtoa_r+0x916>
 800648a:	9b04      	ldr	r3, [sp, #16]
 800648c:	b9bb      	cbnz	r3, 80064be <_dtoa_r+0x916>
 800648e:	9b05      	ldr	r3, [sp, #20]
 8006490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006494:	b99b      	cbnz	r3, 80064be <_dtoa_r+0x916>
 8006496:	9b05      	ldr	r3, [sp, #20]
 8006498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800649c:	0d1b      	lsrs	r3, r3, #20
 800649e:	051b      	lsls	r3, r3, #20
 80064a0:	b183      	cbz	r3, 80064c4 <_dtoa_r+0x91c>
 80064a2:	f04f 0801 	mov.w	r8, #1
 80064a6:	9b06      	ldr	r3, [sp, #24]
 80064a8:	3301      	adds	r3, #1
 80064aa:	9306      	str	r3, [sp, #24]
 80064ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ae:	3301      	adds	r3, #1
 80064b0:	9309      	str	r3, [sp, #36]	; 0x24
 80064b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f47f af6a 	bne.w	800638e <_dtoa_r+0x7e6>
 80064ba:	2001      	movs	r0, #1
 80064bc:	e76f      	b.n	800639e <_dtoa_r+0x7f6>
 80064be:	f04f 0800 	mov.w	r8, #0
 80064c2:	e7f6      	b.n	80064b2 <_dtoa_r+0x90a>
 80064c4:	4698      	mov	r8, r3
 80064c6:	e7f4      	b.n	80064b2 <_dtoa_r+0x90a>
 80064c8:	f43f af7d 	beq.w	80063c6 <_dtoa_r+0x81e>
 80064cc:	4618      	mov	r0, r3
 80064ce:	301c      	adds	r0, #28
 80064d0:	e772      	b.n	80063b8 <_dtoa_r+0x810>
 80064d2:	9b08      	ldr	r3, [sp, #32]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	dc36      	bgt.n	8006546 <_dtoa_r+0x99e>
 80064d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064da:	2b02      	cmp	r3, #2
 80064dc:	dd33      	ble.n	8006546 <_dtoa_r+0x99e>
 80064de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064e2:	f1b9 0f00 	cmp.w	r9, #0
 80064e6:	d10d      	bne.n	8006504 <_dtoa_r+0x95c>
 80064e8:	4621      	mov	r1, r4
 80064ea:	464b      	mov	r3, r9
 80064ec:	2205      	movs	r2, #5
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 fd5c 	bl	8006fac <__multadd>
 80064f4:	4601      	mov	r1, r0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4658      	mov	r0, fp
 80064fa:	f000 ffbd 	bl	8007478 <__mcmp>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f73f adb8 	bgt.w	8006074 <_dtoa_r+0x4cc>
 8006504:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006506:	9f03      	ldr	r7, [sp, #12]
 8006508:	ea6f 0a03 	mvn.w	sl, r3
 800650c:	f04f 0800 	mov.w	r8, #0
 8006510:	4621      	mov	r1, r4
 8006512:	4628      	mov	r0, r5
 8006514:	f000 fd28 	bl	8006f68 <_Bfree>
 8006518:	2e00      	cmp	r6, #0
 800651a:	f43f aea7 	beq.w	800626c <_dtoa_r+0x6c4>
 800651e:	f1b8 0f00 	cmp.w	r8, #0
 8006522:	d005      	beq.n	8006530 <_dtoa_r+0x988>
 8006524:	45b0      	cmp	r8, r6
 8006526:	d003      	beq.n	8006530 <_dtoa_r+0x988>
 8006528:	4641      	mov	r1, r8
 800652a:	4628      	mov	r0, r5
 800652c:	f000 fd1c 	bl	8006f68 <_Bfree>
 8006530:	4631      	mov	r1, r6
 8006532:	4628      	mov	r0, r5
 8006534:	f000 fd18 	bl	8006f68 <_Bfree>
 8006538:	e698      	b.n	800626c <_dtoa_r+0x6c4>
 800653a:	2400      	movs	r4, #0
 800653c:	4626      	mov	r6, r4
 800653e:	e7e1      	b.n	8006504 <_dtoa_r+0x95c>
 8006540:	46c2      	mov	sl, r8
 8006542:	4626      	mov	r6, r4
 8006544:	e596      	b.n	8006074 <_dtoa_r+0x4cc>
 8006546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80fd 	beq.w	800674c <_dtoa_r+0xba4>
 8006552:	2f00      	cmp	r7, #0
 8006554:	dd05      	ble.n	8006562 <_dtoa_r+0x9ba>
 8006556:	4631      	mov	r1, r6
 8006558:	463a      	mov	r2, r7
 800655a:	4628      	mov	r0, r5
 800655c:	f000 ff1c 	bl	8007398 <__lshift>
 8006560:	4606      	mov	r6, r0
 8006562:	f1b8 0f00 	cmp.w	r8, #0
 8006566:	d05c      	beq.n	8006622 <_dtoa_r+0xa7a>
 8006568:	4628      	mov	r0, r5
 800656a:	6871      	ldr	r1, [r6, #4]
 800656c:	f000 fcbc 	bl	8006ee8 <_Balloc>
 8006570:	4607      	mov	r7, r0
 8006572:	b928      	cbnz	r0, 8006580 <_dtoa_r+0x9d8>
 8006574:	4602      	mov	r2, r0
 8006576:	f240 21ea 	movw	r1, #746	; 0x2ea
 800657a:	4b7f      	ldr	r3, [pc, #508]	; (8006778 <_dtoa_r+0xbd0>)
 800657c:	f7ff bb28 	b.w	8005bd0 <_dtoa_r+0x28>
 8006580:	6932      	ldr	r2, [r6, #16]
 8006582:	f106 010c 	add.w	r1, r6, #12
 8006586:	3202      	adds	r2, #2
 8006588:	0092      	lsls	r2, r2, #2
 800658a:	300c      	adds	r0, #12
 800658c:	f000 fc9e 	bl	8006ecc <memcpy>
 8006590:	2201      	movs	r2, #1
 8006592:	4639      	mov	r1, r7
 8006594:	4628      	mov	r0, r5
 8006596:	f000 feff 	bl	8007398 <__lshift>
 800659a:	46b0      	mov	r8, r6
 800659c:	4606      	mov	r6, r0
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	3301      	adds	r3, #1
 80065a2:	9308      	str	r3, [sp, #32]
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	444b      	add	r3, r9
 80065a8:	930a      	str	r3, [sp, #40]	; 0x28
 80065aa:	9b04      	ldr	r3, [sp, #16]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	9309      	str	r3, [sp, #36]	; 0x24
 80065b2:	9b08      	ldr	r3, [sp, #32]
 80065b4:	4621      	mov	r1, r4
 80065b6:	3b01      	subs	r3, #1
 80065b8:	4658      	mov	r0, fp
 80065ba:	9304      	str	r3, [sp, #16]
 80065bc:	f7ff fa66 	bl	8005a8c <quorem>
 80065c0:	4603      	mov	r3, r0
 80065c2:	4641      	mov	r1, r8
 80065c4:	3330      	adds	r3, #48	; 0x30
 80065c6:	9006      	str	r0, [sp, #24]
 80065c8:	4658      	mov	r0, fp
 80065ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80065cc:	f000 ff54 	bl	8007478 <__mcmp>
 80065d0:	4632      	mov	r2, r6
 80065d2:	4681      	mov	r9, r0
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 ff6a 	bl	80074b0 <__mdiff>
 80065dc:	68c2      	ldr	r2, [r0, #12]
 80065de:	4607      	mov	r7, r0
 80065e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e2:	bb02      	cbnz	r2, 8006626 <_dtoa_r+0xa7e>
 80065e4:	4601      	mov	r1, r0
 80065e6:	4658      	mov	r0, fp
 80065e8:	f000 ff46 	bl	8007478 <__mcmp>
 80065ec:	4602      	mov	r2, r0
 80065ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f0:	4639      	mov	r1, r7
 80065f2:	4628      	mov	r0, r5
 80065f4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80065f8:	f000 fcb6 	bl	8006f68 <_Bfree>
 80065fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006600:	9f08      	ldr	r7, [sp, #32]
 8006602:	ea43 0102 	orr.w	r1, r3, r2
 8006606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006608:	430b      	orrs	r3, r1
 800660a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800660c:	d10d      	bne.n	800662a <_dtoa_r+0xa82>
 800660e:	2b39      	cmp	r3, #57	; 0x39
 8006610:	d029      	beq.n	8006666 <_dtoa_r+0xabe>
 8006612:	f1b9 0f00 	cmp.w	r9, #0
 8006616:	dd01      	ble.n	800661c <_dtoa_r+0xa74>
 8006618:	9b06      	ldr	r3, [sp, #24]
 800661a:	3331      	adds	r3, #49	; 0x31
 800661c:	9a04      	ldr	r2, [sp, #16]
 800661e:	7013      	strb	r3, [r2, #0]
 8006620:	e776      	b.n	8006510 <_dtoa_r+0x968>
 8006622:	4630      	mov	r0, r6
 8006624:	e7b9      	b.n	800659a <_dtoa_r+0x9f2>
 8006626:	2201      	movs	r2, #1
 8006628:	e7e2      	b.n	80065f0 <_dtoa_r+0xa48>
 800662a:	f1b9 0f00 	cmp.w	r9, #0
 800662e:	db06      	blt.n	800663e <_dtoa_r+0xa96>
 8006630:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006632:	ea41 0909 	orr.w	r9, r1, r9
 8006636:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006638:	ea59 0101 	orrs.w	r1, r9, r1
 800663c:	d120      	bne.n	8006680 <_dtoa_r+0xad8>
 800663e:	2a00      	cmp	r2, #0
 8006640:	ddec      	ble.n	800661c <_dtoa_r+0xa74>
 8006642:	4659      	mov	r1, fp
 8006644:	2201      	movs	r2, #1
 8006646:	4628      	mov	r0, r5
 8006648:	9308      	str	r3, [sp, #32]
 800664a:	f000 fea5 	bl	8007398 <__lshift>
 800664e:	4621      	mov	r1, r4
 8006650:	4683      	mov	fp, r0
 8006652:	f000 ff11 	bl	8007478 <__mcmp>
 8006656:	2800      	cmp	r0, #0
 8006658:	9b08      	ldr	r3, [sp, #32]
 800665a:	dc02      	bgt.n	8006662 <_dtoa_r+0xaba>
 800665c:	d1de      	bne.n	800661c <_dtoa_r+0xa74>
 800665e:	07da      	lsls	r2, r3, #31
 8006660:	d5dc      	bpl.n	800661c <_dtoa_r+0xa74>
 8006662:	2b39      	cmp	r3, #57	; 0x39
 8006664:	d1d8      	bne.n	8006618 <_dtoa_r+0xa70>
 8006666:	2339      	movs	r3, #57	; 0x39
 8006668:	9a04      	ldr	r2, [sp, #16]
 800666a:	7013      	strb	r3, [r2, #0]
 800666c:	463b      	mov	r3, r7
 800666e:	461f      	mov	r7, r3
 8006670:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006674:	3b01      	subs	r3, #1
 8006676:	2a39      	cmp	r2, #57	; 0x39
 8006678:	d050      	beq.n	800671c <_dtoa_r+0xb74>
 800667a:	3201      	adds	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e747      	b.n	8006510 <_dtoa_r+0x968>
 8006680:	2a00      	cmp	r2, #0
 8006682:	dd03      	ble.n	800668c <_dtoa_r+0xae4>
 8006684:	2b39      	cmp	r3, #57	; 0x39
 8006686:	d0ee      	beq.n	8006666 <_dtoa_r+0xabe>
 8006688:	3301      	adds	r3, #1
 800668a:	e7c7      	b.n	800661c <_dtoa_r+0xa74>
 800668c:	9a08      	ldr	r2, [sp, #32]
 800668e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006690:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006694:	428a      	cmp	r2, r1
 8006696:	d02a      	beq.n	80066ee <_dtoa_r+0xb46>
 8006698:	4659      	mov	r1, fp
 800669a:	2300      	movs	r3, #0
 800669c:	220a      	movs	r2, #10
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 fc84 	bl	8006fac <__multadd>
 80066a4:	45b0      	cmp	r8, r6
 80066a6:	4683      	mov	fp, r0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	f04f 020a 	mov.w	r2, #10
 80066b0:	4641      	mov	r1, r8
 80066b2:	4628      	mov	r0, r5
 80066b4:	d107      	bne.n	80066c6 <_dtoa_r+0xb1e>
 80066b6:	f000 fc79 	bl	8006fac <__multadd>
 80066ba:	4680      	mov	r8, r0
 80066bc:	4606      	mov	r6, r0
 80066be:	9b08      	ldr	r3, [sp, #32]
 80066c0:	3301      	adds	r3, #1
 80066c2:	9308      	str	r3, [sp, #32]
 80066c4:	e775      	b.n	80065b2 <_dtoa_r+0xa0a>
 80066c6:	f000 fc71 	bl	8006fac <__multadd>
 80066ca:	4631      	mov	r1, r6
 80066cc:	4680      	mov	r8, r0
 80066ce:	2300      	movs	r3, #0
 80066d0:	220a      	movs	r2, #10
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 fc6a 	bl	8006fac <__multadd>
 80066d8:	4606      	mov	r6, r0
 80066da:	e7f0      	b.n	80066be <_dtoa_r+0xb16>
 80066dc:	f1b9 0f00 	cmp.w	r9, #0
 80066e0:	bfcc      	ite	gt
 80066e2:	464f      	movgt	r7, r9
 80066e4:	2701      	movle	r7, #1
 80066e6:	f04f 0800 	mov.w	r8, #0
 80066ea:	9a03      	ldr	r2, [sp, #12]
 80066ec:	4417      	add	r7, r2
 80066ee:	4659      	mov	r1, fp
 80066f0:	2201      	movs	r2, #1
 80066f2:	4628      	mov	r0, r5
 80066f4:	9308      	str	r3, [sp, #32]
 80066f6:	f000 fe4f 	bl	8007398 <__lshift>
 80066fa:	4621      	mov	r1, r4
 80066fc:	4683      	mov	fp, r0
 80066fe:	f000 febb 	bl	8007478 <__mcmp>
 8006702:	2800      	cmp	r0, #0
 8006704:	dcb2      	bgt.n	800666c <_dtoa_r+0xac4>
 8006706:	d102      	bne.n	800670e <_dtoa_r+0xb66>
 8006708:	9b08      	ldr	r3, [sp, #32]
 800670a:	07db      	lsls	r3, r3, #31
 800670c:	d4ae      	bmi.n	800666c <_dtoa_r+0xac4>
 800670e:	463b      	mov	r3, r7
 8006710:	461f      	mov	r7, r3
 8006712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006716:	2a30      	cmp	r2, #48	; 0x30
 8006718:	d0fa      	beq.n	8006710 <_dtoa_r+0xb68>
 800671a:	e6f9      	b.n	8006510 <_dtoa_r+0x968>
 800671c:	9a03      	ldr	r2, [sp, #12]
 800671e:	429a      	cmp	r2, r3
 8006720:	d1a5      	bne.n	800666e <_dtoa_r+0xac6>
 8006722:	2331      	movs	r3, #49	; 0x31
 8006724:	f10a 0a01 	add.w	sl, sl, #1
 8006728:	e779      	b.n	800661e <_dtoa_r+0xa76>
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <_dtoa_r+0xbd4>)
 800672c:	f7ff baa8 	b.w	8005c80 <_dtoa_r+0xd8>
 8006730:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006732:	2b00      	cmp	r3, #0
 8006734:	f47f aa81 	bne.w	8005c3a <_dtoa_r+0x92>
 8006738:	4b11      	ldr	r3, [pc, #68]	; (8006780 <_dtoa_r+0xbd8>)
 800673a:	f7ff baa1 	b.w	8005c80 <_dtoa_r+0xd8>
 800673e:	f1b9 0f00 	cmp.w	r9, #0
 8006742:	dc03      	bgt.n	800674c <_dtoa_r+0xba4>
 8006744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006746:	2b02      	cmp	r3, #2
 8006748:	f73f aecb 	bgt.w	80064e2 <_dtoa_r+0x93a>
 800674c:	9f03      	ldr	r7, [sp, #12]
 800674e:	4621      	mov	r1, r4
 8006750:	4658      	mov	r0, fp
 8006752:	f7ff f99b 	bl	8005a8c <quorem>
 8006756:	9a03      	ldr	r2, [sp, #12]
 8006758:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800675c:	f807 3b01 	strb.w	r3, [r7], #1
 8006760:	1aba      	subs	r2, r7, r2
 8006762:	4591      	cmp	r9, r2
 8006764:	ddba      	ble.n	80066dc <_dtoa_r+0xb34>
 8006766:	4659      	mov	r1, fp
 8006768:	2300      	movs	r3, #0
 800676a:	220a      	movs	r2, #10
 800676c:	4628      	mov	r0, r5
 800676e:	f000 fc1d 	bl	8006fac <__multadd>
 8006772:	4683      	mov	fp, r0
 8006774:	e7eb      	b.n	800674e <_dtoa_r+0xba6>
 8006776:	bf00      	nop
 8006778:	08008b89 	.word	0x08008b89
 800677c:	080088f0 	.word	0x080088f0
 8006780:	08008b21 	.word	0x08008b21

08006784 <fiprintf>:
 8006784:	b40e      	push	{r1, r2, r3}
 8006786:	b503      	push	{r0, r1, lr}
 8006788:	4601      	mov	r1, r0
 800678a:	ab03      	add	r3, sp, #12
 800678c:	4805      	ldr	r0, [pc, #20]	; (80067a4 <fiprintf+0x20>)
 800678e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006792:	6800      	ldr	r0, [r0, #0]
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	f001 fad3 	bl	8007d40 <_vfiprintf_r>
 800679a:	b002      	add	sp, #8
 800679c:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a0:	b003      	add	sp, #12
 80067a2:	4770      	bx	lr
 80067a4:	2000000c 	.word	0x2000000c

080067a8 <rshift>:
 80067a8:	6903      	ldr	r3, [r0, #16]
 80067aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80067b2:	f100 0414 	add.w	r4, r0, #20
 80067b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80067ba:	dd46      	ble.n	800684a <rshift+0xa2>
 80067bc:	f011 011f 	ands.w	r1, r1, #31
 80067c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80067c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80067c8:	d10c      	bne.n	80067e4 <rshift+0x3c>
 80067ca:	4629      	mov	r1, r5
 80067cc:	f100 0710 	add.w	r7, r0, #16
 80067d0:	42b1      	cmp	r1, r6
 80067d2:	d335      	bcc.n	8006840 <rshift+0x98>
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	1eea      	subs	r2, r5, #3
 80067da:	4296      	cmp	r6, r2
 80067dc:	bf38      	it	cc
 80067de:	2300      	movcc	r3, #0
 80067e0:	4423      	add	r3, r4
 80067e2:	e015      	b.n	8006810 <rshift+0x68>
 80067e4:	46a1      	mov	r9, r4
 80067e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80067ea:	f1c1 0820 	rsb	r8, r1, #32
 80067ee:	40cf      	lsrs	r7, r1
 80067f0:	f105 0e04 	add.w	lr, r5, #4
 80067f4:	4576      	cmp	r6, lr
 80067f6:	46f4      	mov	ip, lr
 80067f8:	d816      	bhi.n	8006828 <rshift+0x80>
 80067fa:	1a9a      	subs	r2, r3, r2
 80067fc:	0092      	lsls	r2, r2, #2
 80067fe:	3a04      	subs	r2, #4
 8006800:	3501      	adds	r5, #1
 8006802:	42ae      	cmp	r6, r5
 8006804:	bf38      	it	cc
 8006806:	2200      	movcc	r2, #0
 8006808:	18a3      	adds	r3, r4, r2
 800680a:	50a7      	str	r7, [r4, r2]
 800680c:	b107      	cbz	r7, 8006810 <rshift+0x68>
 800680e:	3304      	adds	r3, #4
 8006810:	42a3      	cmp	r3, r4
 8006812:	eba3 0204 	sub.w	r2, r3, r4
 8006816:	bf08      	it	eq
 8006818:	2300      	moveq	r3, #0
 800681a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800681e:	6102      	str	r2, [r0, #16]
 8006820:	bf08      	it	eq
 8006822:	6143      	streq	r3, [r0, #20]
 8006824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006828:	f8dc c000 	ldr.w	ip, [ip]
 800682c:	fa0c fc08 	lsl.w	ip, ip, r8
 8006830:	ea4c 0707 	orr.w	r7, ip, r7
 8006834:	f849 7b04 	str.w	r7, [r9], #4
 8006838:	f85e 7b04 	ldr.w	r7, [lr], #4
 800683c:	40cf      	lsrs	r7, r1
 800683e:	e7d9      	b.n	80067f4 <rshift+0x4c>
 8006840:	f851 cb04 	ldr.w	ip, [r1], #4
 8006844:	f847 cf04 	str.w	ip, [r7, #4]!
 8006848:	e7c2      	b.n	80067d0 <rshift+0x28>
 800684a:	4623      	mov	r3, r4
 800684c:	e7e0      	b.n	8006810 <rshift+0x68>

0800684e <__hexdig_fun>:
 800684e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006852:	2b09      	cmp	r3, #9
 8006854:	d802      	bhi.n	800685c <__hexdig_fun+0xe>
 8006856:	3820      	subs	r0, #32
 8006858:	b2c0      	uxtb	r0, r0
 800685a:	4770      	bx	lr
 800685c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006860:	2b05      	cmp	r3, #5
 8006862:	d801      	bhi.n	8006868 <__hexdig_fun+0x1a>
 8006864:	3847      	subs	r0, #71	; 0x47
 8006866:	e7f7      	b.n	8006858 <__hexdig_fun+0xa>
 8006868:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800686c:	2b05      	cmp	r3, #5
 800686e:	d801      	bhi.n	8006874 <__hexdig_fun+0x26>
 8006870:	3827      	subs	r0, #39	; 0x27
 8006872:	e7f1      	b.n	8006858 <__hexdig_fun+0xa>
 8006874:	2000      	movs	r0, #0
 8006876:	4770      	bx	lr

08006878 <__gethex>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	b08b      	sub	sp, #44	; 0x2c
 800687e:	9305      	str	r3, [sp, #20]
 8006880:	4bb2      	ldr	r3, [pc, #712]	; (8006b4c <__gethex+0x2d4>)
 8006882:	9002      	str	r0, [sp, #8]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	468b      	mov	fp, r1
 8006888:	4618      	mov	r0, r3
 800688a:	4690      	mov	r8, r2
 800688c:	9303      	str	r3, [sp, #12]
 800688e:	f7f9 fc69 	bl	8000164 <strlen>
 8006892:	4682      	mov	sl, r0
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	f8db 2000 	ldr.w	r2, [fp]
 800689a:	4403      	add	r3, r0
 800689c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80068a0:	9306      	str	r3, [sp, #24]
 80068a2:	1c93      	adds	r3, r2, #2
 80068a4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80068a8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80068ac:	32fe      	adds	r2, #254	; 0xfe
 80068ae:	18d1      	adds	r1, r2, r3
 80068b0:	461f      	mov	r7, r3
 80068b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80068b6:	9101      	str	r1, [sp, #4]
 80068b8:	2830      	cmp	r0, #48	; 0x30
 80068ba:	d0f8      	beq.n	80068ae <__gethex+0x36>
 80068bc:	f7ff ffc7 	bl	800684e <__hexdig_fun>
 80068c0:	4604      	mov	r4, r0
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d13a      	bne.n	800693c <__gethex+0xc4>
 80068c6:	4652      	mov	r2, sl
 80068c8:	4638      	mov	r0, r7
 80068ca:	9903      	ldr	r1, [sp, #12]
 80068cc:	f001 fb7e 	bl	8007fcc <strncmp>
 80068d0:	4605      	mov	r5, r0
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d166      	bne.n	80069a4 <__gethex+0x12c>
 80068d6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80068da:	eb07 060a 	add.w	r6, r7, sl
 80068de:	f7ff ffb6 	bl	800684e <__hexdig_fun>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d060      	beq.n	80069a8 <__gethex+0x130>
 80068e6:	4633      	mov	r3, r6
 80068e8:	7818      	ldrb	r0, [r3, #0]
 80068ea:	461f      	mov	r7, r3
 80068ec:	2830      	cmp	r0, #48	; 0x30
 80068ee:	f103 0301 	add.w	r3, r3, #1
 80068f2:	d0f9      	beq.n	80068e8 <__gethex+0x70>
 80068f4:	f7ff ffab 	bl	800684e <__hexdig_fun>
 80068f8:	2301      	movs	r3, #1
 80068fa:	fab0 f480 	clz	r4, r0
 80068fe:	4635      	mov	r5, r6
 8006900:	0964      	lsrs	r4, r4, #5
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	463a      	mov	r2, r7
 8006906:	4616      	mov	r6, r2
 8006908:	7830      	ldrb	r0, [r6, #0]
 800690a:	3201      	adds	r2, #1
 800690c:	f7ff ff9f 	bl	800684e <__hexdig_fun>
 8006910:	2800      	cmp	r0, #0
 8006912:	d1f8      	bne.n	8006906 <__gethex+0x8e>
 8006914:	4652      	mov	r2, sl
 8006916:	4630      	mov	r0, r6
 8006918:	9903      	ldr	r1, [sp, #12]
 800691a:	f001 fb57 	bl	8007fcc <strncmp>
 800691e:	b980      	cbnz	r0, 8006942 <__gethex+0xca>
 8006920:	b94d      	cbnz	r5, 8006936 <__gethex+0xbe>
 8006922:	eb06 050a 	add.w	r5, r6, sl
 8006926:	462a      	mov	r2, r5
 8006928:	4616      	mov	r6, r2
 800692a:	7830      	ldrb	r0, [r6, #0]
 800692c:	3201      	adds	r2, #1
 800692e:	f7ff ff8e 	bl	800684e <__hexdig_fun>
 8006932:	2800      	cmp	r0, #0
 8006934:	d1f8      	bne.n	8006928 <__gethex+0xb0>
 8006936:	1bad      	subs	r5, r5, r6
 8006938:	00ad      	lsls	r5, r5, #2
 800693a:	e004      	b.n	8006946 <__gethex+0xce>
 800693c:	2400      	movs	r4, #0
 800693e:	4625      	mov	r5, r4
 8006940:	e7e0      	b.n	8006904 <__gethex+0x8c>
 8006942:	2d00      	cmp	r5, #0
 8006944:	d1f7      	bne.n	8006936 <__gethex+0xbe>
 8006946:	7833      	ldrb	r3, [r6, #0]
 8006948:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800694c:	2b50      	cmp	r3, #80	; 0x50
 800694e:	d139      	bne.n	80069c4 <__gethex+0x14c>
 8006950:	7873      	ldrb	r3, [r6, #1]
 8006952:	2b2b      	cmp	r3, #43	; 0x2b
 8006954:	d02a      	beq.n	80069ac <__gethex+0x134>
 8006956:	2b2d      	cmp	r3, #45	; 0x2d
 8006958:	d02c      	beq.n	80069b4 <__gethex+0x13c>
 800695a:	f04f 0900 	mov.w	r9, #0
 800695e:	1c71      	adds	r1, r6, #1
 8006960:	7808      	ldrb	r0, [r1, #0]
 8006962:	f7ff ff74 	bl	800684e <__hexdig_fun>
 8006966:	1e43      	subs	r3, r0, #1
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b18      	cmp	r3, #24
 800696c:	d82a      	bhi.n	80069c4 <__gethex+0x14c>
 800696e:	f1a0 0210 	sub.w	r2, r0, #16
 8006972:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006976:	f7ff ff6a 	bl	800684e <__hexdig_fun>
 800697a:	1e43      	subs	r3, r0, #1
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b18      	cmp	r3, #24
 8006980:	d91b      	bls.n	80069ba <__gethex+0x142>
 8006982:	f1b9 0f00 	cmp.w	r9, #0
 8006986:	d000      	beq.n	800698a <__gethex+0x112>
 8006988:	4252      	negs	r2, r2
 800698a:	4415      	add	r5, r2
 800698c:	f8cb 1000 	str.w	r1, [fp]
 8006990:	b1d4      	cbz	r4, 80069c8 <__gethex+0x150>
 8006992:	9b01      	ldr	r3, [sp, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf14      	ite	ne
 8006998:	2700      	movne	r7, #0
 800699a:	2706      	moveq	r7, #6
 800699c:	4638      	mov	r0, r7
 800699e:	b00b      	add	sp, #44	; 0x2c
 80069a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a4:	463e      	mov	r6, r7
 80069a6:	4625      	mov	r5, r4
 80069a8:	2401      	movs	r4, #1
 80069aa:	e7cc      	b.n	8006946 <__gethex+0xce>
 80069ac:	f04f 0900 	mov.w	r9, #0
 80069b0:	1cb1      	adds	r1, r6, #2
 80069b2:	e7d5      	b.n	8006960 <__gethex+0xe8>
 80069b4:	f04f 0901 	mov.w	r9, #1
 80069b8:	e7fa      	b.n	80069b0 <__gethex+0x138>
 80069ba:	230a      	movs	r3, #10
 80069bc:	fb03 0202 	mla	r2, r3, r2, r0
 80069c0:	3a10      	subs	r2, #16
 80069c2:	e7d6      	b.n	8006972 <__gethex+0xfa>
 80069c4:	4631      	mov	r1, r6
 80069c6:	e7e1      	b.n	800698c <__gethex+0x114>
 80069c8:	4621      	mov	r1, r4
 80069ca:	1bf3      	subs	r3, r6, r7
 80069cc:	3b01      	subs	r3, #1
 80069ce:	2b07      	cmp	r3, #7
 80069d0:	dc0a      	bgt.n	80069e8 <__gethex+0x170>
 80069d2:	9802      	ldr	r0, [sp, #8]
 80069d4:	f000 fa88 	bl	8006ee8 <_Balloc>
 80069d8:	4604      	mov	r4, r0
 80069da:	b940      	cbnz	r0, 80069ee <__gethex+0x176>
 80069dc:	4602      	mov	r2, r0
 80069de:	21de      	movs	r1, #222	; 0xde
 80069e0:	4b5b      	ldr	r3, [pc, #364]	; (8006b50 <__gethex+0x2d8>)
 80069e2:	485c      	ldr	r0, [pc, #368]	; (8006b54 <__gethex+0x2dc>)
 80069e4:	f7ff f834 	bl	8005a50 <__assert_func>
 80069e8:	3101      	adds	r1, #1
 80069ea:	105b      	asrs	r3, r3, #1
 80069ec:	e7ef      	b.n	80069ce <__gethex+0x156>
 80069ee:	f04f 0b00 	mov.w	fp, #0
 80069f2:	f100 0914 	add.w	r9, r0, #20
 80069f6:	f1ca 0301 	rsb	r3, sl, #1
 80069fa:	f8cd 9010 	str.w	r9, [sp, #16]
 80069fe:	f8cd b004 	str.w	fp, [sp, #4]
 8006a02:	9308      	str	r3, [sp, #32]
 8006a04:	42b7      	cmp	r7, r6
 8006a06:	d33f      	bcc.n	8006a88 <__gethex+0x210>
 8006a08:	9f04      	ldr	r7, [sp, #16]
 8006a0a:	9b01      	ldr	r3, [sp, #4]
 8006a0c:	f847 3b04 	str.w	r3, [r7], #4
 8006a10:	eba7 0709 	sub.w	r7, r7, r9
 8006a14:	10bf      	asrs	r7, r7, #2
 8006a16:	6127      	str	r7, [r4, #16]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fb57 	bl	80070cc <__hi0bits>
 8006a1e:	017f      	lsls	r7, r7, #5
 8006a20:	f8d8 6000 	ldr.w	r6, [r8]
 8006a24:	1a3f      	subs	r7, r7, r0
 8006a26:	42b7      	cmp	r7, r6
 8006a28:	dd62      	ble.n	8006af0 <__gethex+0x278>
 8006a2a:	1bbf      	subs	r7, r7, r6
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 fef1 	bl	8007816 <__any_on>
 8006a34:	4682      	mov	sl, r0
 8006a36:	b1a8      	cbz	r0, 8006a64 <__gethex+0x1ec>
 8006a38:	f04f 0a01 	mov.w	sl, #1
 8006a3c:	1e7b      	subs	r3, r7, #1
 8006a3e:	1159      	asrs	r1, r3, #5
 8006a40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006a44:	f003 021f 	and.w	r2, r3, #31
 8006a48:	fa0a f202 	lsl.w	r2, sl, r2
 8006a4c:	420a      	tst	r2, r1
 8006a4e:	d009      	beq.n	8006a64 <__gethex+0x1ec>
 8006a50:	4553      	cmp	r3, sl
 8006a52:	dd05      	ble.n	8006a60 <__gethex+0x1e8>
 8006a54:	4620      	mov	r0, r4
 8006a56:	1eb9      	subs	r1, r7, #2
 8006a58:	f000 fedd 	bl	8007816 <__any_on>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d144      	bne.n	8006aea <__gethex+0x272>
 8006a60:	f04f 0a02 	mov.w	sl, #2
 8006a64:	4639      	mov	r1, r7
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7ff fe9e 	bl	80067a8 <rshift>
 8006a6c:	443d      	add	r5, r7
 8006a6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a72:	42ab      	cmp	r3, r5
 8006a74:	da4a      	bge.n	8006b0c <__gethex+0x294>
 8006a76:	4621      	mov	r1, r4
 8006a78:	9802      	ldr	r0, [sp, #8]
 8006a7a:	f000 fa75 	bl	8006f68 <_Bfree>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a82:	27a3      	movs	r7, #163	; 0xa3
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	e789      	b.n	800699c <__gethex+0x124>
 8006a88:	1e73      	subs	r3, r6, #1
 8006a8a:	9a06      	ldr	r2, [sp, #24]
 8006a8c:	9307      	str	r3, [sp, #28]
 8006a8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d019      	beq.n	8006aca <__gethex+0x252>
 8006a96:	f1bb 0f20 	cmp.w	fp, #32
 8006a9a:	d107      	bne.n	8006aac <__gethex+0x234>
 8006a9c:	9b04      	ldr	r3, [sp, #16]
 8006a9e:	9a01      	ldr	r2, [sp, #4]
 8006aa0:	f843 2b04 	str.w	r2, [r3], #4
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	469b      	mov	fp, r3
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006ab0:	f7ff fecd 	bl	800684e <__hexdig_fun>
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	f000 000f 	and.w	r0, r0, #15
 8006aba:	fa00 f00b 	lsl.w	r0, r0, fp
 8006abe:	4303      	orrs	r3, r0
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	f10b 0b04 	add.w	fp, fp, #4
 8006ac6:	9b07      	ldr	r3, [sp, #28]
 8006ac8:	e00d      	b.n	8006ae6 <__gethex+0x26e>
 8006aca:	9a08      	ldr	r2, [sp, #32]
 8006acc:	1e73      	subs	r3, r6, #1
 8006ace:	4413      	add	r3, r2
 8006ad0:	42bb      	cmp	r3, r7
 8006ad2:	d3e0      	bcc.n	8006a96 <__gethex+0x21e>
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	4652      	mov	r2, sl
 8006ad8:	9903      	ldr	r1, [sp, #12]
 8006ada:	9309      	str	r3, [sp, #36]	; 0x24
 8006adc:	f001 fa76 	bl	8007fcc <strncmp>
 8006ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d1d7      	bne.n	8006a96 <__gethex+0x21e>
 8006ae6:	461e      	mov	r6, r3
 8006ae8:	e78c      	b.n	8006a04 <__gethex+0x18c>
 8006aea:	f04f 0a03 	mov.w	sl, #3
 8006aee:	e7b9      	b.n	8006a64 <__gethex+0x1ec>
 8006af0:	da09      	bge.n	8006b06 <__gethex+0x28e>
 8006af2:	1bf7      	subs	r7, r6, r7
 8006af4:	4621      	mov	r1, r4
 8006af6:	463a      	mov	r2, r7
 8006af8:	9802      	ldr	r0, [sp, #8]
 8006afa:	f000 fc4d 	bl	8007398 <__lshift>
 8006afe:	4604      	mov	r4, r0
 8006b00:	1bed      	subs	r5, r5, r7
 8006b02:	f100 0914 	add.w	r9, r0, #20
 8006b06:	f04f 0a00 	mov.w	sl, #0
 8006b0a:	e7b0      	b.n	8006a6e <__gethex+0x1f6>
 8006b0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006b10:	42a8      	cmp	r0, r5
 8006b12:	dd72      	ble.n	8006bfa <__gethex+0x382>
 8006b14:	1b45      	subs	r5, r0, r5
 8006b16:	42ae      	cmp	r6, r5
 8006b18:	dc35      	bgt.n	8006b86 <__gethex+0x30e>
 8006b1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d029      	beq.n	8006b76 <__gethex+0x2fe>
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d02b      	beq.n	8006b7e <__gethex+0x306>
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d11c      	bne.n	8006b64 <__gethex+0x2ec>
 8006b2a:	42ae      	cmp	r6, r5
 8006b2c:	d11a      	bne.n	8006b64 <__gethex+0x2ec>
 8006b2e:	2e01      	cmp	r6, #1
 8006b30:	d112      	bne.n	8006b58 <__gethex+0x2e0>
 8006b32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006b36:	9a05      	ldr	r2, [sp, #20]
 8006b38:	2762      	movs	r7, #98	; 0x62
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	6123      	str	r3, [r4, #16]
 8006b40:	f8c9 3000 	str.w	r3, [r9]
 8006b44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b46:	601c      	str	r4, [r3, #0]
 8006b48:	e728      	b.n	800699c <__gethex+0x124>
 8006b4a:	bf00      	nop
 8006b4c:	08008c00 	.word	0x08008c00
 8006b50:	08008b89 	.word	0x08008b89
 8006b54:	08008b9a 	.word	0x08008b9a
 8006b58:	4620      	mov	r0, r4
 8006b5a:	1e71      	subs	r1, r6, #1
 8006b5c:	f000 fe5b 	bl	8007816 <__any_on>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d1e6      	bne.n	8006b32 <__gethex+0x2ba>
 8006b64:	4621      	mov	r1, r4
 8006b66:	9802      	ldr	r0, [sp, #8]
 8006b68:	f000 f9fe 	bl	8006f68 <_Bfree>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b70:	2750      	movs	r7, #80	; 0x50
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	e712      	b.n	800699c <__gethex+0x124>
 8006b76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f3      	bne.n	8006b64 <__gethex+0x2ec>
 8006b7c:	e7d9      	b.n	8006b32 <__gethex+0x2ba>
 8006b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1d6      	bne.n	8006b32 <__gethex+0x2ba>
 8006b84:	e7ee      	b.n	8006b64 <__gethex+0x2ec>
 8006b86:	1e6f      	subs	r7, r5, #1
 8006b88:	f1ba 0f00 	cmp.w	sl, #0
 8006b8c:	d132      	bne.n	8006bf4 <__gethex+0x37c>
 8006b8e:	b127      	cbz	r7, 8006b9a <__gethex+0x322>
 8006b90:	4639      	mov	r1, r7
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 fe3f 	bl	8007816 <__any_on>
 8006b98:	4682      	mov	sl, r0
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	117b      	asrs	r3, r7, #5
 8006b9e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006ba2:	f007 071f 	and.w	r7, r7, #31
 8006ba6:	fa01 f707 	lsl.w	r7, r1, r7
 8006baa:	421f      	tst	r7, r3
 8006bac:	f04f 0702 	mov.w	r7, #2
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	bf18      	it	ne
 8006bb6:	f04a 0a02 	orrne.w	sl, sl, #2
 8006bba:	1b76      	subs	r6, r6, r5
 8006bbc:	f7ff fdf4 	bl	80067a8 <rshift>
 8006bc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006bc4:	f1ba 0f00 	cmp.w	sl, #0
 8006bc8:	d048      	beq.n	8006c5c <__gethex+0x3e4>
 8006bca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d015      	beq.n	8006bfe <__gethex+0x386>
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d017      	beq.n	8006c06 <__gethex+0x38e>
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d109      	bne.n	8006bee <__gethex+0x376>
 8006bda:	f01a 0f02 	tst.w	sl, #2
 8006bde:	d006      	beq.n	8006bee <__gethex+0x376>
 8006be0:	f8d9 0000 	ldr.w	r0, [r9]
 8006be4:	ea4a 0a00 	orr.w	sl, sl, r0
 8006be8:	f01a 0f01 	tst.w	sl, #1
 8006bec:	d10e      	bne.n	8006c0c <__gethex+0x394>
 8006bee:	f047 0710 	orr.w	r7, r7, #16
 8006bf2:	e033      	b.n	8006c5c <__gethex+0x3e4>
 8006bf4:	f04f 0a01 	mov.w	sl, #1
 8006bf8:	e7cf      	b.n	8006b9a <__gethex+0x322>
 8006bfa:	2701      	movs	r7, #1
 8006bfc:	e7e2      	b.n	8006bc4 <__gethex+0x34c>
 8006bfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c00:	f1c3 0301 	rsb	r3, r3, #1
 8006c04:	9315      	str	r3, [sp, #84]	; 0x54
 8006c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0f0      	beq.n	8006bee <__gethex+0x376>
 8006c0c:	f04f 0c00 	mov.w	ip, #0
 8006c10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006c14:	f104 0314 	add.w	r3, r4, #20
 8006c18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006c1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006c20:	4618      	mov	r0, r3
 8006c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c26:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006c2a:	d01c      	beq.n	8006c66 <__gethex+0x3ee>
 8006c2c:	3201      	adds	r2, #1
 8006c2e:	6002      	str	r2, [r0, #0]
 8006c30:	2f02      	cmp	r7, #2
 8006c32:	f104 0314 	add.w	r3, r4, #20
 8006c36:	d13d      	bne.n	8006cb4 <__gethex+0x43c>
 8006c38:	f8d8 2000 	ldr.w	r2, [r8]
 8006c3c:	3a01      	subs	r2, #1
 8006c3e:	42b2      	cmp	r2, r6
 8006c40:	d10a      	bne.n	8006c58 <__gethex+0x3e0>
 8006c42:	2201      	movs	r2, #1
 8006c44:	1171      	asrs	r1, r6, #5
 8006c46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c4a:	f006 061f 	and.w	r6, r6, #31
 8006c4e:	fa02 f606 	lsl.w	r6, r2, r6
 8006c52:	421e      	tst	r6, r3
 8006c54:	bf18      	it	ne
 8006c56:	4617      	movne	r7, r2
 8006c58:	f047 0720 	orr.w	r7, r7, #32
 8006c5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c5e:	601c      	str	r4, [r3, #0]
 8006c60:	9b05      	ldr	r3, [sp, #20]
 8006c62:	601d      	str	r5, [r3, #0]
 8006c64:	e69a      	b.n	800699c <__gethex+0x124>
 8006c66:	4299      	cmp	r1, r3
 8006c68:	f843 cc04 	str.w	ip, [r3, #-4]
 8006c6c:	d8d8      	bhi.n	8006c20 <__gethex+0x3a8>
 8006c6e:	68a3      	ldr	r3, [r4, #8]
 8006c70:	459b      	cmp	fp, r3
 8006c72:	db17      	blt.n	8006ca4 <__gethex+0x42c>
 8006c74:	6861      	ldr	r1, [r4, #4]
 8006c76:	9802      	ldr	r0, [sp, #8]
 8006c78:	3101      	adds	r1, #1
 8006c7a:	f000 f935 	bl	8006ee8 <_Balloc>
 8006c7e:	4681      	mov	r9, r0
 8006c80:	b918      	cbnz	r0, 8006c8a <__gethex+0x412>
 8006c82:	4602      	mov	r2, r0
 8006c84:	2184      	movs	r1, #132	; 0x84
 8006c86:	4b19      	ldr	r3, [pc, #100]	; (8006cec <__gethex+0x474>)
 8006c88:	e6ab      	b.n	80069e2 <__gethex+0x16a>
 8006c8a:	6922      	ldr	r2, [r4, #16]
 8006c8c:	f104 010c 	add.w	r1, r4, #12
 8006c90:	3202      	adds	r2, #2
 8006c92:	0092      	lsls	r2, r2, #2
 8006c94:	300c      	adds	r0, #12
 8006c96:	f000 f919 	bl	8006ecc <memcpy>
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	9802      	ldr	r0, [sp, #8]
 8006c9e:	f000 f963 	bl	8006f68 <_Bfree>
 8006ca2:	464c      	mov	r4, r9
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	6122      	str	r2, [r4, #16]
 8006caa:	2201      	movs	r2, #1
 8006cac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cb0:	615a      	str	r2, [r3, #20]
 8006cb2:	e7bd      	b.n	8006c30 <__gethex+0x3b8>
 8006cb4:	6922      	ldr	r2, [r4, #16]
 8006cb6:	455a      	cmp	r2, fp
 8006cb8:	dd0b      	ble.n	8006cd2 <__gethex+0x45a>
 8006cba:	2101      	movs	r1, #1
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f7ff fd73 	bl	80067a8 <rshift>
 8006cc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006cc6:	3501      	adds	r5, #1
 8006cc8:	42ab      	cmp	r3, r5
 8006cca:	f6ff aed4 	blt.w	8006a76 <__gethex+0x1fe>
 8006cce:	2701      	movs	r7, #1
 8006cd0:	e7c2      	b.n	8006c58 <__gethex+0x3e0>
 8006cd2:	f016 061f 	ands.w	r6, r6, #31
 8006cd6:	d0fa      	beq.n	8006cce <__gethex+0x456>
 8006cd8:	4453      	add	r3, sl
 8006cda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006cde:	f000 f9f5 	bl	80070cc <__hi0bits>
 8006ce2:	f1c6 0620 	rsb	r6, r6, #32
 8006ce6:	42b0      	cmp	r0, r6
 8006ce8:	dbe7      	blt.n	8006cba <__gethex+0x442>
 8006cea:	e7f0      	b.n	8006cce <__gethex+0x456>
 8006cec:	08008b89 	.word	0x08008b89

08006cf0 <L_shift>:
 8006cf0:	f1c2 0208 	rsb	r2, r2, #8
 8006cf4:	0092      	lsls	r2, r2, #2
 8006cf6:	b570      	push	{r4, r5, r6, lr}
 8006cf8:	f1c2 0620 	rsb	r6, r2, #32
 8006cfc:	6843      	ldr	r3, [r0, #4]
 8006cfe:	6804      	ldr	r4, [r0, #0]
 8006d00:	fa03 f506 	lsl.w	r5, r3, r6
 8006d04:	432c      	orrs	r4, r5
 8006d06:	40d3      	lsrs	r3, r2
 8006d08:	6004      	str	r4, [r0, #0]
 8006d0a:	f840 3f04 	str.w	r3, [r0, #4]!
 8006d0e:	4288      	cmp	r0, r1
 8006d10:	d3f4      	bcc.n	8006cfc <L_shift+0xc>
 8006d12:	bd70      	pop	{r4, r5, r6, pc}

08006d14 <__match>:
 8006d14:	b530      	push	{r4, r5, lr}
 8006d16:	6803      	ldr	r3, [r0, #0]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d1e:	b914      	cbnz	r4, 8006d26 <__match+0x12>
 8006d20:	6003      	str	r3, [r0, #0]
 8006d22:	2001      	movs	r0, #1
 8006d24:	bd30      	pop	{r4, r5, pc}
 8006d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006d2e:	2d19      	cmp	r5, #25
 8006d30:	bf98      	it	ls
 8006d32:	3220      	addls	r2, #32
 8006d34:	42a2      	cmp	r2, r4
 8006d36:	d0f0      	beq.n	8006d1a <__match+0x6>
 8006d38:	2000      	movs	r0, #0
 8006d3a:	e7f3      	b.n	8006d24 <__match+0x10>

08006d3c <__hexnan>:
 8006d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d40:	2500      	movs	r5, #0
 8006d42:	680b      	ldr	r3, [r1, #0]
 8006d44:	4682      	mov	sl, r0
 8006d46:	115e      	asrs	r6, r3, #5
 8006d48:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006d4c:	f013 031f 	ands.w	r3, r3, #31
 8006d50:	bf18      	it	ne
 8006d52:	3604      	addne	r6, #4
 8006d54:	1f37      	subs	r7, r6, #4
 8006d56:	46b9      	mov	r9, r7
 8006d58:	463c      	mov	r4, r7
 8006d5a:	46ab      	mov	fp, r5
 8006d5c:	b087      	sub	sp, #28
 8006d5e:	4690      	mov	r8, r2
 8006d60:	6802      	ldr	r2, [r0, #0]
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	f846 5c04 	str.w	r5, [r6, #-4]
 8006d68:	9502      	str	r5, [sp, #8]
 8006d6a:	7851      	ldrb	r1, [r2, #1]
 8006d6c:	1c53      	adds	r3, r2, #1
 8006d6e:	9303      	str	r3, [sp, #12]
 8006d70:	b341      	cbz	r1, 8006dc4 <__hexnan+0x88>
 8006d72:	4608      	mov	r0, r1
 8006d74:	9205      	str	r2, [sp, #20]
 8006d76:	9104      	str	r1, [sp, #16]
 8006d78:	f7ff fd69 	bl	800684e <__hexdig_fun>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d14f      	bne.n	8006e20 <__hexnan+0xe4>
 8006d80:	9904      	ldr	r1, [sp, #16]
 8006d82:	9a05      	ldr	r2, [sp, #20]
 8006d84:	2920      	cmp	r1, #32
 8006d86:	d818      	bhi.n	8006dba <__hexnan+0x7e>
 8006d88:	9b02      	ldr	r3, [sp, #8]
 8006d8a:	459b      	cmp	fp, r3
 8006d8c:	dd13      	ble.n	8006db6 <__hexnan+0x7a>
 8006d8e:	454c      	cmp	r4, r9
 8006d90:	d206      	bcs.n	8006da0 <__hexnan+0x64>
 8006d92:	2d07      	cmp	r5, #7
 8006d94:	dc04      	bgt.n	8006da0 <__hexnan+0x64>
 8006d96:	462a      	mov	r2, r5
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff ffa8 	bl	8006cf0 <L_shift>
 8006da0:	4544      	cmp	r4, r8
 8006da2:	d950      	bls.n	8006e46 <__hexnan+0x10a>
 8006da4:	2300      	movs	r3, #0
 8006da6:	f1a4 0904 	sub.w	r9, r4, #4
 8006daa:	f844 3c04 	str.w	r3, [r4, #-4]
 8006dae:	461d      	mov	r5, r3
 8006db0:	464c      	mov	r4, r9
 8006db2:	f8cd b008 	str.w	fp, [sp, #8]
 8006db6:	9a03      	ldr	r2, [sp, #12]
 8006db8:	e7d7      	b.n	8006d6a <__hexnan+0x2e>
 8006dba:	2929      	cmp	r1, #41	; 0x29
 8006dbc:	d156      	bne.n	8006e6c <__hexnan+0x130>
 8006dbe:	3202      	adds	r2, #2
 8006dc0:	f8ca 2000 	str.w	r2, [sl]
 8006dc4:	f1bb 0f00 	cmp.w	fp, #0
 8006dc8:	d050      	beq.n	8006e6c <__hexnan+0x130>
 8006dca:	454c      	cmp	r4, r9
 8006dcc:	d206      	bcs.n	8006ddc <__hexnan+0xa0>
 8006dce:	2d07      	cmp	r5, #7
 8006dd0:	dc04      	bgt.n	8006ddc <__hexnan+0xa0>
 8006dd2:	462a      	mov	r2, r5
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f7ff ff8a 	bl	8006cf0 <L_shift>
 8006ddc:	4544      	cmp	r4, r8
 8006dde:	d934      	bls.n	8006e4a <__hexnan+0x10e>
 8006de0:	4623      	mov	r3, r4
 8006de2:	f1a8 0204 	sub.w	r2, r8, #4
 8006de6:	f853 1b04 	ldr.w	r1, [r3], #4
 8006dea:	429f      	cmp	r7, r3
 8006dec:	f842 1f04 	str.w	r1, [r2, #4]!
 8006df0:	d2f9      	bcs.n	8006de6 <__hexnan+0xaa>
 8006df2:	1b3b      	subs	r3, r7, r4
 8006df4:	f023 0303 	bic.w	r3, r3, #3
 8006df8:	3304      	adds	r3, #4
 8006dfa:	3401      	adds	r4, #1
 8006dfc:	3e03      	subs	r6, #3
 8006dfe:	42b4      	cmp	r4, r6
 8006e00:	bf88      	it	hi
 8006e02:	2304      	movhi	r3, #4
 8006e04:	2200      	movs	r2, #0
 8006e06:	4443      	add	r3, r8
 8006e08:	f843 2b04 	str.w	r2, [r3], #4
 8006e0c:	429f      	cmp	r7, r3
 8006e0e:	d2fb      	bcs.n	8006e08 <__hexnan+0xcc>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	b91b      	cbnz	r3, 8006e1c <__hexnan+0xe0>
 8006e14:	4547      	cmp	r7, r8
 8006e16:	d127      	bne.n	8006e68 <__hexnan+0x12c>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	2005      	movs	r0, #5
 8006e1e:	e026      	b.n	8006e6e <__hexnan+0x132>
 8006e20:	3501      	adds	r5, #1
 8006e22:	2d08      	cmp	r5, #8
 8006e24:	f10b 0b01 	add.w	fp, fp, #1
 8006e28:	dd06      	ble.n	8006e38 <__hexnan+0xfc>
 8006e2a:	4544      	cmp	r4, r8
 8006e2c:	d9c3      	bls.n	8006db6 <__hexnan+0x7a>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2501      	movs	r5, #1
 8006e32:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e36:	3c04      	subs	r4, #4
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	f000 000f 	and.w	r0, r0, #15
 8006e3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006e42:	6022      	str	r2, [r4, #0]
 8006e44:	e7b7      	b.n	8006db6 <__hexnan+0x7a>
 8006e46:	2508      	movs	r5, #8
 8006e48:	e7b5      	b.n	8006db6 <__hexnan+0x7a>
 8006e4a:	9b01      	ldr	r3, [sp, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0df      	beq.n	8006e10 <__hexnan+0xd4>
 8006e50:	f04f 32ff 	mov.w	r2, #4294967295
 8006e54:	f1c3 0320 	rsb	r3, r3, #32
 8006e58:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006e60:	401a      	ands	r2, r3
 8006e62:	f846 2c04 	str.w	r2, [r6, #-4]
 8006e66:	e7d3      	b.n	8006e10 <__hexnan+0xd4>
 8006e68:	3f04      	subs	r7, #4
 8006e6a:	e7d1      	b.n	8006e10 <__hexnan+0xd4>
 8006e6c:	2004      	movs	r0, #4
 8006e6e:	b007      	add	sp, #28
 8006e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e74 <_localeconv_r>:
 8006e74:	4800      	ldr	r0, [pc, #0]	; (8006e78 <_localeconv_r+0x4>)
 8006e76:	4770      	bx	lr
 8006e78:	20000164 	.word	0x20000164

08006e7c <malloc>:
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <malloc+0xc>)
 8006e7e:	4601      	mov	r1, r0
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f000 bd65 	b.w	8007950 <_malloc_r>
 8006e86:	bf00      	nop
 8006e88:	2000000c 	.word	0x2000000c

08006e8c <__ascii_mbtowc>:
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	b901      	cbnz	r1, 8006e92 <__ascii_mbtowc+0x6>
 8006e90:	a901      	add	r1, sp, #4
 8006e92:	b142      	cbz	r2, 8006ea6 <__ascii_mbtowc+0x1a>
 8006e94:	b14b      	cbz	r3, 8006eaa <__ascii_mbtowc+0x1e>
 8006e96:	7813      	ldrb	r3, [r2, #0]
 8006e98:	600b      	str	r3, [r1, #0]
 8006e9a:	7812      	ldrb	r2, [r2, #0]
 8006e9c:	1e10      	subs	r0, r2, #0
 8006e9e:	bf18      	it	ne
 8006ea0:	2001      	movne	r0, #1
 8006ea2:	b002      	add	sp, #8
 8006ea4:	4770      	bx	lr
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	e7fb      	b.n	8006ea2 <__ascii_mbtowc+0x16>
 8006eaa:	f06f 0001 	mvn.w	r0, #1
 8006eae:	e7f8      	b.n	8006ea2 <__ascii_mbtowc+0x16>

08006eb0 <memchr>:
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	b2c9      	uxtb	r1, r1
 8006eb6:	4402      	add	r2, r0
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	d101      	bne.n	8006ec2 <memchr+0x12>
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	e003      	b.n	8006eca <memchr+0x1a>
 8006ec2:	7804      	ldrb	r4, [r0, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	428c      	cmp	r4, r1
 8006ec8:	d1f6      	bne.n	8006eb8 <memchr+0x8>
 8006eca:	bd10      	pop	{r4, pc}

08006ecc <memcpy>:
 8006ecc:	440a      	add	r2, r1
 8006ece:	4291      	cmp	r1, r2
 8006ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ed4:	d100      	bne.n	8006ed8 <memcpy+0xc>
 8006ed6:	4770      	bx	lr
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ede:	4291      	cmp	r1, r2
 8006ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee4:	d1f9      	bne.n	8006eda <memcpy+0xe>
 8006ee6:	bd10      	pop	{r4, pc}

08006ee8 <_Balloc>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006eec:	4604      	mov	r4, r0
 8006eee:	460d      	mov	r5, r1
 8006ef0:	b976      	cbnz	r6, 8006f10 <_Balloc+0x28>
 8006ef2:	2010      	movs	r0, #16
 8006ef4:	f7ff ffc2 	bl	8006e7c <malloc>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6260      	str	r0, [r4, #36]	; 0x24
 8006efc:	b920      	cbnz	r0, 8006f08 <_Balloc+0x20>
 8006efe:	2166      	movs	r1, #102	; 0x66
 8006f00:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <_Balloc+0x78>)
 8006f02:	4818      	ldr	r0, [pc, #96]	; (8006f64 <_Balloc+0x7c>)
 8006f04:	f7fe fda4 	bl	8005a50 <__assert_func>
 8006f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f0c:	6006      	str	r6, [r0, #0]
 8006f0e:	60c6      	str	r6, [r0, #12]
 8006f10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f12:	68f3      	ldr	r3, [r6, #12]
 8006f14:	b183      	cbz	r3, 8006f38 <_Balloc+0x50>
 8006f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f1e:	b9b8      	cbnz	r0, 8006f50 <_Balloc+0x68>
 8006f20:	2101      	movs	r1, #1
 8006f22:	fa01 f605 	lsl.w	r6, r1, r5
 8006f26:	1d72      	adds	r2, r6, #5
 8006f28:	4620      	mov	r0, r4
 8006f2a:	0092      	lsls	r2, r2, #2
 8006f2c:	f000 fc94 	bl	8007858 <_calloc_r>
 8006f30:	b160      	cbz	r0, 8006f4c <_Balloc+0x64>
 8006f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f36:	e00e      	b.n	8006f56 <_Balloc+0x6e>
 8006f38:	2221      	movs	r2, #33	; 0x21
 8006f3a:	2104      	movs	r1, #4
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 fc8b 	bl	8007858 <_calloc_r>
 8006f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f44:	60f0      	str	r0, [r6, #12]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e4      	bne.n	8006f16 <_Balloc+0x2e>
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	bd70      	pop	{r4, r5, r6, pc}
 8006f50:	6802      	ldr	r2, [r0, #0]
 8006f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f56:	2300      	movs	r3, #0
 8006f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f5c:	e7f7      	b.n	8006f4e <_Balloc+0x66>
 8006f5e:	bf00      	nop
 8006f60:	08008970 	.word	0x08008970
 8006f64:	08008c14 	.word	0x08008c14

08006f68 <_Bfree>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	b976      	cbnz	r6, 8006f90 <_Bfree+0x28>
 8006f72:	2010      	movs	r0, #16
 8006f74:	f7ff ff82 	bl	8006e7c <malloc>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	6268      	str	r0, [r5, #36]	; 0x24
 8006f7c:	b920      	cbnz	r0, 8006f88 <_Bfree+0x20>
 8006f7e:	218a      	movs	r1, #138	; 0x8a
 8006f80:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <_Bfree+0x3c>)
 8006f82:	4809      	ldr	r0, [pc, #36]	; (8006fa8 <_Bfree+0x40>)
 8006f84:	f7fe fd64 	bl	8005a50 <__assert_func>
 8006f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f8c:	6006      	str	r6, [r0, #0]
 8006f8e:	60c6      	str	r6, [r0, #12]
 8006f90:	b13c      	cbz	r4, 8006fa2 <_Bfree+0x3a>
 8006f92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f94:	6862      	ldr	r2, [r4, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f9c:	6021      	str	r1, [r4, #0]
 8006f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	08008970 	.word	0x08008970
 8006fa8:	08008c14 	.word	0x08008c14

08006fac <__multadd>:
 8006fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb0:	4607      	mov	r7, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	461e      	mov	r6, r3
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	690d      	ldr	r5, [r1, #16]
 8006fba:	f101 0c14 	add.w	ip, r1, #20
 8006fbe:	f8dc 3000 	ldr.w	r3, [ip]
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	b299      	uxth	r1, r3
 8006fc6:	fb02 6101 	mla	r1, r2, r1, r6
 8006fca:	0c1e      	lsrs	r6, r3, #16
 8006fcc:	0c0b      	lsrs	r3, r1, #16
 8006fce:	fb02 3306 	mla	r3, r2, r6, r3
 8006fd2:	b289      	uxth	r1, r1
 8006fd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fd8:	4285      	cmp	r5, r0
 8006fda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fde:	f84c 1b04 	str.w	r1, [ip], #4
 8006fe2:	dcec      	bgt.n	8006fbe <__multadd+0x12>
 8006fe4:	b30e      	cbz	r6, 800702a <__multadd+0x7e>
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	42ab      	cmp	r3, r5
 8006fea:	dc19      	bgt.n	8007020 <__multadd+0x74>
 8006fec:	6861      	ldr	r1, [r4, #4]
 8006fee:	4638      	mov	r0, r7
 8006ff0:	3101      	adds	r1, #1
 8006ff2:	f7ff ff79 	bl	8006ee8 <_Balloc>
 8006ff6:	4680      	mov	r8, r0
 8006ff8:	b928      	cbnz	r0, 8007006 <__multadd+0x5a>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	21b5      	movs	r1, #181	; 0xb5
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <__multadd+0x84>)
 8007000:	480c      	ldr	r0, [pc, #48]	; (8007034 <__multadd+0x88>)
 8007002:	f7fe fd25 	bl	8005a50 <__assert_func>
 8007006:	6922      	ldr	r2, [r4, #16]
 8007008:	f104 010c 	add.w	r1, r4, #12
 800700c:	3202      	adds	r2, #2
 800700e:	0092      	lsls	r2, r2, #2
 8007010:	300c      	adds	r0, #12
 8007012:	f7ff ff5b 	bl	8006ecc <memcpy>
 8007016:	4621      	mov	r1, r4
 8007018:	4638      	mov	r0, r7
 800701a:	f7ff ffa5 	bl	8006f68 <_Bfree>
 800701e:	4644      	mov	r4, r8
 8007020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007024:	3501      	adds	r5, #1
 8007026:	615e      	str	r6, [r3, #20]
 8007028:	6125      	str	r5, [r4, #16]
 800702a:	4620      	mov	r0, r4
 800702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007030:	08008b89 	.word	0x08008b89
 8007034:	08008c14 	.word	0x08008c14

08007038 <__s2b>:
 8007038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800703c:	4615      	mov	r5, r2
 800703e:	2209      	movs	r2, #9
 8007040:	461f      	mov	r7, r3
 8007042:	3308      	adds	r3, #8
 8007044:	460c      	mov	r4, r1
 8007046:	fb93 f3f2 	sdiv	r3, r3, r2
 800704a:	4606      	mov	r6, r0
 800704c:	2201      	movs	r2, #1
 800704e:	2100      	movs	r1, #0
 8007050:	429a      	cmp	r2, r3
 8007052:	db09      	blt.n	8007068 <__s2b+0x30>
 8007054:	4630      	mov	r0, r6
 8007056:	f7ff ff47 	bl	8006ee8 <_Balloc>
 800705a:	b940      	cbnz	r0, 800706e <__s2b+0x36>
 800705c:	4602      	mov	r2, r0
 800705e:	21ce      	movs	r1, #206	; 0xce
 8007060:	4b18      	ldr	r3, [pc, #96]	; (80070c4 <__s2b+0x8c>)
 8007062:	4819      	ldr	r0, [pc, #100]	; (80070c8 <__s2b+0x90>)
 8007064:	f7fe fcf4 	bl	8005a50 <__assert_func>
 8007068:	0052      	lsls	r2, r2, #1
 800706a:	3101      	adds	r1, #1
 800706c:	e7f0      	b.n	8007050 <__s2b+0x18>
 800706e:	9b08      	ldr	r3, [sp, #32]
 8007070:	2d09      	cmp	r5, #9
 8007072:	6143      	str	r3, [r0, #20]
 8007074:	f04f 0301 	mov.w	r3, #1
 8007078:	6103      	str	r3, [r0, #16]
 800707a:	dd16      	ble.n	80070aa <__s2b+0x72>
 800707c:	f104 0909 	add.w	r9, r4, #9
 8007080:	46c8      	mov	r8, r9
 8007082:	442c      	add	r4, r5
 8007084:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007088:	4601      	mov	r1, r0
 800708a:	220a      	movs	r2, #10
 800708c:	4630      	mov	r0, r6
 800708e:	3b30      	subs	r3, #48	; 0x30
 8007090:	f7ff ff8c 	bl	8006fac <__multadd>
 8007094:	45a0      	cmp	r8, r4
 8007096:	d1f5      	bne.n	8007084 <__s2b+0x4c>
 8007098:	f1a5 0408 	sub.w	r4, r5, #8
 800709c:	444c      	add	r4, r9
 800709e:	1b2d      	subs	r5, r5, r4
 80070a0:	1963      	adds	r3, r4, r5
 80070a2:	42bb      	cmp	r3, r7
 80070a4:	db04      	blt.n	80070b0 <__s2b+0x78>
 80070a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070aa:	2509      	movs	r5, #9
 80070ac:	340a      	adds	r4, #10
 80070ae:	e7f6      	b.n	800709e <__s2b+0x66>
 80070b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80070b4:	4601      	mov	r1, r0
 80070b6:	220a      	movs	r2, #10
 80070b8:	4630      	mov	r0, r6
 80070ba:	3b30      	subs	r3, #48	; 0x30
 80070bc:	f7ff ff76 	bl	8006fac <__multadd>
 80070c0:	e7ee      	b.n	80070a0 <__s2b+0x68>
 80070c2:	bf00      	nop
 80070c4:	08008b89 	.word	0x08008b89
 80070c8:	08008c14 	.word	0x08008c14

080070cc <__hi0bits>:
 80070cc:	0c02      	lsrs	r2, r0, #16
 80070ce:	0412      	lsls	r2, r2, #16
 80070d0:	4603      	mov	r3, r0
 80070d2:	b9ca      	cbnz	r2, 8007108 <__hi0bits+0x3c>
 80070d4:	0403      	lsls	r3, r0, #16
 80070d6:	2010      	movs	r0, #16
 80070d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070dc:	bf04      	itt	eq
 80070de:	021b      	lsleq	r3, r3, #8
 80070e0:	3008      	addeq	r0, #8
 80070e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80070e6:	bf04      	itt	eq
 80070e8:	011b      	lsleq	r3, r3, #4
 80070ea:	3004      	addeq	r0, #4
 80070ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070f0:	bf04      	itt	eq
 80070f2:	009b      	lsleq	r3, r3, #2
 80070f4:	3002      	addeq	r0, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	db05      	blt.n	8007106 <__hi0bits+0x3a>
 80070fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80070fe:	f100 0001 	add.w	r0, r0, #1
 8007102:	bf08      	it	eq
 8007104:	2020      	moveq	r0, #32
 8007106:	4770      	bx	lr
 8007108:	2000      	movs	r0, #0
 800710a:	e7e5      	b.n	80070d8 <__hi0bits+0xc>

0800710c <__lo0bits>:
 800710c:	6803      	ldr	r3, [r0, #0]
 800710e:	4602      	mov	r2, r0
 8007110:	f013 0007 	ands.w	r0, r3, #7
 8007114:	d00b      	beq.n	800712e <__lo0bits+0x22>
 8007116:	07d9      	lsls	r1, r3, #31
 8007118:	d421      	bmi.n	800715e <__lo0bits+0x52>
 800711a:	0798      	lsls	r0, r3, #30
 800711c:	bf49      	itett	mi
 800711e:	085b      	lsrmi	r3, r3, #1
 8007120:	089b      	lsrpl	r3, r3, #2
 8007122:	2001      	movmi	r0, #1
 8007124:	6013      	strmi	r3, [r2, #0]
 8007126:	bf5c      	itt	pl
 8007128:	2002      	movpl	r0, #2
 800712a:	6013      	strpl	r3, [r2, #0]
 800712c:	4770      	bx	lr
 800712e:	b299      	uxth	r1, r3
 8007130:	b909      	cbnz	r1, 8007136 <__lo0bits+0x2a>
 8007132:	2010      	movs	r0, #16
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	b2d9      	uxtb	r1, r3
 8007138:	b909      	cbnz	r1, 800713e <__lo0bits+0x32>
 800713a:	3008      	adds	r0, #8
 800713c:	0a1b      	lsrs	r3, r3, #8
 800713e:	0719      	lsls	r1, r3, #28
 8007140:	bf04      	itt	eq
 8007142:	091b      	lsreq	r3, r3, #4
 8007144:	3004      	addeq	r0, #4
 8007146:	0799      	lsls	r1, r3, #30
 8007148:	bf04      	itt	eq
 800714a:	089b      	lsreq	r3, r3, #2
 800714c:	3002      	addeq	r0, #2
 800714e:	07d9      	lsls	r1, r3, #31
 8007150:	d403      	bmi.n	800715a <__lo0bits+0x4e>
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	f100 0001 	add.w	r0, r0, #1
 8007158:	d003      	beq.n	8007162 <__lo0bits+0x56>
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	4770      	bx	lr
 800715e:	2000      	movs	r0, #0
 8007160:	4770      	bx	lr
 8007162:	2020      	movs	r0, #32
 8007164:	4770      	bx	lr
	...

08007168 <__i2b>:
 8007168:	b510      	push	{r4, lr}
 800716a:	460c      	mov	r4, r1
 800716c:	2101      	movs	r1, #1
 800716e:	f7ff febb 	bl	8006ee8 <_Balloc>
 8007172:	4602      	mov	r2, r0
 8007174:	b928      	cbnz	r0, 8007182 <__i2b+0x1a>
 8007176:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800717a:	4b04      	ldr	r3, [pc, #16]	; (800718c <__i2b+0x24>)
 800717c:	4804      	ldr	r0, [pc, #16]	; (8007190 <__i2b+0x28>)
 800717e:	f7fe fc67 	bl	8005a50 <__assert_func>
 8007182:	2301      	movs	r3, #1
 8007184:	6144      	str	r4, [r0, #20]
 8007186:	6103      	str	r3, [r0, #16]
 8007188:	bd10      	pop	{r4, pc}
 800718a:	bf00      	nop
 800718c:	08008b89 	.word	0x08008b89
 8007190:	08008c14 	.word	0x08008c14

08007194 <__multiply>:
 8007194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	4691      	mov	r9, r2
 800719a:	690a      	ldr	r2, [r1, #16]
 800719c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071a0:	460c      	mov	r4, r1
 80071a2:	429a      	cmp	r2, r3
 80071a4:	bfbe      	ittt	lt
 80071a6:	460b      	movlt	r3, r1
 80071a8:	464c      	movlt	r4, r9
 80071aa:	4699      	movlt	r9, r3
 80071ac:	6927      	ldr	r7, [r4, #16]
 80071ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071b2:	68a3      	ldr	r3, [r4, #8]
 80071b4:	6861      	ldr	r1, [r4, #4]
 80071b6:	eb07 060a 	add.w	r6, r7, sl
 80071ba:	42b3      	cmp	r3, r6
 80071bc:	b085      	sub	sp, #20
 80071be:	bfb8      	it	lt
 80071c0:	3101      	addlt	r1, #1
 80071c2:	f7ff fe91 	bl	8006ee8 <_Balloc>
 80071c6:	b930      	cbnz	r0, 80071d6 <__multiply+0x42>
 80071c8:	4602      	mov	r2, r0
 80071ca:	f240 115d 	movw	r1, #349	; 0x15d
 80071ce:	4b43      	ldr	r3, [pc, #268]	; (80072dc <__multiply+0x148>)
 80071d0:	4843      	ldr	r0, [pc, #268]	; (80072e0 <__multiply+0x14c>)
 80071d2:	f7fe fc3d 	bl	8005a50 <__assert_func>
 80071d6:	f100 0514 	add.w	r5, r0, #20
 80071da:	462b      	mov	r3, r5
 80071dc:	2200      	movs	r2, #0
 80071de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071e2:	4543      	cmp	r3, r8
 80071e4:	d321      	bcc.n	800722a <__multiply+0x96>
 80071e6:	f104 0314 	add.w	r3, r4, #20
 80071ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071ee:	f109 0314 	add.w	r3, r9, #20
 80071f2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071f6:	9202      	str	r2, [sp, #8]
 80071f8:	1b3a      	subs	r2, r7, r4
 80071fa:	3a15      	subs	r2, #21
 80071fc:	f022 0203 	bic.w	r2, r2, #3
 8007200:	3204      	adds	r2, #4
 8007202:	f104 0115 	add.w	r1, r4, #21
 8007206:	428f      	cmp	r7, r1
 8007208:	bf38      	it	cc
 800720a:	2204      	movcc	r2, #4
 800720c:	9201      	str	r2, [sp, #4]
 800720e:	9a02      	ldr	r2, [sp, #8]
 8007210:	9303      	str	r3, [sp, #12]
 8007212:	429a      	cmp	r2, r3
 8007214:	d80c      	bhi.n	8007230 <__multiply+0x9c>
 8007216:	2e00      	cmp	r6, #0
 8007218:	dd03      	ble.n	8007222 <__multiply+0x8e>
 800721a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800721e:	2b00      	cmp	r3, #0
 8007220:	d059      	beq.n	80072d6 <__multiply+0x142>
 8007222:	6106      	str	r6, [r0, #16]
 8007224:	b005      	add	sp, #20
 8007226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722a:	f843 2b04 	str.w	r2, [r3], #4
 800722e:	e7d8      	b.n	80071e2 <__multiply+0x4e>
 8007230:	f8b3 a000 	ldrh.w	sl, [r3]
 8007234:	f1ba 0f00 	cmp.w	sl, #0
 8007238:	d023      	beq.n	8007282 <__multiply+0xee>
 800723a:	46a9      	mov	r9, r5
 800723c:	f04f 0c00 	mov.w	ip, #0
 8007240:	f104 0e14 	add.w	lr, r4, #20
 8007244:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007248:	f8d9 1000 	ldr.w	r1, [r9]
 800724c:	fa1f fb82 	uxth.w	fp, r2
 8007250:	b289      	uxth	r1, r1
 8007252:	fb0a 110b 	mla	r1, sl, fp, r1
 8007256:	4461      	add	r1, ip
 8007258:	f8d9 c000 	ldr.w	ip, [r9]
 800725c:	0c12      	lsrs	r2, r2, #16
 800725e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007262:	fb0a c202 	mla	r2, sl, r2, ip
 8007266:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800726a:	b289      	uxth	r1, r1
 800726c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007270:	4577      	cmp	r7, lr
 8007272:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007276:	f849 1b04 	str.w	r1, [r9], #4
 800727a:	d8e3      	bhi.n	8007244 <__multiply+0xb0>
 800727c:	9a01      	ldr	r2, [sp, #4]
 800727e:	f845 c002 	str.w	ip, [r5, r2]
 8007282:	9a03      	ldr	r2, [sp, #12]
 8007284:	3304      	adds	r3, #4
 8007286:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800728a:	f1b9 0f00 	cmp.w	r9, #0
 800728e:	d020      	beq.n	80072d2 <__multiply+0x13e>
 8007290:	46ae      	mov	lr, r5
 8007292:	f04f 0a00 	mov.w	sl, #0
 8007296:	6829      	ldr	r1, [r5, #0]
 8007298:	f104 0c14 	add.w	ip, r4, #20
 800729c:	f8bc b000 	ldrh.w	fp, [ip]
 80072a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072a4:	b289      	uxth	r1, r1
 80072a6:	fb09 220b 	mla	r2, r9, fp, r2
 80072aa:	4492      	add	sl, r2
 80072ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80072b0:	f84e 1b04 	str.w	r1, [lr], #4
 80072b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072b8:	f8be 1000 	ldrh.w	r1, [lr]
 80072bc:	0c12      	lsrs	r2, r2, #16
 80072be:	fb09 1102 	mla	r1, r9, r2, r1
 80072c2:	4567      	cmp	r7, ip
 80072c4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072cc:	d8e6      	bhi.n	800729c <__multiply+0x108>
 80072ce:	9a01      	ldr	r2, [sp, #4]
 80072d0:	50a9      	str	r1, [r5, r2]
 80072d2:	3504      	adds	r5, #4
 80072d4:	e79b      	b.n	800720e <__multiply+0x7a>
 80072d6:	3e01      	subs	r6, #1
 80072d8:	e79d      	b.n	8007216 <__multiply+0x82>
 80072da:	bf00      	nop
 80072dc:	08008b89 	.word	0x08008b89
 80072e0:	08008c14 	.word	0x08008c14

080072e4 <__pow5mult>:
 80072e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e8:	4615      	mov	r5, r2
 80072ea:	f012 0203 	ands.w	r2, r2, #3
 80072ee:	4606      	mov	r6, r0
 80072f0:	460f      	mov	r7, r1
 80072f2:	d007      	beq.n	8007304 <__pow5mult+0x20>
 80072f4:	4c25      	ldr	r4, [pc, #148]	; (800738c <__pow5mult+0xa8>)
 80072f6:	3a01      	subs	r2, #1
 80072f8:	2300      	movs	r3, #0
 80072fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072fe:	f7ff fe55 	bl	8006fac <__multadd>
 8007302:	4607      	mov	r7, r0
 8007304:	10ad      	asrs	r5, r5, #2
 8007306:	d03d      	beq.n	8007384 <__pow5mult+0xa0>
 8007308:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800730a:	b97c      	cbnz	r4, 800732c <__pow5mult+0x48>
 800730c:	2010      	movs	r0, #16
 800730e:	f7ff fdb5 	bl	8006e7c <malloc>
 8007312:	4602      	mov	r2, r0
 8007314:	6270      	str	r0, [r6, #36]	; 0x24
 8007316:	b928      	cbnz	r0, 8007324 <__pow5mult+0x40>
 8007318:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800731c:	4b1c      	ldr	r3, [pc, #112]	; (8007390 <__pow5mult+0xac>)
 800731e:	481d      	ldr	r0, [pc, #116]	; (8007394 <__pow5mult+0xb0>)
 8007320:	f7fe fb96 	bl	8005a50 <__assert_func>
 8007324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007328:	6004      	str	r4, [r0, #0]
 800732a:	60c4      	str	r4, [r0, #12]
 800732c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007334:	b94c      	cbnz	r4, 800734a <__pow5mult+0x66>
 8007336:	f240 2171 	movw	r1, #625	; 0x271
 800733a:	4630      	mov	r0, r6
 800733c:	f7ff ff14 	bl	8007168 <__i2b>
 8007340:	2300      	movs	r3, #0
 8007342:	4604      	mov	r4, r0
 8007344:	f8c8 0008 	str.w	r0, [r8, #8]
 8007348:	6003      	str	r3, [r0, #0]
 800734a:	f04f 0900 	mov.w	r9, #0
 800734e:	07eb      	lsls	r3, r5, #31
 8007350:	d50a      	bpl.n	8007368 <__pow5mult+0x84>
 8007352:	4639      	mov	r1, r7
 8007354:	4622      	mov	r2, r4
 8007356:	4630      	mov	r0, r6
 8007358:	f7ff ff1c 	bl	8007194 <__multiply>
 800735c:	4680      	mov	r8, r0
 800735e:	4639      	mov	r1, r7
 8007360:	4630      	mov	r0, r6
 8007362:	f7ff fe01 	bl	8006f68 <_Bfree>
 8007366:	4647      	mov	r7, r8
 8007368:	106d      	asrs	r5, r5, #1
 800736a:	d00b      	beq.n	8007384 <__pow5mult+0xa0>
 800736c:	6820      	ldr	r0, [r4, #0]
 800736e:	b938      	cbnz	r0, 8007380 <__pow5mult+0x9c>
 8007370:	4622      	mov	r2, r4
 8007372:	4621      	mov	r1, r4
 8007374:	4630      	mov	r0, r6
 8007376:	f7ff ff0d 	bl	8007194 <__multiply>
 800737a:	6020      	str	r0, [r4, #0]
 800737c:	f8c0 9000 	str.w	r9, [r0]
 8007380:	4604      	mov	r4, r0
 8007382:	e7e4      	b.n	800734e <__pow5mult+0x6a>
 8007384:	4638      	mov	r0, r7
 8007386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800738a:	bf00      	nop
 800738c:	08008d60 	.word	0x08008d60
 8007390:	08008970 	.word	0x08008970
 8007394:	08008c14 	.word	0x08008c14

08007398 <__lshift>:
 8007398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800739c:	460c      	mov	r4, r1
 800739e:	4607      	mov	r7, r0
 80073a0:	4691      	mov	r9, r2
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	6849      	ldr	r1, [r1, #4]
 80073a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073aa:	68a3      	ldr	r3, [r4, #8]
 80073ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073b0:	f108 0601 	add.w	r6, r8, #1
 80073b4:	42b3      	cmp	r3, r6
 80073b6:	db0b      	blt.n	80073d0 <__lshift+0x38>
 80073b8:	4638      	mov	r0, r7
 80073ba:	f7ff fd95 	bl	8006ee8 <_Balloc>
 80073be:	4605      	mov	r5, r0
 80073c0:	b948      	cbnz	r0, 80073d6 <__lshift+0x3e>
 80073c2:	4602      	mov	r2, r0
 80073c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073c8:	4b29      	ldr	r3, [pc, #164]	; (8007470 <__lshift+0xd8>)
 80073ca:	482a      	ldr	r0, [pc, #168]	; (8007474 <__lshift+0xdc>)
 80073cc:	f7fe fb40 	bl	8005a50 <__assert_func>
 80073d0:	3101      	adds	r1, #1
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	e7ee      	b.n	80073b4 <__lshift+0x1c>
 80073d6:	2300      	movs	r3, #0
 80073d8:	f100 0114 	add.w	r1, r0, #20
 80073dc:	f100 0210 	add.w	r2, r0, #16
 80073e0:	4618      	mov	r0, r3
 80073e2:	4553      	cmp	r3, sl
 80073e4:	db37      	blt.n	8007456 <__lshift+0xbe>
 80073e6:	6920      	ldr	r0, [r4, #16]
 80073e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073ec:	f104 0314 	add.w	r3, r4, #20
 80073f0:	f019 091f 	ands.w	r9, r9, #31
 80073f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073fc:	d02f      	beq.n	800745e <__lshift+0xc6>
 80073fe:	468a      	mov	sl, r1
 8007400:	f04f 0c00 	mov.w	ip, #0
 8007404:	f1c9 0e20 	rsb	lr, r9, #32
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	fa02 f209 	lsl.w	r2, r2, r9
 800740e:	ea42 020c 	orr.w	r2, r2, ip
 8007412:	f84a 2b04 	str.w	r2, [sl], #4
 8007416:	f853 2b04 	ldr.w	r2, [r3], #4
 800741a:	4298      	cmp	r0, r3
 800741c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007420:	d8f2      	bhi.n	8007408 <__lshift+0x70>
 8007422:	1b03      	subs	r3, r0, r4
 8007424:	3b15      	subs	r3, #21
 8007426:	f023 0303 	bic.w	r3, r3, #3
 800742a:	3304      	adds	r3, #4
 800742c:	f104 0215 	add.w	r2, r4, #21
 8007430:	4290      	cmp	r0, r2
 8007432:	bf38      	it	cc
 8007434:	2304      	movcc	r3, #4
 8007436:	f841 c003 	str.w	ip, [r1, r3]
 800743a:	f1bc 0f00 	cmp.w	ip, #0
 800743e:	d001      	beq.n	8007444 <__lshift+0xac>
 8007440:	f108 0602 	add.w	r6, r8, #2
 8007444:	3e01      	subs	r6, #1
 8007446:	4638      	mov	r0, r7
 8007448:	4621      	mov	r1, r4
 800744a:	612e      	str	r6, [r5, #16]
 800744c:	f7ff fd8c 	bl	8006f68 <_Bfree>
 8007450:	4628      	mov	r0, r5
 8007452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007456:	f842 0f04 	str.w	r0, [r2, #4]!
 800745a:	3301      	adds	r3, #1
 800745c:	e7c1      	b.n	80073e2 <__lshift+0x4a>
 800745e:	3904      	subs	r1, #4
 8007460:	f853 2b04 	ldr.w	r2, [r3], #4
 8007464:	4298      	cmp	r0, r3
 8007466:	f841 2f04 	str.w	r2, [r1, #4]!
 800746a:	d8f9      	bhi.n	8007460 <__lshift+0xc8>
 800746c:	e7ea      	b.n	8007444 <__lshift+0xac>
 800746e:	bf00      	nop
 8007470:	08008b89 	.word	0x08008b89
 8007474:	08008c14 	.word	0x08008c14

08007478 <__mcmp>:
 8007478:	4603      	mov	r3, r0
 800747a:	690a      	ldr	r2, [r1, #16]
 800747c:	6900      	ldr	r0, [r0, #16]
 800747e:	b530      	push	{r4, r5, lr}
 8007480:	1a80      	subs	r0, r0, r2
 8007482:	d10d      	bne.n	80074a0 <__mcmp+0x28>
 8007484:	3314      	adds	r3, #20
 8007486:	3114      	adds	r1, #20
 8007488:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800748c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007490:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007494:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007498:	4295      	cmp	r5, r2
 800749a:	d002      	beq.n	80074a2 <__mcmp+0x2a>
 800749c:	d304      	bcc.n	80074a8 <__mcmp+0x30>
 800749e:	2001      	movs	r0, #1
 80074a0:	bd30      	pop	{r4, r5, pc}
 80074a2:	42a3      	cmp	r3, r4
 80074a4:	d3f4      	bcc.n	8007490 <__mcmp+0x18>
 80074a6:	e7fb      	b.n	80074a0 <__mcmp+0x28>
 80074a8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ac:	e7f8      	b.n	80074a0 <__mcmp+0x28>
	...

080074b0 <__mdiff>:
 80074b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	460d      	mov	r5, r1
 80074b6:	4607      	mov	r7, r0
 80074b8:	4611      	mov	r1, r2
 80074ba:	4628      	mov	r0, r5
 80074bc:	4614      	mov	r4, r2
 80074be:	f7ff ffdb 	bl	8007478 <__mcmp>
 80074c2:	1e06      	subs	r6, r0, #0
 80074c4:	d111      	bne.n	80074ea <__mdiff+0x3a>
 80074c6:	4631      	mov	r1, r6
 80074c8:	4638      	mov	r0, r7
 80074ca:	f7ff fd0d 	bl	8006ee8 <_Balloc>
 80074ce:	4602      	mov	r2, r0
 80074d0:	b928      	cbnz	r0, 80074de <__mdiff+0x2e>
 80074d2:	f240 2132 	movw	r1, #562	; 0x232
 80074d6:	4b3a      	ldr	r3, [pc, #232]	; (80075c0 <__mdiff+0x110>)
 80074d8:	483a      	ldr	r0, [pc, #232]	; (80075c4 <__mdiff+0x114>)
 80074da:	f7fe fab9 	bl	8005a50 <__assert_func>
 80074de:	2301      	movs	r3, #1
 80074e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80074e4:	4610      	mov	r0, r2
 80074e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ea:	bfa4      	itt	ge
 80074ec:	4623      	movge	r3, r4
 80074ee:	462c      	movge	r4, r5
 80074f0:	4638      	mov	r0, r7
 80074f2:	6861      	ldr	r1, [r4, #4]
 80074f4:	bfa6      	itte	ge
 80074f6:	461d      	movge	r5, r3
 80074f8:	2600      	movge	r6, #0
 80074fa:	2601      	movlt	r6, #1
 80074fc:	f7ff fcf4 	bl	8006ee8 <_Balloc>
 8007500:	4602      	mov	r2, r0
 8007502:	b918      	cbnz	r0, 800750c <__mdiff+0x5c>
 8007504:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007508:	4b2d      	ldr	r3, [pc, #180]	; (80075c0 <__mdiff+0x110>)
 800750a:	e7e5      	b.n	80074d8 <__mdiff+0x28>
 800750c:	f102 0814 	add.w	r8, r2, #20
 8007510:	46c2      	mov	sl, r8
 8007512:	f04f 0c00 	mov.w	ip, #0
 8007516:	6927      	ldr	r7, [r4, #16]
 8007518:	60c6      	str	r6, [r0, #12]
 800751a:	692e      	ldr	r6, [r5, #16]
 800751c:	f104 0014 	add.w	r0, r4, #20
 8007520:	f105 0914 	add.w	r9, r5, #20
 8007524:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007528:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800752c:	3410      	adds	r4, #16
 800752e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007532:	f859 3b04 	ldr.w	r3, [r9], #4
 8007536:	fa1f f18b 	uxth.w	r1, fp
 800753a:	448c      	add	ip, r1
 800753c:	b299      	uxth	r1, r3
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	ebac 0101 	sub.w	r1, ip, r1
 8007544:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007548:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800754c:	b289      	uxth	r1, r1
 800754e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007552:	454e      	cmp	r6, r9
 8007554:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007558:	f84a 3b04 	str.w	r3, [sl], #4
 800755c:	d8e7      	bhi.n	800752e <__mdiff+0x7e>
 800755e:	1b73      	subs	r3, r6, r5
 8007560:	3b15      	subs	r3, #21
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	3515      	adds	r5, #21
 8007568:	3304      	adds	r3, #4
 800756a:	42ae      	cmp	r6, r5
 800756c:	bf38      	it	cc
 800756e:	2304      	movcc	r3, #4
 8007570:	4418      	add	r0, r3
 8007572:	4443      	add	r3, r8
 8007574:	461e      	mov	r6, r3
 8007576:	4605      	mov	r5, r0
 8007578:	4575      	cmp	r5, lr
 800757a:	d30e      	bcc.n	800759a <__mdiff+0xea>
 800757c:	f10e 0103 	add.w	r1, lr, #3
 8007580:	1a09      	subs	r1, r1, r0
 8007582:	f021 0103 	bic.w	r1, r1, #3
 8007586:	3803      	subs	r0, #3
 8007588:	4586      	cmp	lr, r0
 800758a:	bf38      	it	cc
 800758c:	2100      	movcc	r1, #0
 800758e:	4419      	add	r1, r3
 8007590:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007594:	b18b      	cbz	r3, 80075ba <__mdiff+0x10a>
 8007596:	6117      	str	r7, [r2, #16]
 8007598:	e7a4      	b.n	80074e4 <__mdiff+0x34>
 800759a:	f855 8b04 	ldr.w	r8, [r5], #4
 800759e:	fa1f f188 	uxth.w	r1, r8
 80075a2:	4461      	add	r1, ip
 80075a4:	140c      	asrs	r4, r1, #16
 80075a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075aa:	b289      	uxth	r1, r1
 80075ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80075b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80075b4:	f846 1b04 	str.w	r1, [r6], #4
 80075b8:	e7de      	b.n	8007578 <__mdiff+0xc8>
 80075ba:	3f01      	subs	r7, #1
 80075bc:	e7e8      	b.n	8007590 <__mdiff+0xe0>
 80075be:	bf00      	nop
 80075c0:	08008b89 	.word	0x08008b89
 80075c4:	08008c14 	.word	0x08008c14

080075c8 <__ulp>:
 80075c8:	4b11      	ldr	r3, [pc, #68]	; (8007610 <__ulp+0x48>)
 80075ca:	400b      	ands	r3, r1
 80075cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dd02      	ble.n	80075da <__ulp+0x12>
 80075d4:	2000      	movs	r0, #0
 80075d6:	4619      	mov	r1, r3
 80075d8:	4770      	bx	lr
 80075da:	425b      	negs	r3, r3
 80075dc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80075e0:	f04f 0000 	mov.w	r0, #0
 80075e4:	f04f 0100 	mov.w	r1, #0
 80075e8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80075ec:	da04      	bge.n	80075f8 <__ulp+0x30>
 80075ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80075f2:	fa43 f102 	asr.w	r1, r3, r2
 80075f6:	4770      	bx	lr
 80075f8:	f1a2 0314 	sub.w	r3, r2, #20
 80075fc:	2b1e      	cmp	r3, #30
 80075fe:	bfd6      	itet	le
 8007600:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007604:	2301      	movgt	r3, #1
 8007606:	fa22 f303 	lsrle.w	r3, r2, r3
 800760a:	4618      	mov	r0, r3
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	7ff00000 	.word	0x7ff00000

08007614 <__b2d>:
 8007614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007618:	6907      	ldr	r7, [r0, #16]
 800761a:	f100 0914 	add.w	r9, r0, #20
 800761e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007622:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007626:	f1a7 0804 	sub.w	r8, r7, #4
 800762a:	4630      	mov	r0, r6
 800762c:	f7ff fd4e 	bl	80070cc <__hi0bits>
 8007630:	f1c0 0320 	rsb	r3, r0, #32
 8007634:	280a      	cmp	r0, #10
 8007636:	600b      	str	r3, [r1, #0]
 8007638:	491f      	ldr	r1, [pc, #124]	; (80076b8 <__b2d+0xa4>)
 800763a:	dc17      	bgt.n	800766c <__b2d+0x58>
 800763c:	45c1      	cmp	r9, r8
 800763e:	bf28      	it	cs
 8007640:	2200      	movcs	r2, #0
 8007642:	f1c0 0c0b 	rsb	ip, r0, #11
 8007646:	fa26 f30c 	lsr.w	r3, r6, ip
 800764a:	bf38      	it	cc
 800764c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007650:	ea43 0501 	orr.w	r5, r3, r1
 8007654:	f100 0315 	add.w	r3, r0, #21
 8007658:	fa06 f303 	lsl.w	r3, r6, r3
 800765c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007660:	ea43 0402 	orr.w	r4, r3, r2
 8007664:	4620      	mov	r0, r4
 8007666:	4629      	mov	r1, r5
 8007668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800766c:	45c1      	cmp	r9, r8
 800766e:	bf2e      	itee	cs
 8007670:	2200      	movcs	r2, #0
 8007672:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007676:	f1a7 0808 	subcc.w	r8, r7, #8
 800767a:	f1b0 030b 	subs.w	r3, r0, #11
 800767e:	d016      	beq.n	80076ae <__b2d+0x9a>
 8007680:	f1c3 0720 	rsb	r7, r3, #32
 8007684:	fa22 f107 	lsr.w	r1, r2, r7
 8007688:	45c8      	cmp	r8, r9
 800768a:	fa06 f603 	lsl.w	r6, r6, r3
 800768e:	ea46 0601 	orr.w	r6, r6, r1
 8007692:	bf94      	ite	ls
 8007694:	2100      	movls	r1, #0
 8007696:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800769a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800769e:	fa02 f003 	lsl.w	r0, r2, r3
 80076a2:	40f9      	lsrs	r1, r7
 80076a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80076a8:	ea40 0401 	orr.w	r4, r0, r1
 80076ac:	e7da      	b.n	8007664 <__b2d+0x50>
 80076ae:	4614      	mov	r4, r2
 80076b0:	ea46 0501 	orr.w	r5, r6, r1
 80076b4:	e7d6      	b.n	8007664 <__b2d+0x50>
 80076b6:	bf00      	nop
 80076b8:	3ff00000 	.word	0x3ff00000

080076bc <__d2b>:
 80076bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80076c0:	2101      	movs	r1, #1
 80076c2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80076c6:	4690      	mov	r8, r2
 80076c8:	461d      	mov	r5, r3
 80076ca:	f7ff fc0d 	bl	8006ee8 <_Balloc>
 80076ce:	4604      	mov	r4, r0
 80076d0:	b930      	cbnz	r0, 80076e0 <__d2b+0x24>
 80076d2:	4602      	mov	r2, r0
 80076d4:	f240 310a 	movw	r1, #778	; 0x30a
 80076d8:	4b24      	ldr	r3, [pc, #144]	; (800776c <__d2b+0xb0>)
 80076da:	4825      	ldr	r0, [pc, #148]	; (8007770 <__d2b+0xb4>)
 80076dc:	f7fe f9b8 	bl	8005a50 <__assert_func>
 80076e0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80076e4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80076e8:	bb2d      	cbnz	r5, 8007736 <__d2b+0x7a>
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	f1b8 0300 	subs.w	r3, r8, #0
 80076f0:	d026      	beq.n	8007740 <__d2b+0x84>
 80076f2:	4668      	mov	r0, sp
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	f7ff fd09 	bl	800710c <__lo0bits>
 80076fa:	9900      	ldr	r1, [sp, #0]
 80076fc:	b1f0      	cbz	r0, 800773c <__d2b+0x80>
 80076fe:	9a01      	ldr	r2, [sp, #4]
 8007700:	f1c0 0320 	rsb	r3, r0, #32
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	430b      	orrs	r3, r1
 800770a:	40c2      	lsrs	r2, r0
 800770c:	6163      	str	r3, [r4, #20]
 800770e:	9201      	str	r2, [sp, #4]
 8007710:	9b01      	ldr	r3, [sp, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	bf14      	ite	ne
 8007716:	2102      	movne	r1, #2
 8007718:	2101      	moveq	r1, #1
 800771a:	61a3      	str	r3, [r4, #24]
 800771c:	6121      	str	r1, [r4, #16]
 800771e:	b1c5      	cbz	r5, 8007752 <__d2b+0x96>
 8007720:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007724:	4405      	add	r5, r0
 8007726:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800772a:	603d      	str	r5, [r7, #0]
 800772c:	6030      	str	r0, [r6, #0]
 800772e:	4620      	mov	r0, r4
 8007730:	b002      	add	sp, #8
 8007732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800773a:	e7d6      	b.n	80076ea <__d2b+0x2e>
 800773c:	6161      	str	r1, [r4, #20]
 800773e:	e7e7      	b.n	8007710 <__d2b+0x54>
 8007740:	a801      	add	r0, sp, #4
 8007742:	f7ff fce3 	bl	800710c <__lo0bits>
 8007746:	2101      	movs	r1, #1
 8007748:	9b01      	ldr	r3, [sp, #4]
 800774a:	6121      	str	r1, [r4, #16]
 800774c:	6163      	str	r3, [r4, #20]
 800774e:	3020      	adds	r0, #32
 8007750:	e7e5      	b.n	800771e <__d2b+0x62>
 8007752:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007756:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800775a:	6038      	str	r0, [r7, #0]
 800775c:	6918      	ldr	r0, [r3, #16]
 800775e:	f7ff fcb5 	bl	80070cc <__hi0bits>
 8007762:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007766:	6031      	str	r1, [r6, #0]
 8007768:	e7e1      	b.n	800772e <__d2b+0x72>
 800776a:	bf00      	nop
 800776c:	08008b89 	.word	0x08008b89
 8007770:	08008c14 	.word	0x08008c14

08007774 <__ratio>:
 8007774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	4688      	mov	r8, r1
 800777a:	4669      	mov	r1, sp
 800777c:	4681      	mov	r9, r0
 800777e:	f7ff ff49 	bl	8007614 <__b2d>
 8007782:	460f      	mov	r7, r1
 8007784:	4604      	mov	r4, r0
 8007786:	460d      	mov	r5, r1
 8007788:	4640      	mov	r0, r8
 800778a:	a901      	add	r1, sp, #4
 800778c:	f7ff ff42 	bl	8007614 <__b2d>
 8007790:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007794:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007798:	468b      	mov	fp, r1
 800779a:	eba3 0c02 	sub.w	ip, r3, r2
 800779e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bfd5      	itete	le
 80077ac:	460a      	movle	r2, r1
 80077ae:	462a      	movgt	r2, r5
 80077b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80077b4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80077b8:	bfd8      	it	le
 80077ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80077be:	465b      	mov	r3, fp
 80077c0:	4602      	mov	r2, r0
 80077c2:	4639      	mov	r1, r7
 80077c4:	4620      	mov	r0, r4
 80077c6:	f7f8 ffbb 	bl	8000740 <__aeabi_ddiv>
 80077ca:	b003      	add	sp, #12
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077d0 <__copybits>:
 80077d0:	3901      	subs	r1, #1
 80077d2:	b570      	push	{r4, r5, r6, lr}
 80077d4:	1149      	asrs	r1, r1, #5
 80077d6:	6914      	ldr	r4, [r2, #16]
 80077d8:	3101      	adds	r1, #1
 80077da:	f102 0314 	add.w	r3, r2, #20
 80077de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80077e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80077e6:	1f05      	subs	r5, r0, #4
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d30c      	bcc.n	8007806 <__copybits+0x36>
 80077ec:	1aa3      	subs	r3, r4, r2
 80077ee:	3b11      	subs	r3, #17
 80077f0:	f023 0303 	bic.w	r3, r3, #3
 80077f4:	3211      	adds	r2, #17
 80077f6:	42a2      	cmp	r2, r4
 80077f8:	bf88      	it	hi
 80077fa:	2300      	movhi	r3, #0
 80077fc:	4418      	add	r0, r3
 80077fe:	2300      	movs	r3, #0
 8007800:	4288      	cmp	r0, r1
 8007802:	d305      	bcc.n	8007810 <__copybits+0x40>
 8007804:	bd70      	pop	{r4, r5, r6, pc}
 8007806:	f853 6b04 	ldr.w	r6, [r3], #4
 800780a:	f845 6f04 	str.w	r6, [r5, #4]!
 800780e:	e7eb      	b.n	80077e8 <__copybits+0x18>
 8007810:	f840 3b04 	str.w	r3, [r0], #4
 8007814:	e7f4      	b.n	8007800 <__copybits+0x30>

08007816 <__any_on>:
 8007816:	f100 0214 	add.w	r2, r0, #20
 800781a:	6900      	ldr	r0, [r0, #16]
 800781c:	114b      	asrs	r3, r1, #5
 800781e:	4298      	cmp	r0, r3
 8007820:	b510      	push	{r4, lr}
 8007822:	db11      	blt.n	8007848 <__any_on+0x32>
 8007824:	dd0a      	ble.n	800783c <__any_on+0x26>
 8007826:	f011 011f 	ands.w	r1, r1, #31
 800782a:	d007      	beq.n	800783c <__any_on+0x26>
 800782c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007830:	fa24 f001 	lsr.w	r0, r4, r1
 8007834:	fa00 f101 	lsl.w	r1, r0, r1
 8007838:	428c      	cmp	r4, r1
 800783a:	d10b      	bne.n	8007854 <__any_on+0x3e>
 800783c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007840:	4293      	cmp	r3, r2
 8007842:	d803      	bhi.n	800784c <__any_on+0x36>
 8007844:	2000      	movs	r0, #0
 8007846:	bd10      	pop	{r4, pc}
 8007848:	4603      	mov	r3, r0
 800784a:	e7f7      	b.n	800783c <__any_on+0x26>
 800784c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007850:	2900      	cmp	r1, #0
 8007852:	d0f5      	beq.n	8007840 <__any_on+0x2a>
 8007854:	2001      	movs	r0, #1
 8007856:	e7f6      	b.n	8007846 <__any_on+0x30>

08007858 <_calloc_r>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	fba1 5402 	umull	r5, r4, r1, r2
 800785e:	b934      	cbnz	r4, 800786e <_calloc_r+0x16>
 8007860:	4629      	mov	r1, r5
 8007862:	f000 f875 	bl	8007950 <_malloc_r>
 8007866:	4606      	mov	r6, r0
 8007868:	b928      	cbnz	r0, 8007876 <_calloc_r+0x1e>
 800786a:	4630      	mov	r0, r6
 800786c:	bd70      	pop	{r4, r5, r6, pc}
 800786e:	220c      	movs	r2, #12
 8007870:	2600      	movs	r6, #0
 8007872:	6002      	str	r2, [r0, #0]
 8007874:	e7f9      	b.n	800786a <_calloc_r+0x12>
 8007876:	462a      	mov	r2, r5
 8007878:	4621      	mov	r1, r4
 800787a:	f7fc fb1f 	bl	8003ebc <memset>
 800787e:	e7f4      	b.n	800786a <_calloc_r+0x12>

08007880 <_free_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4605      	mov	r5, r0
 8007884:	2900      	cmp	r1, #0
 8007886:	d040      	beq.n	800790a <_free_r+0x8a>
 8007888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800788c:	1f0c      	subs	r4, r1, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	bfb8      	it	lt
 8007892:	18e4      	addlt	r4, r4, r3
 8007894:	f000 feba 	bl	800860c <__malloc_lock>
 8007898:	4a1c      	ldr	r2, [pc, #112]	; (800790c <_free_r+0x8c>)
 800789a:	6813      	ldr	r3, [r2, #0]
 800789c:	b933      	cbnz	r3, 80078ac <_free_r+0x2c>
 800789e:	6063      	str	r3, [r4, #4]
 80078a0:	6014      	str	r4, [r2, #0]
 80078a2:	4628      	mov	r0, r5
 80078a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078a8:	f000 beb6 	b.w	8008618 <__malloc_unlock>
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	d908      	bls.n	80078c2 <_free_r+0x42>
 80078b0:	6820      	ldr	r0, [r4, #0]
 80078b2:	1821      	adds	r1, r4, r0
 80078b4:	428b      	cmp	r3, r1
 80078b6:	bf01      	itttt	eq
 80078b8:	6819      	ldreq	r1, [r3, #0]
 80078ba:	685b      	ldreq	r3, [r3, #4]
 80078bc:	1809      	addeq	r1, r1, r0
 80078be:	6021      	streq	r1, [r4, #0]
 80078c0:	e7ed      	b.n	800789e <_free_r+0x1e>
 80078c2:	461a      	mov	r2, r3
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	b10b      	cbz	r3, 80078cc <_free_r+0x4c>
 80078c8:	42a3      	cmp	r3, r4
 80078ca:	d9fa      	bls.n	80078c2 <_free_r+0x42>
 80078cc:	6811      	ldr	r1, [r2, #0]
 80078ce:	1850      	adds	r0, r2, r1
 80078d0:	42a0      	cmp	r0, r4
 80078d2:	d10b      	bne.n	80078ec <_free_r+0x6c>
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	4401      	add	r1, r0
 80078d8:	1850      	adds	r0, r2, r1
 80078da:	4283      	cmp	r3, r0
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	d1e0      	bne.n	80078a2 <_free_r+0x22>
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	4401      	add	r1, r0
 80078e6:	6011      	str	r1, [r2, #0]
 80078e8:	6053      	str	r3, [r2, #4]
 80078ea:	e7da      	b.n	80078a2 <_free_r+0x22>
 80078ec:	d902      	bls.n	80078f4 <_free_r+0x74>
 80078ee:	230c      	movs	r3, #12
 80078f0:	602b      	str	r3, [r5, #0]
 80078f2:	e7d6      	b.n	80078a2 <_free_r+0x22>
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	1821      	adds	r1, r4, r0
 80078f8:	428b      	cmp	r3, r1
 80078fa:	bf01      	itttt	eq
 80078fc:	6819      	ldreq	r1, [r3, #0]
 80078fe:	685b      	ldreq	r3, [r3, #4]
 8007900:	1809      	addeq	r1, r1, r0
 8007902:	6021      	streq	r1, [r4, #0]
 8007904:	6063      	str	r3, [r4, #4]
 8007906:	6054      	str	r4, [r2, #4]
 8007908:	e7cb      	b.n	80078a2 <_free_r+0x22>
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	200005a0 	.word	0x200005a0

08007910 <sbrk_aligned>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4e0e      	ldr	r6, [pc, #56]	; (800794c <sbrk_aligned+0x3c>)
 8007914:	460c      	mov	r4, r1
 8007916:	6831      	ldr	r1, [r6, #0]
 8007918:	4605      	mov	r5, r0
 800791a:	b911      	cbnz	r1, 8007922 <sbrk_aligned+0x12>
 800791c:	f000 fb46 	bl	8007fac <_sbrk_r>
 8007920:	6030      	str	r0, [r6, #0]
 8007922:	4621      	mov	r1, r4
 8007924:	4628      	mov	r0, r5
 8007926:	f000 fb41 	bl	8007fac <_sbrk_r>
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	d00a      	beq.n	8007944 <sbrk_aligned+0x34>
 800792e:	1cc4      	adds	r4, r0, #3
 8007930:	f024 0403 	bic.w	r4, r4, #3
 8007934:	42a0      	cmp	r0, r4
 8007936:	d007      	beq.n	8007948 <sbrk_aligned+0x38>
 8007938:	1a21      	subs	r1, r4, r0
 800793a:	4628      	mov	r0, r5
 800793c:	f000 fb36 	bl	8007fac <_sbrk_r>
 8007940:	3001      	adds	r0, #1
 8007942:	d101      	bne.n	8007948 <sbrk_aligned+0x38>
 8007944:	f04f 34ff 	mov.w	r4, #4294967295
 8007948:	4620      	mov	r0, r4
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	200005a4 	.word	0x200005a4

08007950 <_malloc_r>:
 8007950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007954:	1ccd      	adds	r5, r1, #3
 8007956:	f025 0503 	bic.w	r5, r5, #3
 800795a:	3508      	adds	r5, #8
 800795c:	2d0c      	cmp	r5, #12
 800795e:	bf38      	it	cc
 8007960:	250c      	movcc	r5, #12
 8007962:	2d00      	cmp	r5, #0
 8007964:	4607      	mov	r7, r0
 8007966:	db01      	blt.n	800796c <_malloc_r+0x1c>
 8007968:	42a9      	cmp	r1, r5
 800796a:	d905      	bls.n	8007978 <_malloc_r+0x28>
 800796c:	230c      	movs	r3, #12
 800796e:	2600      	movs	r6, #0
 8007970:	603b      	str	r3, [r7, #0]
 8007972:	4630      	mov	r0, r6
 8007974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007978:	4e2e      	ldr	r6, [pc, #184]	; (8007a34 <_malloc_r+0xe4>)
 800797a:	f000 fe47 	bl	800860c <__malloc_lock>
 800797e:	6833      	ldr	r3, [r6, #0]
 8007980:	461c      	mov	r4, r3
 8007982:	bb34      	cbnz	r4, 80079d2 <_malloc_r+0x82>
 8007984:	4629      	mov	r1, r5
 8007986:	4638      	mov	r0, r7
 8007988:	f7ff ffc2 	bl	8007910 <sbrk_aligned>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	4604      	mov	r4, r0
 8007990:	d14d      	bne.n	8007a2e <_malloc_r+0xde>
 8007992:	6834      	ldr	r4, [r6, #0]
 8007994:	4626      	mov	r6, r4
 8007996:	2e00      	cmp	r6, #0
 8007998:	d140      	bne.n	8007a1c <_malloc_r+0xcc>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	4631      	mov	r1, r6
 800799e:	4638      	mov	r0, r7
 80079a0:	eb04 0803 	add.w	r8, r4, r3
 80079a4:	f000 fb02 	bl	8007fac <_sbrk_r>
 80079a8:	4580      	cmp	r8, r0
 80079aa:	d13a      	bne.n	8007a22 <_malloc_r+0xd2>
 80079ac:	6821      	ldr	r1, [r4, #0]
 80079ae:	3503      	adds	r5, #3
 80079b0:	1a6d      	subs	r5, r5, r1
 80079b2:	f025 0503 	bic.w	r5, r5, #3
 80079b6:	3508      	adds	r5, #8
 80079b8:	2d0c      	cmp	r5, #12
 80079ba:	bf38      	it	cc
 80079bc:	250c      	movcc	r5, #12
 80079be:	4638      	mov	r0, r7
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7ff ffa5 	bl	8007910 <sbrk_aligned>
 80079c6:	3001      	adds	r0, #1
 80079c8:	d02b      	beq.n	8007a22 <_malloc_r+0xd2>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	442b      	add	r3, r5
 80079ce:	6023      	str	r3, [r4, #0]
 80079d0:	e00e      	b.n	80079f0 <_malloc_r+0xa0>
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	1b52      	subs	r2, r2, r5
 80079d6:	d41e      	bmi.n	8007a16 <_malloc_r+0xc6>
 80079d8:	2a0b      	cmp	r2, #11
 80079da:	d916      	bls.n	8007a0a <_malloc_r+0xba>
 80079dc:	1961      	adds	r1, r4, r5
 80079de:	42a3      	cmp	r3, r4
 80079e0:	6025      	str	r5, [r4, #0]
 80079e2:	bf18      	it	ne
 80079e4:	6059      	strne	r1, [r3, #4]
 80079e6:	6863      	ldr	r3, [r4, #4]
 80079e8:	bf08      	it	eq
 80079ea:	6031      	streq	r1, [r6, #0]
 80079ec:	5162      	str	r2, [r4, r5]
 80079ee:	604b      	str	r3, [r1, #4]
 80079f0:	4638      	mov	r0, r7
 80079f2:	f104 060b 	add.w	r6, r4, #11
 80079f6:	f000 fe0f 	bl	8008618 <__malloc_unlock>
 80079fa:	f026 0607 	bic.w	r6, r6, #7
 80079fe:	1d23      	adds	r3, r4, #4
 8007a00:	1af2      	subs	r2, r6, r3
 8007a02:	d0b6      	beq.n	8007972 <_malloc_r+0x22>
 8007a04:	1b9b      	subs	r3, r3, r6
 8007a06:	50a3      	str	r3, [r4, r2]
 8007a08:	e7b3      	b.n	8007972 <_malloc_r+0x22>
 8007a0a:	6862      	ldr	r2, [r4, #4]
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	bf0c      	ite	eq
 8007a10:	6032      	streq	r2, [r6, #0]
 8007a12:	605a      	strne	r2, [r3, #4]
 8007a14:	e7ec      	b.n	80079f0 <_malloc_r+0xa0>
 8007a16:	4623      	mov	r3, r4
 8007a18:	6864      	ldr	r4, [r4, #4]
 8007a1a:	e7b2      	b.n	8007982 <_malloc_r+0x32>
 8007a1c:	4634      	mov	r4, r6
 8007a1e:	6876      	ldr	r6, [r6, #4]
 8007a20:	e7b9      	b.n	8007996 <_malloc_r+0x46>
 8007a22:	230c      	movs	r3, #12
 8007a24:	4638      	mov	r0, r7
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	f000 fdf6 	bl	8008618 <__malloc_unlock>
 8007a2c:	e7a1      	b.n	8007972 <_malloc_r+0x22>
 8007a2e:	6025      	str	r5, [r4, #0]
 8007a30:	e7de      	b.n	80079f0 <_malloc_r+0xa0>
 8007a32:	bf00      	nop
 8007a34:	200005a0 	.word	0x200005a0

08007a38 <__ssputs_r>:
 8007a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a3c:	688e      	ldr	r6, [r1, #8]
 8007a3e:	4682      	mov	sl, r0
 8007a40:	429e      	cmp	r6, r3
 8007a42:	460c      	mov	r4, r1
 8007a44:	4690      	mov	r8, r2
 8007a46:	461f      	mov	r7, r3
 8007a48:	d838      	bhi.n	8007abc <__ssputs_r+0x84>
 8007a4a:	898a      	ldrh	r2, [r1, #12]
 8007a4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a50:	d032      	beq.n	8007ab8 <__ssputs_r+0x80>
 8007a52:	6825      	ldr	r5, [r4, #0]
 8007a54:	6909      	ldr	r1, [r1, #16]
 8007a56:	3301      	adds	r3, #1
 8007a58:	eba5 0901 	sub.w	r9, r5, r1
 8007a5c:	6965      	ldr	r5, [r4, #20]
 8007a5e:	444b      	add	r3, r9
 8007a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a68:	106d      	asrs	r5, r5, #1
 8007a6a:	429d      	cmp	r5, r3
 8007a6c:	bf38      	it	cc
 8007a6e:	461d      	movcc	r5, r3
 8007a70:	0553      	lsls	r3, r2, #21
 8007a72:	d531      	bpl.n	8007ad8 <__ssputs_r+0xa0>
 8007a74:	4629      	mov	r1, r5
 8007a76:	f7ff ff6b 	bl	8007950 <_malloc_r>
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	b950      	cbnz	r0, 8007a94 <__ssputs_r+0x5c>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	f8ca 3000 	str.w	r3, [sl]
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a8e:	81a3      	strh	r3, [r4, #12]
 8007a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a94:	464a      	mov	r2, r9
 8007a96:	6921      	ldr	r1, [r4, #16]
 8007a98:	f7ff fa18 	bl	8006ecc <memcpy>
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	6126      	str	r6, [r4, #16]
 8007aaa:	444e      	add	r6, r9
 8007aac:	6026      	str	r6, [r4, #0]
 8007aae:	463e      	mov	r6, r7
 8007ab0:	6165      	str	r5, [r4, #20]
 8007ab2:	eba5 0509 	sub.w	r5, r5, r9
 8007ab6:	60a5      	str	r5, [r4, #8]
 8007ab8:	42be      	cmp	r6, r7
 8007aba:	d900      	bls.n	8007abe <__ssputs_r+0x86>
 8007abc:	463e      	mov	r6, r7
 8007abe:	4632      	mov	r2, r6
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	6820      	ldr	r0, [r4, #0]
 8007ac4:	f000 fd88 	bl	80085d8 <memmove>
 8007ac8:	68a3      	ldr	r3, [r4, #8]
 8007aca:	2000      	movs	r0, #0
 8007acc:	1b9b      	subs	r3, r3, r6
 8007ace:	60a3      	str	r3, [r4, #8]
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	4433      	add	r3, r6
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	e7db      	b.n	8007a90 <__ssputs_r+0x58>
 8007ad8:	462a      	mov	r2, r5
 8007ada:	f000 fda3 	bl	8008624 <_realloc_r>
 8007ade:	4606      	mov	r6, r0
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d1e1      	bne.n	8007aa8 <__ssputs_r+0x70>
 8007ae4:	4650      	mov	r0, sl
 8007ae6:	6921      	ldr	r1, [r4, #16]
 8007ae8:	f7ff feca 	bl	8007880 <_free_r>
 8007aec:	e7c7      	b.n	8007a7e <__ssputs_r+0x46>
	...

08007af0 <_svfiprintf_r>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	4698      	mov	r8, r3
 8007af6:	898b      	ldrh	r3, [r1, #12]
 8007af8:	4607      	mov	r7, r0
 8007afa:	061b      	lsls	r3, r3, #24
 8007afc:	460d      	mov	r5, r1
 8007afe:	4614      	mov	r4, r2
 8007b00:	b09d      	sub	sp, #116	; 0x74
 8007b02:	d50e      	bpl.n	8007b22 <_svfiprintf_r+0x32>
 8007b04:	690b      	ldr	r3, [r1, #16]
 8007b06:	b963      	cbnz	r3, 8007b22 <_svfiprintf_r+0x32>
 8007b08:	2140      	movs	r1, #64	; 0x40
 8007b0a:	f7ff ff21 	bl	8007950 <_malloc_r>
 8007b0e:	6028      	str	r0, [r5, #0]
 8007b10:	6128      	str	r0, [r5, #16]
 8007b12:	b920      	cbnz	r0, 8007b1e <_svfiprintf_r+0x2e>
 8007b14:	230c      	movs	r3, #12
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	e0d1      	b.n	8007cc2 <_svfiprintf_r+0x1d2>
 8007b1e:	2340      	movs	r3, #64	; 0x40
 8007b20:	616b      	str	r3, [r5, #20]
 8007b22:	2300      	movs	r3, #0
 8007b24:	9309      	str	r3, [sp, #36]	; 0x24
 8007b26:	2320      	movs	r3, #32
 8007b28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b2c:	2330      	movs	r3, #48	; 0x30
 8007b2e:	f04f 0901 	mov.w	r9, #1
 8007b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007cdc <_svfiprintf_r+0x1ec>
 8007b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b3e:	4623      	mov	r3, r4
 8007b40:	469a      	mov	sl, r3
 8007b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b46:	b10a      	cbz	r2, 8007b4c <_svfiprintf_r+0x5c>
 8007b48:	2a25      	cmp	r2, #37	; 0x25
 8007b4a:	d1f9      	bne.n	8007b40 <_svfiprintf_r+0x50>
 8007b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b50:	d00b      	beq.n	8007b6a <_svfiprintf_r+0x7a>
 8007b52:	465b      	mov	r3, fp
 8007b54:	4622      	mov	r2, r4
 8007b56:	4629      	mov	r1, r5
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7ff ff6d 	bl	8007a38 <__ssputs_r>
 8007b5e:	3001      	adds	r0, #1
 8007b60:	f000 80aa 	beq.w	8007cb8 <_svfiprintf_r+0x1c8>
 8007b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b66:	445a      	add	r2, fp
 8007b68:	9209      	str	r2, [sp, #36]	; 0x24
 8007b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 80a2 	beq.w	8007cb8 <_svfiprintf_r+0x1c8>
 8007b74:	2300      	movs	r3, #0
 8007b76:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b7e:	f10a 0a01 	add.w	sl, sl, #1
 8007b82:	9304      	str	r3, [sp, #16]
 8007b84:	9307      	str	r3, [sp, #28]
 8007b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b8c:	4654      	mov	r4, sl
 8007b8e:	2205      	movs	r2, #5
 8007b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b94:	4851      	ldr	r0, [pc, #324]	; (8007cdc <_svfiprintf_r+0x1ec>)
 8007b96:	f7ff f98b 	bl	8006eb0 <memchr>
 8007b9a:	9a04      	ldr	r2, [sp, #16]
 8007b9c:	b9d8      	cbnz	r0, 8007bd6 <_svfiprintf_r+0xe6>
 8007b9e:	06d0      	lsls	r0, r2, #27
 8007ba0:	bf44      	itt	mi
 8007ba2:	2320      	movmi	r3, #32
 8007ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba8:	0711      	lsls	r1, r2, #28
 8007baa:	bf44      	itt	mi
 8007bac:	232b      	movmi	r3, #43	; 0x2b
 8007bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bb8:	d015      	beq.n	8007be6 <_svfiprintf_r+0xf6>
 8007bba:	4654      	mov	r4, sl
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	f04f 0c0a 	mov.w	ip, #10
 8007bc2:	9a07      	ldr	r2, [sp, #28]
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bca:	3b30      	subs	r3, #48	; 0x30
 8007bcc:	2b09      	cmp	r3, #9
 8007bce:	d94e      	bls.n	8007c6e <_svfiprintf_r+0x17e>
 8007bd0:	b1b0      	cbz	r0, 8007c00 <_svfiprintf_r+0x110>
 8007bd2:	9207      	str	r2, [sp, #28]
 8007bd4:	e014      	b.n	8007c00 <_svfiprintf_r+0x110>
 8007bd6:	eba0 0308 	sub.w	r3, r0, r8
 8007bda:	fa09 f303 	lsl.w	r3, r9, r3
 8007bde:	4313      	orrs	r3, r2
 8007be0:	46a2      	mov	sl, r4
 8007be2:	9304      	str	r3, [sp, #16]
 8007be4:	e7d2      	b.n	8007b8c <_svfiprintf_r+0x9c>
 8007be6:	9b03      	ldr	r3, [sp, #12]
 8007be8:	1d19      	adds	r1, r3, #4
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	9103      	str	r1, [sp, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	bfbb      	ittet	lt
 8007bf2:	425b      	neglt	r3, r3
 8007bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8007bf8:	9307      	strge	r3, [sp, #28]
 8007bfa:	9307      	strlt	r3, [sp, #28]
 8007bfc:	bfb8      	it	lt
 8007bfe:	9204      	strlt	r2, [sp, #16]
 8007c00:	7823      	ldrb	r3, [r4, #0]
 8007c02:	2b2e      	cmp	r3, #46	; 0x2e
 8007c04:	d10c      	bne.n	8007c20 <_svfiprintf_r+0x130>
 8007c06:	7863      	ldrb	r3, [r4, #1]
 8007c08:	2b2a      	cmp	r3, #42	; 0x2a
 8007c0a:	d135      	bne.n	8007c78 <_svfiprintf_r+0x188>
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	3402      	adds	r4, #2
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	9203      	str	r2, [sp, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bfb8      	it	lt
 8007c1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c1e:	9305      	str	r3, [sp, #20]
 8007c20:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007ce0 <_svfiprintf_r+0x1f0>
 8007c24:	2203      	movs	r2, #3
 8007c26:	4650      	mov	r0, sl
 8007c28:	7821      	ldrb	r1, [r4, #0]
 8007c2a:	f7ff f941 	bl	8006eb0 <memchr>
 8007c2e:	b140      	cbz	r0, 8007c42 <_svfiprintf_r+0x152>
 8007c30:	2340      	movs	r3, #64	; 0x40
 8007c32:	eba0 000a 	sub.w	r0, r0, sl
 8007c36:	fa03 f000 	lsl.w	r0, r3, r0
 8007c3a:	9b04      	ldr	r3, [sp, #16]
 8007c3c:	3401      	adds	r4, #1
 8007c3e:	4303      	orrs	r3, r0
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c46:	2206      	movs	r2, #6
 8007c48:	4826      	ldr	r0, [pc, #152]	; (8007ce4 <_svfiprintf_r+0x1f4>)
 8007c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c4e:	f7ff f92f 	bl	8006eb0 <memchr>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d038      	beq.n	8007cc8 <_svfiprintf_r+0x1d8>
 8007c56:	4b24      	ldr	r3, [pc, #144]	; (8007ce8 <_svfiprintf_r+0x1f8>)
 8007c58:	bb1b      	cbnz	r3, 8007ca2 <_svfiprintf_r+0x1b2>
 8007c5a:	9b03      	ldr	r3, [sp, #12]
 8007c5c:	3307      	adds	r3, #7
 8007c5e:	f023 0307 	bic.w	r3, r3, #7
 8007c62:	3308      	adds	r3, #8
 8007c64:	9303      	str	r3, [sp, #12]
 8007c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c68:	4433      	add	r3, r6
 8007c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c6c:	e767      	b.n	8007b3e <_svfiprintf_r+0x4e>
 8007c6e:	460c      	mov	r4, r1
 8007c70:	2001      	movs	r0, #1
 8007c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c76:	e7a5      	b.n	8007bc4 <_svfiprintf_r+0xd4>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f04f 0c0a 	mov.w	ip, #10
 8007c7e:	4619      	mov	r1, r3
 8007c80:	3401      	adds	r4, #1
 8007c82:	9305      	str	r3, [sp, #20]
 8007c84:	4620      	mov	r0, r4
 8007c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c8a:	3a30      	subs	r2, #48	; 0x30
 8007c8c:	2a09      	cmp	r2, #9
 8007c8e:	d903      	bls.n	8007c98 <_svfiprintf_r+0x1a8>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0c5      	beq.n	8007c20 <_svfiprintf_r+0x130>
 8007c94:	9105      	str	r1, [sp, #20]
 8007c96:	e7c3      	b.n	8007c20 <_svfiprintf_r+0x130>
 8007c98:	4604      	mov	r4, r0
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ca0:	e7f0      	b.n	8007c84 <_svfiprintf_r+0x194>
 8007ca2:	ab03      	add	r3, sp, #12
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	462a      	mov	r2, r5
 8007ca8:	4638      	mov	r0, r7
 8007caa:	4b10      	ldr	r3, [pc, #64]	; (8007cec <_svfiprintf_r+0x1fc>)
 8007cac:	a904      	add	r1, sp, #16
 8007cae:	f7fc f9ab 	bl	8004008 <_printf_float>
 8007cb2:	1c42      	adds	r2, r0, #1
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	d1d6      	bne.n	8007c66 <_svfiprintf_r+0x176>
 8007cb8:	89ab      	ldrh	r3, [r5, #12]
 8007cba:	065b      	lsls	r3, r3, #25
 8007cbc:	f53f af2c 	bmi.w	8007b18 <_svfiprintf_r+0x28>
 8007cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cc2:	b01d      	add	sp, #116	; 0x74
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc8:	ab03      	add	r3, sp, #12
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	462a      	mov	r2, r5
 8007cce:	4638      	mov	r0, r7
 8007cd0:	4b06      	ldr	r3, [pc, #24]	; (8007cec <_svfiprintf_r+0x1fc>)
 8007cd2:	a904      	add	r1, sp, #16
 8007cd4:	f7fc fc34 	bl	8004540 <_printf_i>
 8007cd8:	e7eb      	b.n	8007cb2 <_svfiprintf_r+0x1c2>
 8007cda:	bf00      	nop
 8007cdc:	08008d6c 	.word	0x08008d6c
 8007ce0:	08008d72 	.word	0x08008d72
 8007ce4:	08008d76 	.word	0x08008d76
 8007ce8:	08004009 	.word	0x08004009
 8007cec:	08007a39 	.word	0x08007a39

08007cf0 <__sfputc_r>:
 8007cf0:	6893      	ldr	r3, [r2, #8]
 8007cf2:	b410      	push	{r4}
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	6093      	str	r3, [r2, #8]
 8007cfa:	da07      	bge.n	8007d0c <__sfputc_r+0x1c>
 8007cfc:	6994      	ldr	r4, [r2, #24]
 8007cfe:	42a3      	cmp	r3, r4
 8007d00:	db01      	blt.n	8007d06 <__sfputc_r+0x16>
 8007d02:	290a      	cmp	r1, #10
 8007d04:	d102      	bne.n	8007d0c <__sfputc_r+0x1c>
 8007d06:	bc10      	pop	{r4}
 8007d08:	f000 b974 	b.w	8007ff4 <__swbuf_r>
 8007d0c:	6813      	ldr	r3, [r2, #0]
 8007d0e:	1c58      	adds	r0, r3, #1
 8007d10:	6010      	str	r0, [r2, #0]
 8007d12:	7019      	strb	r1, [r3, #0]
 8007d14:	4608      	mov	r0, r1
 8007d16:	bc10      	pop	{r4}
 8007d18:	4770      	bx	lr

08007d1a <__sfputs_r>:
 8007d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	460f      	mov	r7, r1
 8007d20:	4614      	mov	r4, r2
 8007d22:	18d5      	adds	r5, r2, r3
 8007d24:	42ac      	cmp	r4, r5
 8007d26:	d101      	bne.n	8007d2c <__sfputs_r+0x12>
 8007d28:	2000      	movs	r0, #0
 8007d2a:	e007      	b.n	8007d3c <__sfputs_r+0x22>
 8007d2c:	463a      	mov	r2, r7
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d34:	f7ff ffdc 	bl	8007cf0 <__sfputc_r>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d1f3      	bne.n	8007d24 <__sfputs_r+0xa>
 8007d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d40 <_vfiprintf_r>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	460d      	mov	r5, r1
 8007d46:	4614      	mov	r4, r2
 8007d48:	4698      	mov	r8, r3
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	b09d      	sub	sp, #116	; 0x74
 8007d4e:	b118      	cbz	r0, 8007d58 <_vfiprintf_r+0x18>
 8007d50:	6983      	ldr	r3, [r0, #24]
 8007d52:	b90b      	cbnz	r3, 8007d58 <_vfiprintf_r+0x18>
 8007d54:	f000 fb3a 	bl	80083cc <__sinit>
 8007d58:	4b89      	ldr	r3, [pc, #548]	; (8007f80 <_vfiprintf_r+0x240>)
 8007d5a:	429d      	cmp	r5, r3
 8007d5c:	d11b      	bne.n	8007d96 <_vfiprintf_r+0x56>
 8007d5e:	6875      	ldr	r5, [r6, #4]
 8007d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d62:	07d9      	lsls	r1, r3, #31
 8007d64:	d405      	bmi.n	8007d72 <_vfiprintf_r+0x32>
 8007d66:	89ab      	ldrh	r3, [r5, #12]
 8007d68:	059a      	lsls	r2, r3, #22
 8007d6a:	d402      	bmi.n	8007d72 <_vfiprintf_r+0x32>
 8007d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d6e:	f000 fbcb 	bl	8008508 <__retarget_lock_acquire_recursive>
 8007d72:	89ab      	ldrh	r3, [r5, #12]
 8007d74:	071b      	lsls	r3, r3, #28
 8007d76:	d501      	bpl.n	8007d7c <_vfiprintf_r+0x3c>
 8007d78:	692b      	ldr	r3, [r5, #16]
 8007d7a:	b9eb      	cbnz	r3, 8007db8 <_vfiprintf_r+0x78>
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f000 f998 	bl	80080b4 <__swsetup_r>
 8007d84:	b1c0      	cbz	r0, 8007db8 <_vfiprintf_r+0x78>
 8007d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d88:	07dc      	lsls	r4, r3, #31
 8007d8a:	d50e      	bpl.n	8007daa <_vfiprintf_r+0x6a>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	b01d      	add	sp, #116	; 0x74
 8007d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d96:	4b7b      	ldr	r3, [pc, #492]	; (8007f84 <_vfiprintf_r+0x244>)
 8007d98:	429d      	cmp	r5, r3
 8007d9a:	d101      	bne.n	8007da0 <_vfiprintf_r+0x60>
 8007d9c:	68b5      	ldr	r5, [r6, #8]
 8007d9e:	e7df      	b.n	8007d60 <_vfiprintf_r+0x20>
 8007da0:	4b79      	ldr	r3, [pc, #484]	; (8007f88 <_vfiprintf_r+0x248>)
 8007da2:	429d      	cmp	r5, r3
 8007da4:	bf08      	it	eq
 8007da6:	68f5      	ldreq	r5, [r6, #12]
 8007da8:	e7da      	b.n	8007d60 <_vfiprintf_r+0x20>
 8007daa:	89ab      	ldrh	r3, [r5, #12]
 8007dac:	0598      	lsls	r0, r3, #22
 8007dae:	d4ed      	bmi.n	8007d8c <_vfiprintf_r+0x4c>
 8007db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007db2:	f000 fbaa 	bl	800850a <__retarget_lock_release_recursive>
 8007db6:	e7e9      	b.n	8007d8c <_vfiprintf_r+0x4c>
 8007db8:	2300      	movs	r3, #0
 8007dba:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbc:	2320      	movs	r3, #32
 8007dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dc2:	2330      	movs	r3, #48	; 0x30
 8007dc4:	f04f 0901 	mov.w	r9, #1
 8007dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dcc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007f8c <_vfiprintf_r+0x24c>
 8007dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dd4:	4623      	mov	r3, r4
 8007dd6:	469a      	mov	sl, r3
 8007dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ddc:	b10a      	cbz	r2, 8007de2 <_vfiprintf_r+0xa2>
 8007dde:	2a25      	cmp	r2, #37	; 0x25
 8007de0:	d1f9      	bne.n	8007dd6 <_vfiprintf_r+0x96>
 8007de2:	ebba 0b04 	subs.w	fp, sl, r4
 8007de6:	d00b      	beq.n	8007e00 <_vfiprintf_r+0xc0>
 8007de8:	465b      	mov	r3, fp
 8007dea:	4622      	mov	r2, r4
 8007dec:	4629      	mov	r1, r5
 8007dee:	4630      	mov	r0, r6
 8007df0:	f7ff ff93 	bl	8007d1a <__sfputs_r>
 8007df4:	3001      	adds	r0, #1
 8007df6:	f000 80aa 	beq.w	8007f4e <_vfiprintf_r+0x20e>
 8007dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dfc:	445a      	add	r2, fp
 8007dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8007e00:	f89a 3000 	ldrb.w	r3, [sl]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 80a2 	beq.w	8007f4e <_vfiprintf_r+0x20e>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e14:	f10a 0a01 	add.w	sl, sl, #1
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	9307      	str	r3, [sp, #28]
 8007e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e20:	931a      	str	r3, [sp, #104]	; 0x68
 8007e22:	4654      	mov	r4, sl
 8007e24:	2205      	movs	r2, #5
 8007e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e2a:	4858      	ldr	r0, [pc, #352]	; (8007f8c <_vfiprintf_r+0x24c>)
 8007e2c:	f7ff f840 	bl	8006eb0 <memchr>
 8007e30:	9a04      	ldr	r2, [sp, #16]
 8007e32:	b9d8      	cbnz	r0, 8007e6c <_vfiprintf_r+0x12c>
 8007e34:	06d1      	lsls	r1, r2, #27
 8007e36:	bf44      	itt	mi
 8007e38:	2320      	movmi	r3, #32
 8007e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e3e:	0713      	lsls	r3, r2, #28
 8007e40:	bf44      	itt	mi
 8007e42:	232b      	movmi	r3, #43	; 0x2b
 8007e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e48:	f89a 3000 	ldrb.w	r3, [sl]
 8007e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e4e:	d015      	beq.n	8007e7c <_vfiprintf_r+0x13c>
 8007e50:	4654      	mov	r4, sl
 8007e52:	2000      	movs	r0, #0
 8007e54:	f04f 0c0a 	mov.w	ip, #10
 8007e58:	9a07      	ldr	r2, [sp, #28]
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e60:	3b30      	subs	r3, #48	; 0x30
 8007e62:	2b09      	cmp	r3, #9
 8007e64:	d94e      	bls.n	8007f04 <_vfiprintf_r+0x1c4>
 8007e66:	b1b0      	cbz	r0, 8007e96 <_vfiprintf_r+0x156>
 8007e68:	9207      	str	r2, [sp, #28]
 8007e6a:	e014      	b.n	8007e96 <_vfiprintf_r+0x156>
 8007e6c:	eba0 0308 	sub.w	r3, r0, r8
 8007e70:	fa09 f303 	lsl.w	r3, r9, r3
 8007e74:	4313      	orrs	r3, r2
 8007e76:	46a2      	mov	sl, r4
 8007e78:	9304      	str	r3, [sp, #16]
 8007e7a:	e7d2      	b.n	8007e22 <_vfiprintf_r+0xe2>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	1d19      	adds	r1, r3, #4
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	9103      	str	r1, [sp, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bfbb      	ittet	lt
 8007e88:	425b      	neglt	r3, r3
 8007e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e8e:	9307      	strge	r3, [sp, #28]
 8007e90:	9307      	strlt	r3, [sp, #28]
 8007e92:	bfb8      	it	lt
 8007e94:	9204      	strlt	r2, [sp, #16]
 8007e96:	7823      	ldrb	r3, [r4, #0]
 8007e98:	2b2e      	cmp	r3, #46	; 0x2e
 8007e9a:	d10c      	bne.n	8007eb6 <_vfiprintf_r+0x176>
 8007e9c:	7863      	ldrb	r3, [r4, #1]
 8007e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ea0:	d135      	bne.n	8007f0e <_vfiprintf_r+0x1ce>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	3402      	adds	r4, #2
 8007ea6:	1d1a      	adds	r2, r3, #4
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	9203      	str	r2, [sp, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bfb8      	it	lt
 8007eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eb4:	9305      	str	r3, [sp, #20]
 8007eb6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007f90 <_vfiprintf_r+0x250>
 8007eba:	2203      	movs	r2, #3
 8007ebc:	4650      	mov	r0, sl
 8007ebe:	7821      	ldrb	r1, [r4, #0]
 8007ec0:	f7fe fff6 	bl	8006eb0 <memchr>
 8007ec4:	b140      	cbz	r0, 8007ed8 <_vfiprintf_r+0x198>
 8007ec6:	2340      	movs	r3, #64	; 0x40
 8007ec8:	eba0 000a 	sub.w	r0, r0, sl
 8007ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8007ed0:	9b04      	ldr	r3, [sp, #16]
 8007ed2:	3401      	adds	r4, #1
 8007ed4:	4303      	orrs	r3, r0
 8007ed6:	9304      	str	r3, [sp, #16]
 8007ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007edc:	2206      	movs	r2, #6
 8007ede:	482d      	ldr	r0, [pc, #180]	; (8007f94 <_vfiprintf_r+0x254>)
 8007ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ee4:	f7fe ffe4 	bl	8006eb0 <memchr>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d03f      	beq.n	8007f6c <_vfiprintf_r+0x22c>
 8007eec:	4b2a      	ldr	r3, [pc, #168]	; (8007f98 <_vfiprintf_r+0x258>)
 8007eee:	bb1b      	cbnz	r3, 8007f38 <_vfiprintf_r+0x1f8>
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	3307      	adds	r3, #7
 8007ef4:	f023 0307 	bic.w	r3, r3, #7
 8007ef8:	3308      	adds	r3, #8
 8007efa:	9303      	str	r3, [sp, #12]
 8007efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efe:	443b      	add	r3, r7
 8007f00:	9309      	str	r3, [sp, #36]	; 0x24
 8007f02:	e767      	b.n	8007dd4 <_vfiprintf_r+0x94>
 8007f04:	460c      	mov	r4, r1
 8007f06:	2001      	movs	r0, #1
 8007f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f0c:	e7a5      	b.n	8007e5a <_vfiprintf_r+0x11a>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f04f 0c0a 	mov.w	ip, #10
 8007f14:	4619      	mov	r1, r3
 8007f16:	3401      	adds	r4, #1
 8007f18:	9305      	str	r3, [sp, #20]
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f20:	3a30      	subs	r2, #48	; 0x30
 8007f22:	2a09      	cmp	r2, #9
 8007f24:	d903      	bls.n	8007f2e <_vfiprintf_r+0x1ee>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0c5      	beq.n	8007eb6 <_vfiprintf_r+0x176>
 8007f2a:	9105      	str	r1, [sp, #20]
 8007f2c:	e7c3      	b.n	8007eb6 <_vfiprintf_r+0x176>
 8007f2e:	4604      	mov	r4, r0
 8007f30:	2301      	movs	r3, #1
 8007f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f36:	e7f0      	b.n	8007f1a <_vfiprintf_r+0x1da>
 8007f38:	ab03      	add	r3, sp, #12
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	462a      	mov	r2, r5
 8007f3e:	4630      	mov	r0, r6
 8007f40:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <_vfiprintf_r+0x25c>)
 8007f42:	a904      	add	r1, sp, #16
 8007f44:	f7fc f860 	bl	8004008 <_printf_float>
 8007f48:	4607      	mov	r7, r0
 8007f4a:	1c78      	adds	r0, r7, #1
 8007f4c:	d1d6      	bne.n	8007efc <_vfiprintf_r+0x1bc>
 8007f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f50:	07d9      	lsls	r1, r3, #31
 8007f52:	d405      	bmi.n	8007f60 <_vfiprintf_r+0x220>
 8007f54:	89ab      	ldrh	r3, [r5, #12]
 8007f56:	059a      	lsls	r2, r3, #22
 8007f58:	d402      	bmi.n	8007f60 <_vfiprintf_r+0x220>
 8007f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f5c:	f000 fad5 	bl	800850a <__retarget_lock_release_recursive>
 8007f60:	89ab      	ldrh	r3, [r5, #12]
 8007f62:	065b      	lsls	r3, r3, #25
 8007f64:	f53f af12 	bmi.w	8007d8c <_vfiprintf_r+0x4c>
 8007f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f6a:	e711      	b.n	8007d90 <_vfiprintf_r+0x50>
 8007f6c:	ab03      	add	r3, sp, #12
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	462a      	mov	r2, r5
 8007f72:	4630      	mov	r0, r6
 8007f74:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <_vfiprintf_r+0x25c>)
 8007f76:	a904      	add	r1, sp, #16
 8007f78:	f7fc fae2 	bl	8004540 <_printf_i>
 8007f7c:	e7e4      	b.n	8007f48 <_vfiprintf_r+0x208>
 8007f7e:	bf00      	nop
 8007f80:	08008da0 	.word	0x08008da0
 8007f84:	08008dc0 	.word	0x08008dc0
 8007f88:	08008d80 	.word	0x08008d80
 8007f8c:	08008d6c 	.word	0x08008d6c
 8007f90:	08008d72 	.word	0x08008d72
 8007f94:	08008d76 	.word	0x08008d76
 8007f98:	08004009 	.word	0x08004009
 8007f9c:	08007d1b 	.word	0x08007d1b

08007fa0 <nan>:
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	4901      	ldr	r1, [pc, #4]	; (8007fa8 <nan+0x8>)
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	7ff80000 	.word	0x7ff80000

08007fac <_sbrk_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	2300      	movs	r3, #0
 8007fb0:	4d05      	ldr	r5, [pc, #20]	; (8007fc8 <_sbrk_r+0x1c>)
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	f7f9 fd28 	bl	8001a0c <_sbrk>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_sbrk_r+0x1a>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_sbrk_r+0x1a>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	200005ac 	.word	0x200005ac

08007fcc <strncmp>:
 8007fcc:	4603      	mov	r3, r0
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	b172      	cbz	r2, 8007ff0 <strncmp+0x24>
 8007fd2:	3901      	subs	r1, #1
 8007fd4:	1884      	adds	r4, r0, r2
 8007fd6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007fda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007fde:	4290      	cmp	r0, r2
 8007fe0:	d101      	bne.n	8007fe6 <strncmp+0x1a>
 8007fe2:	42a3      	cmp	r3, r4
 8007fe4:	d101      	bne.n	8007fea <strncmp+0x1e>
 8007fe6:	1a80      	subs	r0, r0, r2
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d1f3      	bne.n	8007fd6 <strncmp+0xa>
 8007fee:	e7fa      	b.n	8007fe6 <strncmp+0x1a>
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	e7f9      	b.n	8007fe8 <strncmp+0x1c>

08007ff4 <__swbuf_r>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	460e      	mov	r6, r1
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	b118      	cbz	r0, 8008006 <__swbuf_r+0x12>
 8007ffe:	6983      	ldr	r3, [r0, #24]
 8008000:	b90b      	cbnz	r3, 8008006 <__swbuf_r+0x12>
 8008002:	f000 f9e3 	bl	80083cc <__sinit>
 8008006:	4b21      	ldr	r3, [pc, #132]	; (800808c <__swbuf_r+0x98>)
 8008008:	429c      	cmp	r4, r3
 800800a:	d12b      	bne.n	8008064 <__swbuf_r+0x70>
 800800c:	686c      	ldr	r4, [r5, #4]
 800800e:	69a3      	ldr	r3, [r4, #24]
 8008010:	60a3      	str	r3, [r4, #8]
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	071a      	lsls	r2, r3, #28
 8008016:	d52f      	bpl.n	8008078 <__swbuf_r+0x84>
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	b36b      	cbz	r3, 8008078 <__swbuf_r+0x84>
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	6820      	ldr	r0, [r4, #0]
 8008020:	b2f6      	uxtb	r6, r6
 8008022:	1ac0      	subs	r0, r0, r3
 8008024:	6963      	ldr	r3, [r4, #20]
 8008026:	4637      	mov	r7, r6
 8008028:	4283      	cmp	r3, r0
 800802a:	dc04      	bgt.n	8008036 <__swbuf_r+0x42>
 800802c:	4621      	mov	r1, r4
 800802e:	4628      	mov	r0, r5
 8008030:	f000 f938 	bl	80082a4 <_fflush_r>
 8008034:	bb30      	cbnz	r0, 8008084 <__swbuf_r+0x90>
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	3001      	adds	r0, #1
 800803a:	3b01      	subs	r3, #1
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	6022      	str	r2, [r4, #0]
 8008044:	701e      	strb	r6, [r3, #0]
 8008046:	6963      	ldr	r3, [r4, #20]
 8008048:	4283      	cmp	r3, r0
 800804a:	d004      	beq.n	8008056 <__swbuf_r+0x62>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	07db      	lsls	r3, r3, #31
 8008050:	d506      	bpl.n	8008060 <__swbuf_r+0x6c>
 8008052:	2e0a      	cmp	r6, #10
 8008054:	d104      	bne.n	8008060 <__swbuf_r+0x6c>
 8008056:	4621      	mov	r1, r4
 8008058:	4628      	mov	r0, r5
 800805a:	f000 f923 	bl	80082a4 <_fflush_r>
 800805e:	b988      	cbnz	r0, 8008084 <__swbuf_r+0x90>
 8008060:	4638      	mov	r0, r7
 8008062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <__swbuf_r+0x9c>)
 8008066:	429c      	cmp	r4, r3
 8008068:	d101      	bne.n	800806e <__swbuf_r+0x7a>
 800806a:	68ac      	ldr	r4, [r5, #8]
 800806c:	e7cf      	b.n	800800e <__swbuf_r+0x1a>
 800806e:	4b09      	ldr	r3, [pc, #36]	; (8008094 <__swbuf_r+0xa0>)
 8008070:	429c      	cmp	r4, r3
 8008072:	bf08      	it	eq
 8008074:	68ec      	ldreq	r4, [r5, #12]
 8008076:	e7ca      	b.n	800800e <__swbuf_r+0x1a>
 8008078:	4621      	mov	r1, r4
 800807a:	4628      	mov	r0, r5
 800807c:	f000 f81a 	bl	80080b4 <__swsetup_r>
 8008080:	2800      	cmp	r0, #0
 8008082:	d0cb      	beq.n	800801c <__swbuf_r+0x28>
 8008084:	f04f 37ff 	mov.w	r7, #4294967295
 8008088:	e7ea      	b.n	8008060 <__swbuf_r+0x6c>
 800808a:	bf00      	nop
 800808c:	08008da0 	.word	0x08008da0
 8008090:	08008dc0 	.word	0x08008dc0
 8008094:	08008d80 	.word	0x08008d80

08008098 <__ascii_wctomb>:
 8008098:	4603      	mov	r3, r0
 800809a:	4608      	mov	r0, r1
 800809c:	b141      	cbz	r1, 80080b0 <__ascii_wctomb+0x18>
 800809e:	2aff      	cmp	r2, #255	; 0xff
 80080a0:	d904      	bls.n	80080ac <__ascii_wctomb+0x14>
 80080a2:	228a      	movs	r2, #138	; 0x8a
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	4770      	bx	lr
 80080ac:	2001      	movs	r0, #1
 80080ae:	700a      	strb	r2, [r1, #0]
 80080b0:	4770      	bx	lr
	...

080080b4 <__swsetup_r>:
 80080b4:	4b32      	ldr	r3, [pc, #200]	; (8008180 <__swsetup_r+0xcc>)
 80080b6:	b570      	push	{r4, r5, r6, lr}
 80080b8:	681d      	ldr	r5, [r3, #0]
 80080ba:	4606      	mov	r6, r0
 80080bc:	460c      	mov	r4, r1
 80080be:	b125      	cbz	r5, 80080ca <__swsetup_r+0x16>
 80080c0:	69ab      	ldr	r3, [r5, #24]
 80080c2:	b913      	cbnz	r3, 80080ca <__swsetup_r+0x16>
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 f981 	bl	80083cc <__sinit>
 80080ca:	4b2e      	ldr	r3, [pc, #184]	; (8008184 <__swsetup_r+0xd0>)
 80080cc:	429c      	cmp	r4, r3
 80080ce:	d10f      	bne.n	80080f0 <__swsetup_r+0x3c>
 80080d0:	686c      	ldr	r4, [r5, #4]
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080d8:	0719      	lsls	r1, r3, #28
 80080da:	d42c      	bmi.n	8008136 <__swsetup_r+0x82>
 80080dc:	06dd      	lsls	r5, r3, #27
 80080de:	d411      	bmi.n	8008104 <__swsetup_r+0x50>
 80080e0:	2309      	movs	r3, #9
 80080e2:	6033      	str	r3, [r6, #0]
 80080e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	e03e      	b.n	800816e <__swsetup_r+0xba>
 80080f0:	4b25      	ldr	r3, [pc, #148]	; (8008188 <__swsetup_r+0xd4>)
 80080f2:	429c      	cmp	r4, r3
 80080f4:	d101      	bne.n	80080fa <__swsetup_r+0x46>
 80080f6:	68ac      	ldr	r4, [r5, #8]
 80080f8:	e7eb      	b.n	80080d2 <__swsetup_r+0x1e>
 80080fa:	4b24      	ldr	r3, [pc, #144]	; (800818c <__swsetup_r+0xd8>)
 80080fc:	429c      	cmp	r4, r3
 80080fe:	bf08      	it	eq
 8008100:	68ec      	ldreq	r4, [r5, #12]
 8008102:	e7e6      	b.n	80080d2 <__swsetup_r+0x1e>
 8008104:	0758      	lsls	r0, r3, #29
 8008106:	d512      	bpl.n	800812e <__swsetup_r+0x7a>
 8008108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800810a:	b141      	cbz	r1, 800811e <__swsetup_r+0x6a>
 800810c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008110:	4299      	cmp	r1, r3
 8008112:	d002      	beq.n	800811a <__swsetup_r+0x66>
 8008114:	4630      	mov	r0, r6
 8008116:	f7ff fbb3 	bl	8007880 <_free_r>
 800811a:	2300      	movs	r3, #0
 800811c:	6363      	str	r3, [r4, #52]	; 0x34
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008124:	81a3      	strh	r3, [r4, #12]
 8008126:	2300      	movs	r3, #0
 8008128:	6063      	str	r3, [r4, #4]
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	f043 0308 	orr.w	r3, r3, #8
 8008134:	81a3      	strh	r3, [r4, #12]
 8008136:	6923      	ldr	r3, [r4, #16]
 8008138:	b94b      	cbnz	r3, 800814e <__swsetup_r+0x9a>
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008144:	d003      	beq.n	800814e <__swsetup_r+0x9a>
 8008146:	4621      	mov	r1, r4
 8008148:	4630      	mov	r0, r6
 800814a:	f000 fa05 	bl	8008558 <__smakebuf_r>
 800814e:	89a0      	ldrh	r0, [r4, #12]
 8008150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008154:	f010 0301 	ands.w	r3, r0, #1
 8008158:	d00a      	beq.n	8008170 <__swsetup_r+0xbc>
 800815a:	2300      	movs	r3, #0
 800815c:	60a3      	str	r3, [r4, #8]
 800815e:	6963      	ldr	r3, [r4, #20]
 8008160:	425b      	negs	r3, r3
 8008162:	61a3      	str	r3, [r4, #24]
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	b943      	cbnz	r3, 800817a <__swsetup_r+0xc6>
 8008168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800816c:	d1ba      	bne.n	80080e4 <__swsetup_r+0x30>
 800816e:	bd70      	pop	{r4, r5, r6, pc}
 8008170:	0781      	lsls	r1, r0, #30
 8008172:	bf58      	it	pl
 8008174:	6963      	ldrpl	r3, [r4, #20]
 8008176:	60a3      	str	r3, [r4, #8]
 8008178:	e7f4      	b.n	8008164 <__swsetup_r+0xb0>
 800817a:	2000      	movs	r0, #0
 800817c:	e7f7      	b.n	800816e <__swsetup_r+0xba>
 800817e:	bf00      	nop
 8008180:	2000000c 	.word	0x2000000c
 8008184:	08008da0 	.word	0x08008da0
 8008188:	08008dc0 	.word	0x08008dc0
 800818c:	08008d80 	.word	0x08008d80

08008190 <abort>:
 8008190:	2006      	movs	r0, #6
 8008192:	b508      	push	{r3, lr}
 8008194:	f000 fa9e 	bl	80086d4 <raise>
 8008198:	2001      	movs	r0, #1
 800819a:	f7f9 fc09 	bl	80019b0 <_exit>
	...

080081a0 <__sflush_r>:
 80081a0:	898a      	ldrh	r2, [r1, #12]
 80081a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a4:	4605      	mov	r5, r0
 80081a6:	0710      	lsls	r0, r2, #28
 80081a8:	460c      	mov	r4, r1
 80081aa:	d457      	bmi.n	800825c <__sflush_r+0xbc>
 80081ac:	684b      	ldr	r3, [r1, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dc04      	bgt.n	80081bc <__sflush_r+0x1c>
 80081b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dc01      	bgt.n	80081bc <__sflush_r+0x1c>
 80081b8:	2000      	movs	r0, #0
 80081ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081be:	2e00      	cmp	r6, #0
 80081c0:	d0fa      	beq.n	80081b8 <__sflush_r+0x18>
 80081c2:	2300      	movs	r3, #0
 80081c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081c8:	682f      	ldr	r7, [r5, #0]
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	d032      	beq.n	8008234 <__sflush_r+0x94>
 80081ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	075a      	lsls	r2, r3, #29
 80081d4:	d505      	bpl.n	80081e2 <__sflush_r+0x42>
 80081d6:	6863      	ldr	r3, [r4, #4]
 80081d8:	1ac0      	subs	r0, r0, r3
 80081da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081dc:	b10b      	cbz	r3, 80081e2 <__sflush_r+0x42>
 80081de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081e0:	1ac0      	subs	r0, r0, r3
 80081e2:	2300      	movs	r3, #0
 80081e4:	4602      	mov	r2, r0
 80081e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081e8:	4628      	mov	r0, r5
 80081ea:	6a21      	ldr	r1, [r4, #32]
 80081ec:	47b0      	blx	r6
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	d106      	bne.n	8008202 <__sflush_r+0x62>
 80081f4:	6829      	ldr	r1, [r5, #0]
 80081f6:	291d      	cmp	r1, #29
 80081f8:	d82c      	bhi.n	8008254 <__sflush_r+0xb4>
 80081fa:	4a29      	ldr	r2, [pc, #164]	; (80082a0 <__sflush_r+0x100>)
 80081fc:	40ca      	lsrs	r2, r1
 80081fe:	07d6      	lsls	r6, r2, #31
 8008200:	d528      	bpl.n	8008254 <__sflush_r+0xb4>
 8008202:	2200      	movs	r2, #0
 8008204:	6062      	str	r2, [r4, #4]
 8008206:	6922      	ldr	r2, [r4, #16]
 8008208:	04d9      	lsls	r1, r3, #19
 800820a:	6022      	str	r2, [r4, #0]
 800820c:	d504      	bpl.n	8008218 <__sflush_r+0x78>
 800820e:	1c42      	adds	r2, r0, #1
 8008210:	d101      	bne.n	8008216 <__sflush_r+0x76>
 8008212:	682b      	ldr	r3, [r5, #0]
 8008214:	b903      	cbnz	r3, 8008218 <__sflush_r+0x78>
 8008216:	6560      	str	r0, [r4, #84]	; 0x54
 8008218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800821a:	602f      	str	r7, [r5, #0]
 800821c:	2900      	cmp	r1, #0
 800821e:	d0cb      	beq.n	80081b8 <__sflush_r+0x18>
 8008220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008224:	4299      	cmp	r1, r3
 8008226:	d002      	beq.n	800822e <__sflush_r+0x8e>
 8008228:	4628      	mov	r0, r5
 800822a:	f7ff fb29 	bl	8007880 <_free_r>
 800822e:	2000      	movs	r0, #0
 8008230:	6360      	str	r0, [r4, #52]	; 0x34
 8008232:	e7c2      	b.n	80081ba <__sflush_r+0x1a>
 8008234:	6a21      	ldr	r1, [r4, #32]
 8008236:	2301      	movs	r3, #1
 8008238:	4628      	mov	r0, r5
 800823a:	47b0      	blx	r6
 800823c:	1c41      	adds	r1, r0, #1
 800823e:	d1c7      	bne.n	80081d0 <__sflush_r+0x30>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0c4      	beq.n	80081d0 <__sflush_r+0x30>
 8008246:	2b1d      	cmp	r3, #29
 8008248:	d001      	beq.n	800824e <__sflush_r+0xae>
 800824a:	2b16      	cmp	r3, #22
 800824c:	d101      	bne.n	8008252 <__sflush_r+0xb2>
 800824e:	602f      	str	r7, [r5, #0]
 8008250:	e7b2      	b.n	80081b8 <__sflush_r+0x18>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	e7ae      	b.n	80081ba <__sflush_r+0x1a>
 800825c:	690f      	ldr	r7, [r1, #16]
 800825e:	2f00      	cmp	r7, #0
 8008260:	d0aa      	beq.n	80081b8 <__sflush_r+0x18>
 8008262:	0793      	lsls	r3, r2, #30
 8008264:	bf18      	it	ne
 8008266:	2300      	movne	r3, #0
 8008268:	680e      	ldr	r6, [r1, #0]
 800826a:	bf08      	it	eq
 800826c:	694b      	ldreq	r3, [r1, #20]
 800826e:	1bf6      	subs	r6, r6, r7
 8008270:	600f      	str	r7, [r1, #0]
 8008272:	608b      	str	r3, [r1, #8]
 8008274:	2e00      	cmp	r6, #0
 8008276:	dd9f      	ble.n	80081b8 <__sflush_r+0x18>
 8008278:	4633      	mov	r3, r6
 800827a:	463a      	mov	r2, r7
 800827c:	4628      	mov	r0, r5
 800827e:	6a21      	ldr	r1, [r4, #32]
 8008280:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008284:	47e0      	blx	ip
 8008286:	2800      	cmp	r0, #0
 8008288:	dc06      	bgt.n	8008298 <__sflush_r+0xf8>
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008294:	81a3      	strh	r3, [r4, #12]
 8008296:	e790      	b.n	80081ba <__sflush_r+0x1a>
 8008298:	4407      	add	r7, r0
 800829a:	1a36      	subs	r6, r6, r0
 800829c:	e7ea      	b.n	8008274 <__sflush_r+0xd4>
 800829e:	bf00      	nop
 80082a0:	20400001 	.word	0x20400001

080082a4 <_fflush_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	690b      	ldr	r3, [r1, #16]
 80082a8:	4605      	mov	r5, r0
 80082aa:	460c      	mov	r4, r1
 80082ac:	b913      	cbnz	r3, 80082b4 <_fflush_r+0x10>
 80082ae:	2500      	movs	r5, #0
 80082b0:	4628      	mov	r0, r5
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	b118      	cbz	r0, 80082be <_fflush_r+0x1a>
 80082b6:	6983      	ldr	r3, [r0, #24]
 80082b8:	b90b      	cbnz	r3, 80082be <_fflush_r+0x1a>
 80082ba:	f000 f887 	bl	80083cc <__sinit>
 80082be:	4b14      	ldr	r3, [pc, #80]	; (8008310 <_fflush_r+0x6c>)
 80082c0:	429c      	cmp	r4, r3
 80082c2:	d11b      	bne.n	80082fc <_fflush_r+0x58>
 80082c4:	686c      	ldr	r4, [r5, #4]
 80082c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0ef      	beq.n	80082ae <_fflush_r+0xa>
 80082ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082d0:	07d0      	lsls	r0, r2, #31
 80082d2:	d404      	bmi.n	80082de <_fflush_r+0x3a>
 80082d4:	0599      	lsls	r1, r3, #22
 80082d6:	d402      	bmi.n	80082de <_fflush_r+0x3a>
 80082d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082da:	f000 f915 	bl	8008508 <__retarget_lock_acquire_recursive>
 80082de:	4628      	mov	r0, r5
 80082e0:	4621      	mov	r1, r4
 80082e2:	f7ff ff5d 	bl	80081a0 <__sflush_r>
 80082e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082e8:	4605      	mov	r5, r0
 80082ea:	07da      	lsls	r2, r3, #31
 80082ec:	d4e0      	bmi.n	80082b0 <_fflush_r+0xc>
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	059b      	lsls	r3, r3, #22
 80082f2:	d4dd      	bmi.n	80082b0 <_fflush_r+0xc>
 80082f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082f6:	f000 f908 	bl	800850a <__retarget_lock_release_recursive>
 80082fa:	e7d9      	b.n	80082b0 <_fflush_r+0xc>
 80082fc:	4b05      	ldr	r3, [pc, #20]	; (8008314 <_fflush_r+0x70>)
 80082fe:	429c      	cmp	r4, r3
 8008300:	d101      	bne.n	8008306 <_fflush_r+0x62>
 8008302:	68ac      	ldr	r4, [r5, #8]
 8008304:	e7df      	b.n	80082c6 <_fflush_r+0x22>
 8008306:	4b04      	ldr	r3, [pc, #16]	; (8008318 <_fflush_r+0x74>)
 8008308:	429c      	cmp	r4, r3
 800830a:	bf08      	it	eq
 800830c:	68ec      	ldreq	r4, [r5, #12]
 800830e:	e7da      	b.n	80082c6 <_fflush_r+0x22>
 8008310:	08008da0 	.word	0x08008da0
 8008314:	08008dc0 	.word	0x08008dc0
 8008318:	08008d80 	.word	0x08008d80

0800831c <std>:
 800831c:	2300      	movs	r3, #0
 800831e:	b510      	push	{r4, lr}
 8008320:	4604      	mov	r4, r0
 8008322:	e9c0 3300 	strd	r3, r3, [r0]
 8008326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800832a:	6083      	str	r3, [r0, #8]
 800832c:	8181      	strh	r1, [r0, #12]
 800832e:	6643      	str	r3, [r0, #100]	; 0x64
 8008330:	81c2      	strh	r2, [r0, #14]
 8008332:	6183      	str	r3, [r0, #24]
 8008334:	4619      	mov	r1, r3
 8008336:	2208      	movs	r2, #8
 8008338:	305c      	adds	r0, #92	; 0x5c
 800833a:	f7fb fdbf 	bl	8003ebc <memset>
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <std+0x38>)
 8008340:	6224      	str	r4, [r4, #32]
 8008342:	6263      	str	r3, [r4, #36]	; 0x24
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <std+0x3c>)
 8008346:	62a3      	str	r3, [r4, #40]	; 0x28
 8008348:	4b04      	ldr	r3, [pc, #16]	; (800835c <std+0x40>)
 800834a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800834c:	4b04      	ldr	r3, [pc, #16]	; (8008360 <std+0x44>)
 800834e:	6323      	str	r3, [r4, #48]	; 0x30
 8008350:	bd10      	pop	{r4, pc}
 8008352:	bf00      	nop
 8008354:	0800870d 	.word	0x0800870d
 8008358:	0800872f 	.word	0x0800872f
 800835c:	08008767 	.word	0x08008767
 8008360:	0800878b 	.word	0x0800878b

08008364 <_cleanup_r>:
 8008364:	4901      	ldr	r1, [pc, #4]	; (800836c <_cleanup_r+0x8>)
 8008366:	f000 b8af 	b.w	80084c8 <_fwalk_reent>
 800836a:	bf00      	nop
 800836c:	080082a5 	.word	0x080082a5

08008370 <__sfmoreglue>:
 8008370:	2268      	movs	r2, #104	; 0x68
 8008372:	b570      	push	{r4, r5, r6, lr}
 8008374:	1e4d      	subs	r5, r1, #1
 8008376:	4355      	muls	r5, r2
 8008378:	460e      	mov	r6, r1
 800837a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800837e:	f7ff fae7 	bl	8007950 <_malloc_r>
 8008382:	4604      	mov	r4, r0
 8008384:	b140      	cbz	r0, 8008398 <__sfmoreglue+0x28>
 8008386:	2100      	movs	r1, #0
 8008388:	e9c0 1600 	strd	r1, r6, [r0]
 800838c:	300c      	adds	r0, #12
 800838e:	60a0      	str	r0, [r4, #8]
 8008390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008394:	f7fb fd92 	bl	8003ebc <memset>
 8008398:	4620      	mov	r0, r4
 800839a:	bd70      	pop	{r4, r5, r6, pc}

0800839c <__sfp_lock_acquire>:
 800839c:	4801      	ldr	r0, [pc, #4]	; (80083a4 <__sfp_lock_acquire+0x8>)
 800839e:	f000 b8b3 	b.w	8008508 <__retarget_lock_acquire_recursive>
 80083a2:	bf00      	nop
 80083a4:	200005a9 	.word	0x200005a9

080083a8 <__sfp_lock_release>:
 80083a8:	4801      	ldr	r0, [pc, #4]	; (80083b0 <__sfp_lock_release+0x8>)
 80083aa:	f000 b8ae 	b.w	800850a <__retarget_lock_release_recursive>
 80083ae:	bf00      	nop
 80083b0:	200005a9 	.word	0x200005a9

080083b4 <__sinit_lock_acquire>:
 80083b4:	4801      	ldr	r0, [pc, #4]	; (80083bc <__sinit_lock_acquire+0x8>)
 80083b6:	f000 b8a7 	b.w	8008508 <__retarget_lock_acquire_recursive>
 80083ba:	bf00      	nop
 80083bc:	200005aa 	.word	0x200005aa

080083c0 <__sinit_lock_release>:
 80083c0:	4801      	ldr	r0, [pc, #4]	; (80083c8 <__sinit_lock_release+0x8>)
 80083c2:	f000 b8a2 	b.w	800850a <__retarget_lock_release_recursive>
 80083c6:	bf00      	nop
 80083c8:	200005aa 	.word	0x200005aa

080083cc <__sinit>:
 80083cc:	b510      	push	{r4, lr}
 80083ce:	4604      	mov	r4, r0
 80083d0:	f7ff fff0 	bl	80083b4 <__sinit_lock_acquire>
 80083d4:	69a3      	ldr	r3, [r4, #24]
 80083d6:	b11b      	cbz	r3, 80083e0 <__sinit+0x14>
 80083d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083dc:	f7ff bff0 	b.w	80083c0 <__sinit_lock_release>
 80083e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083e4:	6523      	str	r3, [r4, #80]	; 0x50
 80083e6:	4b13      	ldr	r3, [pc, #76]	; (8008434 <__sinit+0x68>)
 80083e8:	4a13      	ldr	r2, [pc, #76]	; (8008438 <__sinit+0x6c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80083ee:	42a3      	cmp	r3, r4
 80083f0:	bf08      	it	eq
 80083f2:	2301      	moveq	r3, #1
 80083f4:	4620      	mov	r0, r4
 80083f6:	bf08      	it	eq
 80083f8:	61a3      	streq	r3, [r4, #24]
 80083fa:	f000 f81f 	bl	800843c <__sfp>
 80083fe:	6060      	str	r0, [r4, #4]
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f81b 	bl	800843c <__sfp>
 8008406:	60a0      	str	r0, [r4, #8]
 8008408:	4620      	mov	r0, r4
 800840a:	f000 f817 	bl	800843c <__sfp>
 800840e:	2200      	movs	r2, #0
 8008410:	2104      	movs	r1, #4
 8008412:	60e0      	str	r0, [r4, #12]
 8008414:	6860      	ldr	r0, [r4, #4]
 8008416:	f7ff ff81 	bl	800831c <std>
 800841a:	2201      	movs	r2, #1
 800841c:	2109      	movs	r1, #9
 800841e:	68a0      	ldr	r0, [r4, #8]
 8008420:	f7ff ff7c 	bl	800831c <std>
 8008424:	2202      	movs	r2, #2
 8008426:	2112      	movs	r1, #18
 8008428:	68e0      	ldr	r0, [r4, #12]
 800842a:	f7ff ff77 	bl	800831c <std>
 800842e:	2301      	movs	r3, #1
 8008430:	61a3      	str	r3, [r4, #24]
 8008432:	e7d1      	b.n	80083d8 <__sinit+0xc>
 8008434:	080088dc 	.word	0x080088dc
 8008438:	08008365 	.word	0x08008365

0800843c <__sfp>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	4607      	mov	r7, r0
 8008440:	f7ff ffac 	bl	800839c <__sfp_lock_acquire>
 8008444:	4b1e      	ldr	r3, [pc, #120]	; (80084c0 <__sfp+0x84>)
 8008446:	681e      	ldr	r6, [r3, #0]
 8008448:	69b3      	ldr	r3, [r6, #24]
 800844a:	b913      	cbnz	r3, 8008452 <__sfp+0x16>
 800844c:	4630      	mov	r0, r6
 800844e:	f7ff ffbd 	bl	80083cc <__sinit>
 8008452:	3648      	adds	r6, #72	; 0x48
 8008454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008458:	3b01      	subs	r3, #1
 800845a:	d503      	bpl.n	8008464 <__sfp+0x28>
 800845c:	6833      	ldr	r3, [r6, #0]
 800845e:	b30b      	cbz	r3, 80084a4 <__sfp+0x68>
 8008460:	6836      	ldr	r6, [r6, #0]
 8008462:	e7f7      	b.n	8008454 <__sfp+0x18>
 8008464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008468:	b9d5      	cbnz	r5, 80084a0 <__sfp+0x64>
 800846a:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <__sfp+0x88>)
 800846c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008470:	60e3      	str	r3, [r4, #12]
 8008472:	6665      	str	r5, [r4, #100]	; 0x64
 8008474:	f000 f847 	bl	8008506 <__retarget_lock_init_recursive>
 8008478:	f7ff ff96 	bl	80083a8 <__sfp_lock_release>
 800847c:	2208      	movs	r2, #8
 800847e:	4629      	mov	r1, r5
 8008480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008488:	6025      	str	r5, [r4, #0]
 800848a:	61a5      	str	r5, [r4, #24]
 800848c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008490:	f7fb fd14 	bl	8003ebc <memset>
 8008494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800849c:	4620      	mov	r0, r4
 800849e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a0:	3468      	adds	r4, #104	; 0x68
 80084a2:	e7d9      	b.n	8008458 <__sfp+0x1c>
 80084a4:	2104      	movs	r1, #4
 80084a6:	4638      	mov	r0, r7
 80084a8:	f7ff ff62 	bl	8008370 <__sfmoreglue>
 80084ac:	4604      	mov	r4, r0
 80084ae:	6030      	str	r0, [r6, #0]
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d1d5      	bne.n	8008460 <__sfp+0x24>
 80084b4:	f7ff ff78 	bl	80083a8 <__sfp_lock_release>
 80084b8:	230c      	movs	r3, #12
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	e7ee      	b.n	800849c <__sfp+0x60>
 80084be:	bf00      	nop
 80084c0:	080088dc 	.word	0x080088dc
 80084c4:	ffff0001 	.word	0xffff0001

080084c8 <_fwalk_reent>:
 80084c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084cc:	4606      	mov	r6, r0
 80084ce:	4688      	mov	r8, r1
 80084d0:	2700      	movs	r7, #0
 80084d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084da:	f1b9 0901 	subs.w	r9, r9, #1
 80084de:	d505      	bpl.n	80084ec <_fwalk_reent+0x24>
 80084e0:	6824      	ldr	r4, [r4, #0]
 80084e2:	2c00      	cmp	r4, #0
 80084e4:	d1f7      	bne.n	80084d6 <_fwalk_reent+0xe>
 80084e6:	4638      	mov	r0, r7
 80084e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ec:	89ab      	ldrh	r3, [r5, #12]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d907      	bls.n	8008502 <_fwalk_reent+0x3a>
 80084f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084f6:	3301      	adds	r3, #1
 80084f8:	d003      	beq.n	8008502 <_fwalk_reent+0x3a>
 80084fa:	4629      	mov	r1, r5
 80084fc:	4630      	mov	r0, r6
 80084fe:	47c0      	blx	r8
 8008500:	4307      	orrs	r7, r0
 8008502:	3568      	adds	r5, #104	; 0x68
 8008504:	e7e9      	b.n	80084da <_fwalk_reent+0x12>

08008506 <__retarget_lock_init_recursive>:
 8008506:	4770      	bx	lr

08008508 <__retarget_lock_acquire_recursive>:
 8008508:	4770      	bx	lr

0800850a <__retarget_lock_release_recursive>:
 800850a:	4770      	bx	lr

0800850c <__swhatbuf_r>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	460e      	mov	r6, r1
 8008510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008514:	4614      	mov	r4, r2
 8008516:	2900      	cmp	r1, #0
 8008518:	461d      	mov	r5, r3
 800851a:	b096      	sub	sp, #88	; 0x58
 800851c:	da08      	bge.n	8008530 <__swhatbuf_r+0x24>
 800851e:	2200      	movs	r2, #0
 8008520:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008524:	602a      	str	r2, [r5, #0]
 8008526:	061a      	lsls	r2, r3, #24
 8008528:	d410      	bmi.n	800854c <__swhatbuf_r+0x40>
 800852a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800852e:	e00e      	b.n	800854e <__swhatbuf_r+0x42>
 8008530:	466a      	mov	r2, sp
 8008532:	f000 f951 	bl	80087d8 <_fstat_r>
 8008536:	2800      	cmp	r0, #0
 8008538:	dbf1      	blt.n	800851e <__swhatbuf_r+0x12>
 800853a:	9a01      	ldr	r2, [sp, #4]
 800853c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008540:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008544:	425a      	negs	r2, r3
 8008546:	415a      	adcs	r2, r3
 8008548:	602a      	str	r2, [r5, #0]
 800854a:	e7ee      	b.n	800852a <__swhatbuf_r+0x1e>
 800854c:	2340      	movs	r3, #64	; 0x40
 800854e:	2000      	movs	r0, #0
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	b016      	add	sp, #88	; 0x58
 8008554:	bd70      	pop	{r4, r5, r6, pc}
	...

08008558 <__smakebuf_r>:
 8008558:	898b      	ldrh	r3, [r1, #12]
 800855a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800855c:	079d      	lsls	r5, r3, #30
 800855e:	4606      	mov	r6, r0
 8008560:	460c      	mov	r4, r1
 8008562:	d507      	bpl.n	8008574 <__smakebuf_r+0x1c>
 8008564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	6123      	str	r3, [r4, #16]
 800856c:	2301      	movs	r3, #1
 800856e:	6163      	str	r3, [r4, #20]
 8008570:	b002      	add	sp, #8
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	466a      	mov	r2, sp
 8008576:	ab01      	add	r3, sp, #4
 8008578:	f7ff ffc8 	bl	800850c <__swhatbuf_r>
 800857c:	9900      	ldr	r1, [sp, #0]
 800857e:	4605      	mov	r5, r0
 8008580:	4630      	mov	r0, r6
 8008582:	f7ff f9e5 	bl	8007950 <_malloc_r>
 8008586:	b948      	cbnz	r0, 800859c <__smakebuf_r+0x44>
 8008588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800858c:	059a      	lsls	r2, r3, #22
 800858e:	d4ef      	bmi.n	8008570 <__smakebuf_r+0x18>
 8008590:	f023 0303 	bic.w	r3, r3, #3
 8008594:	f043 0302 	orr.w	r3, r3, #2
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	e7e3      	b.n	8008564 <__smakebuf_r+0xc>
 800859c:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <__smakebuf_r+0x7c>)
 800859e:	62b3      	str	r3, [r6, #40]	; 0x28
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	6020      	str	r0, [r4, #0]
 80085a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	9b00      	ldr	r3, [sp, #0]
 80085ac:	6120      	str	r0, [r4, #16]
 80085ae:	6163      	str	r3, [r4, #20]
 80085b0:	9b01      	ldr	r3, [sp, #4]
 80085b2:	b15b      	cbz	r3, 80085cc <__smakebuf_r+0x74>
 80085b4:	4630      	mov	r0, r6
 80085b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ba:	f000 f91f 	bl	80087fc <_isatty_r>
 80085be:	b128      	cbz	r0, 80085cc <__smakebuf_r+0x74>
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	f023 0303 	bic.w	r3, r3, #3
 80085c6:	f043 0301 	orr.w	r3, r3, #1
 80085ca:	81a3      	strh	r3, [r4, #12]
 80085cc:	89a0      	ldrh	r0, [r4, #12]
 80085ce:	4305      	orrs	r5, r0
 80085d0:	81a5      	strh	r5, [r4, #12]
 80085d2:	e7cd      	b.n	8008570 <__smakebuf_r+0x18>
 80085d4:	08008365 	.word	0x08008365

080085d8 <memmove>:
 80085d8:	4288      	cmp	r0, r1
 80085da:	b510      	push	{r4, lr}
 80085dc:	eb01 0402 	add.w	r4, r1, r2
 80085e0:	d902      	bls.n	80085e8 <memmove+0x10>
 80085e2:	4284      	cmp	r4, r0
 80085e4:	4623      	mov	r3, r4
 80085e6:	d807      	bhi.n	80085f8 <memmove+0x20>
 80085e8:	1e43      	subs	r3, r0, #1
 80085ea:	42a1      	cmp	r1, r4
 80085ec:	d008      	beq.n	8008600 <memmove+0x28>
 80085ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085f6:	e7f8      	b.n	80085ea <memmove+0x12>
 80085f8:	4601      	mov	r1, r0
 80085fa:	4402      	add	r2, r0
 80085fc:	428a      	cmp	r2, r1
 80085fe:	d100      	bne.n	8008602 <memmove+0x2a>
 8008600:	bd10      	pop	{r4, pc}
 8008602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800860a:	e7f7      	b.n	80085fc <memmove+0x24>

0800860c <__malloc_lock>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__malloc_lock+0x8>)
 800860e:	f7ff bf7b 	b.w	8008508 <__retarget_lock_acquire_recursive>
 8008612:	bf00      	nop
 8008614:	200005a8 	.word	0x200005a8

08008618 <__malloc_unlock>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__malloc_unlock+0x8>)
 800861a:	f7ff bf76 	b.w	800850a <__retarget_lock_release_recursive>
 800861e:	bf00      	nop
 8008620:	200005a8 	.word	0x200005a8

08008624 <_realloc_r>:
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008628:	4680      	mov	r8, r0
 800862a:	4614      	mov	r4, r2
 800862c:	460e      	mov	r6, r1
 800862e:	b921      	cbnz	r1, 800863a <_realloc_r+0x16>
 8008630:	4611      	mov	r1, r2
 8008632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008636:	f7ff b98b 	b.w	8007950 <_malloc_r>
 800863a:	b92a      	cbnz	r2, 8008648 <_realloc_r+0x24>
 800863c:	f7ff f920 	bl	8007880 <_free_r>
 8008640:	4625      	mov	r5, r4
 8008642:	4628      	mov	r0, r5
 8008644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008648:	f000 f8fa 	bl	8008840 <_malloc_usable_size_r>
 800864c:	4284      	cmp	r4, r0
 800864e:	4607      	mov	r7, r0
 8008650:	d802      	bhi.n	8008658 <_realloc_r+0x34>
 8008652:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008656:	d812      	bhi.n	800867e <_realloc_r+0x5a>
 8008658:	4621      	mov	r1, r4
 800865a:	4640      	mov	r0, r8
 800865c:	f7ff f978 	bl	8007950 <_malloc_r>
 8008660:	4605      	mov	r5, r0
 8008662:	2800      	cmp	r0, #0
 8008664:	d0ed      	beq.n	8008642 <_realloc_r+0x1e>
 8008666:	42bc      	cmp	r4, r7
 8008668:	4622      	mov	r2, r4
 800866a:	4631      	mov	r1, r6
 800866c:	bf28      	it	cs
 800866e:	463a      	movcs	r2, r7
 8008670:	f7fe fc2c 	bl	8006ecc <memcpy>
 8008674:	4631      	mov	r1, r6
 8008676:	4640      	mov	r0, r8
 8008678:	f7ff f902 	bl	8007880 <_free_r>
 800867c:	e7e1      	b.n	8008642 <_realloc_r+0x1e>
 800867e:	4635      	mov	r5, r6
 8008680:	e7df      	b.n	8008642 <_realloc_r+0x1e>

08008682 <_raise_r>:
 8008682:	291f      	cmp	r1, #31
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4604      	mov	r4, r0
 8008688:	460d      	mov	r5, r1
 800868a:	d904      	bls.n	8008696 <_raise_r+0x14>
 800868c:	2316      	movs	r3, #22
 800868e:	6003      	str	r3, [r0, #0]
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	bd38      	pop	{r3, r4, r5, pc}
 8008696:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008698:	b112      	cbz	r2, 80086a0 <_raise_r+0x1e>
 800869a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800869e:	b94b      	cbnz	r3, 80086b4 <_raise_r+0x32>
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 f831 	bl	8008708 <_getpid_r>
 80086a6:	462a      	mov	r2, r5
 80086a8:	4601      	mov	r1, r0
 80086aa:	4620      	mov	r0, r4
 80086ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086b0:	f000 b818 	b.w	80086e4 <_kill_r>
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d00a      	beq.n	80086ce <_raise_r+0x4c>
 80086b8:	1c59      	adds	r1, r3, #1
 80086ba:	d103      	bne.n	80086c4 <_raise_r+0x42>
 80086bc:	2316      	movs	r3, #22
 80086be:	6003      	str	r3, [r0, #0]
 80086c0:	2001      	movs	r0, #1
 80086c2:	e7e7      	b.n	8008694 <_raise_r+0x12>
 80086c4:	2400      	movs	r4, #0
 80086c6:	4628      	mov	r0, r5
 80086c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086cc:	4798      	blx	r3
 80086ce:	2000      	movs	r0, #0
 80086d0:	e7e0      	b.n	8008694 <_raise_r+0x12>
	...

080086d4 <raise>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <raise+0xc>)
 80086d6:	4601      	mov	r1, r0
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	f7ff bfd2 	b.w	8008682 <_raise_r>
 80086de:	bf00      	nop
 80086e0:	2000000c 	.word	0x2000000c

080086e4 <_kill_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	2300      	movs	r3, #0
 80086e8:	4d06      	ldr	r5, [pc, #24]	; (8008704 <_kill_r+0x20>)
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	4611      	mov	r1, r2
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	f7f9 f955 	bl	80019a0 <_kill>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	d102      	bne.n	8008700 <_kill_r+0x1c>
 80086fa:	682b      	ldr	r3, [r5, #0]
 80086fc:	b103      	cbz	r3, 8008700 <_kill_r+0x1c>
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	200005ac 	.word	0x200005ac

08008708 <_getpid_r>:
 8008708:	f7f9 b948 	b.w	800199c <_getpid>

0800870c <__sread>:
 800870c:	b510      	push	{r4, lr}
 800870e:	460c      	mov	r4, r1
 8008710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008714:	f000 f89c 	bl	8008850 <_read_r>
 8008718:	2800      	cmp	r0, #0
 800871a:	bfab      	itete	ge
 800871c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800871e:	89a3      	ldrhlt	r3, [r4, #12]
 8008720:	181b      	addge	r3, r3, r0
 8008722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008726:	bfac      	ite	ge
 8008728:	6563      	strge	r3, [r4, #84]	; 0x54
 800872a:	81a3      	strhlt	r3, [r4, #12]
 800872c:	bd10      	pop	{r4, pc}

0800872e <__swrite>:
 800872e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008732:	461f      	mov	r7, r3
 8008734:	898b      	ldrh	r3, [r1, #12]
 8008736:	4605      	mov	r5, r0
 8008738:	05db      	lsls	r3, r3, #23
 800873a:	460c      	mov	r4, r1
 800873c:	4616      	mov	r6, r2
 800873e:	d505      	bpl.n	800874c <__swrite+0x1e>
 8008740:	2302      	movs	r3, #2
 8008742:	2200      	movs	r2, #0
 8008744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008748:	f000 f868 	bl	800881c <_lseek_r>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	4632      	mov	r2, r6
 8008750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	4628      	mov	r0, r5
 8008758:	463b      	mov	r3, r7
 800875a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800875e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008762:	f000 b817 	b.w	8008794 <_write_r>

08008766 <__sseek>:
 8008766:	b510      	push	{r4, lr}
 8008768:	460c      	mov	r4, r1
 800876a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876e:	f000 f855 	bl	800881c <_lseek_r>
 8008772:	1c43      	adds	r3, r0, #1
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	bf15      	itete	ne
 8008778:	6560      	strne	r0, [r4, #84]	; 0x54
 800877a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800877e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008782:	81a3      	strheq	r3, [r4, #12]
 8008784:	bf18      	it	ne
 8008786:	81a3      	strhne	r3, [r4, #12]
 8008788:	bd10      	pop	{r4, pc}

0800878a <__sclose>:
 800878a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878e:	f000 b813 	b.w	80087b8 <_close_r>
	...

08008794 <_write_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	4611      	mov	r1, r2
 800879c:	2200      	movs	r2, #0
 800879e:	4d05      	ldr	r5, [pc, #20]	; (80087b4 <_write_r+0x20>)
 80087a0:	602a      	str	r2, [r5, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	f7f9 f918 	bl	80019d8 <_write>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_write_r+0x1e>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_write_r+0x1e>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	200005ac 	.word	0x200005ac

080087b8 <_close_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	2300      	movs	r3, #0
 80087bc:	4d05      	ldr	r5, [pc, #20]	; (80087d4 <_close_r+0x1c>)
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	f7f9 f916 	bl	80019f4 <_close>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_close_r+0x1a>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_close_r+0x1a>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	200005ac 	.word	0x200005ac

080087d8 <_fstat_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	2300      	movs	r3, #0
 80087dc:	4d06      	ldr	r5, [pc, #24]	; (80087f8 <_fstat_r+0x20>)
 80087de:	4604      	mov	r4, r0
 80087e0:	4608      	mov	r0, r1
 80087e2:	4611      	mov	r1, r2
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	f7f9 f908 	bl	80019fa <_fstat>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	d102      	bne.n	80087f4 <_fstat_r+0x1c>
 80087ee:	682b      	ldr	r3, [r5, #0]
 80087f0:	b103      	cbz	r3, 80087f4 <_fstat_r+0x1c>
 80087f2:	6023      	str	r3, [r4, #0]
 80087f4:	bd38      	pop	{r3, r4, r5, pc}
 80087f6:	bf00      	nop
 80087f8:	200005ac 	.word	0x200005ac

080087fc <_isatty_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	2300      	movs	r3, #0
 8008800:	4d05      	ldr	r5, [pc, #20]	; (8008818 <_isatty_r+0x1c>)
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	f7f9 f8fc 	bl	8001a04 <_isatty>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_isatty_r+0x1a>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_isatty_r+0x1a>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	200005ac 	.word	0x200005ac

0800881c <_lseek_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
 8008822:	4611      	mov	r1, r2
 8008824:	2200      	movs	r2, #0
 8008826:	4d05      	ldr	r5, [pc, #20]	; (800883c <_lseek_r+0x20>)
 8008828:	602a      	str	r2, [r5, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	f7f9 f8ec 	bl	8001a08 <_lseek>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_lseek_r+0x1e>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	b103      	cbz	r3, 800883a <_lseek_r+0x1e>
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	200005ac 	.word	0x200005ac

08008840 <_malloc_usable_size_r>:
 8008840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008844:	1f18      	subs	r0, r3, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	bfbc      	itt	lt
 800884a:	580b      	ldrlt	r3, [r1, r0]
 800884c:	18c0      	addlt	r0, r0, r3
 800884e:	4770      	bx	lr

08008850 <_read_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4604      	mov	r4, r0
 8008854:	4608      	mov	r0, r1
 8008856:	4611      	mov	r1, r2
 8008858:	2200      	movs	r2, #0
 800885a:	4d05      	ldr	r5, [pc, #20]	; (8008870 <_read_r+0x20>)
 800885c:	602a      	str	r2, [r5, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	f7f9 f8ac 	bl	80019bc <_read>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_read_r+0x1e>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_read_r+0x1e>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	200005ac 	.word	0x200005ac

08008874 <_init>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	bf00      	nop
 8008878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887a:	bc08      	pop	{r3}
 800887c:	469e      	mov	lr, r3
 800887e:	4770      	bx	lr

08008880 <_fini>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	bf00      	nop
 8008884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008886:	bc08      	pop	{r3}
 8008888:	469e      	mov	lr, r3
 800888a:	4770      	bx	lr
