
Carver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08008d00  08008d00  00018d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009250  08009250  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009250  08009250  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009250  08009250  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009250  08009250  00019250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009254  08009254  00019254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200001ec  08009444  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  08009444  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a84d  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ed6  00000000  00000000  0003aa62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00010e3d  00000000  00000000  0003e938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  0004f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001700  00000000  00000000  00050670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7f9  00000000  00000000  00051d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e7dc  00000000  00000000  0006c569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093e81  00000000  00000000  0008ad45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011ebc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045e4  00000000  00000000  0011ec18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08008ce4 	.word	0x08008ce4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08008ce4 	.word	0x08008ce4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <IO_init_ADC_DMA>:
	var->Sense_48V = map(ADC_buffer[2], 0, 4096, 0, 48);

}

void IO_init_ADC_DMA(){
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, 4);
 80011e0:	2204      	movs	r2, #4
 80011e2:	4902      	ldr	r1, [pc, #8]	; (80011ec <IO_init_ADC_DMA+0xc>)
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <IO_init_ADC_DMA+0x10>)
 80011e6:	f001 b9e9 	b.w	80025bc <HAL_ADC_Start_DMA>
 80011ea:	bf00      	nop
 80011ec:	20000208 	.word	0x20000208
 80011f0:	20000304 	.word	0x20000304

080011f4 <map>:
}

float map(float value, int32_t m, int32_t n, int32_t x, int32_t y){
 80011f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011f8:	4680      	mov	r8, r0
	float return_value;
	return_value = (value - m) / (n - m) * (y - x) + x;
 80011fa:	4618      	mov	r0, r3
float map(float value, int32_t m, int32_t n, int32_t x, int32_t y){
 80011fc:	461c      	mov	r4, r3
 80011fe:	4691      	mov	r9, r2
 8001200:	460d      	mov	r5, r1
	return_value = (value - m) / (n - m) * (y - x) + x;
 8001202:	f7ff fd75 	bl	8000cf0 <__aeabi_i2f>
 8001206:	4606      	mov	r6, r0
 8001208:	4628      	mov	r0, r5
 800120a:	f7ff fd71 	bl	8000cf0 <__aeabi_i2f>
 800120e:	4601      	mov	r1, r0
 8001210:	4640      	mov	r0, r8
 8001212:	f7ff fcb7 	bl	8000b84 <__aeabi_fsub>
 8001216:	4680      	mov	r8, r0
 8001218:	eba9 0005 	sub.w	r0, r9, r5
 800121c:	f7ff fd68 	bl	8000cf0 <__aeabi_i2f>
 8001220:	4601      	mov	r1, r0
 8001222:	4640      	mov	r0, r8
 8001224:	f7ff fe6c 	bl	8000f00 <__aeabi_fdiv>
float map(float value, int32_t m, int32_t n, int32_t x, int32_t y){
 8001228:	9f08      	ldr	r7, [sp, #32]
	return_value = (value - m) / (n - m) * (y - x) + x;
 800122a:	4605      	mov	r5, r0
 800122c:	1b38      	subs	r0, r7, r4
 800122e:	f7ff fd5f 	bl	8000cf0 <__aeabi_i2f>
 8001232:	4601      	mov	r1, r0
 8001234:	4628      	mov	r0, r5
 8001236:	f7ff fdaf 	bl	8000d98 <__aeabi_fmul>
 800123a:	4631      	mov	r1, r6
 800123c:	f7ff fca4 	bl	8000b88 <__addsf3>
 8001240:	4605      	mov	r5, r0
	if(return_value > y){
 8001242:	4638      	mov	r0, r7
 8001244:	f7ff fd54 	bl	8000cf0 <__aeabi_i2f>
 8001248:	4629      	mov	r1, r5
 800124a:	4604      	mov	r4, r0
 800124c:	f7ff ff42 	bl	80010d4 <__aeabi_fcmplt>
 8001250:	b928      	cbnz	r0, 800125e <map+0x6a>
		return_value = y;
	}else if(return_value < x){
 8001252:	4629      	mov	r1, r5
 8001254:	4630      	mov	r0, r6
 8001256:	f7ff ff5b 	bl	8001110 <__aeabi_fcmpgt>
 800125a:	b118      	cbz	r0, 8001264 <map+0x70>
		return_value = x;
 800125c:	4634      	mov	r4, r6
	}
	return return_value;
}
 800125e:	4620      	mov	r0, r4
 8001260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return_value = (value - m) / (n - m) * (y - x) + x;
 8001264:	462c      	mov	r4, r5
	return return_value;
 8001266:	e7fa      	b.n	800125e <map+0x6a>

08001268 <IO_read_write>:
void IO_read_write(IOtypedef *var) {
 8001268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint8_t AUTO_CMD = HAL_GPIO_ReadPin(AUTO_CMD_GPIO_Port, AUTO_CMD_Pin);
 800126c:	2101      	movs	r1, #1
void IO_read_write(IOtypedef *var) {
 800126e:	4604      	mov	r4, r0
	uint8_t AUTO_CMD = HAL_GPIO_ReadPin(AUTO_CMD_GPIO_Port, AUTO_CMD_Pin);
 8001270:	484b      	ldr	r0, [pc, #300]	; (80013a0 <IO_read_write+0x138>)
 8001272:	f001 fd83 	bl	8002d7c <HAL_GPIO_ReadPin>
 8001276:	4605      	mov	r5, r0
	uint8_t MANUAL_CMD = HAL_GPIO_ReadPin(MANUAL_CMD_GPIO_Port, MANUAL_CMD_Pin);
 8001278:	2102      	movs	r1, #2
 800127a:	4849      	ldr	r0, [pc, #292]	; (80013a0 <IO_read_write+0x138>)
 800127c:	f001 fd7e 	bl	8002d7c <HAL_GPIO_ReadPin>
	if ((AUTO_CMD && MANUAL_CMD) || (!AUTO_CMD && !MANUAL_CMD)) {
 8001280:	b10d      	cbz	r5, 8001286 <IO_read_write+0x1e>
 8001282:	2800      	cmp	r0, #0
 8001284:	d07b      	beq.n	800137e <IO_read_write+0x116>
		var->DrivingMode = MODE_MANUAL;
 8001286:	2300      	movs	r3, #0
		var->DrivingMode = MODE_AUTO;
 8001288:	7023      	strb	r3, [r4, #0]
	uint8_t P = HAL_GPIO_ReadPin(Gear_P_GPIO_Port, Gear_P_Pin);
 800128a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800128e:	4845      	ldr	r0, [pc, #276]	; (80013a4 <IO_read_write+0x13c>)
 8001290:	f001 fd74 	bl	8002d7c <HAL_GPIO_ReadPin>
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	uint8_t P = HAL_GPIO_ReadPin(Gear_P_GPIO_Port, Gear_P_Pin);
 8001298:	4607      	mov	r7, r0
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 800129a:	4842      	ldr	r0, [pc, #264]	; (80013a4 <IO_read_write+0x13c>)
 800129c:	f001 fd6e 	bl	8002d7c <HAL_GPIO_ReadPin>
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 80012a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 80012a4:	4606      	mov	r6, r0
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 80012a6:	483f      	ldr	r0, [pc, #252]	; (80013a4 <IO_read_write+0x13c>)
 80012a8:	f001 fd68 	bl	8002d7c <HAL_GPIO_ReadPin>
	uint8_t D = HAL_GPIO_ReadPin(Gear_D_GPIO_Port, Gear_D_Pin);
 80012ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 80012b0:	4605      	mov	r5, r0
	uint8_t D = HAL_GPIO_ReadPin(Gear_D_GPIO_Port, Gear_D_Pin);
 80012b2:	483c      	ldr	r0, [pc, #240]	; (80013a4 <IO_read_write+0x13c>)
 80012b4:	f001 fd62 	bl	8002d7c <HAL_GPIO_ReadPin>
	if (P + R + N + D == 1) {
 80012b8:	19bb      	adds	r3, r7, r6
 80012ba:	442b      	add	r3, r5
 80012bc:	4403      	add	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d103      	bne.n	80012ca <IO_read_write+0x62>
		if (P) {
 80012c2:	2f00      	cmp	r7, #0
 80012c4:	d05d      	beq.n	8001382 <IO_read_write+0x11a>
			var->Gear = GEAR_P;
 80012c6:	2300      	movs	r3, #0
			var->Gear = GEAR_D;
 80012c8:	7063      	strb	r3, [r4, #1]
	var->DrivingDirection = (!(int8_t)HAL_GPIO_ReadPin(DIR_SIG_GPIO_Port, DIR_SIG_Pin) * 2) - 1;
 80012ca:	2102      	movs	r1, #2
 80012cc:	4835      	ldr	r0, [pc, #212]	; (80013a4 <IO_read_write+0x13c>)
 80012ce:	f001 fd55 	bl	8002d7c <HAL_GPIO_ReadPin>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	bf0c      	ite	eq
 80012d6:	2301      	moveq	r3, #1
 80012d8:	f04f 33ff 	movne.w	r3, #4294967295
	var->BrakeStatus = HAL_GPIO_ReadPin(BRAKE_SIG_GPIO_Port, BRAKE_SIG_Pin);
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
	var->DrivingDirection = (!(int8_t)HAL_GPIO_ReadPin(DIR_SIG_GPIO_Port, DIR_SIG_Pin) * 2) - 1;
 80012e0:	70a3      	strb	r3, [r4, #2]
	var->BrakeStatus = HAL_GPIO_ReadPin(BRAKE_SIG_GPIO_Port, BRAKE_SIG_Pin);
 80012e2:	4830      	ldr	r0, [pc, #192]	; (80013a4 <IO_read_write+0x13c>)
 80012e4:	f001 fd4a 	bl	8002d7c <HAL_GPIO_ReadPin>
 80012e8:	70e0      	strb	r0, [r4, #3]
	if (HAL_GetTick() - next_run > 0) {
 80012ea:	f000 fff9 	bl	80022e0 <HAL_GetTick>
 80012ee:	4f2e      	ldr	r7, [pc, #184]	; (80013a8 <IO_read_write+0x140>)
 80012f0:	4e2e      	ldr	r6, [pc, #184]	; (80013ac <IO_read_write+0x144>)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	4d2e      	ldr	r5, [pc, #184]	; (80013b0 <IO_read_write+0x148>)
 80012f6:	4298      	cmp	r0, r3
 80012f8:	d01e      	beq.n	8001338 <IO_read_write+0xd0>
		next_run = HAL_GetTick() + 1;
 80012fa:	f000 fff1 	bl	80022e0 <HAL_GetTick>
 80012fe:	3001      	adds	r0, #1
 8001300:	6038      	str	r0, [r7, #0]
		filtered_Value_Poten = (1.0 - alpha) * filtered_Value_Poten + alpha * ADC_buffer[1];
 8001302:	8868      	ldrh	r0, [r5, #2]
 8001304:	f7ff fcf4 	bl	8000cf0 <__aeabi_i2f>
 8001308:	492a      	ldr	r1, [pc, #168]	; (80013b4 <IO_read_write+0x14c>)
 800130a:	f7ff fd45 	bl	8000d98 <__aeabi_fmul>
 800130e:	f7ff f895 	bl	800043c <__aeabi_f2d>
 8001312:	4680      	mov	r8, r0
 8001314:	6830      	ldr	r0, [r6, #0]
 8001316:	4689      	mov	r9, r1
 8001318:	f7ff f890 	bl	800043c <__aeabi_f2d>
 800131c:	a31e      	add	r3, pc, #120	; (adr r3, 8001398 <IO_read_write+0x130>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff f8e3 	bl	80004ec <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4640      	mov	r0, r8
 800132c:	4649      	mov	r1, r9
 800132e:	f7fe ff27 	bl	8000180 <__adddf3>
 8001332:	f7ff fbd3 	bl	8000adc <__aeabi_d2f>
 8001336:	6030      	str	r0, [r6, #0]
	var->Throttle =  filtered_Value_Poten * var->DrivingDirection;
 8001338:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800133c:	f7ff fcd8 	bl	8000cf0 <__aeabi_i2f>
 8001340:	6831      	ldr	r1, [r6, #0]
 8001342:	f7ff fd29 	bl	8000d98 <__aeabi_fmul>
 8001346:	6060      	str	r0, [r4, #4]
	var->Sense_24V = map(ADC_buffer[0], 0, 4096, 0, 24);
 8001348:	8828      	ldrh	r0, [r5, #0]
 800134a:	f7ff fccd 	bl	8000ce8 <__aeabi_ui2f>
 800134e:	2318      	movs	r3, #24
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff ff4b 	bl	80011f4 <map>
 800135e:	60e0      	str	r0, [r4, #12]
	var->Sense_48V = map(ADC_buffer[2], 0, 4096, 0, 48);
 8001360:	88a8      	ldrh	r0, [r5, #4]
 8001362:	f7ff fcc1 	bl	8000ce8 <__aeabi_ui2f>
 8001366:	2330      	movs	r3, #48	; 0x30
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff ff3f 	bl	80011f4 <map>
 8001376:	60a0      	str	r0, [r4, #8]
}
 8001378:	b003      	add	sp, #12
 800137a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		var->DrivingMode = MODE_AUTO;
 800137e:	2301      	movs	r3, #1
 8001380:	e782      	b.n	8001288 <IO_read_write+0x20>
		} else if (R) {
 8001382:	2e00      	cmp	r6, #0
 8001384:	d1a0      	bne.n	80012c8 <IO_read_write+0x60>
		} else if (N) {
 8001386:	b10d      	cbz	r5, 800138c <IO_read_write+0x124>
			var->Gear = GEAR_N;
 8001388:	2302      	movs	r3, #2
 800138a:	e79d      	b.n	80012c8 <IO_read_write+0x60>
		} else if (D) {
 800138c:	2800      	cmp	r0, #0
 800138e:	d09c      	beq.n	80012ca <IO_read_write+0x62>
			var->Gear = GEAR_D;
 8001390:	2303      	movs	r3, #3
 8001392:	e799      	b.n	80012c8 <IO_read_write+0x60>
 8001394:	f3af 8000 	nop.w
 8001398:	fc000000 	.word	0xfc000000
 800139c:	3fec6d7b 	.word	0x3fec6d7b
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	20000214 	.word	0x20000214
 80013ac:	20000210 	.word	0x20000210
 80013b0:	20000208 	.word	0x20000208
 80013b4:	3de4a101 	.word	0x3de4a101

080013b8 <UART_PC_Set>:
int rxIndex = 0;

// FUNCTIONS ======================================================================================

void UART_PC_Set(UART_HandleTypeDef *huart) {
	PChuart = huart;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <UART_PC_Set+0xc>)
	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	4902      	ldr	r1, [pc, #8]	; (80013c8 <UART_PC_Set+0x10>)
	PChuart = huart;
 80013be:	6018      	str	r0, [r3, #0]
	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
 80013c0:	f002 bf0d 	b.w	80041de <HAL_UART_Receive_IT>
 80013c4:	2000021c 	.word	0x2000021c
 80013c8:	20000218 	.word	0x20000218
 80013cc:	00000000 	.word	0x00000000

080013d0 <ProcessCommand>:
	}

	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
}

void ProcessCommand(const char *command) {
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *token;
	int paramIndex = 0;

	// Split the command into parameters
	token = strtok((char*) command, " ");
 80013d2:	492b      	ldr	r1, [pc, #172]	; (8001480 <ProcessCommand+0xb0>)
 80013d4:	f004 fc92 	bl	8005cfc <strtok>
	int paramIndex = 0;
 80013d8:	2400      	movs	r4, #0
	token = strtok((char*) command, " ");
 80013da:	4601      	mov	r1, r0
	while (token != NULL && paramIndex < MAX_PARAMS_COUNT) {
		strncpy(rxParameters[paramIndex], token, MAX_PARAM_SIZE - 1);
		rxParameters[paramIndex][MAX_PARAM_SIZE - 1] = '\0'; // Ensure null-termination
 80013dc:	4626      	mov	r6, r4
 80013de:	4d29      	ldr	r5, [pc, #164]	; (8001484 <ProcessCommand+0xb4>)
		paramIndex++;
		token = strtok(NULL, " ");
 80013e0:	4f27      	ldr	r7, [pc, #156]	; (8001480 <ProcessCommand+0xb0>)
	while (token != NULL && paramIndex < MAX_PARAMS_COUNT) {
 80013e2:	b109      	cbz	r1, 80013e8 <ProcessCommand+0x18>
 80013e4:	2c05      	cmp	r4, #5
 80013e6:	d10e      	bne.n	8001406 <ProcessCommand+0x36>
	}

	// Compare the command and perform actions
	if (strcmp(rxParameters[0], "1") == 0) {
 80013e8:	4927      	ldr	r1, [pc, #156]	; (8001488 <ProcessCommand+0xb8>)
 80013ea:	4826      	ldr	r0, [pc, #152]	; (8001484 <ProcessCommand+0xb4>)
 80013ec:	f7fe feb0 	bl	8000150 <strcmp>
 80013f0:	b9b0      	cbnz	r0, 8001420 <ProcessCommand+0x50>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80013fa:	f500 3088 	add.w	r0, r0, #69632	; 0x11000

//	sprintf(output, "PARAMETERS %d\r\n", paramIndex);
//	HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
//	sprintf(output, "%s %s %s %s %s\r\n", rxParameters[0], rxParameters[1], rxParameters[2], rxParameters[3], rxParameters[4]);
//	HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
}
 80013fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001402:	f001 bcc6 	b.w	8002d92 <HAL_GPIO_TogglePin>
		strncpy(rxParameters[paramIndex], token, MAX_PARAM_SIZE - 1);
 8001406:	2213      	movs	r2, #19
 8001408:	4628      	mov	r0, r5
 800140a:	f003 fe53 	bl	80050b4 <strncpy>
		token = strtok(NULL, " ");
 800140e:	4639      	mov	r1, r7
		rxParameters[paramIndex][MAX_PARAM_SIZE - 1] = '\0'; // Ensure null-termination
 8001410:	74ee      	strb	r6, [r5, #19]
		token = strtok(NULL, " ");
 8001412:	2000      	movs	r0, #0
 8001414:	f004 fc72 	bl	8005cfc <strtok>
		paramIndex++;
 8001418:	3401      	adds	r4, #1
		token = strtok(NULL, " ");
 800141a:	4601      	mov	r1, r0
 800141c:	3514      	adds	r5, #20
 800141e:	e7e0      	b.n	80013e2 <ProcessCommand+0x12>
	} else if (strcmp(rxParameters[0], "RELAY") == 0) {
 8001420:	491a      	ldr	r1, [pc, #104]	; (800148c <ProcessCommand+0xbc>)
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <ProcessCommand+0xb4>)
 8001424:	f7fe fe94 	bl	8000150 <strcmp>
 8001428:	b918      	cbnz	r0, 8001432 <ProcessCommand+0x62>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800142a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142e:	4818      	ldr	r0, [pc, #96]	; (8001490 <ProcessCommand+0xc0>)
 8001430:	e7e5      	b.n	80013fe <ProcessCommand+0x2e>
	} else if (strcmp(rxParameters[0], "STE") == 0) {
 8001432:	4918      	ldr	r1, [pc, #96]	; (8001494 <ProcessCommand+0xc4>)
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <ProcessCommand+0xb4>)
 8001436:	f7fe fe8b 	bl	8000150 <strcmp>
 800143a:	4604      	mov	r4, r0
 800143c:	b940      	cbnz	r0, 8001450 <ProcessCommand+0x80>
		int16_t ste_value = atoi(rxParameters[1]);
 800143e:	4816      	ldr	r0, [pc, #88]	; (8001498 <ProcessCommand+0xc8>)
 8001440:	f002 ff3b 	bl	80042ba <atoi>
 8001444:	b200      	sxth	r0, r0
		if(ste_value < -100){
 8001446:	f110 0f64 	cmn.w	r0, #100	; 0x64
 800144a:	4d14      	ldr	r5, [pc, #80]	; (800149c <ProcessCommand+0xcc>)
 800144c:	da01      	bge.n	8001452 <ProcessCommand+0x82>
			IOVar.SteeringEnable = 0;
 800144e:	742c      	strb	r4, [r5, #16]
}
 8001450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			IOVar.SteeringEnable = 1;
 8001452:	2301      	movs	r3, #1
 8001454:	742b      	strb	r3, [r5, #16]
			IOVar.SteeringAngle = ste_value * 10000.0 / 360.0;
 8001456:	f7fe ffdf 	bl	8000418 <__aeabi_i2d>
 800145a:	a307      	add	r3, pc, #28	; (adr r3, 8001478 <ProcessCommand+0xa8>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f844 	bl	80004ec <__aeabi_dmul>
 8001464:	2200      	movs	r2, #0
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <ProcessCommand+0xd0>)
 8001468:	f7ff f96a 	bl	8000740 <__aeabi_ddiv>
 800146c:	f7ff faee 	bl	8000a4c <__aeabi_d2iz>
 8001470:	8268      	strh	r0, [r5, #18]
}
 8001472:	e7ed      	b.n	8001450 <ProcessCommand+0x80>
 8001474:	f3af 8000 	nop.w
 8001478:	00000000 	.word	0x00000000
 800147c:	40c38800 	.word	0x40c38800
 8001480:	080091e0 	.word	0x080091e0
 8001484:	200002a0 	.word	0x200002a0
 8001488:	08008d00 	.word	0x08008d00
 800148c:	08008d02 	.word	0x08008d02
 8001490:	40010c00 	.word	0x40010c00
 8001494:	08008d08 	.word	0x08008d08
 8001498:	200002b4 	.word	0x200002b4
 800149c:	200003cc 	.word	0x200003cc
 80014a0:	40768000 	.word	0x40768000

080014a4 <UART_PC_Callback>:
void UART_PC_Callback(UART_HandleTypeDef *huart) {
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	4605      	mov	r5, r0
	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
 80014a8:	4c13      	ldr	r4, [pc, #76]	; (80014f8 <UART_PC_Callback+0x54>)
 80014aa:	4e14      	ldr	r6, [pc, #80]	; (80014fc <UART_PC_Callback+0x58>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	4631      	mov	r1, r6
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	f002 fe94 	bl	80041de <HAL_UART_Receive_IT>
	if (huart != PChuart) {
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	42ab      	cmp	r3, r5
 80014ba:	d11c      	bne.n	80014f6 <UART_PC_Callback+0x52>
	if (PCRxBuffer[0] == '\r') {
 80014bc:	7832      	ldrb	r2, [r6, #0]
 80014be:	2a0d      	cmp	r2, #13
 80014c0:	d00b      	beq.n	80014da <UART_PC_Callback+0x36>
		if (rxIndex > 0) {
 80014c2:	4d0f      	ldr	r5, [pc, #60]	; (8001500 <UART_PC_Callback+0x5c>)
	} else if (PCRxBuffer[0] == '\n') {
 80014c4:	2a0a      	cmp	r2, #10
		if (rxIndex > 0) {
 80014c6:	682b      	ldr	r3, [r5, #0]
	} else if (PCRxBuffer[0] == '\n') {
 80014c8:	d10e      	bne.n	80014e8 <UART_PC_Callback+0x44>
		if (rxIndex > 0) {
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	dd05      	ble.n	80014da <UART_PC_Callback+0x36>
			rxCommand[rxIndex] = '\0'; // Null-terminate the command string
 80014ce:	2600      	movs	r6, #0
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <UART_PC_Callback+0x60>)
 80014d2:	54c6      	strb	r6, [r0, r3]
			ProcessCommand(rxCommand);
 80014d4:	f7ff ff7c 	bl	80013d0 <ProcessCommand>
			rxIndex = 0;
 80014d8:	602e      	str	r6, [r5, #0]
	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
 80014da:	6820      	ldr	r0, [r4, #0]
 80014dc:	2201      	movs	r2, #1
}
 80014de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_IT(PChuart, PCRxBuffer, 1);
 80014e2:	4906      	ldr	r1, [pc, #24]	; (80014fc <UART_PC_Callback+0x58>)
 80014e4:	f002 be7b 	b.w	80041de <HAL_UART_Receive_IT>
		if (rxIndex < MAX_CMD_SIZE - 1) {
 80014e8:	2b30      	cmp	r3, #48	; 0x30
			rxCommand[rxIndex] = PCRxBuffer[0];
 80014ea:	bfdf      	itttt	le
 80014ec:	4905      	ldrle	r1, [pc, #20]	; (8001504 <UART_PC_Callback+0x60>)
 80014ee:	54ca      	strble	r2, [r1, r3]
			rxIndex++;
 80014f0:	3301      	addle	r3, #1
 80014f2:	602b      	strle	r3, [r5, #0]
 80014f4:	e7f1      	b.n	80014da <UART_PC_Callback+0x36>
}
 80014f6:	bd70      	pop	{r4, r5, r6, pc}
 80014f8:	2000021c 	.word	0x2000021c
 80014fc:	20000218 	.word	0x20000218
 8001500:	2000029c 	.word	0x2000029c
 8001504:	20000267 	.word	0x20000267

08001508 <UART_PC_Streamer>:

void UART_PC_Streamer(IOtypedef *var) {
 8001508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800150a:	4604      	mov	r4, r0
	static uint32_t next_run;
	static uint8_t iterator;
	if (HAL_GetTick() - next_run < 0) {
 800150c:	f000 fee8 	bl	80022e0 <HAL_GetTick>
		return;
	}
	next_run = HAL_GetTick() + 20;
 8001510:	f000 fee6 	bl	80022e0 <HAL_GetTick>
	iterator = (iterator + 1) % 2; // adjust this based on how many commands to be sent.
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <UART_PC_Streamer+0x60>)
 8001516:	4d15      	ldr	r5, [pc, #84]	; (800156c <UART_PC_Streamer+0x64>)
 8001518:	7813      	ldrb	r3, [r2, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	7013      	strb	r3, [r2, #0]

	switch (iterator) {
 8001522:	b96b      	cbnz	r3, 8001540 <UART_PC_Streamer+0x38>
	case 0: // Control Mode
		if (var->DrivingMode == MODE_AUTO) {
 8001524:	7823      	ldrb	r3, [r4, #0]
			HAL_UART_Transmit(PChuart, (uint8_t*) "MOD A\n", 7, HAL_MAX_DELAY);
 8001526:	2207      	movs	r2, #7
		if (var->DrivingMode == MODE_AUTO) {
 8001528:	2b01      	cmp	r3, #1
			HAL_UART_Transmit(PChuart, (uint8_t*) "MOD A\n", 7, HAL_MAX_DELAY);
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	6828      	ldr	r0, [r5, #0]
 8001530:	bf0c      	ite	eq
 8001532:	490f      	ldreq	r1, [pc, #60]	; (8001570 <UART_PC_Streamer+0x68>)
		} else {
			HAL_UART_Transmit(PChuart, (uint8_t*) "MOD M\n", 7, HAL_MAX_DELAY);
 8001534:	490f      	ldrne	r1, [pc, #60]	; (8001574 <UART_PC_Streamer+0x6c>)
	case 3:
		break;
	default:
		break;
	}
}
 8001536:	b003      	add	sp, #12
 8001538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
 800153c:	f002 bbad 	b.w	8003c9a <HAL_UART_Transmit>
		snprintf(output, sizeof(output), "TRQ %.2f\n", var->Throttle);
 8001540:	6860      	ldr	r0, [r4, #4]
 8001542:	f7fe ff7b 	bl	800043c <__aeabi_f2d>
 8001546:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <UART_PC_Streamer+0x70>)
 8001548:	e9cd 0100 	strd	r0, r1, [sp]
 800154c:	2146      	movs	r1, #70	; 0x46
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <UART_PC_Streamer+0x74>)
 8001550:	f003 fd5c 	bl	800500c <sniprintf>
		HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <UART_PC_Streamer+0x74>)
 8001556:	f7fe fe05 	bl	8000164 <strlen>
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	b282      	uxth	r2, r0
 8001560:	4906      	ldr	r1, [pc, #24]	; (800157c <UART_PC_Streamer+0x74>)
 8001562:	6828      	ldr	r0, [r5, #0]
 8001564:	e7e7      	b.n	8001536 <UART_PC_Streamer+0x2e>
 8001566:	bf00      	nop
 8001568:	20000220 	.word	0x20000220
 800156c:	2000021c 	.word	0x2000021c
 8001570:	08008d0c 	.word	0x08008d0c
 8001574:	08008d13 	.word	0x08008d13
 8001578:	08008d1a 	.word	0x08008d1a
 800157c:	20000221 	.word	0x20000221

08001580 <MX_ADC1_Init>:

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001580:	4824      	ldr	r0, [pc, #144]	; (8001614 <MX_ADC1_Init+0x94>)
 8001582:	4a25      	ldr	r2, [pc, #148]	; (8001618 <MX_ADC1_Init+0x98>)
{
 8001584:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8001586:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001588:	f44f 7280 	mov.w	r2, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 800158c:	2300      	movs	r3, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 800158e:	2401      	movs	r4, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8001590:	2504      	movs	r5, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001592:	6082      	str	r2, [r0, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001594:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
{
 8001598:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800159a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800159e:	9303      	str	r3, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015a0:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015a2:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a6:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 80015a8:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015aa:	f001 f8bb 	bl	8002724 <HAL_ADC_Init>
 80015ae:	b108      	cbz	r0, 80015b4 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 80015b0:	f000 faea 	bl	8001b88 <Error_Handler>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015b4:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b6:	4817      	ldr	r0, [pc, #92]	; (8001614 <MX_ADC1_Init+0x94>)
 80015b8:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ba:	e9cd 5401 	strd	r5, r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015be:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	f000 ff42 	bl	8002448 <HAL_ADC_ConfigChannel>
 80015c4:	b108      	cbz	r0, 80015ca <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 80015c6:	f000 fadf 	bl	8001b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ca:	2005      	movs	r0, #5
 80015cc:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ce:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015d0:	e9cd 0301 	strd	r0, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d4:	480f      	ldr	r0, [pc, #60]	; (8001614 <MX_ADC1_Init+0x94>)
 80015d6:	f000 ff37 	bl	8002448 <HAL_ADC_ConfigChannel>
 80015da:	b108      	cbz	r0, 80015e0 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80015dc:	f000 fad4 	bl	8001b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015e0:	2106      	movs	r1, #6
 80015e2:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015e6:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ea:	a901      	add	r1, sp, #4
 80015ec:	f000 ff2c 	bl	8002448 <HAL_ADC_ConfigChannel>
 80015f0:	b108      	cbz	r0, 80015f6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80015f2:	f000 fac9 	bl	8001b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015f6:	2304      	movs	r3, #4
 80015f8:	2207      	movs	r2, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_ADC1_Init+0x94>)
 80015fc:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001600:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001604:	f000 ff20 	bl	8002448 <HAL_ADC_ConfigChannel>
 8001608:	b108      	cbz	r0, 800160e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800160a:	f000 fabd 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800160e:	b005      	add	sp, #20
 8001610:	bd30      	pop	{r4, r5, pc}
 8001612:	bf00      	nop
 8001614:	20000304 	.word	0x20000304
 8001618:	40012400 	.word	0x40012400

0800161c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800161c:	b530      	push	{r4, r5, lr}
 800161e:	4605      	mov	r5, r0
 8001620:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	2210      	movs	r2, #16
 8001624:	2100      	movs	r1, #0
 8001626:	a802      	add	r0, sp, #8
 8001628:	f002 fe76 	bl	8004318 <memset>
  if(adcHandle->Instance==ADC1)
 800162c:	682a      	ldr	r2, [r5, #0]
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_ADC_MspInit+0x98>)
 8001630:	429a      	cmp	r2, r3
 8001632:	d13c      	bne.n	80016ae <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001634:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001638:	699a      	ldr	r2, [r3, #24]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_24VSENSE_Pin|ADC_POTEN_SIG_Pin|ADC_48VSENSE_Pin|ADC_BRAKE_CUR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	481f      	ldr	r0, [pc, #124]	; (80016b8 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800163c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001640:	619a      	str	r2, [r3, #24]
 8001642:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001646:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800164a:	9200      	str	r2, [sp, #0]
 800164c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001650:	4c1a      	ldr	r4, [pc, #104]	; (80016bc <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	f042 0204 	orr.w	r2, r2, #4
 8001656:	619a      	str	r2, [r3, #24]
 8001658:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165a:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001664:	2303      	movs	r3, #3
 8001666:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f001 faad 	bl	8002bc8 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800166e:	2080      	movs	r0, #128	; 0x80
 8001670:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001674:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001676:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800167a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 800167e:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001680:	490f      	ldr	r1, [pc, #60]	; (80016c0 <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001682:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001684:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001688:	e9c4 c205 	strd	ip, r2, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800168c:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800168e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001690:	f001 f92e 	bl	80028f0 <HAL_DMA_Init>
 8001694:	b108      	cbz	r0, 800169a <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001696:	f000 fa77 	bl	8001b88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 800169a:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800169c:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2103      	movs	r1, #3
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80016a2:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 80016a4:	f001 f8d0 	bl	8002848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016a8:	2012      	movs	r0, #18
 80016aa:	f001 f8ff 	bl	80028ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016ae:	b007      	add	sp, #28
 80016b0:	bd30      	pop	{r4, r5, pc}
 80016b2:	bf00      	nop
 80016b4:	40012400 	.word	0x40012400
 80016b8:	40010800 	.word	0x40010800
 80016bc:	20000334 	.word	0x20000334
 80016c0:	40020008 	.word	0x40020008

080016c4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_DMA_Init+0x4c>)
{
 80016c6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c8:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016ca:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016cc:	f042 0201 	orr.w	r2, r2, #1
 80016d0:	615a      	str	r2, [r3, #20]
 80016d2:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016d4:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016dc:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016e0:	f001 f8b2 	bl	8002848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e4:	200b      	movs	r0, #11
 80016e6:	f001 f8e1 	bl	80028ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2102      	movs	r1, #2
 80016ee:	200c      	movs	r0, #12
 80016f0:	f001 f8aa 	bl	8002848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016f4:	200c      	movs	r0, #12
 80016f6:	f001 f8d9 	bl	80028ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2010      	movs	r0, #16
 80016fe:	4611      	mov	r1, r2
 8001700:	f001 f8a2 	bl	8002848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001704:	2010      	movs	r0, #16

}
 8001706:	b003      	add	sp, #12
 8001708:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800170c:	f001 b8ce 	b.w	80028ac <HAL_NVIC_EnableIRQ>
 8001710:	40021000 	.word	0x40021000

08001714 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	2210      	movs	r2, #16
{
 8001716:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800171a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	eb0d 0002 	add.w	r0, sp, r2
 8001720:	2100      	movs	r1, #0
 8001722:	f002 fdf9 	bl	8004318 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001728:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800181c <MX_GPIO_Init+0x108>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800172e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001820 <MX_GPIO_Init+0x10c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	f042 0210 	orr.w	r2, r2, #16
 8001736:	619a      	str	r2, [r3, #24]
 8001738:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRAKE_DIR_Pin|GPIO_PIN_6|GPIO_PIN_7|STEERING_RELAY_Pin, GPIO_PIN_RESET);
 800173a:	4d3a      	ldr	r5, [pc, #232]	; (8001824 <MX_GPIO_Init+0x110>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173c:	f002 0210 	and.w	r2, r2, #16
 8001740:	9200      	str	r2, [sp, #0]
 8001742:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001744:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001746:	4648      	mov	r0, r9
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001748:	f042 0220 	orr.w	r2, r2, #32
 800174c:	619a      	str	r2, [r3, #24]
 800174e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001754:	f002 0220 	and.w	r2, r2, #32
 8001758:	9201      	str	r2, [sp, #4]
 800175a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001760:	f042 0204 	orr.w	r2, r2, #4
 8001764:	619a      	str	r2, [r3, #24]
 8001766:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	f002 0204 	and.w	r2, r2, #4
 800176e:	9202      	str	r2, [sp, #8]
 8001770:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	f042 0208 	orr.w	r2, r2, #8
 800177a:	619a      	str	r2, [r3, #24]
 800177c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	9303      	str	r3, [sp, #12]
 8001786:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001788:	f001 fafe 	bl	8002d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800178c:	4640      	mov	r0, r8
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001794:	f001 faf8 	bl	8002d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, BRAKE_DIR_Pin|GPIO_PIN_6|GPIO_PIN_7|STEERING_RELAY_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	4628      	mov	r0, r5
 800179c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80017a0:	f001 faf2 	bl	8002d88 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017a8:	4648      	mov	r0, r9
 80017aa:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f001 fa08 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AUTO_CMD_Pin|MANUAL_CMD_Pin;
 80017b8:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	4640      	mov	r0, r8
 80017bc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f001 fa00 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMER_SIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(EMER_SIG_GPIO_Port, &GPIO_InitStruct);
 80017ca:	4628      	mov	r0, r5
 80017cc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pin = EMER_SIG_Pin;
 80017d2:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(EMER_SIG_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f001 f9f8 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_SIG_Pin|Gear_P_Pin|Gear_R_Pin|Gear_N_Pin
 80017d8:	f24f 2302 	movw	r3, #61954	; 0xf202
                          |Gear_D_Pin|BRAKE_SIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	4628      	mov	r0, r5
 80017de:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f001 f9ef 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	4640      	mov	r0, r8
 80017f0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f001 f9e5 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB6 PB7 PBPin */
  GPIO_InitStruct.Pin = BRAKE_DIR_Pin|GPIO_PIN_6|GPIO_PIN_7|STEERING_RELAY_Pin;
 80017fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	4628      	mov	r0, r5
 8001804:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f001 f9db 	bl	8002bc8 <HAL_GPIO_Init>

}
 8001812:	b009      	add	sp, #36	; 0x24
 8001814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	40011000 	.word	0x40011000
 8001820:	40010800 	.word	0x40010800
 8001824:	40010c00 	.word	0x40010c00
 8001828:	10210000 	.word	0x10210000

0800182c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800182c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <MX_I2C2_Init+0x30>)
  hi2c2.Init.ClockSpeed = 100000;
 8001830:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <MX_I2C2_Init+0x34>)
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_I2C2_Init+0x38>)
 8001834:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001838:	2300      	movs	r3, #0
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 800183e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001842:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001846:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800184c:	f001 faaa 	bl	8002da4 <HAL_I2C_Init>
 8001850:	b118      	cbz	r0, 800185a <MX_I2C2_Init+0x2e>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001856:	f000 b997 	b.w	8001b88 <Error_Handler>
}
 800185a:	bd08      	pop	{r3, pc}
 800185c:	20000378 	.word	0x20000378
 8001860:	40005800 	.word	0x40005800
 8001864:	000186a0 	.word	0x000186a0

08001868 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001868:	b510      	push	{r4, lr}
 800186a:	4604      	mov	r4, r0
 800186c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	2210      	movs	r2, #16
 8001870:	2100      	movs	r1, #0
 8001872:	a802      	add	r0, sp, #8
 8001874:	f002 fd50 	bl	8004318 <memset>
  if(i2cHandle->Instance==I2C2)
 8001878:	6822      	ldr	r2, [r4, #0]
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_I2C_MspInit+0x58>)
 800187c:	429a      	cmp	r2, r3
 800187e:	d11d      	bne.n	80018bc <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001880:	4c10      	ldr	r4, [pc, #64]	; (80018c4 <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001882:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001888:	480f      	ldr	r0, [pc, #60]	; (80018c8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	61a3      	str	r3, [r4, #24]
 8001890:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189c:	2312      	movs	r3, #18
 800189e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f001 f98f 	bl	8002bc8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018aa:	69e3      	ldr	r3, [r4, #28]
 80018ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b0:	61e3      	str	r3, [r4, #28]
 80018b2:	69e3      	ldr	r3, [r4, #28]
 80018b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018bc:	b006      	add	sp, #24
 80018be:	bd10      	pop	{r4, pc}
 80018c0:	40005800 	.word	0x40005800
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010c00 	.word	0x40010c00

080018cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018cc:	b510      	push	{r4, lr}
 80018ce:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018d0:	2214      	movs	r2, #20
 80018d2:	2100      	movs	r1, #0
 80018d4:	a80c      	add	r0, sp, #48	; 0x30
 80018d6:	f002 fd1f 	bl	8004318 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018da:	2214      	movs	r2, #20
 80018dc:	2100      	movs	r1, #0
 80018de:	eb0d 0002 	add.w	r0, sp, r2
 80018e2:	f002 fd19 	bl	8004318 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80018e6:	2210      	movs	r2, #16
 80018e8:	2100      	movs	r1, #0
 80018ea:	a801      	add	r0, sp, #4
 80018ec:	f002 fd14 	bl	8004318 <memset>
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f0:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f6:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f8:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001900:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001904:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001906:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001908:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800190a:	f001 faf3 	bl	8002ef4 <HAL_RCC_OscConfig>
 800190e:	b108      	cbz	r0, 8001914 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001912:	e7fe      	b.n	8001912 <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001914:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	e9cd 3405 	strd	r3, r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191a:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191e:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001920:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001924:	4621      	mov	r1, r4
 8001926:	a805      	add	r0, sp, #20
 8001928:	f001 fca6 	bl	8003278 <HAL_RCC_ClockConfig>
 800192c:	b108      	cbz	r0, 8001932 <SystemClock_Config+0x66>
 800192e:	b672      	cpsid	i
	while (1) {
 8001930:	e7fe      	b.n	8001930 <SystemClock_Config+0x64>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001936:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001938:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800193a:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800193c:	f001 fd58 	bl	80033f0 <HAL_RCCEx_PeriphCLKConfig>
 8001940:	b108      	cbz	r0, 8001946 <SystemClock_Config+0x7a>
 8001942:	b672      	cpsid	i
	while (1) {
 8001944:	e7fe      	b.n	8001944 <SystemClock_Config+0x78>
}
 8001946:	b014      	add	sp, #80	; 0x50
 8001948:	bd10      	pop	{r4, pc}
	...

0800194c <HAL_UART_RxCpltCallback>:
	if (huart == &huart1) {
 800194c:	4a06      	ldr	r2, [pc, #24]	; (8001968 <HAL_UART_RxCpltCallback+0x1c>)
 800194e:	4290      	cmp	r0, r2
 8001950:	d101      	bne.n	8001956 <HAL_UART_RxCpltCallback+0xa>
		UART_PC_Callback(huart);
 8001952:	f7ff bda7 	b.w	80014a4 <UART_PC_Callback>
	} else if (huart == &huart2) {
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <HAL_UART_RxCpltCallback+0x20>)
 8001958:	4290      	cmp	r0, r2
 800195a:	d104      	bne.n	8001966 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800195c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <HAL_UART_RxCpltCallback+0x24>)
 8001962:	f001 ba16 	b.w	8002d92 <HAL_GPIO_TogglePin>
}
 8001966:	4770      	bx	lr
 8001968:	20000560 	.word	0x20000560
 800196c:	200005a8 	.word	0x200005a8
 8001970:	40011000 	.word	0x40011000

08001974 <amt21_get_pos>:
	uint8_t cmd[1] = { AMT21_READ_POS };
 8001974:	23d4      	movs	r3, #212	; 0xd4
uint16_t amt21_get_pos() {
 8001976:	b573      	push	{r0, r1, r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197e:	4819      	ldr	r0, [pc, #100]	; (80019e4 <amt21_get_pos+0x70>)
	uint8_t cmd[1] = { AMT21_READ_POS };
 8001980:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001984:	f001 fa00 	bl	8002d88 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, cmd, 1, 1000);
 8001988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198c:	2201      	movs	r2, #1
 800198e:	a901      	add	r1, sp, #4
 8001990:	4815      	ldr	r0, [pc, #84]	; (80019e8 <amt21_get_pos+0x74>)
 8001992:	f002 f982 	bl	8003c9a <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800199c:	4811      	ldr	r0, [pc, #68]	; (80019e4 <amt21_get_pos+0x70>)
 800199e:	f001 f9f3 	bl	8002d88 <HAL_GPIO_WritePin>
	pos = (pos & 0x3FFFu);
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <amt21_get_pos+0x78>)
	if (L_pos - pos >= 7000) {
 80019a4:	4c12      	ldr	r4, [pc, #72]	; (80019f0 <amt21_get_pos+0x7c>)
	pos = (pos & 0x3FFFu);
 80019a6:	881a      	ldrh	r2, [r3, #0]
	if (L_pos - pos >= 7000) {
 80019a8:	f641 3357 	movw	r3, #6999	; 0x1b57
 80019ac:	8820      	ldrh	r0, [r4, #0]
	pos = (pos & 0x3FFFu);
 80019ae:	f3c2 020d 	ubfx	r2, r2, #0, #14
	if (L_pos - pos >= 7000) {
 80019b2:	4910      	ldr	r1, [pc, #64]	; (80019f4 <amt21_get_pos+0x80>)
 80019b4:	1a85      	subs	r5, r0, r2
 80019b6:	429d      	cmp	r5, r3
		pos_unwrap += 16384 + pos - L_pos;
 80019b8:	880b      	ldrh	r3, [r1, #0]
	if (L_pos - pos >= 7000) {
 80019ba:	dd04      	ble.n	80019c6 <amt21_get_pos+0x52>
		pos_unwrap += 16384 + pos - L_pos;
 80019bc:	4413      	add	r3, r2
 80019be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		pos_unwrap += pos - L_pos;
 80019c2:	1a1b      	subs	r3, r3, r0
 80019c4:	e006      	b.n	80019d4 <amt21_get_pos+0x60>
	} else if (L_pos - pos <= -7000) {
 80019c6:	4e0c      	ldr	r6, [pc, #48]	; (80019f8 <amt21_get_pos+0x84>)
 80019c8:	42b5      	cmp	r5, r6
 80019ca:	da08      	bge.n	80019de <amt21_get_pos+0x6a>
		pos_unwrap -= 16384 + pos - L_pos;
 80019cc:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 80019d0:	4403      	add	r3, r0
 80019d2:	1a9b      	subs	r3, r3, r2
		pos_unwrap += pos - L_pos;
 80019d4:	800b      	strh	r3, [r1, #0]
}
 80019d6:	8808      	ldrh	r0, [r1, #0]
	L_pos = pos;
 80019d8:	8022      	strh	r2, [r4, #0]
}
 80019da:	b002      	add	sp, #8
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
		pos_unwrap += pos - L_pos;
 80019de:	4413      	add	r3, r2
 80019e0:	e7ef      	b.n	80019c2 <amt21_get_pos+0x4e>
 80019e2:	bf00      	nop
 80019e4:	40010800 	.word	0x40010800
 80019e8:	200005a8 	.word	0x200005a8
 80019ec:	200003e8 	.word	0x200003e8
 80019f0:	200003e4 	.word	0x200003e4
 80019f4:	200003f0 	.word	0x200003f0
 80019f8:	ffffe4a9 	.word	0xffffe4a9

080019fc <setMotor>:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <setMotor+0x1c>)
	if (PWM >= 0) {
 80019fe:	2800      	cmp	r0, #0
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8001a00:	681b      	ldr	r3, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -1 * PWM);
 8001a02:	bfb5      	itete	lt
 8001a04:	4240      	neglt	r0, r0
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8001a06:	6358      	strge	r0, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -1 * PWM);
 8001a08:	6358      	strlt	r0, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001a0a:	2201      	movge	r2, #1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001a0c:	bfb8      	it	lt
 8001a0e:	2200      	movlt	r2, #0
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4802      	ldr	r0, [pc, #8]	; (8001a1c <setMotor+0x20>)
 8001a14:	f001 b9b8 	b.w	8002d88 <HAL_GPIO_WritePin>
 8001a18:	2000048c 	.word	0x2000048c
 8001a1c:	40010c00 	.word	0x40010c00

08001a20 <controller>:
int16_t controller(int pos_current) {
 8001a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (IOVar.DrivingMode == MODE_AUTO) {
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <controller+0x8c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d007      	beq.n	8001a3c <controller+0x1c>
	int u = 0;
 8001a2c:	2000      	movs	r0, #0
	} else if (u <= -3000) {
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <controller+0x90>)
 8001a30:	4298      	cmp	r0, r3
 8001a32:	bfb8      	it	lt
 8001a34:	4618      	movlt	r0, r3
}
 8001a36:	b200      	sxth	r0, r0
 8001a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int error_pos = pos_setpoint - pos_current;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <controller+0x94>)
		error_summa += error_pos * control_dt;
 8001a3e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001ab8 <controller+0x98>
		int error_pos = pos_setpoint - pos_current;
 8001a42:	681c      	ldr	r4, [r3, #0]
 8001a44:	1a24      	subs	r4, r4, r0
		int error_delta = error_pos / control_dt;
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff f952 	bl	8000cf0 <__aeabi_i2f>
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <controller+0x9c>)
 8001a4e:	4606      	mov	r6, r0
		error_summa += error_pos * control_dt;
 8001a50:	f8d8 0000 	ldr.w	r0, [r8]
		int error_delta = error_pos / control_dt;
 8001a54:	681f      	ldr	r7, [r3, #0]
		error_summa += error_pos * control_dt;
 8001a56:	f7ff f94b 	bl	8000cf0 <__aeabi_i2f>
 8001a5a:	4639      	mov	r1, r7
 8001a5c:	4605      	mov	r5, r0
 8001a5e:	4630      	mov	r0, r6
 8001a60:	f7ff f99a 	bl	8000d98 <__aeabi_fmul>
 8001a64:	4601      	mov	r1, r0
 8001a66:	4628      	mov	r0, r5
 8001a68:	f7ff f88e 	bl	8000b88 <__addsf3>
 8001a6c:	f7ff fb5a 	bl	8001124 <__aeabi_f2iz>
		if (error_pos <= 1 && error_pos >= -1) {
 8001a70:	1c63      	adds	r3, r4, #1
 8001a72:	2b02      	cmp	r3, #2
		error_summa += error_pos * control_dt;
 8001a74:	4605      	mov	r5, r0
 8001a76:	f8c8 0000 	str.w	r0, [r8]
		if (error_pos <= 1 && error_pos >= -1) {
 8001a7a:	d9d7      	bls.n	8001a2c <controller+0xc>
		int error_delta = error_pos / control_dt;
 8001a7c:	4639      	mov	r1, r7
 8001a7e:	4630      	mov	r0, r6
 8001a80:	f7ff fa3e 	bl	8000f00 <__aeabi_fdiv>
 8001a84:	f7ff fb4e 	bl	8001124 <__aeabi_f2iz>
		u = Kp * error_pos + Kd * error_delta + Ki * error_summa;
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <controller+0xa0>)
 8001a8a:	881a      	ldrh	r2, [r3, #0]
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <controller+0xa4>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	4363      	muls	r3, r4
 8001a92:	fb02 3300 	mla	r3, r2, r0, r3
 8001a96:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <controller+0xa8>)
 8001a98:	8810      	ldrh	r0, [r2, #0]
 8001a9a:	fb05 3000 	mla	r0, r5, r0, r3
	if (u >= 3000) {
 8001a9e:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8001aa2:	4298      	cmp	r0, r3
 8001aa4:	ddc3      	ble.n	8001a2e <controller+0xe>
		u = 3000;
 8001aa6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001aaa:	e7c4      	b.n	8001a36 <controller+0x16>
 8001aac:	200003cc 	.word	0x200003cc
 8001ab0:	fffff448 	.word	0xfffff448
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	200003ec 	.word	0x200003ec
 8001abc:	20000004 	.word	0x20000004
 8001ac0:	200003e0 	.word	0x200003e0
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	200003e2 	.word	0x200003e2

08001acc <main>:
int main(void) {
 8001acc:	b508      	push	{r3, lr}
	HAL_Init();
 8001ace:	f000 fbe9 	bl	80022a4 <HAL_Init>
	SystemClock_Config();
 8001ad2:	f7ff fefb 	bl	80018cc <SystemClock_Config>
	MX_GPIO_Init();
 8001ad6:	f7ff fe1d 	bl	8001714 <MX_GPIO_Init>
	MX_DMA_Init();
 8001ada:	f7ff fdf3 	bl	80016c4 <MX_DMA_Init>
	MX_TIM1_Init();
 8001ade:	f000 f9d5 	bl	8001e8c <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8001ae2:	f000 facd 	bl	8002080 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001ae6:	f000 fae7 	bl	80020b8 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001aea:	f7ff fd49 	bl	8001580 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001aee:	f000 fa77 	bl	8001fe0 <MX_TIM3_Init>
	MX_I2C2_Init();
 8001af2:	f7ff fe9b 	bl	800182c <MX_I2C2_Init>
	MX_TIM2_Init();
 8001af6:	f000 fa33 	bl	8001f60 <MX_TIM2_Init>
	UART_PC_Set(&huart1);
 8001afa:	481b      	ldr	r0, [pc, #108]	; (8001b68 <main+0x9c>)
 8001afc:	f7ff fc5c 	bl	80013b8 <UART_PC_Set>
	IO_init_ADC_DMA();
 8001b00:	f7ff fb6e 	bl	80011e0 <IO_init_ADC_DMA>
	HAL_TIM_Base_Start(&htim2); //Motor
 8001b04:	4819      	ldr	r0, [pc, #100]	; (8001b6c <main+0xa0>)
 8001b06:	f001 fd61 	bl	80035cc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //LPWM
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4817      	ldr	r0, [pc, #92]	; (8001b6c <main+0xa0>)
 8001b0e:	f001 ffa1 	bl	8003a54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //RPWM
 8001b12:	2104      	movs	r1, #4
 8001b14:	4815      	ldr	r0, [pc, #84]	; (8001b6c <main+0xa0>)
 8001b16:	f001 ff9d 	bl	8003a54 <HAL_TIM_PWM_Start>
	setMotor(0);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ff6e 	bl	80019fc <setMotor>
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) RxBuffer, 2);
 8001b20:	2202      	movs	r2, #2
 8001b22:	4913      	ldr	r1, [pc, #76]	; (8001b70 <main+0xa4>)
 8001b24:	4813      	ldr	r0, [pc, #76]	; (8001b74 <main+0xa8>)
 8001b26:	f002 fbb7 	bl	8004298 <HAL_UART_Receive_DMA>
		IO_read_write(&IOVar);
 8001b2a:	4e13      	ldr	r6, [pc, #76]	; (8001b78 <main+0xac>)
		Rawpos = amt21_get_pos();
 8001b2c:	4c13      	ldr	r4, [pc, #76]	; (8001b7c <main+0xb0>)
		if (HAL_GetTick() >= timestamp) {
 8001b2e:	4d14      	ldr	r5, [pc, #80]	; (8001b80 <main+0xb4>)
		IO_read_write(&IOVar);
 8001b30:	4630      	mov	r0, r6
 8001b32:	f7ff fb99 	bl	8001268 <IO_read_write>
		UART_PC_Streamer(&IOVar);
 8001b36:	4630      	mov	r0, r6
 8001b38:	f7ff fce6 	bl	8001508 <UART_PC_Streamer>
		Rawpos = amt21_get_pos();
 8001b3c:	f7ff ff1a 	bl	8001974 <amt21_get_pos>
 8001b40:	8020      	strh	r0, [r4, #0]
		if (HAL_GetTick() >= timestamp) {
 8001b42:	f000 fbcd 	bl	80022e0 <HAL_GetTick>
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	4298      	cmp	r0, r3
 8001b4a:	d3f1      	bcc.n	8001b30 <main+0x64>
			timestamp = HAL_GetTick() + 2;
 8001b4c:	f000 fbc8 	bl	80022e0 <HAL_GetTick>
 8001b50:	3002      	adds	r0, #2
 8001b52:	6028      	str	r0, [r5, #0]
			pwm = controller(Rawpos);
 8001b54:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001b58:	f7ff ff62 	bl	8001a20 <controller>
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <main+0xb8>)
 8001b5e:	6018      	str	r0, [r3, #0]
			setMotor(pwm);
 8001b60:	f7ff ff4c 	bl	80019fc <setMotor>
 8001b64:	e7e4      	b.n	8001b30 <main+0x64>
 8001b66:	bf00      	nop
 8001b68:	20000560 	.word	0x20000560
 8001b6c:	2000048c 	.word	0x2000048c
 8001b70:	200003e8 	.word	0x200003e8
 8001b74:	200005a8 	.word	0x200005a8
 8001b78:	200003cc 	.word	0x200003cc
 8001b7c:	200003e6 	.word	0x200003e6
 8001b80:	200003f8 	.word	0x200003f8
 8001b84:	200003f4 	.word	0x200003f4

08001b88 <Error_Handler>:
 8001b88:	b672      	cpsid	i
	while (1) {
 8001b8a:	e7fe      	b.n	8001b8a <Error_Handler+0x2>

08001b8c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <HAL_MspInit+0x3c>)
{
 8001b8e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	619a      	str	r2, [r3, #24]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	f002 0201 	and.w	r2, r2, #1
 8001b9e:	9200      	str	r2, [sp, #0]
 8001ba0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	69da      	ldr	r2, [r3, #28]
 8001ba4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ba8:	61da      	str	r2, [r3, #28]
 8001baa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bb6:	6853      	ldr	r3, [r2, #4]
 8001bb8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	b002      	add	sp, #8
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000

08001bd0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler>

08001bd2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler>

08001bd4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler>

08001bd6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler>

08001bd8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler>

08001bda <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:
 8001bdc:	4770      	bx	lr

08001bde <PendSV_Handler>:
 8001bde:	4770      	bx	lr

08001be0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be0:	f000 bb72 	b.w	80022c8 <HAL_IncTick>

08001be4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001be4:	4801      	ldr	r0, [pc, #4]	; (8001bec <DMA1_Channel1_IRQHandler+0x8>)
 8001be6:	f000 bf5b 	b.w	8002aa0 <HAL_DMA_IRQHandler>
 8001bea:	bf00      	nop
 8001bec:	20000334 	.word	0x20000334

08001bf0 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001bf0:	4801      	ldr	r0, [pc, #4]	; (8001bf8 <DMA1_Channel2_IRQHandler+0x8>)
 8001bf2:	f000 bf55 	b.w	8002aa0 <HAL_DMA_IRQHandler>
 8001bf6:	bf00      	nop
 8001bf8:	20000400 	.word	0x20000400

08001bfc <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bfc:	4801      	ldr	r0, [pc, #4]	; (8001c04 <DMA1_Channel6_IRQHandler+0x8>)
 8001bfe:	f000 bf4f 	b.w	8002aa0 <HAL_DMA_IRQHandler>
 8001c02:	bf00      	nop
 8001c04:	2000051c 	.word	0x2000051c

08001c08 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c08:	4801      	ldr	r0, [pc, #4]	; (8001c10 <ADC1_2_IRQHandler+0x8>)
 8001c0a:	f000 bb9e 	b.w	800234a <HAL_ADC_IRQHandler>
 8001c0e:	bf00      	nop
 8001c10:	20000304 	.word	0x20000304

08001c14 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c14:	4801      	ldr	r0, [pc, #4]	; (8001c1c <USART1_IRQHandler+0x8>)
 8001c16:	f002 b977 	b.w	8003f08 <HAL_UART_IRQHandler>
 8001c1a:	bf00      	nop
 8001c1c:	20000560 	.word	0x20000560

08001c20 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c20:	4801      	ldr	r0, [pc, #4]	; (8001c28 <USART2_IRQHandler+0x8>)
 8001c22:	f002 b971 	b.w	8003f08 <HAL_UART_IRQHandler>
 8001c26:	bf00      	nop
 8001c28:	200005a8 	.word	0x200005a8

08001c2c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	4770      	bx	lr

08001c30 <_kill>:

int _kill(int pid, int sig)
{
 8001c30:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c32:	f002 fb47 	bl	80042c4 <__errno>
 8001c36:	2316      	movs	r3, #22
 8001c38:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3e:	bd08      	pop	{r3, pc}

08001c40 <_exit>:

void _exit (int status)
{
 8001c40:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001c42:	f002 fb3f 	bl	80042c4 <__errno>
 8001c46:	2316      	movs	r3, #22
 8001c48:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001c4a:	e7fe      	b.n	8001c4a <_exit+0xa>

08001c4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	460d      	mov	r5, r1
 8001c50:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	460e      	mov	r6, r1
 8001c54:	1b73      	subs	r3, r6, r5
 8001c56:	429c      	cmp	r4, r3
 8001c58:	dc01      	bgt.n	8001c5e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001c5e:	f3af 8000 	nop.w
 8001c62:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	e7f5      	b.n	8001c54 <_read+0x8>

08001c68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c68:	b570      	push	{r4, r5, r6, lr}
 8001c6a:	460d      	mov	r5, r1
 8001c6c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	460e      	mov	r6, r1
 8001c70:	1b73      	subs	r3, r6, r5
 8001c72:	429c      	cmp	r4, r3
 8001c74:	dc01      	bgt.n	8001c7a <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8001c76:	4620      	mov	r0, r4
 8001c78:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8001c7a:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001c7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	e7f5      	b.n	8001c70 <_write+0x8>

08001c84 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	4770      	bx	lr

08001c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8001c8e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001c90:	604b      	str	r3, [r1, #4]
}
 8001c92:	4770      	bx	lr

08001c94 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001c94:	2001      	movs	r0, #1
 8001c96:	4770      	bx	lr

08001c98 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001c98:	2000      	movs	r0, #0
 8001c9a:	4770      	bx	lr

08001c9c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <_sbrk+0x30>)
{
 8001c9e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001ca0:	6811      	ldr	r1, [r2, #0]
{
 8001ca2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001ca4:	b909      	cbnz	r1, 8001caa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001ca6:	490a      	ldr	r1, [pc, #40]	; (8001cd0 <_sbrk+0x34>)
 8001ca8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	6810      	ldr	r0, [r2, #0]
 8001cac:	4909      	ldr	r1, [pc, #36]	; (8001cd4 <_sbrk+0x38>)
 8001cae:	4c0a      	ldr	r4, [pc, #40]	; (8001cd8 <_sbrk+0x3c>)
 8001cb0:	4403      	add	r3, r0
 8001cb2:	1b09      	subs	r1, r1, r4
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d906      	bls.n	8001cc6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001cb8:	f002 fb04 	bl	80042c4 <__errno>
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001cc4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001cc6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001cc8:	e7fc      	b.n	8001cc4 <_sbrk+0x28>
 8001cca:	bf00      	nop
 8001ccc:	200003fc 	.word	0x200003fc
 8001cd0:	20000608 	.word	0x20000608
 8001cd4:	20005000 	.word	0x20005000
 8001cd8:	00000400 	.word	0x00000400

08001cdc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(tim_baseHandle->Instance==TIM1)
 8001ce2:	6803      	ldr	r3, [r0, #0]
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <HAL_TIM_Base_MspInit+0x70>)
{
 8001ce6:	4605      	mov	r5, r0
  if(tim_baseHandle->Instance==TIM1)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d123      	bne.n	8001d34 <HAL_TIM_Base_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_TIM_Base_MspInit+0x74>)

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001cee:	4c1a      	ldr	r4, [pc, #104]	; (8001d58 <HAL_TIM_Base_MspInit+0x78>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf0:	699a      	ldr	r2, [r3, #24]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf2:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	699b      	ldr	r3, [r3, #24]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <HAL_TIM_Base_MspInit+0x7c>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d10:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d18:	4620      	mov	r0, r4
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001d1a:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1e:	60a3      	str	r3, [r4, #8]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d20:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d22:	f000 fde5 	bl	80028f0 <HAL_DMA_Init>
 8001d26:	b108      	cbz	r0, 8001d2c <HAL_TIM_Base_MspInit+0x4c>
    {
      Error_Handler();
 8001d28:	f7ff ff2e 	bl	8001b88 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001d2c:	626c      	str	r4, [r5, #36]	; 0x24
 8001d2e:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d30:	b003      	add	sp, #12
 8001d32:	bd30      	pop	{r4, r5, pc}
  else if(tim_baseHandle->Instance==TIM3)
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_TIM_Base_MspInit+0x80>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d1fa      	bne.n	8001d30 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_TIM_Base_MspInit+0x74>)
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	f042 0202 	orr.w	r2, r2, #2
 8001d42:	61da      	str	r2, [r3, #28]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	9b01      	ldr	r3, [sp, #4]
}
 8001d4e:	e7ef      	b.n	8001d30 <HAL_TIM_Base_MspInit+0x50>
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	20000400 	.word	0x20000400
 8001d5c:	4002001c 	.word	0x4002001c
 8001d60:	40000400 	.word	0x40000400

08001d64 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 8001d64:	6803      	ldr	r3, [r0, #0]
{
 8001d66:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM2)
 8001d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6c:	d10a      	bne.n	8001d84 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d6e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	61da      	str	r2, [r3, #28]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d84:	b002      	add	sp, #8
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d88:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	2510      	movs	r5, #16
{
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	462a      	mov	r2, r5
 8001d92:	2100      	movs	r1, #0
 8001d94:	eb0d 0005 	add.w	r0, sp, r5
 8001d98:	f002 fabe 	bl	8004318 <memset>
  if(timHandle->Instance==TIM1)
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	4a35      	ldr	r2, [pc, #212]	; (8001e74 <HAL_TIM_MspPostInit+0xec>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d116      	bne.n	8001dd2 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_TIM_MspPostInit+0xf0>)
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_WS2812_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 8001da6:	4835      	ldr	r0, [pc, #212]	; (8001e7c <HAL_TIM_MspPostInit+0xf4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 8001daa:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	f042 0204 	orr.w	r2, r2, #4
 8001db2:	619a      	str	r2, [r3, #24]
 8001db4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f000 fefd 	bl	8002bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dce:	b009      	add	sp, #36	; 0x24
 8001dd0:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM2)
 8001dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd6:	d12f      	bne.n	8001e38 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001ddc:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	f042 0204 	orr.w	r2, r2, #4
 8001de4:	619a      	str	r2, [r3, #24]
 8001de6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	4824      	ldr	r0, [pc, #144]	; (8001e7c <HAL_TIM_MspPostInit+0xf4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	f002 0204 	and.w	r2, r2, #4
 8001dee:	9201      	str	r2, [sp, #4]
 8001df0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	f042 0208 	orr.w	r2, r2, #8
 8001dfa:	619a      	str	r2, [r3, #24]
 8001dfc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	9302      	str	r3, [sp, #8]
 8001e06:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f000 feda 	bl	8002bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e14:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	481a      	ldr	r0, [pc, #104]	; (8001e80 <HAL_TIM_MspPostInit+0xf8>)
 8001e18:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f000 fed2 	bl	8002bc8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001e24:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <HAL_TIM_MspPostInit+0xfc>)
 8001e26:	6853      	ldr	r3, [r2, #4]
 8001e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001e34:	6053      	str	r3, [r2, #4]
}
 8001e36:	e7ca      	b.n	8001dce <HAL_TIM_MspPostInit+0x46>
  else if(timHandle->Instance==TIM3)
 8001e38:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <HAL_TIM_MspPostInit+0x100>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d1c7      	bne.n	8001dce <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_TIM_MspPostInit+0xf0>)
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e40:	480f      	ldr	r0, [pc, #60]	; (8001e80 <HAL_TIM_MspPostInit+0xf8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	6999      	ldr	r1, [r3, #24]
 8001e44:	f041 0108 	orr.w	r1, r1, #8
 8001e48:	6199      	str	r1, [r3, #24]
 8001e4a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	9303      	str	r3, [sp, #12]
 8001e54:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = BRAKE_PWM_Pin;
 8001e58:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f000 feb3 	bl	8002bc8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_TIM_MspPostInit+0xfc>)
 8001e64:	6853      	ldr	r3, [r2, #4]
 8001e66:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e6a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e72:	e7df      	b.n	8001e34 <HAL_TIM_MspPostInit+0xac>
 8001e74:	40012c00 	.word	0x40012c00
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010800 	.word	0x40010800
 8001e80:	40010c00 	.word	0x40010c00
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40000400 	.word	0x40000400

08001e8c <MX_TIM1_Init>:
{
 8001e8c:	b510      	push	{r4, lr}
 8001e8e:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e90:	2210      	movs	r2, #16
 8001e92:	2100      	movs	r1, #0
 8001e94:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e96:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e98:	f002 fa3e 	bl	8004318 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9c:	221c      	movs	r2, #28
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea8:	f002 fa36 	bl	8004318 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eac:	2220      	movs	r2, #32
 8001eae:	4621      	mov	r1, r4
 8001eb0:	a80e      	add	r0, sp, #56	; 0x38
 8001eb2:	f002 fa31 	bl	8004318 <memset>
  htim1.Instance = TIM1;
 8001eb6:	4828      	ldr	r0, [pc, #160]	; (8001f58 <MX_TIM1_Init+0xcc>)
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <MX_TIM1_Init+0xd0>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim1.Init.Prescaler = 0;
 8001ebe:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 65535;
 8001ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ecc:	f001 fbdc 	bl	8003688 <HAL_TIM_Base_Init>
 8001ed0:	b108      	cbz	r0, 8001ed6 <MX_TIM1_Init+0x4a>
    Error_Handler();
 8001ed2:	f7ff fe59 	bl	8001b88 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eda:	481f      	ldr	r0, [pc, #124]	; (8001f58 <MX_TIM1_Init+0xcc>)
 8001edc:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ede:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ee0:	f001 fcbc 	bl	800385c <HAL_TIM_ConfigClockSource>
 8001ee4:	b108      	cbz	r0, 8001eea <MX_TIM1_Init+0x5e>
    Error_Handler();
 8001ee6:	f7ff fe4f 	bl	8001b88 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eea:	481b      	ldr	r0, [pc, #108]	; (8001f58 <MX_TIM1_Init+0xcc>)
 8001eec:	f001 fbf8 	bl	80036e0 <HAL_TIM_PWM_Init>
 8001ef0:	b108      	cbz	r0, 8001ef6 <MX_TIM1_Init+0x6a>
    Error_Handler();
 8001ef2:	f7ff fe49 	bl	8001b88 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef8:	4817      	ldr	r0, [pc, #92]	; (8001f58 <MX_TIM1_Init+0xcc>)
 8001efa:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f00:	f001 fdaa 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 8001f04:	b108      	cbz	r0, 8001f0a <MX_TIM1_Init+0x7e>
    Error_Handler();
 8001f06:	f7ff fe3f 	bl	8001b88 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4812      	ldr	r0, [pc, #72]	; (8001f58 <MX_TIM1_Init+0xcc>)
 8001f10:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8001f12:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f16:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f1a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f1e:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f20:	f001 fc36 	bl	8003790 <HAL_TIM_PWM_ConfigChannel>
 8001f24:	b108      	cbz	r0, 8001f2a <MX_TIM1_Init+0x9e>
    Error_Handler();
 8001f26:	f7ff fe2f 	bl	8001b88 <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f2a:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <MX_TIM1_Init+0xcc>)
 8001f32:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f34:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f38:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f3c:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f3e:	9213      	str	r2, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f40:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f42:	f001 fdb7 	bl	8003ab4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f46:	b108      	cbz	r0, 8001f4c <MX_TIM1_Init+0xc0>
    Error_Handler();
 8001f48:	f7ff fe1e 	bl	8001b88 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <MX_TIM1_Init+0xcc>)
 8001f4e:	f7ff ff1b 	bl	8001d88 <HAL_TIM_MspPostInit>
}
 8001f52:	b016      	add	sp, #88	; 0x58
 8001f54:	bd10      	pop	{r4, pc}
 8001f56:	bf00      	nop
 8001f58:	20000444 	.word	0x20000444
 8001f5c:	40012c00 	.word	0x40012c00

08001f60 <MX_TIM2_Init>:
{
 8001f60:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f62:	2400      	movs	r4, #0
{
 8001f64:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f66:	221c      	movs	r2, #28
 8001f68:	4621      	mov	r1, r4
 8001f6a:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f70:	f002 f9d2 	bl	8004318 <memset>
  htim2.Init.Prescaler = 9;
 8001f74:	2309      	movs	r3, #9
 8001f76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8001f7a:	4818      	ldr	r0, [pc, #96]	; (8001fdc <MX_TIM2_Init+0x7c>)
  htim2.Init.Prescaler = 9;
 8001f7c:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.Period = 8999;
 8001f80:	f242 3327 	movw	r3, #8999	; 0x2327
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f84:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f86:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f8c:	f001 fba8 	bl	80036e0 <HAL_TIM_PWM_Init>
 8001f90:	b108      	cbz	r0, 8001f96 <MX_TIM2_Init+0x36>
    Error_Handler();
 8001f92:	f7ff fdf9 	bl	8001b88 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f96:	4811      	ldr	r0, [pc, #68]	; (8001fdc <MX_TIM2_Init+0x7c>)
 8001f98:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f9e:	f001 fd5b 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa2:	b108      	cbz	r0, 8001fa8 <MX_TIM2_Init+0x48>
    Error_Handler();
 8001fa4:	f7ff fdf0 	bl	8001b88 <Error_Handler>
  sConfigOC.Pulse = 0;
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fac:	480b      	ldr	r0, [pc, #44]	; (8001fdc <MX_TIM2_Init+0x7c>)
 8001fae:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 0;
 8001fb0:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb4:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb6:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb8:	f001 fbea 	bl	8003790 <HAL_TIM_PWM_ConfigChannel>
 8001fbc:	b108      	cbz	r0, 8001fc2 <MX_TIM2_Init+0x62>
    Error_Handler();
 8001fbe:	f7ff fde3 	bl	8001b88 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_TIM2_Init+0x7c>)
 8001fc6:	a903      	add	r1, sp, #12
 8001fc8:	f001 fbe2 	bl	8003790 <HAL_TIM_PWM_ConfigChannel>
 8001fcc:	b108      	cbz	r0, 8001fd2 <MX_TIM2_Init+0x72>
    Error_Handler();
 8001fce:	f7ff fddb 	bl	8001b88 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8001fd2:	4802      	ldr	r0, [pc, #8]	; (8001fdc <MX_TIM2_Init+0x7c>)
 8001fd4:	f7ff fed8 	bl	8001d88 <HAL_TIM_MspPostInit>
}
 8001fd8:	b00a      	add	sp, #40	; 0x28
 8001fda:	bd10      	pop	{r4, pc}
 8001fdc:	2000048c 	.word	0x2000048c

08001fe0 <MX_TIM3_Init>:
{
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	a803      	add	r0, sp, #12
 8001fea:	f002 f995 	bl	8004318 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fee:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ff0:	221c      	movs	r2, #28
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ffc:	f002 f98c 	bl	8004318 <memset>
  htim3.Instance = TIM3;
 8002000:	481d      	ldr	r0, [pc, #116]	; (8002078 <MX_TIM3_Init+0x98>)
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <MX_TIM3_Init+0x9c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8002006:	e9c0 3400 	strd	r3, r4, [r0]
  htim3.Init.Period = 65535;
 800200a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	6184      	str	r4, [r0, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002010:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002014:	f001 fb38 	bl	8003688 <HAL_TIM_Base_Init>
 8002018:	b108      	cbz	r0, 800201e <MX_TIM3_Init+0x3e>
    Error_Handler();
 800201a:	f7ff fdb5 	bl	8001b88 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002022:	4815      	ldr	r0, [pc, #84]	; (8002078 <MX_TIM3_Init+0x98>)
 8002024:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002026:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002028:	f001 fc18 	bl	800385c <HAL_TIM_ConfigClockSource>
 800202c:	b108      	cbz	r0, 8002032 <MX_TIM3_Init+0x52>
    Error_Handler();
 800202e:	f7ff fdab 	bl	8001b88 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002032:	4811      	ldr	r0, [pc, #68]	; (8002078 <MX_TIM3_Init+0x98>)
 8002034:	f001 fb54 	bl	80036e0 <HAL_TIM_PWM_Init>
 8002038:	b108      	cbz	r0, 800203e <MX_TIM3_Init+0x5e>
    Error_Handler();
 800203a:	f7ff fda5 	bl	8001b88 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203e:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <MX_TIM3_Init+0x98>)
 8002042:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002044:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002048:	f001 fd06 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 800204c:	b108      	cbz	r0, 8002052 <MX_TIM3_Init+0x72>
    Error_Handler();
 800204e:	f7ff fd9b 	bl	8001b88 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002052:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002054:	2200      	movs	r2, #0
 8002056:	4808      	ldr	r0, [pc, #32]	; (8002078 <MX_TIM3_Init+0x98>)
 8002058:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 800205a:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800205e:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002060:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002062:	f001 fb95 	bl	8003790 <HAL_TIM_PWM_ConfigChannel>
 8002066:	b108      	cbz	r0, 800206c <MX_TIM3_Init+0x8c>
    Error_Handler();
 8002068:	f7ff fd8e 	bl	8001b88 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <MX_TIM3_Init+0x98>)
 800206e:	f7ff fe8b 	bl	8001d88 <HAL_TIM_MspPostInit>
}
 8002072:	b00e      	add	sp, #56	; 0x38
 8002074:	bd10      	pop	{r4, pc}
 8002076:	bf00      	nop
 8002078:	200004d4 	.word	0x200004d4
 800207c:	40000400 	.word	0x40000400

08002080 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002080:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002082:	480a      	ldr	r0, [pc, #40]	; (80020ac <MX_USART1_UART_Init+0x2c>)
  huart1.Init.BaudRate = 250000;
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <MX_USART1_UART_Init+0x30>)
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_USART1_UART_Init+0x34>)
 8002088:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800208c:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800208e:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002090:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002094:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002098:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800209a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800209c:	f001 fdce 	bl	8003c3c <HAL_UART_Init>
 80020a0:	b118      	cbz	r0, 80020aa <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80020a6:	f7ff bd6f 	b.w	8001b88 <Error_Handler>
}
 80020aa:	bd08      	pop	{r3, pc}
 80020ac:	20000560 	.word	0x20000560
 80020b0:	40013800 	.word	0x40013800
 80020b4:	0003d090 	.word	0x0003d090

080020b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020b8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020ba:	480a      	ldr	r0, [pc, #40]	; (80020e4 <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate = 2000000;
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <MX_USART2_UART_Init+0x30>)
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_USART2_UART_Init+0x34>)
 80020c0:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c4:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020c6:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020cc:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020d0:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d2:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020d4:	f001 fdb2 	bl	8003c3c <HAL_UART_Init>
 80020d8:	b118      	cbz	r0, 80020e2 <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80020de:	f7ff bd53 	b.w	8001b88 <Error_Handler>
}
 80020e2:	bd08      	pop	{r3, pc}
 80020e4:	200005a8 	.word	0x200005a8
 80020e8:	40004400 	.word	0x40004400
 80020ec:	001e8480 	.word	0x001e8480

080020f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	2210      	movs	r2, #16
{
 80020f2:	b570      	push	{r4, r5, r6, lr}
 80020f4:	4606      	mov	r6, r0
 80020f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	eb0d 0002 	add.w	r0, sp, r2
 80020fc:	2100      	movs	r1, #0
 80020fe:	f002 f90b 	bl	8004318 <memset>
  if(uartHandle->Instance==USART1)
 8002102:	6833      	ldr	r3, [r6, #0]
 8002104:	4a3c      	ldr	r2, [pc, #240]	; (80021f8 <HAL_UART_MspInit+0x108>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d131      	bne.n	800216e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800210a:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <HAL_UART_MspInit+0x10c>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8002110:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	483b      	ldr	r0, [pc, #236]	; (8002200 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002114:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002118:	619a      	str	r2, [r3, #24]
 800211a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211c:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800211e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002122:	9200      	str	r2, [sp, #0]
 8002124:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	f042 0204 	orr.w	r2, r2, #4
 800212c:	619a      	str	r2, [r3, #24]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002142:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f000 fd40 	bl	8002bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002148:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	482c      	ldr	r0, [pc, #176]	; (8002200 <HAL_UART_MspInit+0x110>)
 800214e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002150:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f000 fd37 	bl	8002bc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800215a:	2025      	movs	r0, #37	; 0x25
 800215c:	4622      	mov	r2, r4
 800215e:	2101      	movs	r1, #1
 8002160:	f000 fb72 	bl	8002848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002164:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002166:	f000 fba1 	bl	80028ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800216a:	b008      	add	sp, #32
 800216c:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 800216e:	4a25      	ldr	r2, [pc, #148]	; (8002204 <HAL_UART_MspInit+0x114>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d1fa      	bne.n	800216a <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_UART_MspInit+0x10c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	4822      	ldr	r0, [pc, #136]	; (8002200 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002178:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800217c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002180:	61da      	str	r2, [r3, #28]
 8002182:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002184:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002186:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800218a:	9202      	str	r2, [sp, #8]
 800218c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	699a      	ldr	r2, [r3, #24]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002190:	4c1d      	ldr	r4, [pc, #116]	; (8002208 <HAL_UART_MspInit+0x118>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	f042 0204 	orr.w	r2, r2, #4
 8002196:	619a      	str	r2, [r3, #24]
 8002198:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	9303      	str	r3, [sp, #12]
 80021a2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f000 fd0b 	bl	8002bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b2:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	4812      	ldr	r0, [pc, #72]	; (8002200 <HAL_UART_MspInit+0x110>)
 80021b6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b8:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f000 fd03 	bl	8002bc8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_UART_MspInit+0x11c>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021c4:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c6:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021ca:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80021d0:	2320      	movs	r3, #32
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d2:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021d4:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d8:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021da:	f000 fb89 	bl	80028f0 <HAL_DMA_Init>
 80021de:	b108      	cbz	r0, 80021e4 <HAL_UART_MspInit+0xf4>
      Error_Handler();
 80021e0:	f7ff fcd2 	bl	8001b88 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2026      	movs	r0, #38	; 0x26
 80021e8:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80021ea:	63f4      	str	r4, [r6, #60]	; 0x3c
 80021ec:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021ee:	f000 fb2b 	bl	8002848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021f2:	2026      	movs	r0, #38	; 0x26
 80021f4:	e7b7      	b.n	8002166 <HAL_UART_MspInit+0x76>
 80021f6:	bf00      	nop
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010800 	.word	0x40010800
 8002204:	40004400 	.word	0x40004400
 8002208:	2000051c 	.word	0x2000051c
 800220c:	4002006c 	.word	0x4002006c

08002210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002210:	f7ff fd64 	bl	8001cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002216:	490c      	ldr	r1, [pc, #48]	; (8002248 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002218:	4a0c      	ldr	r2, [pc, #48]	; (800224c <LoopFillZerobss+0x16>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800222c:	4c09      	ldr	r4, [pc, #36]	; (8002254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800223a:	f002 f849 	bl	80042d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800223e:	f7ff fc45 	bl	8001acc <main>
  bx lr
 8002242:	4770      	bx	lr
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800224c:	08009258 	.word	0x08009258
  ldr r2, =_sbss
 8002250:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002254:	20000604 	.word	0x20000604

08002258 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <CAN1_RX1_IRQHandler>
	...

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <HAL_InitTick+0x3c>)
{
 8002260:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002262:	7818      	ldrb	r0, [r3, #0]
 8002264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002268:	fbb3 f3f0 	udiv	r3, r3, r0
 800226c:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_InitTick+0x40>)
 800226e:	6810      	ldr	r0, [r2, #0]
 8002270:	fbb0 f0f3 	udiv	r0, r0, r3
 8002274:	f000 fb28 	bl	80028c8 <HAL_SYSTICK_Config>
 8002278:	4604      	mov	r4, r0
 800227a:	b958      	cbnz	r0, 8002294 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227c:	2d0f      	cmp	r5, #15
 800227e:	d809      	bhi.n	8002294 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002280:	4602      	mov	r2, r0
 8002282:	4629      	mov	r1, r5
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f000 fade 	bl	8002848 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800228c:	4620      	mov	r0, r4
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_InitTick+0x44>)
 8002290:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002292:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002294:	2001      	movs	r0, #1
 8002296:	e7fc      	b.n	8002292 <HAL_InitTick+0x36>
 8002298:	20000010 	.word	0x20000010
 800229c:	2000000c 	.word	0x2000000c
 80022a0:	20000014 	.word	0x20000014

080022a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <HAL_Init+0x20>)
{
 80022a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ac:	f043 0310 	orr.w	r3, r3, #16
 80022b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b2:	f000 fab7 	bl	8002824 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	200f      	movs	r0, #15
 80022b8:	f7ff ffd0 	bl	800225c <HAL_InitTick>
  HAL_MspInit();
 80022bc:	f7ff fc66 	bl	8001b8c <HAL_MspInit>
}
 80022c0:	2000      	movs	r0, #0
 80022c2:	bd08      	pop	{r3, pc}
 80022c4:	40022000 	.word	0x40022000

080022c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_IncTick+0x10>)
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_IncTick+0x14>)
 80022cc:	6811      	ldr	r1, [r2, #0]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	440b      	add	r3, r1
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200005f0 	.word	0x200005f0
 80022dc:	20000010 	.word	0x20000010

080022e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022e0:	4b01      	ldr	r3, [pc, #4]	; (80022e8 <HAL_GetTick+0x8>)
 80022e2:	6818      	ldr	r0, [r3, #0]
}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	200005f0 	.word	0x200005f0

080022ec <HAL_ADC_ConvCpltCallback>:
 80022ec:	4770      	bx	lr

080022ee <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80022f0:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80022f8:	d11b      	bne.n	8002332 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002300:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	6892      	ldr	r2, [r2, #8]
 8002306:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800230a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800230e:	d10c      	bne.n	800232a <ADC_DMAConvCplt+0x3c>
 8002310:	7b1a      	ldrb	r2, [r3, #12]
 8002312:	b952      	cbnz	r2, 800232a <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800231c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800231e:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002320:	bf5e      	ittt	pl
 8002322:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8002324:	f042 0201 	orrpl.w	r2, r2, #1
 8002328:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ffde 	bl	80022ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002330:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002332:	6a1b      	ldr	r3, [r3, #32]
}
 8002334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4718      	bx	r3

0800233c <HAL_ADC_ConvHalfCpltCallback>:
 800233c:	4770      	bx	lr

0800233e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800233e:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002340:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002342:	f7ff fffb 	bl	800233c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002346:	bd08      	pop	{r3, pc}

08002348 <HAL_ADC_LevelOutOfWindowCallback>:
 8002348:	4770      	bx	lr

0800234a <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 800234a:	6803      	ldr	r3, [r0, #0]
{
 800234c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 800234e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002350:	685e      	ldr	r6, [r3, #4]
{
 8002352:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002354:	06b0      	lsls	r0, r6, #26
 8002356:	d526      	bpl.n	80023a6 <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002358:	07a9      	lsls	r1, r5, #30
 800235a:	d524      	bpl.n	80023a6 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800235c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800235e:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002360:	bf5e      	ittt	pl
 8002362:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8002364:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8002368:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002370:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002374:	d110      	bne.n	8002398 <HAL_ADC_IRQHandler+0x4e>
 8002376:	7b22      	ldrb	r2, [r4, #12]
 8002378:	b972      	cbnz	r2, 8002398 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	f022 0220 	bic.w	r2, r2, #32
 8002380:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002388:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800238a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800238c:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800238e:	bf5e      	ittt	pl
 8002390:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8002392:	f043 0301 	orrpl.w	r3, r3, #1
 8002396:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff ffa7 	bl	80022ec <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800239e:	f06f 0212 	mvn.w	r2, #18
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80023a6:	0631      	lsls	r1, r6, #24
 80023a8:	d530      	bpl.n	800240c <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80023aa:	076a      	lsls	r2, r5, #29
 80023ac:	d52e      	bpl.n	800240c <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023b0:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023b2:	bf5e      	ittt	pl
 80023b4:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80023b6:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 80023ba:	62a3      	strpl	r3, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80023c4:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80023c8:	d00a      	beq.n	80023e0 <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023ca:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023cc:	0550      	lsls	r0, r2, #21
 80023ce:	d416      	bmi.n	80023fe <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023d6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80023da:	d110      	bne.n	80023fe <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023dc:	7b22      	ldrb	r2, [r4, #12]
 80023de:	b972      	cbnz	r2, 80023fe <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e6:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80023e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023ee:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023f2:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f4:	bf5e      	ittt	pl
 80023f6:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80023f8:	f043 0301 	orrpl.w	r3, r3, #1
 80023fc:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023fe:	4620      	mov	r0, r4
 8002400:	f000 fa0e 	bl	8002820 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002404:	f06f 020c 	mvn.w	r2, #12
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800240c:	0672      	lsls	r2, r6, #25
 800240e:	d50c      	bpl.n	800242a <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002410:	07eb      	lsls	r3, r5, #31
 8002412:	d50a      	bpl.n	800242a <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002416:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800241e:	f7ff ff93 	bl	8002348 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002422:	f06f 0201 	mvn.w	r2, #1
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bd70      	pop	{r4, r5, r6, pc}

0800242c <HAL_ADC_ErrorCallback>:
 800242c:	4770      	bx	lr

0800242e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800242e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002430:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002432:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002438:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800243a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002442:	f7ff fff3 	bl	800242c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002446:	bd08      	pop	{r3, pc}

08002448 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002448:	2300      	movs	r3, #0
{ 
 800244a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800244c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800244e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8002452:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002454:	2b01      	cmp	r3, #1
 8002456:	d06c      	beq.n	8002532 <HAL_ADC_ConfigChannel+0xea>
 8002458:	2301      	movs	r3, #1
 800245a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800245e:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002460:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8002462:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002464:	6808      	ldr	r0, [r1, #0]
 8002466:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 800246a:	d822      	bhi.n	80024b2 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800246c:	261f      	movs	r6, #31
 800246e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8002470:	3b05      	subs	r3, #5
 8002472:	409e      	lsls	r6, r3
 8002474:	ea25 0506 	bic.w	r5, r5, r6
 8002478:	fa00 f303 	lsl.w	r3, r0, r3
 800247c:	432b      	orrs	r3, r5
 800247e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002480:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002482:	688b      	ldr	r3, [r1, #8]
 8002484:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8002488:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800248c:	d929      	bls.n	80024e2 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800248e:	68d6      	ldr	r6, [r2, #12]
 8002490:	3d1e      	subs	r5, #30
 8002492:	40a9      	lsls	r1, r5
 8002494:	ea26 0101 	bic.w	r1, r6, r1
 8002498:	40ab      	lsls	r3, r5
 800249a:	430b      	orrs	r3, r1
 800249c:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800249e:	f1a0 0310 	sub.w	r3, r0, #16
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d925      	bls.n	80024f2 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80024a8:	2300      	movs	r3, #0
 80024aa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80024ae:	b002      	add	sp, #8
 80024b0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80024b2:	2d0c      	cmp	r5, #12
 80024b4:	f04f 051f 	mov.w	r5, #31
 80024b8:	d809      	bhi.n	80024ce <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024ba:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80024bc:	3b23      	subs	r3, #35	; 0x23
 80024be:	409d      	lsls	r5, r3
 80024c0:	ea26 0505 	bic.w	r5, r6, r5
 80024c4:	fa00 f303 	lsl.w	r3, r0, r3
 80024c8:	432b      	orrs	r3, r5
 80024ca:	6313      	str	r3, [r2, #48]	; 0x30
 80024cc:	e7d8      	b.n	8002480 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024ce:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80024d0:	3b41      	subs	r3, #65	; 0x41
 80024d2:	409d      	lsls	r5, r3
 80024d4:	ea26 0505 	bic.w	r5, r6, r5
 80024d8:	fa00 f303 	lsl.w	r3, r0, r3
 80024dc:	432b      	orrs	r3, r5
 80024de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80024e0:	e7ce      	b.n	8002480 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024e2:	6910      	ldr	r0, [r2, #16]
 80024e4:	40a9      	lsls	r1, r5
 80024e6:	ea20 0101 	bic.w	r1, r0, r1
 80024ea:	40ab      	lsls	r3, r5
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6113      	str	r3, [r2, #16]
 80024f0:	e7d9      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_ADC_ConfigChannel+0xf0>)
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d116      	bne.n	8002526 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024f8:	6893      	ldr	r3, [r2, #8]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	d4d3      	bmi.n	80024a6 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024fe:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002500:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002502:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002506:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002508:	d1cd      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_ADC_ConfigChannel+0xf4>)
 800250c:	4a0c      	ldr	r2, [pc, #48]	; (8002540 <HAL_ADC_ConfigChannel+0xf8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fbb3 f3f2 	udiv	r3, r3, r2
 8002514:	220a      	movs	r2, #10
 8002516:	4353      	muls	r3, r2
            wait_loop_index--;
 8002518:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800251a:	9b01      	ldr	r3, [sp, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0c2      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8002520:	9b01      	ldr	r3, [sp, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	e7f8      	b.n	8002518 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002526:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002528:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800252a:	f043 0320 	orr.w	r3, r3, #32
 800252e:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002530:	e7ba      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8002532:	2002      	movs	r0, #2
 8002534:	e7bb      	b.n	80024ae <HAL_ADC_ConfigChannel+0x66>
 8002536:	bf00      	nop
 8002538:	40012400 	.word	0x40012400
 800253c:	2000000c 	.word	0x2000000c
 8002540:	000f4240 	.word	0x000f4240

08002544 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8002544:	2300      	movs	r3, #0
{
 8002546:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002548:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800254a:	6803      	ldr	r3, [r0, #0]
{
 800254c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	07d2      	lsls	r2, r2, #31
 8002552:	d502      	bpl.n	800255a <ADC_Enable+0x16>
  return HAL_OK;
 8002554:	2000      	movs	r0, #0
}
 8002556:	b003      	add	sp, #12
 8002558:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <ADC_Enable+0x70>)
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <ADC_Enable+0x74>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800256c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800256e:	9b01      	ldr	r3, [sp, #4]
 8002570:	b9e3      	cbnz	r3, 80025ac <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8002572:	f7ff feb5 	bl	80022e0 <HAL_GetTick>
 8002576:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	07db      	lsls	r3, r3, #31
 800257e:	d4e9      	bmi.n	8002554 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002580:	f7ff feae 	bl	80022e0 <HAL_GetTick>
 8002584:	1b40      	subs	r0, r0, r5
 8002586:	2802      	cmp	r0, #2
 8002588:	d9f6      	bls.n	8002578 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f013 0301 	ands.w	r3, r3, #1
 8002592:	d1f1      	bne.n	8002578 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002594:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8002596:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002598:	f042 0210 	orr.w	r2, r2, #16
 800259c:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80025a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80025aa:	e7d4      	b.n	8002556 <ADC_Enable+0x12>
      wait_loop_index--;
 80025ac:	9b01      	ldr	r3, [sp, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	e7dc      	b.n	800256c <ADC_Enable+0x28>
 80025b2:	bf00      	nop
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	000f4240 	.word	0x000f4240

080025bc <HAL_ADC_Start_DMA>:
{
 80025bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80025c0:	4b40      	ldr	r3, [pc, #256]	; (80026c4 <HAL_ADC_Start_DMA+0x108>)
{
 80025c2:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80025c4:	6802      	ldr	r2, [r0, #0]
{
 80025c6:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80025c8:	429a      	cmp	r2, r3
{
 80025ca:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80025cc:	d002      	beq.n	80025d4 <HAL_ADC_Start_DMA+0x18>
 80025ce:	493e      	ldr	r1, [pc, #248]	; (80026c8 <HAL_ADC_Start_DMA+0x10c>)
 80025d0:	428a      	cmp	r2, r1
 80025d2:	d103      	bne.n	80025dc <HAL_ADC_Start_DMA+0x20>
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80025da:	d16e      	bne.n	80026ba <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80025dc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d06c      	beq.n	80026be <HAL_ADC_Start_DMA+0x102>
 80025e4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80025e6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80025e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80025ec:	f7ff ffaa 	bl	8002544 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80025f0:	4606      	mov	r6, r0
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d15d      	bne.n	80026b2 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80025f6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025f8:	6821      	ldr	r1, [r4, #0]
 80025fa:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80025fc:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8002600:	f025 0501 	bic.w	r5, r5, #1
 8002604:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002608:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800260a:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800260c:	d104      	bne.n	8002618 <HAL_ADC_Start_DMA+0x5c>
 800260e:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <HAL_ADC_Start_DMA+0x108>)
 8002610:	6853      	ldr	r3, [r2, #4]
 8002612:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002616:	d13e      	bne.n	8002696 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800261a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800261e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002620:	684b      	ldr	r3, [r1, #4]
 8002622:	055a      	lsls	r2, r3, #21
 8002624:	d505      	bpl.n	8002632 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002628:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800262c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002630:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002632:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002634:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002636:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800263a:	bf18      	it	ne
 800263c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800263e:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002640:	bf18      	it	ne
 8002642:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002646:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002648:	2300      	movs	r3, #0
 800264a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800264e:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002650:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002652:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_ADC_Start_DMA+0x114>)
 8002656:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002658:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <HAL_ADC_Start_DMA+0x118>)
 800265a:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800265c:	f06f 0302 	mvn.w	r3, #2
 8002660:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002664:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002670:	4643      	mov	r3, r8
 8002672:	f000 f96f 	bl	8002954 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800267e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	bf0c      	ite	eq
 8002686:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800268a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	4630      	mov	r0, r6
 8002692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800269c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800269e:	6853      	ldr	r3, [r2, #4]
 80026a0:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026a2:	bf41      	itttt	mi
 80026a4:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80026a6:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80026aa:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80026ae:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80026b0:	e7bf      	b.n	8002632 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80026b2:	2300      	movs	r3, #0
 80026b4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80026b8:	e7ea      	b.n	8002690 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80026ba:	2601      	movs	r6, #1
 80026bc:	e7e8      	b.n	8002690 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80026be:	2602      	movs	r6, #2
 80026c0:	e7e6      	b.n	8002690 <HAL_ADC_Start_DMA+0xd4>
 80026c2:	bf00      	nop
 80026c4:	40012400 	.word	0x40012400
 80026c8:	40012800 	.word	0x40012800
 80026cc:	080022ef 	.word	0x080022ef
 80026d0:	0800233f 	.word	0x0800233f
 80026d4:	0800242f 	.word	0x0800242f

080026d8 <ADC_ConversionStop_Disable>:
{
 80026d8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026da:	6803      	ldr	r3, [r0, #0]
{
 80026dc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	07d1      	lsls	r1, r2, #31
 80026e2:	d401      	bmi.n	80026e8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80026e4:	2000      	movs	r0, #0
}
 80026e6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80026f0:	f7ff fdf6 	bl	80022e0 <HAL_GetTick>
 80026f4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	07db      	lsls	r3, r3, #31
 80026fc:	d5f2      	bpl.n	80026e4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026fe:	f7ff fdef 	bl	80022e0 <HAL_GetTick>
 8002702:	1b40      	subs	r0, r0, r5
 8002704:	2802      	cmp	r0, #2
 8002706:	d9f6      	bls.n	80026f6 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	07da      	lsls	r2, r3, #31
 800270e:	d5f2      	bpl.n	80026f6 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002710:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8002712:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002714:	f043 0310 	orr.w	r3, r3, #16
 8002718:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002722:	e7e0      	b.n	80026e6 <ADC_ConversionStop_Disable+0xe>

08002724 <HAL_ADC_Init>:
{
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8002726:	4604      	mov	r4, r0
 8002728:	2800      	cmp	r0, #0
 800272a:	d06e      	beq.n	800280a <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800272c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800272e:	b923      	cbnz	r3, 800273a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002730:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002732:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002736:	f7fe ff71 	bl	800161c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff ffcc 	bl	80026d8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002742:	f013 0310 	ands.w	r3, r3, #16
 8002746:	d162      	bne.n	800280e <HAL_ADC_Init+0xea>
 8002748:	2800      	cmp	r0, #0
 800274a:	d160      	bne.n	800280e <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 800274c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800274e:	69e5      	ldr	r5, [r4, #28]
 8002750:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002752:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002756:	f022 0202 	bic.w	r2, r2, #2
 800275a:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800275e:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002760:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002762:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002764:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002766:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800276a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800276e:	d037      	beq.n	80027e0 <HAL_ADC_Init+0xbc>
 8002770:	2d01      	cmp	r5, #1
 8002772:	bf14      	ite	ne
 8002774:	2700      	movne	r7, #0
 8002776:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800277a:	7d26      	ldrb	r6, [r4, #20]
 800277c:	2e01      	cmp	r6, #1
 800277e:	d106      	bne.n	800278e <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002780:	bb82      	cbnz	r2, 80027e4 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002782:	69a2      	ldr	r2, [r4, #24]
 8002784:	3a01      	subs	r2, #1
 8002786:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 800278a:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800278e:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002790:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002794:	6856      	ldr	r6, [r2, #4]
 8002796:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 800279a:	ea46 0607 	orr.w	r6, r6, r7
 800279e:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80027a0:	6897      	ldr	r7, [r2, #8]
 80027a2:	4e1d      	ldr	r6, [pc, #116]	; (8002818 <HAL_ADC_Init+0xf4>)
 80027a4:	ea06 0607 	and.w	r6, r6, r7
 80027a8:	ea46 0601 	orr.w	r6, r6, r1
 80027ac:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027ae:	d001      	beq.n	80027b4 <HAL_ADC_Init+0x90>
 80027b0:	2d01      	cmp	r5, #1
 80027b2:	d102      	bne.n	80027ba <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027b4:	6923      	ldr	r3, [r4, #16]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80027ba:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80027bc:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80027c0:	432b      	orrs	r3, r5
 80027c2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027c4:	6892      	ldr	r2, [r2, #8]
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_ADC_Init+0xf8>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	4299      	cmp	r1, r3
 80027cc:	d113      	bne.n	80027f6 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 80027ce:	2300      	movs	r3, #0
 80027d0:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80027d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027d4:	f023 0303 	bic.w	r3, r3, #3
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80027de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027e0:	462f      	mov	r7, r5
 80027e2:	e7ca      	b.n	800277a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027e6:	f042 0220 	orr.w	r2, r2, #32
 80027ea:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80027f4:	e7cb      	b.n	800278e <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 80027f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027f8:	f023 0312 	bic.w	r3, r3, #18
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002802:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800280a:	2001      	movs	r0, #1
 800280c:	e7e7      	b.n	80027de <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002810:	f043 0310 	orr.w	r3, r3, #16
 8002814:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002816:	e7f8      	b.n	800280a <HAL_ADC_Init+0xe6>
 8002818:	ffe1f7fd 	.word	0xffe1f7fd
 800281c:	ff1f0efe 	.word	0xff1f0efe

08002820 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002820:	4770      	bx	lr
	...

08002824 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002826:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800282a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002832:	0412      	lsls	r2, r2, #16
 8002834:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800283c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002840:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800284a:	b530      	push	{r4, r5, lr}
 800284c:	68dc      	ldr	r4, [r3, #12]
 800284e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002852:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	2b04      	cmp	r3, #4
 800285a:	bf28      	it	cs
 800285c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002864:	bf98      	it	ls
 8002866:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286c:	bf88      	it	hi
 800286e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	ea21 0303 	bic.w	r3, r1, r3
 8002874:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002876:	fa05 f404 	lsl.w	r4, r5, r4
 800287a:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800287e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	bfac      	ite	ge
 8002886:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288a:	4a07      	ldrlt	r2, [pc, #28]	; (80028a8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002890:	b2db      	uxtb	r3, r3
 8002892:	bfab      	itete	ge
 8002894:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80028a2:	bd30      	pop	{r4, r5, pc}
 80028a4:	e000ed00 	.word	0xe000ed00
 80028a8:	e000ed14 	.word	0xe000ed14

080028ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028ac:	2800      	cmp	r0, #0
 80028ae:	db08      	blt.n	80028c2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b0:	2301      	movs	r3, #1
 80028b2:	0942      	lsrs	r2, r0, #5
 80028b4:	f000 001f 	and.w	r0, r0, #31
 80028b8:	fa03 f000 	lsl.w	r0, r3, r0
 80028bc:	4b01      	ldr	r3, [pc, #4]	; (80028c4 <HAL_NVIC_EnableIRQ+0x18>)
 80028be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80028c2:	4770      	bx	lr
 80028c4:	e000e100 	.word	0xe000e100

080028c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	3801      	subs	r0, #1
 80028ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80028ce:	d20b      	bcs.n	80028e8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	21f0      	movs	r1, #240	; 0xf0
 80028d6:	4a05      	ldr	r2, [pc, #20]	; (80028ec <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028de:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80028e8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028f2:	b348      	cbz	r0, 8002948 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028f4:	2214      	movs	r2, #20
 80028f6:	6801      	ldr	r1, [r0, #0]
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_DMA_Init+0x5c>)
 80028fa:	440b      	add	r3, r1
 80028fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_DMA_Init+0x60>)
 8002906:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002908:	2302      	movs	r3, #2
 800290a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800290e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8002912:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002914:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8002916:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002918:	4323      	orrs	r3, r4
 800291a:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800291c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002920:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002922:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002924:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002928:	4323      	orrs	r3, r4
 800292a:	6984      	ldr	r4, [r0, #24]
 800292c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800292e:	69c4      	ldr	r4, [r0, #28]
 8002930:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002932:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002934:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002936:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002938:	2300      	movs	r3, #0
 800293a:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800293c:	f880 3020 	strb.w	r3, [r0, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002940:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  return HAL_OK;
 8002944:	4618      	mov	r0, r3
}
 8002946:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002948:	2001      	movs	r0, #1
 800294a:	e7fc      	b.n	8002946 <HAL_DMA_Init+0x56>
 800294c:	bffdfff8 	.word	0xbffdfff8
 8002950:	40020000 	.word	0x40020000

08002954 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002956:	f890 4020 	ldrb.w	r4, [r0, #32]
 800295a:	2c01      	cmp	r4, #1
 800295c:	d034      	beq.n	80029c8 <HAL_DMA_Start_IT+0x74>
 800295e:	2401      	movs	r4, #1
 8002960:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002964:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8002968:	2600      	movs	r6, #0
 800296a:	2c01      	cmp	r4, #1
 800296c:	b2e5      	uxtb	r5, r4
 800296e:	f04f 0402 	mov.w	r4, #2
 8002972:	d127      	bne.n	80029c4 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002974:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002978:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800297c:	6826      	ldr	r6, [r4, #0]
 800297e:	f026 0601 	bic.w	r6, r6, #1
 8002982:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002984:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8002988:	40bd      	lsls	r5, r7
 800298a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800298c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800298e:	6843      	ldr	r3, [r0, #4]
 8002990:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002992:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002994:	bf0b      	itete	eq
 8002996:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002998:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800299a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800299c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800299e:	b14b      	cbz	r3, 80029b4 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029a8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6023      	str	r3, [r4, #0]
}
 80029b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	f023 0304 	bic.w	r3, r3, #4
 80029ba:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	f043 030a 	orr.w	r3, r3, #10
 80029c2:	e7f0      	b.n	80029a6 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80029c4:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80029c8:	2002      	movs	r0, #2
 80029ca:	e7f2      	b.n	80029b2 <HAL_DMA_Start_IT+0x5e>

080029cc <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029cc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d006      	beq.n	80029e2 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d4:	2304      	movs	r3, #4
 80029d6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80029d8:	2300      	movs	r3, #0
 80029da:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80029de:	2001      	movs	r0, #1
 80029e0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e2:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029e4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	f022 020e 	bic.w	r2, r2, #14
 80029ec:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029f6:	2201      	movs	r2, #1
 80029f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	604b      	str	r3, [r1, #4]
  __HAL_UNLOCK(hdma);      
 8002a00:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002a02:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8002a06:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8002a0a:	4618      	mov	r0, r3
}
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_DMA_Abort_IT>:
{  
 8002a10:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a12:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d003      	beq.n	8002a22 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
}
 8002a20:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a22:	6803      	ldr	r3, [r0, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f022 020e 	bic.w	r2, r2, #14
 8002a2a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a34:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_DMA_Abort_IT+0x88>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01f      	beq.n	8002a7a <HAL_DMA_Abort_IT+0x6a>
 8002a3a:	3214      	adds	r2, #20
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d01e      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x6e>
 8002a40:	3214      	adds	r2, #20
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01d      	beq.n	8002a82 <HAL_DMA_Abort_IT+0x72>
 8002a46:	3214      	adds	r2, #20
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d01d      	beq.n	8002a88 <HAL_DMA_Abort_IT+0x78>
 8002a4c:	3214      	adds	r2, #20
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01d      	beq.n	8002a8e <HAL_DMA_Abort_IT+0x7e>
 8002a52:	3214      	adds	r2, #20
 8002a54:	4293      	cmp	r3, r2
 8002a56:	bf0c      	ite	eq
 8002a58:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002a5c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002a60:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002a62:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a64:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002a6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002a6e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002a72:	b17b      	cbz	r3, 8002a94 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002a74:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002a76:	4620      	mov	r0, r4
 8002a78:	e7d2      	b.n	8002a20 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e7f0      	b.n	8002a60 <HAL_DMA_Abort_IT+0x50>
 8002a7e:	2310      	movs	r3, #16
 8002a80:	e7ee      	b.n	8002a60 <HAL_DMA_Abort_IT+0x50>
 8002a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a86:	e7eb      	b.n	8002a60 <HAL_DMA_Abort_IT+0x50>
 8002a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8c:	e7e8      	b.n	8002a60 <HAL_DMA_Abort_IT+0x50>
 8002a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a92:	e7e5      	b.n	8002a60 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	4618      	mov	r0, r3
 8002a96:	e7c3      	b.n	8002a20 <HAL_DMA_Abort_IT+0x10>
 8002a98:	40020008 	.word	0x40020008
 8002a9c:	40020000 	.word	0x40020000

08002aa0 <HAL_DMA_IRQHandler>:
{
 8002aa0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002aa2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aa4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002aa6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aa8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002aaa:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002aac:	4095      	lsls	r5, r2
 8002aae:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002ab0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ab2:	d032      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x7a>
 8002ab4:	074d      	lsls	r5, r1, #29
 8002ab6:	d530      	bpl.n	8002b1a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002abc:	bf5e      	ittt	pl
 8002abe:	681a      	ldrpl	r2, [r3, #0]
 8002ac0:	f022 0204 	bicpl.w	r2, r2, #4
 8002ac4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ac6:	4a3e      	ldr	r2, [pc, #248]	; (8002bc0 <HAL_DMA_IRQHandler+0x120>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d019      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x60>
 8002acc:	3214      	adds	r2, #20
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d018      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x64>
 8002ad2:	3214      	adds	r2, #20
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d017      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x68>
 8002ad8:	3214      	adds	r2, #20
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d017      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x6e>
 8002ade:	3214      	adds	r2, #20
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d017      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x74>
 8002ae4:	3214      	adds	r2, #20
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	bf0c      	ite	eq
 8002aea:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002aee:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002af2:	4a34      	ldr	r2, [pc, #208]	; (8002bc4 <HAL_DMA_IRQHandler+0x124>)
 8002af4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002af6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d05e      	beq.n	8002bba <HAL_DMA_IRQHandler+0x11a>
}
 8002afc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002afe:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b00:	2304      	movs	r3, #4
 8002b02:	e7f6      	b.n	8002af2 <HAL_DMA_IRQHandler+0x52>
 8002b04:	2340      	movs	r3, #64	; 0x40
 8002b06:	e7f4      	b.n	8002af2 <HAL_DMA_IRQHandler+0x52>
 8002b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b0c:	e7f1      	b.n	8002af2 <HAL_DMA_IRQHandler+0x52>
 8002b0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b12:	e7ee      	b.n	8002af2 <HAL_DMA_IRQHandler+0x52>
 8002b14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b18:	e7eb      	b.n	8002af2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b1a:	2502      	movs	r5, #2
 8002b1c:	4095      	lsls	r5, r2
 8002b1e:	4225      	tst	r5, r4
 8002b20:	d035      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xee>
 8002b22:	078d      	lsls	r5, r1, #30
 8002b24:	d533      	bpl.n	8002b8e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	0694      	lsls	r4, r2, #26
 8002b2a:	d406      	bmi.n	8002b3a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	f022 020a 	bic.w	r2, r2, #10
 8002b32:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002b34:	2201      	movs	r2, #1
 8002b36:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b3a:	4a21      	ldr	r2, [pc, #132]	; (8002bc0 <HAL_DMA_IRQHandler+0x120>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d019      	beq.n	8002b74 <HAL_DMA_IRQHandler+0xd4>
 8002b40:	3214      	adds	r2, #20
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d018      	beq.n	8002b78 <HAL_DMA_IRQHandler+0xd8>
 8002b46:	3214      	adds	r2, #20
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d017      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xdc>
 8002b4c:	3214      	adds	r2, #20
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d017      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xe2>
 8002b52:	3214      	adds	r2, #20
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d017      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xe8>
 8002b58:	3214      	adds	r2, #20
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	bf0c      	ite	eq
 8002b5e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002b62:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002b66:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <HAL_DMA_IRQHandler+0x124>)
 8002b68:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002b70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b72:	e7c1      	b.n	8002af8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b74:	2302      	movs	r3, #2
 8002b76:	e7f6      	b.n	8002b66 <HAL_DMA_IRQHandler+0xc6>
 8002b78:	2320      	movs	r3, #32
 8002b7a:	e7f4      	b.n	8002b66 <HAL_DMA_IRQHandler+0xc6>
 8002b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b80:	e7f1      	b.n	8002b66 <HAL_DMA_IRQHandler+0xc6>
 8002b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b86:	e7ee      	b.n	8002b66 <HAL_DMA_IRQHandler+0xc6>
 8002b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8c:	e7eb      	b.n	8002b66 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b8e:	2508      	movs	r5, #8
 8002b90:	4095      	lsls	r5, r2
 8002b92:	4225      	tst	r5, r4
 8002b94:	d011      	beq.n	8002bba <HAL_DMA_IRQHandler+0x11a>
 8002b96:	0709      	lsls	r1, r1, #28
 8002b98:	d50f      	bpl.n	8002bba <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9a:	6819      	ldr	r1, [r3, #0]
 8002b9c:	f021 010e 	bic.w	r1, r1, #14
 8002ba0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	fa03 f202 	lsl.w	r2, r3, r2
 8002ba8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002baa:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002bac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002bb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002bb8:	e79e      	b.n	8002af8 <HAL_DMA_IRQHandler+0x58>
}
 8002bba:	bc70      	pop	{r4, r5, r6}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40020008 	.word	0x40020008
 8002bc4:	40020000 	.word	0x40020000

08002bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bcc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002bce:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bd0:	4f64      	ldr	r7, [pc, #400]	; (8002d64 <HAL_GPIO_Init+0x19c>)
 8002bd2:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8002bd4:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002d6c <HAL_GPIO_Init+0x1a4>
 8002bd8:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002d70 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bdc:	680d      	ldr	r5, [r1, #0]
 8002bde:	fa35 f406 	lsrs.w	r4, r5, r6
 8002be2:	d102      	bne.n	8002bea <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002be4:	b003      	add	sp, #12
 8002be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002bea:	f04f 0801 	mov.w	r8, #1
 8002bee:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf2:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002bf6:	ea38 0505 	bics.w	r5, r8, r5
 8002bfa:	d17b      	bne.n	8002cf4 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8002bfc:	684d      	ldr	r5, [r1, #4]
 8002bfe:	2d03      	cmp	r5, #3
 8002c00:	d807      	bhi.n	8002c12 <HAL_GPIO_Init+0x4a>
 8002c02:	3d01      	subs	r5, #1
 8002c04:	2d02      	cmp	r5, #2
 8002c06:	f200 8088 	bhi.w	8002d1a <HAL_GPIO_Init+0x152>
 8002c0a:	e8df f005 	tbb	[pc, r5]
 8002c0e:	9b96      	.short	0x9b96
 8002c10:	a1          	.byte	0xa1
 8002c11:	00          	.byte	0x00
 8002c12:	2d12      	cmp	r5, #18
 8002c14:	f000 8099 	beq.w	8002d4a <HAL_GPIO_Init+0x182>
 8002c18:	d86e      	bhi.n	8002cf8 <HAL_GPIO_Init+0x130>
 8002c1a:	2d11      	cmp	r5, #17
 8002c1c:	f000 808f 	beq.w	8002d3e <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c20:	2cff      	cmp	r4, #255	; 0xff
 8002c22:	bf98      	it	ls
 8002c24:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c26:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c2a:	bf88      	it	hi
 8002c2c:	f100 0a04 	addhi.w	sl, r0, #4
 8002c30:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c34:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c38:	bf88      	it	hi
 8002c3a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c3c:	fa09 fb05 	lsl.w	fp, r9, r5
 8002c40:	ea28 080b 	bic.w	r8, r8, fp
 8002c44:	fa02 f505 	lsl.w	r5, r2, r5
 8002c48:	ea48 0505 	orr.w	r5, r8, r5
 8002c4c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c50:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002c54:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002c58:	d04c      	beq.n	8002cf4 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c5a:	69bd      	ldr	r5, [r7, #24]
 8002c5c:	f026 0803 	bic.w	r8, r6, #3
 8002c60:	f045 0501 	orr.w	r5, r5, #1
 8002c64:	61bd      	str	r5, [r7, #24]
 8002c66:	69bd      	ldr	r5, [r7, #24]
 8002c68:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002c6c:	f005 0501 	and.w	r5, r5, #1
 8002c70:	9501      	str	r5, [sp, #4]
 8002c72:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c76:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c7a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c7c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002c80:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c84:	fa09 f90b 	lsl.w	r9, r9, fp
 8002c88:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c8c:	4d39      	ldr	r5, [pc, #228]	; (8002d74 <HAL_GPIO_Init+0x1ac>)
 8002c8e:	42a8      	cmp	r0, r5
 8002c90:	d062      	beq.n	8002d58 <HAL_GPIO_Init+0x190>
 8002c92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c96:	42a8      	cmp	r0, r5
 8002c98:	d060      	beq.n	8002d5c <HAL_GPIO_Init+0x194>
 8002c9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c9e:	42a8      	cmp	r0, r5
 8002ca0:	d05e      	beq.n	8002d60 <HAL_GPIO_Init+0x198>
 8002ca2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ca6:	42a8      	cmp	r0, r5
 8002ca8:	bf0c      	ite	eq
 8002caa:	2503      	moveq	r5, #3
 8002cac:	2504      	movne	r5, #4
 8002cae:	fa05 f50b 	lsl.w	r5, r5, fp
 8002cb2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002cb6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cba:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cbc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cc0:	bf14      	ite	ne
 8002cc2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cc4:	43a5      	biceq	r5, r4
 8002cc6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cc8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cca:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cce:	bf14      	ite	ne
 8002cd0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cd2:	43a5      	biceq	r5, r4
 8002cd4:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002cd6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cd8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002cdc:	bf14      	ite	ne
 8002cde:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ce0:	43a5      	biceq	r5, r4
 8002ce2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002ce4:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ce6:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002cea:	bf14      	ite	ne
 8002cec:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cee:	ea25 0404 	biceq.w	r4, r5, r4
 8002cf2:	601c      	str	r4, [r3, #0]
	position++;
 8002cf4:	3601      	adds	r6, #1
 8002cf6:	e771      	b.n	8002bdc <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002cf8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002d78 <HAL_GPIO_Init+0x1b0>
 8002cfc:	454d      	cmp	r5, r9
 8002cfe:	d00c      	beq.n	8002d1a <HAL_GPIO_Init+0x152>
 8002d00:	d817      	bhi.n	8002d32 <HAL_GPIO_Init+0x16a>
 8002d02:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002d06:	454d      	cmp	r5, r9
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x152>
 8002d0a:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002d0e:	454d      	cmp	r5, r9
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x152>
 8002d12:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002d16:	454d      	cmp	r5, r9
 8002d18:	d182      	bne.n	8002c20 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d1a:	688a      	ldr	r2, [r1, #8]
 8002d1c:	b1d2      	cbz	r2, 8002d54 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d1e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002d20:	bf08      	it	eq
 8002d22:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d26:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002d2a:	bf18      	it	ne
 8002d2c:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002d30:	e776      	b.n	8002c20 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002d32:	4565      	cmp	r5, ip
 8002d34:	d0f1      	beq.n	8002d1a <HAL_GPIO_Init+0x152>
 8002d36:	4575      	cmp	r5, lr
 8002d38:	e7ee      	b.n	8002d18 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d3a:	68ca      	ldr	r2, [r1, #12]
          break;
 8002d3c:	e770      	b.n	8002c20 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d3e:	68ca      	ldr	r2, [r1, #12]
 8002d40:	3204      	adds	r2, #4
          break;
 8002d42:	e76d      	b.n	8002c20 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d44:	68ca      	ldr	r2, [r1, #12]
 8002d46:	3208      	adds	r2, #8
          break;
 8002d48:	e76a      	b.n	8002c20 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d4a:	68ca      	ldr	r2, [r1, #12]
 8002d4c:	320c      	adds	r2, #12
          break;
 8002d4e:	e767      	b.n	8002c20 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002d50:	2200      	movs	r2, #0
 8002d52:	e765      	b.n	8002c20 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d54:	2204      	movs	r2, #4
 8002d56:	e763      	b.n	8002c20 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d58:	2500      	movs	r5, #0
 8002d5a:	e7a8      	b.n	8002cae <HAL_GPIO_Init+0xe6>
 8002d5c:	2501      	movs	r5, #1
 8002d5e:	e7a6      	b.n	8002cae <HAL_GPIO_Init+0xe6>
 8002d60:	2502      	movs	r5, #2
 8002d62:	e7a4      	b.n	8002cae <HAL_GPIO_Init+0xe6>
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40010400 	.word	0x40010400
 8002d6c:	10310000 	.word	0x10310000
 8002d70:	10320000 	.word	0x10320000
 8002d74:	40010800 	.word	0x40010800
 8002d78:	10220000 	.word	0x10220000

08002d7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d7c:	6883      	ldr	r3, [r0, #8]
 8002d7e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002d80:	bf14      	ite	ne
 8002d82:	2001      	movne	r0, #1
 8002d84:	2000      	moveq	r0, #0
 8002d86:	4770      	bx	lr

08002d88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d88:	b10a      	cbz	r2, 8002d8e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d8a:	6101      	str	r1, [r0, #16]
  }
}
 8002d8c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d8e:	0409      	lsls	r1, r1, #16
 8002d90:	e7fb      	b.n	8002d8a <HAL_GPIO_WritePin+0x2>

08002d92 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d92:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d94:	ea01 0203 	and.w	r2, r1, r3
 8002d98:	ea21 0103 	bic.w	r1, r1, r3
 8002d9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002da0:	6101      	str	r1, [r0, #16]
}
 8002da2:	4770      	bx	lr

08002da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da6:	4604      	mov	r4, r0
 8002da8:	b908      	cbnz	r0, 8002dae <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8002daa:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8002dac:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002db2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002db6:	b91b      	cbnz	r3, 8002dc0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002db8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002dbc:	f7fe fd54 	bl	8001868 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	2324      	movs	r3, #36	; 0x24
 8002dc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dde:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de0:	f000 fae6 	bl	80033b0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002de4:	4a3f      	ldr	r2, [pc, #252]	; (8002ee4 <HAL_I2C_Init+0x140>)
 8002de6:	6863      	ldr	r3, [r4, #4]
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bf94      	ite	ls
 8002dec:	4a3e      	ldrls	r2, [pc, #248]	; (8002ee8 <HAL_I2C_Init+0x144>)
 8002dee:	4a3f      	ldrhi	r2, [pc, #252]	; (8002eec <HAL_I2C_Init+0x148>)
 8002df0:	4290      	cmp	r0, r2
 8002df2:	bf8c      	ite	hi
 8002df4:	2200      	movhi	r2, #0
 8002df6:	2201      	movls	r2, #1
 8002df8:	2a00      	cmp	r2, #0
 8002dfa:	d1d6      	bne.n	8002daa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfc:	4e39      	ldr	r6, [pc, #228]	; (8002ee4 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002dfe:	493c      	ldr	r1, [pc, #240]	; (8002ef0 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e00:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8002e02:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e06:	bf88      	it	hi
 8002e08:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e0e:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e12:	6855      	ldr	r5, [r2, #4]
 8002e14:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002e18:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1c:	bf82      	ittt	hi
 8002e1e:	4371      	mulhi	r1, r6
 8002e20:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002e24:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e28:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e2a:	6a15      	ldr	r5, [r2, #32]
 8002e2c:	3101      	adds	r1, #1
 8002e2e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002e32:	4329      	orrs	r1, r5
 8002e34:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e36:	69d1      	ldr	r1, [r2, #28]
 8002e38:	4d2a      	ldr	r5, [pc, #168]	; (8002ee4 <HAL_I2C_Init+0x140>)
 8002e3a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002e3e:	42ab      	cmp	r3, r5
 8002e40:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e44:	d832      	bhi.n	8002eac <HAL_I2C_Init+0x108>
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e4c:	1c43      	adds	r3, r0, #1
 8002e4e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002e52:	4203      	tst	r3, r0
 8002e54:	d042      	beq.n	8002edc <HAL_I2C_Init+0x138>
 8002e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e5e:	6811      	ldr	r1, [r2, #0]
 8002e60:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002e64:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002e68:	4303      	orrs	r3, r0
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e6e:	6891      	ldr	r1, [r2, #8]
 8002e70:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002e74:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002e78:	4303      	orrs	r3, r0
 8002e7a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e82:	68d1      	ldr	r1, [r2, #12]
 8002e84:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002e88:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e8c:	4303      	orrs	r3, r0
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002e92:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e94:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002eaa:	e77f      	b.n	8002dac <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eac:	68a5      	ldr	r5, [r4, #8]
 8002eae:	b955      	cbnz	r5, 8002ec6 <HAL_I2C_Init+0x122>
 8002eb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002eb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebe:	b17b      	cbz	r3, 8002ee0 <HAL_I2C_Init+0x13c>
 8002ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec4:	e7c9      	b.n	8002e5a <HAL_I2C_Init+0xb6>
 8002ec6:	2519      	movs	r5, #25
 8002ec8:	436b      	muls	r3, r5
 8002eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed4:	b123      	cbz	r3, 8002ee0 <HAL_I2C_Init+0x13c>
 8002ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eda:	e7be      	b.n	8002e5a <HAL_I2C_Init+0xb6>
 8002edc:	2304      	movs	r3, #4
 8002ede:	e7bc      	b.n	8002e5a <HAL_I2C_Init+0xb6>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e7ba      	b.n	8002e5a <HAL_I2C_Init+0xb6>
 8002ee4:	000186a0 	.word	0x000186a0
 8002ee8:	001e847f 	.word	0x001e847f
 8002eec:	003d08ff 	.word	0x003d08ff
 8002ef0:	000f4240 	.word	0x000f4240

08002ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef8:	4605      	mov	r5, r0
 8002efa:	b338      	cbz	r0, 8002f4c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	07db      	lsls	r3, r3, #31
 8002f00:	d410      	bmi.n	8002f24 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	682b      	ldr	r3, [r5, #0]
 8002f04:	079f      	lsls	r7, r3, #30
 8002f06:	d45e      	bmi.n	8002fc6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	0719      	lsls	r1, r3, #28
 8002f0c:	f100 8095 	bmi.w	800303a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	075a      	lsls	r2, r3, #29
 8002f14:	f100 80c1 	bmi.w	800309a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f18:	69e8      	ldr	r0, [r5, #28]
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	f040 812c 	bne.w	8003178 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002f20:	2000      	movs	r0, #0
 8002f22:	e029      	b.n	8002f78 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f24:	4c90      	ldr	r4, [pc, #576]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f26:	6863      	ldr	r3, [r4, #4]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d007      	beq.n	8002f40 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f30:	6863      	ldr	r3, [r4, #4]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d10a      	bne.n	8002f50 <HAL_RCC_OscConfig+0x5c>
 8002f3a:	6863      	ldr	r3, [r4, #4]
 8002f3c:	03de      	lsls	r6, r3, #15
 8002f3e:	d507      	bpl.n	8002f50 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	039c      	lsls	r4, r3, #14
 8002f44:	d5dd      	bpl.n	8002f02 <HAL_RCC_OscConfig+0xe>
 8002f46:	686b      	ldr	r3, [r5, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1da      	bne.n	8002f02 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	e013      	b.n	8002f78 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f50:	686b      	ldr	r3, [r5, #4]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d112      	bne.n	8002f7e <HAL_RCC_OscConfig+0x8a>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f60:	f7ff f9be 	bl	80022e0 <HAL_GetTick>
 8002f64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	0398      	lsls	r0, r3, #14
 8002f6a:	d4ca      	bmi.n	8002f02 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7ff f9b8 	bl	80022e0 <HAL_GetTick>
 8002f70:	1b80      	subs	r0, r0, r6
 8002f72:	2864      	cmp	r0, #100	; 0x64
 8002f74:	d9f7      	bls.n	8002f66 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002f76:	2003      	movs	r0, #3
}
 8002f78:	b002      	add	sp, #8
 8002f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7e:	b99b      	cbnz	r3, 8002fa8 <HAL_RCC_OscConfig+0xb4>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f90:	f7ff f9a6 	bl	80022e0 <HAL_GetTick>
 8002f94:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	0399      	lsls	r1, r3, #14
 8002f9a:	d5b2      	bpl.n	8002f02 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7ff f9a0 	bl	80022e0 <HAL_GetTick>
 8002fa0:	1b80      	subs	r0, r0, r6
 8002fa2:	2864      	cmp	r0, #100	; 0x64
 8002fa4:	d9f7      	bls.n	8002f96 <HAL_RCC_OscConfig+0xa2>
 8002fa6:	e7e6      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	d103      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xc4>
 8002fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb4:	6023      	str	r3, [r4, #0]
 8002fb6:	e7cf      	b.n	8002f58 <HAL_RCC_OscConfig+0x64>
 8002fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc4:	e7cb      	b.n	8002f5e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc6:	4c68      	ldr	r4, [pc, #416]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	6863      	ldr	r3, [r4, #4]
 8002fca:	f013 0f0c 	tst.w	r3, #12
 8002fce:	d007      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fd0:	6863      	ldr	r3, [r4, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d110      	bne.n	8002ffc <HAL_RCC_OscConfig+0x108>
 8002fda:	6863      	ldr	r3, [r4, #4]
 8002fdc:	03da      	lsls	r2, r3, #15
 8002fde:	d40d      	bmi.n	8002ffc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	079b      	lsls	r3, r3, #30
 8002fe4:	d502      	bpl.n	8002fec <HAL_RCC_OscConfig+0xf8>
 8002fe6:	692b      	ldr	r3, [r5, #16]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d1af      	bne.n	8002f4c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	696a      	ldr	r2, [r5, #20]
 8002ff0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ff4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ff8:	6023      	str	r3, [r4, #0]
 8002ffa:	e785      	b.n	8002f08 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffc:	692a      	ldr	r2, [r5, #16]
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x278>)
 8003000:	b16a      	cbz	r2, 800301e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003006:	f7ff f96b 	bl	80022e0 <HAL_GetTick>
 800300a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	079f      	lsls	r7, r3, #30
 8003010:	d4ec      	bmi.n	8002fec <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003012:	f7ff f965 	bl	80022e0 <HAL_GetTick>
 8003016:	1b80      	subs	r0, r0, r6
 8003018:	2802      	cmp	r0, #2
 800301a:	d9f7      	bls.n	800300c <HAL_RCC_OscConfig+0x118>
 800301c:	e7ab      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800301e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003020:	f7ff f95e 	bl	80022e0 <HAL_GetTick>
 8003024:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	0798      	lsls	r0, r3, #30
 800302a:	f57f af6d 	bpl.w	8002f08 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302e:	f7ff f957 	bl	80022e0 <HAL_GetTick>
 8003032:	1b80      	subs	r0, r0, r6
 8003034:	2802      	cmp	r0, #2
 8003036:	d9f6      	bls.n	8003026 <HAL_RCC_OscConfig+0x132>
 8003038:	e79d      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800303a:	69aa      	ldr	r2, [r5, #24]
 800303c:	4e4a      	ldr	r6, [pc, #296]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800303e:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_RCC_OscConfig+0x278>)
 8003040:	b1e2      	cbz	r2, 800307c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003042:	2201      	movs	r2, #1
 8003044:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003048:	f7ff f94a 	bl	80022e0 <HAL_GetTick>
 800304c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003050:	079b      	lsls	r3, r3, #30
 8003052:	d50d      	bpl.n	8003070 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003054:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003058:	4b45      	ldr	r3, [pc, #276]	; (8003170 <HAL_RCC_OscConfig+0x27c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003060:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003062:	bf00      	nop
  }
  while (Delay --);
 8003064:	9b01      	ldr	r3, [sp, #4]
 8003066:	1e5a      	subs	r2, r3, #1
 8003068:	9201      	str	r2, [sp, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f9      	bne.n	8003062 <HAL_RCC_OscConfig+0x16e>
 800306e:	e74f      	b.n	8002f10 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7ff f936 	bl	80022e0 <HAL_GetTick>
 8003074:	1b00      	subs	r0, r0, r4
 8003076:	2802      	cmp	r0, #2
 8003078:	d9e9      	bls.n	800304e <HAL_RCC_OscConfig+0x15a>
 800307a:	e77c      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800307c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003080:	f7ff f92e 	bl	80022e0 <HAL_GetTick>
 8003084:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003086:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003088:	079f      	lsls	r7, r3, #30
 800308a:	f57f af41 	bpl.w	8002f10 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308e:	f7ff f927 	bl	80022e0 <HAL_GetTick>
 8003092:	1b00      	subs	r0, r0, r4
 8003094:	2802      	cmp	r0, #2
 8003096:	d9f6      	bls.n	8003086 <HAL_RCC_OscConfig+0x192>
 8003098:	e76d      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309a:	4c33      	ldr	r4, [pc, #204]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800309c:	69e3      	ldr	r3, [r4, #28]
 800309e:	00d8      	lsls	r0, r3, #3
 80030a0:	d424      	bmi.n	80030ec <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80030a2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a4:	69e3      	ldr	r3, [r4, #28]
 80030a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030aa:	61e3      	str	r3, [r4, #28]
 80030ac:	69e3      	ldr	r3, [r4, #28]
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4e2f      	ldr	r6, [pc, #188]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030b8:	6833      	ldr	r3, [r6, #0]
 80030ba:	05d9      	lsls	r1, r3, #23
 80030bc:	d518      	bpl.n	80030f0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030be:	68eb      	ldr	r3, [r5, #12]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d126      	bne.n	8003112 <HAL_RCC_OscConfig+0x21e>
 80030c4:	6a23      	ldr	r3, [r4, #32]
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80030cc:	f7ff f908 	bl	80022e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80030d4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	6a23      	ldr	r3, [r4, #32]
 80030d8:	079b      	lsls	r3, r3, #30
 80030da:	d53f      	bpl.n	800315c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80030dc:	2f00      	cmp	r7, #0
 80030de:	f43f af1b 	beq.w	8002f18 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e2:	69e3      	ldr	r3, [r4, #28]
 80030e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e8:	61e3      	str	r3, [r4, #28]
 80030ea:	e715      	b.n	8002f18 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80030ec:	2700      	movs	r7, #0
 80030ee:	e7e2      	b.n	80030b6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f0:	6833      	ldr	r3, [r6, #0]
 80030f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80030f8:	f7ff f8f2 	bl	80022e0 <HAL_GetTick>
 80030fc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fe:	6833      	ldr	r3, [r6, #0]
 8003100:	05da      	lsls	r2, r3, #23
 8003102:	d4dc      	bmi.n	80030be <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7ff f8ec 	bl	80022e0 <HAL_GetTick>
 8003108:	eba0 0008 	sub.w	r0, r0, r8
 800310c:	2864      	cmp	r0, #100	; 0x64
 800310e:	d9f6      	bls.n	80030fe <HAL_RCC_OscConfig+0x20a>
 8003110:	e731      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003112:	b9ab      	cbnz	r3, 8003140 <HAL_RCC_OscConfig+0x24c>
 8003114:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	6223      	str	r3, [r4, #32]
 8003120:	6a23      	ldr	r3, [r4, #32]
 8003122:	f023 0304 	bic.w	r3, r3, #4
 8003126:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003128:	f7ff f8da 	bl	80022e0 <HAL_GetTick>
 800312c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312e:	6a23      	ldr	r3, [r4, #32]
 8003130:	0798      	lsls	r0, r3, #30
 8003132:	d5d3      	bpl.n	80030dc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7ff f8d4 	bl	80022e0 <HAL_GetTick>
 8003138:	1b80      	subs	r0, r0, r6
 800313a:	4540      	cmp	r0, r8
 800313c:	d9f7      	bls.n	800312e <HAL_RCC_OscConfig+0x23a>
 800313e:	e71a      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003140:	2b05      	cmp	r3, #5
 8003142:	6a23      	ldr	r3, [r4, #32]
 8003144:	d103      	bne.n	800314e <HAL_RCC_OscConfig+0x25a>
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	6223      	str	r3, [r4, #32]
 800314c:	e7ba      	b.n	80030c4 <HAL_RCC_OscConfig+0x1d0>
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	6223      	str	r3, [r4, #32]
 8003154:	6a23      	ldr	r3, [r4, #32]
 8003156:	f023 0304 	bic.w	r3, r3, #4
 800315a:	e7b6      	b.n	80030ca <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7ff f8c0 	bl	80022e0 <HAL_GetTick>
 8003160:	1b80      	subs	r0, r0, r6
 8003162:	4540      	cmp	r0, r8
 8003164:	d9b7      	bls.n	80030d6 <HAL_RCC_OscConfig+0x1e2>
 8003166:	e706      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
 8003168:	40021000 	.word	0x40021000
 800316c:	42420000 	.word	0x42420000
 8003170:	2000000c 	.word	0x2000000c
 8003174:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003178:	4c2a      	ldr	r4, [pc, #168]	; (8003224 <HAL_RCC_OscConfig+0x330>)
 800317a:	6863      	ldr	r3, [r4, #4]
 800317c:	f003 030c 	and.w	r3, r3, #12
 8003180:	2b08      	cmp	r3, #8
 8003182:	d03e      	beq.n	8003202 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003184:	2200      	movs	r2, #0
 8003186:	4b28      	ldr	r3, [pc, #160]	; (8003228 <HAL_RCC_OscConfig+0x334>)
 8003188:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800318a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318c:	d12c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800318e:	f7ff f8a7 	bl	80022e0 <HAL_GetTick>
 8003192:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	0199      	lsls	r1, r3, #6
 8003198:	d420      	bmi.n	80031dc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800319a:	6a2b      	ldr	r3, [r5, #32]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a0:	d105      	bne.n	80031ae <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031a2:	6862      	ldr	r2, [r4, #4]
 80031a4:	68a9      	ldr	r1, [r5, #8]
 80031a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80031aa:	430a      	orrs	r2, r1
 80031ac:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80031b0:	6862      	ldr	r2, [r4, #4]
 80031b2:	430b      	orrs	r3, r1
 80031b4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80031b8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80031ba:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031bc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80031be:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_RCC_OscConfig+0x334>)
 80031c0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80031c2:	f7ff f88d 	bl	80022e0 <HAL_GetTick>
 80031c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	019a      	lsls	r2, r3, #6
 80031cc:	f53f aea8 	bmi.w	8002f20 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7ff f886 	bl	80022e0 <HAL_GetTick>
 80031d4:	1b40      	subs	r0, r0, r5
 80031d6:	2802      	cmp	r0, #2
 80031d8:	d9f6      	bls.n	80031c8 <HAL_RCC_OscConfig+0x2d4>
 80031da:	e6cc      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7ff f880 	bl	80022e0 <HAL_GetTick>
 80031e0:	1b80      	subs	r0, r0, r6
 80031e2:	2802      	cmp	r0, #2
 80031e4:	d9d6      	bls.n	8003194 <HAL_RCC_OscConfig+0x2a0>
 80031e6:	e6c6      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80031e8:	f7ff f87a 	bl	80022e0 <HAL_GetTick>
 80031ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	019b      	lsls	r3, r3, #6
 80031f2:	f57f ae95 	bpl.w	8002f20 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7ff f873 	bl	80022e0 <HAL_GetTick>
 80031fa:	1b40      	subs	r0, r0, r5
 80031fc:	2802      	cmp	r0, #2
 80031fe:	d9f6      	bls.n	80031ee <HAL_RCC_OscConfig+0x2fa>
 8003200:	e6b9      	b.n	8002f76 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003202:	2801      	cmp	r0, #1
 8003204:	f43f aeb8 	beq.w	8002f78 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003208:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	6a2a      	ldr	r2, [r5, #32]
 800320c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003210:	4291      	cmp	r1, r2
 8003212:	f47f ae9b 	bne.w	8002f4c <HAL_RCC_OscConfig+0x58>
 8003216:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003218:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321c:	4293      	cmp	r3, r2
 800321e:	f43f ae7f 	beq.w	8002f20 <HAL_RCC_OscConfig+0x2c>
 8003222:	e693      	b.n	8002f4c <HAL_RCC_OscConfig+0x58>
 8003224:	40021000 	.word	0x40021000
 8003228:	42420000 	.word	0x42420000

0800322c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800322c:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_RCC_GetSysClockFreq+0x38>)
 800322e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003230:	f003 010c 	and.w	r1, r3, #12
 8003234:	2908      	cmp	r1, #8
 8003236:	d112      	bne.n	800325e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003238:	480b      	ldr	r0, [pc, #44]	; (8003268 <HAL_RCC_GetSysClockFreq+0x3c>)
 800323a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800323e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003240:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003242:	d509      	bpl.n	8003258 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003244:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003246:	4a09      	ldr	r2, [pc, #36]	; (800326c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003248:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800324c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800324e:	4a08      	ldr	r2, [pc, #32]	; (8003270 <HAL_RCC_GetSysClockFreq+0x44>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003252:	fbb0 f0f3 	udiv	r0, r0, r3
 8003256:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_GetSysClockFreq+0x48>)
 800325a:	4358      	muls	r0, r3
 800325c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800325e:	4803      	ldr	r0, [pc, #12]	; (800326c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	08008d3c 	.word	0x08008d3c
 800326c:	007a1200 	.word	0x007a1200
 8003270:	08008d4c 	.word	0x08008d4c
 8003274:	003d0900 	.word	0x003d0900

08003278 <HAL_RCC_ClockConfig>:
{
 8003278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800327c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800327e:	4604      	mov	r4, r0
 8003280:	b910      	cbnz	r0, 8003288 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003282:	2001      	movs	r0, #1
}
 8003284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003288:	4a44      	ldr	r2, [pc, #272]	; (800339c <HAL_RCC_ClockConfig+0x124>)
 800328a:	6813      	ldr	r3, [r2, #0]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	428b      	cmp	r3, r1
 8003292:	d328      	bcc.n	80032e6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003294:	6821      	ldr	r1, [r4, #0]
 8003296:	078e      	lsls	r6, r1, #30
 8003298:	d430      	bmi.n	80032fc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329a:	07ca      	lsls	r2, r1, #31
 800329c:	d443      	bmi.n	8003326 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800329e:	4a3f      	ldr	r2, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x124>)
 80032a0:	6813      	ldr	r3, [r2, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	42ab      	cmp	r3, r5
 80032a8:	d865      	bhi.n	8003376 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032aa:	6822      	ldr	r2, [r4, #0]
 80032ac:	4d3c      	ldr	r5, [pc, #240]	; (80033a0 <HAL_RCC_ClockConfig+0x128>)
 80032ae:	f012 0f04 	tst.w	r2, #4
 80032b2:	d16c      	bne.n	800338e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	0713      	lsls	r3, r2, #28
 80032b6:	d506      	bpl.n	80032c6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032b8:	686b      	ldr	r3, [r5, #4]
 80032ba:	6922      	ldr	r2, [r4, #16]
 80032bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80032c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80032c4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032c6:	f7ff ffb1 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80032ca:	686b      	ldr	r3, [r5, #4]
 80032cc:	4a35      	ldr	r2, [pc, #212]	; (80033a4 <HAL_RCC_ClockConfig+0x12c>)
 80032ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80032d2:	5cd3      	ldrb	r3, [r2, r3]
 80032d4:	40d8      	lsrs	r0, r3
 80032d6:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_ClockConfig+0x130>)
 80032d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <HAL_RCC_ClockConfig+0x134>)
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	f7fe ffbd 	bl	800225c <HAL_InitTick>
  return HAL_OK;
 80032e2:	2000      	movs	r0, #0
 80032e4:	e7ce      	b.n	8003284 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	6813      	ldr	r3, [r2, #0]
 80032e8:	f023 0307 	bic.w	r3, r3, #7
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f0:	6813      	ldr	r3, [r2, #0]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	428b      	cmp	r3, r1
 80032f8:	d1c3      	bne.n	8003282 <HAL_RCC_ClockConfig+0xa>
 80032fa:	e7cb      	b.n	8003294 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <HAL_RCC_ClockConfig+0x128>)
 80032fe:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003302:	bf1e      	ittt	ne
 8003304:	685a      	ldrne	r2, [r3, #4]
 8003306:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800330a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800330e:	bf42      	ittt	mi
 8003310:	685a      	ldrmi	r2, [r3, #4]
 8003312:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003316:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68a0      	ldr	r0, [r4, #8]
 800331c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003320:	4302      	orrs	r2, r0
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	e7b9      	b.n	800329a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	6862      	ldr	r2, [r4, #4]
 8003328:	4e1d      	ldr	r6, [pc, #116]	; (80033a0 <HAL_RCC_ClockConfig+0x128>)
 800332a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332e:	d11a      	bne.n	8003366 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003330:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003334:	d0a5      	beq.n	8003282 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003336:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333c:	f023 0303 	bic.w	r3, r3, #3
 8003340:	4313      	orrs	r3, r2
 8003342:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003344:	f7fe ffcc 	bl	80022e0 <HAL_GetTick>
 8003348:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	6873      	ldr	r3, [r6, #4]
 800334c:	6862      	ldr	r2, [r4, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003356:	d0a2      	beq.n	800329e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fe ffc2 	bl	80022e0 <HAL_GetTick>
 800335c:	1bc0      	subs	r0, r0, r7
 800335e:	4540      	cmp	r0, r8
 8003360:	d9f3      	bls.n	800334a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003362:	2003      	movs	r0, #3
 8003364:	e78e      	b.n	8003284 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003366:	2a02      	cmp	r2, #2
 8003368:	d102      	bne.n	8003370 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800336e:	e7e1      	b.n	8003334 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	f013 0f02 	tst.w	r3, #2
 8003374:	e7de      	b.n	8003334 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	f023 0307 	bic.w	r3, r3, #7
 800337c:	432b      	orrs	r3, r5
 800337e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	42ab      	cmp	r3, r5
 8003388:	f47f af7b 	bne.w	8003282 <HAL_RCC_ClockConfig+0xa>
 800338c:	e78d      	b.n	80032aa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338e:	686b      	ldr	r3, [r5, #4]
 8003390:	68e1      	ldr	r1, [r4, #12]
 8003392:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003396:	430b      	orrs	r3, r1
 8003398:	606b      	str	r3, [r5, #4]
 800339a:	e78b      	b.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
 800339c:	40022000 	.word	0x40022000
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08008d24 	.word	0x08008d24
 80033a8:	2000000c 	.word	0x2000000c
 80033ac:	20000014 	.word	0x20000014

080033b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80033b2:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80033ba:	5cd3      	ldrb	r3, [r2, r3]
 80033bc:	4a03      	ldr	r2, [pc, #12]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80033be:	6810      	ldr	r0, [r2, #0]
}
 80033c0:	40d8      	lsrs	r0, r3
 80033c2:	4770      	bx	lr
 80033c4:	40021000 	.word	0x40021000
 80033c8:	08008d34 	.word	0x08008d34
 80033cc:	2000000c 	.word	0x2000000c

080033d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80033d2:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	4a03      	ldr	r2, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80033de:	6810      	ldr	r0, [r2, #0]
}
 80033e0:	40d8      	lsrs	r0, r3
 80033e2:	4770      	bx	lr
 80033e4:	40021000 	.word	0x40021000
 80033e8:	08008d34 	.word	0x08008d34
 80033ec:	2000000c 	.word	0x2000000c

080033f0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033f0:	6803      	ldr	r3, [r0, #0]
{
 80033f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033f6:	07d9      	lsls	r1, r3, #31
{
 80033f8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033fa:	d520      	bpl.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fc:	4c36      	ldr	r4, [pc, #216]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033fe:	69e3      	ldr	r3, [r4, #28]
 8003400:	00da      	lsls	r2, r3, #3
 8003402:	d432      	bmi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003404:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003406:	69e3      	ldr	r3, [r4, #28]
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	61e3      	str	r3, [r4, #28]
 800340e:	69e3      	ldr	r3, [r4, #28]
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	4f30      	ldr	r7, [pc, #192]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	05db      	lsls	r3, r3, #23
 800341e:	d526      	bpl.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003420:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003422:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003426:	d136      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003428:	6a23      	ldr	r3, [r4, #32]
 800342a:	686a      	ldr	r2, [r5, #4]
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	4313      	orrs	r3, r2
 8003432:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003434:	b11e      	cbz	r6, 800343e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	69e3      	ldr	r3, [r4, #28]
 8003438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800343e:	6828      	ldr	r0, [r5, #0]
 8003440:	0783      	lsls	r3, r0, #30
 8003442:	d506      	bpl.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003444:	4924      	ldr	r1, [pc, #144]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003446:	68ab      	ldr	r3, [r5, #8]
 8003448:	684a      	ldr	r2, [r1, #4]
 800344a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800344e:	431a      	orrs	r2, r3
 8003450:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003452:	f010 0010 	ands.w	r0, r0, #16
 8003456:	d01b      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800345a:	68e9      	ldr	r1, [r5, #12]
 800345c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800345e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003460:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003464:	430b      	orrs	r3, r1
 8003466:	6053      	str	r3, [r2, #4]
 8003468:	e012      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 800346a:	2600      	movs	r6, #0
 800346c:	e7d4      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003476:	f7fe ff33 	bl	80022e0 <HAL_GetTick>
 800347a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	05d8      	lsls	r0, r3, #23
 8003480:	d4ce      	bmi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7fe ff2d 	bl	80022e0 <HAL_GetTick>
 8003486:	eba0 0008 	sub.w	r0, r0, r8
 800348a:	2864      	cmp	r0, #100	; 0x64
 800348c:	d9f6      	bls.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800348e:	2003      	movs	r0, #3
}
 8003490:	b002      	add	sp, #8
 8003492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003496:	686a      	ldr	r2, [r5, #4]
 8003498:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800349c:	429a      	cmp	r2, r3
 800349e:	d0c3      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a0:	2001      	movs	r0, #1
 80034a2:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a6:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034aa:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80034b4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034b6:	07d9      	lsls	r1, r3, #31
 80034b8:	d5b6      	bpl.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80034ba:	f7fe ff11 	bl	80022e0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80034c2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c4:	6a23      	ldr	r3, [r4, #32]
 80034c6:	079a      	lsls	r2, r3, #30
 80034c8:	d4ae      	bmi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fe ff09 	bl	80022e0 <HAL_GetTick>
 80034ce:	1bc0      	subs	r0, r0, r7
 80034d0:	4540      	cmp	r0, r8
 80034d2:	d9f7      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034d4:	e7db      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
 80034e0:	42420000 	.word	0x42420000

080034e4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034e6:	6a02      	ldr	r2, [r0, #32]
{
 80034e8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034f2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80034fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80034fe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003502:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003504:	4d0a      	ldr	r5, [pc, #40]	; (8003530 <TIM_OC1_SetConfig+0x4c>)
 8003506:	42a8      	cmp	r0, r5
 8003508:	d10b      	bne.n	8003522 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800350a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800350c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003510:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003512:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003516:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800351a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800351c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003520:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003522:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003524:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003526:	684a      	ldr	r2, [r1, #4]
 8003528:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	6203      	str	r3, [r0, #32]
}
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	bf00      	nop
 8003530:	40012c00 	.word	0x40012c00

08003534 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003534:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003536:	6a02      	ldr	r2, [r0, #32]
{
 8003538:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800353a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800353e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003542:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003544:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003546:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800354a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800354c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800354e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003552:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003556:	4d0b      	ldr	r5, [pc, #44]	; (8003584 <TIM_OC3_SetConfig+0x50>)
 8003558:	42a8      	cmp	r0, r5
 800355a:	d10d      	bne.n	8003578 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800355e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003562:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003566:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800356a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800356e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003574:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003578:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800357c:	684a      	ldr	r2, [r1, #4]
 800357e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003580:	6203      	str	r3, [r0, #32]
}
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	40012c00 	.word	0x40012c00

08003588 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003588:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800358a:	6a02      	ldr	r2, [r0, #32]
{
 800358c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800358e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003592:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003596:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003598:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800359a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80035a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ac:	4d06      	ldr	r5, [pc, #24]	; (80035c8 <TIM_OC4_SetConfig+0x40>)
 80035ae:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b0:	bf02      	ittt	eq
 80035b2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035be:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c0:	684a      	ldr	r2, [r1, #4]
 80035c2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c4:	6203      	str	r3, [r0, #32]
}
 80035c6:	bd30      	pop	{r4, r5, pc}
 80035c8:	40012c00 	.word	0x40012c00

080035cc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80035cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d11c      	bne.n	800360e <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d6:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035dc:	6803      	ldr	r3, [r0, #0]
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00a      	beq.n	80035f8 <HAL_TIM_Base_Start+0x2c>
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d007      	beq.n	80035f8 <HAL_TIM_Base_Start+0x2c>
 80035e8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <HAL_TIM_Base_Start+0x2c>
 80035f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	2a06      	cmp	r2, #6
 8003600:	d003      	beq.n	800360a <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800360a:	2000      	movs	r0, #0
}
 800360c:	4770      	bx	lr
    return HAL_ERROR;
 800360e:	2001      	movs	r0, #1
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00

08003618 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003618:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800361a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	4290      	cmp	r0, r2
 800361e:	d00a      	beq.n	8003636 <TIM_Base_SetConfig+0x1e>
 8003620:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003624:	d007      	beq.n	8003636 <TIM_Base_SetConfig+0x1e>
 8003626:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800362a:	4290      	cmp	r0, r2
 800362c:	d003      	beq.n	8003636 <TIM_Base_SetConfig+0x1e>
 800362e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003632:	4290      	cmp	r0, r2
 8003634:	d115      	bne.n	8003662 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003636:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800363c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363e:	4a11      	ldr	r2, [pc, #68]	; (8003684 <TIM_Base_SetConfig+0x6c>)
 8003640:	4290      	cmp	r0, r2
 8003642:	d00a      	beq.n	800365a <TIM_Base_SetConfig+0x42>
 8003644:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x42>
 800364a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800364e:	4290      	cmp	r0, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x42>
 8003652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003656:	4290      	cmp	r0, r2
 8003658:	d103      	bne.n	8003662 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003660:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003662:	694a      	ldr	r2, [r1, #20]
 8003664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003668:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800366a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800366c:	688b      	ldr	r3, [r1, #8]
 800366e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003670:	680b      	ldr	r3, [r1, #0]
 8003672:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <TIM_Base_SetConfig+0x6c>)
 8003676:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003678:	bf04      	itt	eq
 800367a:	690b      	ldreq	r3, [r1, #16]
 800367c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800367e:	2301      	movs	r3, #1
 8003680:	6143      	str	r3, [r0, #20]
}
 8003682:	4770      	bx	lr
 8003684:	40012c00 	.word	0x40012c00

08003688 <HAL_TIM_Base_Init>:
{
 8003688:	b510      	push	{r4, lr}
  if (htim == NULL)
 800368a:	4604      	mov	r4, r0
 800368c:	b330      	cbz	r0, 80036dc <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800368e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003692:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003696:	b91b      	cbnz	r3, 80036a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003698:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800369c:	f7fe fb20 	bl	8001ce0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a8:	1d21      	adds	r1, r4, #4
 80036aa:	f7ff ffb5 	bl	8003618 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ae:	2301      	movs	r3, #1
  return HAL_OK;
 80036b0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80036ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80036be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80036c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80036d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80036da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036dc:	2001      	movs	r0, #1
 80036de:	e7fc      	b.n	80036da <HAL_TIM_Base_Init+0x52>

080036e0 <HAL_TIM_PWM_Init>:
{
 80036e0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80036e2:	4604      	mov	r4, r0
 80036e4:	b330      	cbz	r0, 8003734 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80036e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036ee:	b91b      	cbnz	r3, 80036f8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80036f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80036f4:	f7fe fb36 	bl	8001d64 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003700:	1d21      	adds	r1, r4, #4
 8003702:	f7ff ff89 	bl	8003618 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003706:	2301      	movs	r3, #1
  return HAL_OK;
 8003708:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003712:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003716:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800371a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003726:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800372a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800372e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003732:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003734:	2001      	movs	r0, #1
 8003736:	e7fc      	b.n	8003732 <HAL_TIM_PWM_Init+0x52>

08003738 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8003738:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373a:	6a02      	ldr	r2, [r0, #32]
{
 800373c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373e:	f022 0210 	bic.w	r2, r2, #16
 8003742:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003744:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003746:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003748:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800374a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800374e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003752:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003754:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003758:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800375c:	4d0b      	ldr	r5, [pc, #44]	; (800378c <TIM_OC2_SetConfig+0x54>)
 800375e:	42a8      	cmp	r0, r5
 8003760:	d10d      	bne.n	800377e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003762:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003768:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800376c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003770:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003774:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800377a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800377e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003780:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003782:	684a      	ldr	r2, [r1, #4]
 8003784:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003786:	6203      	str	r3, [r0, #32]
}
 8003788:	bd70      	pop	{r4, r5, r6, pc}
 800378a:	bf00      	nop
 800378c:	40012c00 	.word	0x40012c00

08003790 <HAL_TIM_PWM_ConfigChannel>:
{
 8003790:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003792:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003796:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8003798:	2b01      	cmp	r3, #1
 800379a:	d053      	beq.n	8003844 <HAL_TIM_PWM_ConfigChannel+0xb4>
 800379c:	2001      	movs	r0, #1
  switch (Channel)
 800379e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80037a0:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 80037a4:	d03d      	beq.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x92>
 80037a6:	d806      	bhi.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x26>
 80037a8:	b1c2      	cbz	r2, 80037dc <HAL_TIM_PWM_ConfigChannel+0x4c>
 80037aa:	2a04      	cmp	r2, #4
 80037ac:	d028      	beq.n	8003800 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_UNLOCK(htim);
 80037ae:	2300      	movs	r3, #0
 80037b0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80037b6:	2a0c      	cmp	r2, #12
 80037b8:	d1f9      	bne.n	80037ae <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ba:	6828      	ldr	r0, [r5, #0]
 80037bc:	f7ff fee4 	bl	8003588 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037c0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037cc:	69da      	ldr	r2, [r3, #28]
 80037ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037da:	e031      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037dc:	6828      	ldr	r0, [r5, #0]
 80037de:	f7ff fe81 	bl	80034e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037e2:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	f042 0208 	orr.w	r2, r2, #8
 80037ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	f022 0204 	bic.w	r2, r2, #4
 80037f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037fa:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2000      	movs	r0, #0
      break;
 80037fe:	e7d6      	b.n	80037ae <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003800:	6828      	ldr	r0, [r5, #0]
 8003802:	f7ff ff99 	bl	8003738 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003806:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003808:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800380a:	699a      	ldr	r2, [r3, #24]
 800380c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003810:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003818:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003820:	e7eb      	b.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003822:	6828      	ldr	r0, [r5, #0]
 8003824:	f7ff fe86 	bl	8003534 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003828:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800382a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	f042 0208 	orr.w	r2, r2, #8
 8003832:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	f022 0204 	bic.w	r2, r2, #4
 800383a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003840:	61da      	str	r2, [r3, #28]
 8003842:	e7db      	b.n	80037fc <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_LOCK(htim);
 8003844:	2002      	movs	r0, #2
 8003846:	e7b5      	b.n	80037b4 <HAL_TIM_PWM_ConfigChannel+0x24>

08003848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003848:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800384a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800384c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800384e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003852:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003856:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003858:	6082      	str	r2, [r0, #8]
}
 800385a:	bd10      	pop	{r4, pc}

0800385c <HAL_TIM_ConfigClockSource>:
{
 800385c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800385e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003862:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003864:	2b01      	cmp	r3, #1
 8003866:	f04f 0302 	mov.w	r3, #2
 800386a:	f000 8091 	beq.w	8003990 <HAL_TIM_ConfigClockSource+0x134>
 800386e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003874:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003878:	6800      	ldr	r0, [r0, #0]
 800387a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800387c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003880:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003884:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003886:	680b      	ldr	r3, [r1, #0]
 8003888:	2b60      	cmp	r3, #96	; 0x60
 800388a:	d052      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xd6>
 800388c:	d833      	bhi.n	80038f6 <HAL_TIM_ConfigClockSource+0x9a>
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d067      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x106>
 8003892:	d816      	bhi.n	80038c2 <HAL_TIM_ConfigClockSource+0x66>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d00d      	beq.n	80038b4 <HAL_TIM_ConfigClockSource+0x58>
 8003898:	d80a      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x54>
 800389a:	f033 0110 	bics.w	r1, r3, #16
 800389e:	d009      	beq.n	80038b4 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80038a6:	2300      	movs	r3, #0
 80038a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80038ac:	4610      	mov	r0, r2
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80038b0:	2b30      	cmp	r3, #48	; 0x30
 80038b2:	d1f5      	bne.n	80038a0 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80038b4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f043 0307 	orr.w	r3, r3, #7
 80038c0:	e017      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80038c2:	2b50      	cmp	r3, #80	; 0x50
 80038c4:	d1ec      	bne.n	80038a0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c6:	684a      	ldr	r2, [r1, #4]
 80038c8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80038ca:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038cc:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ce:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d2:	f025 0501 	bic.w	r5, r5, #1
 80038d6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80038da:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80038e4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80038e6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80038e8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ee:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80038f2:	6083      	str	r3, [r0, #8]
 80038f4:	e011      	b.n	800391a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d00e      	beq.n	800391a <HAL_TIM_ConfigClockSource+0xbe>
 80038fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003900:	d00d      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xc2>
 8003902:	2b70      	cmp	r3, #112	; 0x70
 8003904:	d1cc      	bne.n	80038a0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003906:	68cb      	ldr	r3, [r1, #12]
 8003908:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800390c:	f7ff ff9c 	bl	8003848 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003910:	6822      	ldr	r2, [r4, #0]
 8003912:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003918:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2200      	movs	r2, #0
 800391c:	e7c0      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800391e:	68cb      	ldr	r3, [r1, #12]
 8003920:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003924:	f7ff ff90 	bl	8003848 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	6893      	ldr	r3, [r2, #8]
 800392c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003930:	e7f2      	b.n	8003918 <HAL_TIM_ConfigClockSource+0xbc>
  tmpccer = TIMx->CCER;
 8003932:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003934:	684d      	ldr	r5, [r1, #4]
 8003936:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003938:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800393a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393e:	f021 0110 	bic.w	r1, r1, #16
 8003942:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003944:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003946:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800394a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800394e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003952:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003954:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003956:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800395c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003960:	e7c7      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003962:	684a      	ldr	r2, [r1, #4]
 8003964:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003966:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003968:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800396a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396e:	f025 0501 	bic.w	r5, r5, #1
 8003972:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003974:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003976:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800397c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003980:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003982:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003984:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800398a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800398e:	e7b0      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003990:	461a      	mov	r2, r3
 8003992:	e78b      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x50>

08003994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003994:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003996:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003998:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800399a:	f001 011f 	and.w	r1, r1, #31
 800399e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80039a0:	ea23 0304 	bic.w	r3, r3, r4
 80039a4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039a6:	6a03      	ldr	r3, [r0, #32]
 80039a8:	408a      	lsls	r2, r1
 80039aa:	431a      	orrs	r2, r3
 80039ac:	6202      	str	r2, [r0, #32]
}
 80039ae:	bd10      	pop	{r4, pc}

080039b0 <HAL_TIM_OC_Start>:
{
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039b4:	b929      	cbnz	r1, 80039c2 <HAL_TIM_OC_Start+0x12>
 80039b6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d021      	beq.n	8003a02 <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 80039be:	2001      	movs	r0, #1
}
 80039c0:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039c2:	2904      	cmp	r1, #4
 80039c4:	d107      	bne.n	80039d6 <HAL_TIM_OC_Start+0x26>
 80039c6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d1f7      	bne.n	80039be <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ce:	2302      	movs	r3, #2
 80039d0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80039d4:	e018      	b.n	8003a08 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039d6:	2908      	cmp	r1, #8
 80039d8:	d107      	bne.n	80039ea <HAL_TIM_OC_Start+0x3a>
 80039da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d1ed      	bne.n	80039be <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e2:	2302      	movs	r3, #2
 80039e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80039e8:	e00e      	b.n	8003a08 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d1e5      	bne.n	80039be <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f2:	2904      	cmp	r1, #4
 80039f4:	d0eb      	beq.n	80039ce <HAL_TIM_OC_Start+0x1e>
 80039f6:	2908      	cmp	r1, #8
 80039f8:	d0f3      	beq.n	80039e2 <HAL_TIM_OC_Start+0x32>
 80039fa:	2302      	movs	r3, #2
 80039fc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003a00:	e002      	b.n	8003a08 <HAL_TIM_OC_Start+0x58>
 8003a02:	2302      	movs	r3, #2
 8003a04:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a08:	2201      	movs	r2, #1
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	f7ff ffc2 	bl	8003994 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <HAL_TIM_OC_Start+0x9c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d10a      	bne.n	8003a2e <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8003a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a1e:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a26:	2a06      	cmp	r2, #6
 8003a28:	d10b      	bne.n	8003a42 <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	e7c8      	b.n	80039c0 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d0f5      	beq.n	8003a20 <HAL_TIM_OC_Start+0x70>
 8003a34:	4a06      	ldr	r2, [pc, #24]	; (8003a50 <HAL_TIM_OC_Start+0xa0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d0f2      	beq.n	8003a20 <HAL_TIM_OC_Start+0x70>
 8003a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d0ee      	beq.n	8003a20 <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	e7ee      	b.n	8003a2a <HAL_TIM_OC_Start+0x7a>
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40000400 	.word	0x40000400

08003a54 <HAL_TIM_PWM_Start>:
 8003a54:	f7ff bfac 	b.w	80039b0 <HAL_TIM_OC_Start>

08003a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a58:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003a5e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	f04f 0002 	mov.w	r0, #2
 8003a66:	d022      	beq.n	8003aae <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a68:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003a6e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a70:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a72:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a76:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003a78:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a7a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7c:	4c0c      	ldr	r4, [pc, #48]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003a7e:	42a3      	cmp	r3, r4
 8003a80:	d00a      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d007      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003a88:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	d003      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003a90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	d104      	bne.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a98:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a9a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a9e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aa0:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003aa4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003aa6:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003aaa:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8003aae:	bd30      	pop	{r4, r5, pc}
 8003ab0:	40012c00 	.word	0x40012c00

08003ab4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d01f      	beq.n	8003afc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003abc:	68cb      	ldr	r3, [r1, #12]
 8003abe:	688a      	ldr	r2, [r1, #8]
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ac6:	684a      	ldr	r2, [r1, #4]
 8003ac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003acc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ace:	680a      	ldr	r2, [r1, #0]
 8003ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ad4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ad6:	690a      	ldr	r2, [r1, #16]
 8003ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003adc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ade:	694a      	ldr	r2, [r1, #20]
 8003ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ae4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ae6:	69ca      	ldr	r2, [r1, #28]
 8003ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aec:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003aee:	6802      	ldr	r2, [r0, #0]
 8003af0:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003af2:	2300      	movs	r3, #0
 8003af4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003af8:	4618      	mov	r0, r3
 8003afa:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003afc:	2002      	movs	r0, #2
}
 8003afe:	4770      	bx	lr

08003b00 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b00:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	f102 030c 	add.w	r3, r2, #12
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	320c      	adds	r2, #12
 8003b10:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003b14:	6802      	ldr	r2, [r0, #0]
 8003b16:	2900      	cmp	r1, #0
 8003b18:	d1f2      	bne.n	8003b00 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	f102 0314 	add.w	r3, r2, #20
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	f102 0c14 	add.w	ip, r2, #20
 8003b2a:	e84c 3100 	strex	r1, r3, [ip]
 8003b2e:	2900      	cmp	r1, #0
 8003b30:	d1f3      	bne.n	8003b1a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b32:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d10b      	bne.n	8003b50 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	f102 030c 	add.w	r3, r2, #12
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b40:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	f102 0c0c 	add.w	ip, r2, #12
 8003b48:	e84c 3100 	strex	r1, r3, [ip]
 8003b4c:	2900      	cmp	r1, #0
 8003b4e:	d1f3      	bne.n	8003b38 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b50:	2320      	movs	r3, #32
 8003b52:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b56:	2300      	movs	r3, #0
 8003b58:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003b5a:	4770      	bx	lr

08003b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b5c:	b510      	push	{r4, lr}
 8003b5e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b60:	6803      	ldr	r3, [r0, #0]
 8003b62:	68c1      	ldr	r1, [r0, #12]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b6e:	6882      	ldr	r2, [r0, #8]
 8003b70:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003b72:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b74:	4302      	orrs	r2, r0
 8003b76:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003b78:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003b7c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b80:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003b82:	430a      	orrs	r2, r1
 8003b84:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	69a1      	ldr	r1, [r4, #24]
 8003b8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b92:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <UART_SetConfig+0x70>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d115      	bne.n	8003bc4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7ff fc1a 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b9c:	2319      	movs	r3, #25
 8003b9e:	4343      	muls	r3, r0
 8003ba0:	6862      	ldr	r2, [r4, #4]
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	0092      	lsls	r2, r2, #2
 8003ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003baa:	2264      	movs	r2, #100	; 0x64
 8003bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bb0:	fb02 3311 	mls	r3, r2, r1, r3
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	3332      	adds	r3, #50	; 0x32
 8003bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bbc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003bc0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bc2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bc4:	f7ff fbf4 	bl	80033b0 <HAL_RCC_GetPCLK1Freq>
 8003bc8:	e7e8      	b.n	8003b9c <UART_SetConfig+0x40>
 8003bca:	bf00      	nop
 8003bcc:	40013800 	.word	0x40013800

08003bd0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	460e      	mov	r6, r1
 8003bd6:	4617      	mov	r7, r2
 8003bd8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	6813      	ldr	r3, [r2, #0]
 8003bde:	ea36 0303 	bics.w	r3, r6, r3
 8003be2:	d101      	bne.n	8003be8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003be4:	2000      	movs	r0, #0
 8003be6:	e028      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	1c6b      	adds	r3, r5, #1
 8003bea:	d0f7      	beq.n	8003bdc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bec:	b125      	cbz	r5, 8003bf8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8003bee:	f7fe fb77 	bl	80022e0 <HAL_GetTick>
 8003bf2:	1bc0      	subs	r0, r0, r7
 8003bf4:	4285      	cmp	r5, r0
 8003bf6:	d2f0      	bcs.n	8003bda <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	f102 030c 	add.w	r3, r2, #12
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	320c      	adds	r2, #12
 8003c08:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8003c0c:	6821      	ldr	r1, [r4, #0]
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d1f2      	bne.n	8003bf8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	f101 0314 	add.w	r3, r1, #20
 8003c16:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	f101 0014 	add.w	r0, r1, #20
 8003c22:	e840 3200 	strex	r2, r3, [r0]
 8003c26:	2a00      	cmp	r2, #0
 8003c28:	d1f3      	bne.n	8003c12 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8003c2a:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8003c2c:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8003c2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8003c32:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8003c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8003c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c3c <HAL_UART_Init>:
{
 8003c3c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003c3e:	4604      	mov	r4, r0
 8003c40:	b348      	cbz	r0, 8003c96 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003c46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c4a:	b91b      	cbnz	r3, 8003c54 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003c4c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003c50:	f7fe fa4e 	bl	80020f0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003c54:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003c56:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003c5c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003c5e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c64:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003c66:	f7ff ff79 	bl	8003b5c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c7c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c84:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003c86:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c88:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c92:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003c94:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c96:	2001      	movs	r0, #1
 8003c98:	e7fc      	b.n	8003c94 <HAL_UART_Init+0x58>

08003c9a <HAL_UART_Transmit>:
{
 8003c9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c9e:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003ca4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca6:	2b20      	cmp	r3, #32
{
 8003ca8:	460e      	mov	r6, r1
 8003caa:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003cac:	d13c      	bne.n	8003d28 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8003cae:	2900      	cmp	r1, #0
 8003cb0:	d03c      	beq.n	8003d2c <HAL_UART_Transmit+0x92>
 8003cb2:	2a00      	cmp	r2, #0
 8003cb4:	d03a      	beq.n	8003d2c <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cb6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	2500      	movs	r5, #0
 8003cba:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cbc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8003cc0:	f7fe fb0e 	bl	80022e0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003cc6:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003ccc:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cce:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd0:	d103      	bne.n	8003cda <HAL_UART_Transmit+0x40>
 8003cd2:	6923      	ldr	r3, [r4, #16]
 8003cd4:	b90b      	cbnz	r3, 8003cda <HAL_UART_Transmit+0x40>
 8003cd6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003cd8:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003cda:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	b953      	cbnz	r3, 8003cf6 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	4642      	mov	r2, r8
 8003ce4:	2140      	movs	r1, #64	; 0x40
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f7ff ff72 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003cec:	b950      	cbnz	r0, 8003d04 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8003cf4:	e007      	b.n	8003d06 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7ff ff67 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003d02:	b110      	cbz	r0, 8003d0a <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8003d04:	2003      	movs	r0, #3
}
 8003d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d0a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003d0c:	b94e      	cbnz	r6, 8003d22 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d0e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d16:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003d18:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003d1a:	3901      	subs	r1, #1
 8003d1c:	b289      	uxth	r1, r1
 8003d1e:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003d20:	e7db      	b.n	8003cda <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d22:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003d26:	e7f6      	b.n	8003d16 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8003d28:	2002      	movs	r0, #2
 8003d2a:	e7ec      	b.n	8003d06 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	e7ea      	b.n	8003d06 <HAL_UART_Transmit+0x6c>

08003d30 <HAL_UART_TxCpltCallback>:
 8003d30:	4770      	bx	lr

08003d32 <HAL_UART_RxHalfCpltCallback>:
 8003d32:	4770      	bx	lr

08003d34 <HAL_UART_ErrorCallback>:
 8003d34:	4770      	bx	lr

08003d36 <UART_DMAError>:
{
 8003d36:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d38:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d3a:	6803      	ldr	r3, [r0, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d3e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003d42:	2921      	cmp	r1, #33	; 0x21
 8003d44:	d112      	bne.n	8003d6c <UART_DMAError+0x36>
 8003d46:	0612      	lsls	r2, r2, #24
 8003d48:	d510      	bpl.n	8003d6c <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	f103 020c 	add.w	r2, r3, #12
 8003d52:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d56:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	f103 0c0c 	add.w	ip, r3, #12
 8003d5e:	e84c 2100 	strex	r1, r2, [ip]
 8003d62:	2900      	cmp	r1, #0
 8003d64:	d1f3      	bne.n	8003d4e <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8003d66:	2220      	movs	r2, #32
 8003d68:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6c:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d6e:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8003d72:	2a22      	cmp	r2, #34	; 0x22
 8003d74:	d105      	bne.n	8003d82 <UART_DMAError+0x4c>
 8003d76:	065b      	lsls	r3, r3, #25
 8003d78:	d503      	bpl.n	8003d82 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d7e:	f7ff febf 	bl	8003b00 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d82:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d84:	f043 0310 	orr.w	r3, r3, #16
 8003d88:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8003d8a:	f7ff ffd3 	bl	8003d34 <HAL_UART_ErrorCallback>
}
 8003d8e:	bd08      	pop	{r3, pc}

08003d90 <UART_DMAAbortOnError>:
{
 8003d90:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003d92:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d94:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003d96:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d98:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003d9a:	f7ff ffcb 	bl	8003d34 <HAL_UART_ErrorCallback>
}
 8003d9e:	bd08      	pop	{r3, pc}

08003da0 <HAL_UARTEx_RxEventCallback>:
}
 8003da0:	4770      	bx	lr

08003da2 <UART_DMARxHalfCplt>:
{
 8003da2:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003da4:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003da8:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003daa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d104      	bne.n	8003dba <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003db0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003db2:	0849      	lsrs	r1, r1, #1
 8003db4:	f7ff fff4 	bl	8003da0 <HAL_UARTEx_RxEventCallback>
}
 8003db8:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8003dba:	f7ff ffba 	bl	8003d32 <HAL_UART_RxHalfCpltCallback>
}
 8003dbe:	e7fb      	b.n	8003db8 <UART_DMARxHalfCplt+0x16>

08003dc0 <UART_DMAReceiveCplt>:
{
 8003dc0:	b508      	push	{r3, lr}
 8003dc2:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc4:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f013 0320 	ands.w	r3, r3, #32
 8003dce:	d137      	bne.n	8003e40 <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 8003dd0:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dd2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	f102 030c 	add.w	r3, r2, #12
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	320c      	adds	r2, #12
 8003de2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003de6:	6803      	ldr	r3, [r0, #0]
 8003de8:	2900      	cmp	r1, #0
 8003dea:	d1f2      	bne.n	8003dd2 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	f103 0214 	add.w	r2, r3, #20
 8003df0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	f103 0c14 	add.w	ip, r3, #20
 8003dfc:	e84c 2100 	strex	r1, r2, [ip]
 8003e00:	2900      	cmp	r1, #0
 8003e02:	d1f3      	bne.n	8003dec <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	f103 0214 	add.w	r2, r3, #20
 8003e08:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	f103 0c14 	add.w	ip, r3, #20
 8003e14:	e84c 2100 	strex	r1, r2, [ip]
 8003e18:	2900      	cmp	r1, #0
 8003e1a:	d1f3      	bne.n	8003e04 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e22:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003e24:	2a01      	cmp	r2, #1
 8003e26:	d10b      	bne.n	8003e40 <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	f103 020c 	add.w	r2, r3, #12
 8003e2c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e30:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	f103 0c0c 	add.w	ip, r3, #12
 8003e38:	e84c 2100 	strex	r1, r2, [ip]
 8003e3c:	2900      	cmp	r1, #0
 8003e3e:	d1f3      	bne.n	8003e28 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e40:	2300      	movs	r3, #0
 8003e42:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e44:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d103      	bne.n	8003e52 <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e4a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003e4c:	f7ff ffa8 	bl	8003da0 <HAL_UARTEx_RxEventCallback>
}
 8003e50:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8003e52:	f7fd fd7b 	bl	800194c <HAL_UART_RxCpltCallback>
}
 8003e56:	e7fb      	b.n	8003e50 <UART_DMAReceiveCplt+0x90>

08003e58 <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003e58:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e5a:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e5e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e62:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e64:	d13f      	bne.n	8003ee6 <UART_Receive_IT.part.0.isra.0+0x8e>
 8003e66:	6901      	ldr	r1, [r0, #16]
 8003e68:	2900      	cmp	r1, #0
 8003e6a:	d13f      	bne.n	8003eec <UART_Receive_IT.part.0.isra.0+0x94>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e72:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 8003e76:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003e78:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d12d      	bne.n	8003ee0 <UART_Receive_IT.part.0.isra.0+0x88>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e84:	6802      	ldr	r2, [r0, #0]
 8003e86:	68d1      	ldr	r1, [r2, #12]
 8003e88:	f021 0120 	bic.w	r1, r1, #32
 8003e8c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e8e:	68d1      	ldr	r1, [r2, #12]
 8003e90:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003e94:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e96:	6951      	ldr	r1, [r2, #20]
 8003e98:	f021 0101 	bic.w	r1, r1, #1
 8003e9c:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ea4:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ea8:	2a01      	cmp	r2, #1
 8003eaa:	6802      	ldr	r2, [r0, #0]
 8003eac:	d128      	bne.n	8003f00 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	f102 030c 	add.w	r3, r2, #12
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	f102 0c0c 	add.w	ip, r2, #12
 8003ec0:	e84c 3100 	strex	r1, r3, [ip]
 8003ec4:	2900      	cmp	r1, #0
 8003ec6:	d1f3      	bne.n	8003eb0 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ec8:	6813      	ldr	r3, [r2, #0]
 8003eca:	06db      	lsls	r3, r3, #27
 8003ecc:	d505      	bpl.n	8003eda <UART_Receive_IT.part.0.isra.0+0x82>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ece:	9101      	str	r1, [sp, #4]
 8003ed0:	6813      	ldr	r3, [r2, #0]
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	6853      	ldr	r3, [r2, #4]
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eda:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003edc:	f7ff ff60 	bl	8003da0 <HAL_UARTEx_RxEventCallback>
}
 8003ee0:	b003      	add	sp, #12
 8003ee2:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ee6:	b939      	cbnz	r1, 8003ef8 <UART_Receive_IT.part.0.isra.0+0xa0>
 8003ee8:	6901      	ldr	r1, [r0, #16]
 8003eea:	b929      	cbnz	r1, 8003ef8 <UART_Receive_IT.part.0.isra.0+0xa0>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eec:	6852      	ldr	r2, [r2, #4]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8003ef2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	e7be      	b.n	8003e76 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ef8:	6852      	ldr	r2, [r2, #4]
 8003efa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003efe:	e7f7      	b.n	8003ef0 <UART_Receive_IT.part.0.isra.0+0x98>
        HAL_UART_RxCpltCallback(huart);
 8003f00:	f7fd fd24 	bl	800194c <HAL_UART_RxCpltCallback>
 8003f04:	e7ec      	b.n	8003ee0 <UART_Receive_IT.part.0.isra.0+0x88>
	...

08003f08 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f08:	6803      	ldr	r3, [r0, #0]
{
 8003f0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f0c:	681a      	ldr	r2, [r3, #0]
{
 8003f0e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003f10:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f14:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f16:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003f18:	d10c      	bne.n	8003f34 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1a:	0695      	lsls	r5, r2, #26
 8003f1c:	d570      	bpl.n	8004000 <HAL_UART_IRQHandler+0xf8>
 8003f1e:	068d      	lsls	r5, r1, #26
 8003f20:	d56e      	bpl.n	8004000 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f22:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003f26:	2b22      	cmp	r3, #34	; 0x22
 8003f28:	d164      	bne.n	8003ff4 <HAL_UART_IRQHandler+0xec>
}
 8003f2a:	b003      	add	sp, #12
 8003f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f30:	f7ff bf92 	b.w	8003e58 <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f34:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f38:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8003f3c:	4305      	orrs	r5, r0
 8003f3e:	d05f      	beq.n	8004000 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f40:	07d5      	lsls	r5, r2, #31
 8003f42:	d505      	bpl.n	8003f50 <HAL_UART_IRQHandler+0x48>
 8003f44:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f46:	bf42      	ittt	mi
 8003f48:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8003f4a:	f043 0301 	orrmi.w	r3, r3, #1
 8003f4e:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f50:	0755      	lsls	r5, r2, #29
 8003f52:	d504      	bpl.n	8003f5e <HAL_UART_IRQHandler+0x56>
 8003f54:	b118      	cbz	r0, 8003f5e <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f5e:	0793      	lsls	r3, r2, #30
 8003f60:	d504      	bpl.n	8003f6c <HAL_UART_IRQHandler+0x64>
 8003f62:	b118      	cbz	r0, 8003f6c <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f66:	f043 0304 	orr.w	r3, r3, #4
 8003f6a:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f6c:	0715      	lsls	r5, r2, #28
 8003f6e:	d507      	bpl.n	8003f80 <HAL_UART_IRQHandler+0x78>
 8003f70:	f001 0320 	and.w	r3, r1, #32
 8003f74:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f76:	bf1e      	ittt	ne
 8003f78:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8003f7a:	f043 0308 	orrne.w	r3, r3, #8
 8003f7e:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d036      	beq.n	8003ff4 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f86:	0690      	lsls	r0, r2, #26
 8003f88:	d508      	bpl.n	8003f9c <HAL_UART_IRQHandler+0x94>
 8003f8a:	068a      	lsls	r2, r1, #26
 8003f8c:	d506      	bpl.n	8003f9c <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f8e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003f92:	2b22      	cmp	r3, #34	; 0x22
 8003f94:	d102      	bne.n	8003f9c <HAL_UART_IRQHandler+0x94>
 8003f96:	4620      	mov	r0, r4
 8003f98:	f7ff ff5e 	bl	8003e58 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9c:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003f9e:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa0:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fa2:	6c65      	ldr	r5, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fa8:	f005 0508 	and.w	r5, r5, #8
 8003fac:	431d      	orrs	r5, r3
 8003fae:	d023      	beq.n	8003ff8 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8003fb0:	f7ff fda6 	bl	8003b00 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	6822      	ldr	r2, [r4, #0]
 8003fb6:	6953      	ldr	r3, [r2, #20]
 8003fb8:	065b      	lsls	r3, r3, #25
 8003fba:	d518      	bpl.n	8003fee <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	f102 0314 	add.w	r3, r2, #20
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	f102 0014 	add.w	r0, r2, #20
 8003fcc:	e840 3100 	strex	r1, r3, [r0]
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	d1f3      	bne.n	8003fbc <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8003fd4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003fd6:	b150      	cbz	r0, 8003fee <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fd8:	4b73      	ldr	r3, [pc, #460]	; (80041a8 <HAL_UART_IRQHandler+0x2a0>)
 8003fda:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fdc:	f7fe fd18 	bl	8002a10 <HAL_DMA_Abort_IT>
 8003fe0:	b140      	cbz	r0, 8003ff4 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fe2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003fe4:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8003fe6:	b003      	add	sp, #12
 8003fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fec:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7ff fea0 	bl	8003d34 <HAL_UART_ErrorCallback>
}
 8003ff4:	b003      	add	sp, #12
 8003ff6:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003ff8:	f7ff fe9c 	bl	8003d34 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	6465      	str	r5, [r4, #68]	; 0x44
 8003ffe:	e7f9      	b.n	8003ff4 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004000:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004002:	2801      	cmp	r0, #1
 8004004:	f040 8094 	bne.w	8004130 <HAL_UART_IRQHandler+0x228>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004008:	06d5      	lsls	r5, r2, #27
 800400a:	f140 8091 	bpl.w	8004130 <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800400e:	06c8      	lsls	r0, r1, #27
 8004010:	f140 808e 	bpl.w	8004130 <HAL_UART_IRQHandler+0x228>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004014:	2200      	movs	r2, #0
 8004016:	9201      	str	r2, [sp, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	9201      	str	r2, [sp, #4]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	9201      	str	r2, [sp, #4]
 8004020:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	0655      	lsls	r5, r2, #25
 8004026:	d54d      	bpl.n	80040c4 <HAL_UART_IRQHandler+0x1bc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004028:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800402a:	680a      	ldr	r2, [r1, #0]
 800402c:	6852      	ldr	r2, [r2, #4]
 800402e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004030:	2a00      	cmp	r2, #0
 8004032:	d0df      	beq.n	8003ff4 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004034:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004036:	4290      	cmp	r0, r2
 8004038:	d9dc      	bls.n	8003ff4 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 800403a:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800403c:	698a      	ldr	r2, [r1, #24]
 800403e:	2a20      	cmp	r2, #32
 8004040:	d036      	beq.n	80040b0 <HAL_UART_IRQHandler+0x1a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	f103 020c 	add.w	r2, r3, #12
 8004046:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800404a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	f103 000c 	add.w	r0, r3, #12
 8004052:	e840 2100 	strex	r1, r2, [r0]
 8004056:	2900      	cmp	r1, #0
 8004058:	d1f3      	bne.n	8004042 <HAL_UART_IRQHandler+0x13a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	f103 0214 	add.w	r2, r3, #20
 800405e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	f103 0014 	add.w	r0, r3, #20
 800406a:	e840 2100 	strex	r1, r2, [r0]
 800406e:	2900      	cmp	r1, #0
 8004070:	d1f3      	bne.n	800405a <HAL_UART_IRQHandler+0x152>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	f103 0214 	add.w	r2, r3, #20
 8004076:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	f103 0014 	add.w	r0, r3, #20
 8004082:	e840 2100 	strex	r1, r2, [r0]
 8004086:	2900      	cmp	r1, #0
 8004088:	d1f3      	bne.n	8004072 <HAL_UART_IRQHandler+0x16a>
          huart->RxState = HAL_UART_STATE_READY;
 800408a:	2220      	movs	r2, #32
 800408c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	f103 020c 	add.w	r2, r3, #12
 8004096:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	f103 000c 	add.w	r0, r3, #12
 80040a2:	e840 2100 	strex	r1, r2, [r0]
 80040a6:	2900      	cmp	r1, #0
 80040a8:	d1f3      	bne.n	8004092 <HAL_UART_IRQHandler+0x18a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80040ac:	f7fe fc8e 	bl	80029cc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040b0:	2302      	movs	r3, #2
 80040b2:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040b4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80040b6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80040b8:	1ac9      	subs	r1, r1, r3
 80040ba:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040bc:	4620      	mov	r0, r4
 80040be:	f7ff fe6f 	bl	8003da0 <HAL_UARTEx_RxEventCallback>
 80040c2:	e797      	b.n	8003ff4 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040c4:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80040c6:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 80040c8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80040ca:	b289      	uxth	r1, r1
 80040cc:	2900      	cmp	r1, #0
 80040ce:	d091      	beq.n	8003ff4 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040d0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80040d2:	1a89      	subs	r1, r1, r2
 80040d4:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80040d6:	2900      	cmp	r1, #0
 80040d8:	d08c      	beq.n	8003ff4 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	f103 020c 	add.w	r2, r3, #12
 80040de:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	f103 050c 	add.w	r5, r3, #12
 80040ea:	e845 2000 	strex	r0, r2, [r5]
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d1f3      	bne.n	80040da <HAL_UART_IRQHandler+0x1d2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	f103 0214 	add.w	r2, r3, #20
 80040f6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fa:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	f103 0514 	add.w	r5, r3, #20
 8004102:	e845 2000 	strex	r0, r2, [r5]
 8004106:	2800      	cmp	r0, #0
 8004108:	d1f3      	bne.n	80040f2 <HAL_UART_IRQHandler+0x1ea>
        huart->RxState = HAL_UART_STATE_READY;
 800410a:	2220      	movs	r2, #32
 800410c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	f103 020c 	add.w	r2, r3, #12
 8004116:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	f103 050c 	add.w	r5, r3, #12
 8004122:	e845 2000 	strex	r0, r2, [r5]
 8004126:	2800      	cmp	r0, #0
 8004128:	d1f3      	bne.n	8004112 <HAL_UART_IRQHandler+0x20a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800412a:	2302      	movs	r3, #2
 800412c:	6363      	str	r3, [r4, #52]	; 0x34
 800412e:	e7c5      	b.n	80040bc <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004130:	0610      	lsls	r0, r2, #24
 8004132:	d528      	bpl.n	8004186 <HAL_UART_IRQHandler+0x27e>
 8004134:	060d      	lsls	r5, r1, #24
 8004136:	d526      	bpl.n	8004186 <HAL_UART_IRQHandler+0x27e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004138:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800413c:	2a21      	cmp	r2, #33	; 0x21
 800413e:	f47f af59 	bne.w	8003ff4 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004142:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004144:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004146:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800414a:	d117      	bne.n	800417c <HAL_UART_IRQHandler+0x274>
 800414c:	6921      	ldr	r1, [r4, #16]
 800414e:	b9a9      	cbnz	r1, 800417c <HAL_UART_IRQHandler+0x274>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004150:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004154:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004158:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800415a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800415c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800415e:	3a01      	subs	r2, #1
 8004160:	b292      	uxth	r2, r2
 8004162:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004164:	2a00      	cmp	r2, #0
 8004166:	f47f af45 	bne.w	8003ff4 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004170:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	e73b      	b.n	8003ff4 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800417c:	1c51      	adds	r1, r2, #1
 800417e:	6221      	str	r1, [r4, #32]
 8004180:	7812      	ldrb	r2, [r2, #0]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	e7ea      	b.n	800415c <HAL_UART_IRQHandler+0x254>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004186:	0650      	lsls	r0, r2, #25
 8004188:	f57f af34 	bpl.w	8003ff4 <HAL_UART_IRQHandler+0xec>
 800418c:	064a      	lsls	r2, r1, #25
 800418e:	f57f af31 	bpl.w	8003ff4 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004192:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004194:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800419c:	2320      	movs	r3, #32
 800419e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80041a2:	f7ff fdc5 	bl	8003d30 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80041a6:	e725      	b.n	8003ff4 <HAL_UART_IRQHandler+0xec>
 80041a8:	08003d91 	.word	0x08003d91

080041ac <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 80041ae:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041b2:	2322      	movs	r3, #34	; 0x22
  huart->RxXferSize = Size;
 80041b4:	8582      	strh	r2, [r0, #44]	; 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041b6:	6902      	ldr	r2, [r0, #16]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041b8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->pRxBuffPtr = pData;
 80041bc:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041be:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041c0:	b11a      	cbz	r2, 80041ca <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c8:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041ca:	695a      	ldr	r2, [r3, #20]
}
 80041cc:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	f042 0220 	orr.w	r2, r2, #32
 80041da:	60da      	str	r2, [r3, #12]
}
 80041dc:	4770      	bx	lr

080041de <HAL_UART_Receive_IT>:
{
 80041de:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 80041e0:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 80041e4:	2e20      	cmp	r6, #32
 80041e6:	d106      	bne.n	80041f6 <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 80041e8:	b141      	cbz	r1, 80041fc <HAL_UART_Receive_IT+0x1e>
 80041ea:	b13a      	cbz	r2, 80041fc <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ec:	2400      	movs	r4, #0
 80041ee:	6304      	str	r4, [r0, #48]	; 0x30
}
 80041f0:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80041f2:	f7ff bfdb 	b.w	80041ac <UART_Start_Receive_IT>
    return HAL_BUSY;
 80041f6:	2002      	movs	r0, #2
}
 80041f8:	bc70      	pop	{r4, r5, r6}
 80041fa:	4770      	bx	lr
      return HAL_ERROR;
 80041fc:	2001      	movs	r0, #1
 80041fe:	e7fb      	b.n	80041f8 <HAL_UART_Receive_IT+0x1a>

08004200 <UART_Start_Receive_DMA>:
{
 8004200:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004202:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8004204:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004206:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004208:	2222      	movs	r2, #34	; 0x22
{
 800420a:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 800420c:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420e:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004210:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004214:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8004216:	4a1d      	ldr	r2, [pc, #116]	; (800428c <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004218:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800421a:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800421c:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <UART_Start_Receive_DMA+0x90>)
 800421e:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004220:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8004222:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004226:	460a      	mov	r2, r1
 8004228:	1d31      	adds	r1, r6, #4
 800422a:	f7fe fb93 	bl	8002954 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	9501      	str	r5, [sp, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	9201      	str	r2, [sp, #4]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	9201      	str	r2, [sp, #4]
 800423a:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800423c:	6922      	ldr	r2, [r4, #16]
 800423e:	b15a      	cbz	r2, 8004258 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	f103 020c 	add.w	r2, r3, #12
 8004244:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	f103 000c 	add.w	r0, r3, #12
 8004250:	e840 2100 	strex	r1, r2, [r0]
 8004254:	2900      	cmp	r1, #0
 8004256:	d1f3      	bne.n	8004240 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	f103 0214 	add.w	r2, r3, #20
 800425c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004260:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	f103 0014 	add.w	r0, r3, #20
 8004268:	e840 2100 	strex	r1, r2, [r0]
 800426c:	2900      	cmp	r1, #0
 800426e:	d1f3      	bne.n	8004258 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	f103 0214 	add.w	r2, r3, #20
 8004274:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	f103 0114 	add.w	r1, r3, #20
 8004280:	e841 2000 	strex	r0, r2, [r1]
 8004284:	2800      	cmp	r0, #0
 8004286:	d1f3      	bne.n	8004270 <UART_Start_Receive_DMA+0x70>
}
 8004288:	b002      	add	sp, #8
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	08003dc1 	.word	0x08003dc1
 8004290:	08003da3 	.word	0x08003da3
 8004294:	08003d37 	.word	0x08003d37

08004298 <HAL_UART_Receive_DMA>:
{
 8004298:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 800429a:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 800429e:	2e20      	cmp	r6, #32
 80042a0:	d106      	bne.n	80042b0 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 80042a2:	b141      	cbz	r1, 80042b6 <HAL_UART_Receive_DMA+0x1e>
 80042a4:	b13a      	cbz	r2, 80042b6 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a6:	2400      	movs	r4, #0
 80042a8:	6304      	str	r4, [r0, #48]	; 0x30
}
 80042aa:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80042ac:	f7ff bfa8 	b.w	8004200 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 80042b0:	2002      	movs	r0, #2
}
 80042b2:	bc70      	pop	{r4, r5, r6}
 80042b4:	4770      	bx	lr
      return HAL_ERROR;
 80042b6:	2001      	movs	r0, #1
 80042b8:	e7fb      	b.n	80042b2 <HAL_UART_Receive_DMA+0x1a>

080042ba <atoi>:
 80042ba:	220a      	movs	r2, #10
 80042bc:	2100      	movs	r1, #0
 80042be:	f001 bdf7 	b.w	8005eb0 <strtol>
	...

080042c4 <__errno>:
 80042c4:	4b01      	ldr	r3, [pc, #4]	; (80042cc <__errno+0x8>)
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000018 	.word	0x20000018

080042d0 <__libc_init_array>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	2600      	movs	r6, #0
 80042d4:	4d0c      	ldr	r5, [pc, #48]	; (8004308 <__libc_init_array+0x38>)
 80042d6:	4c0d      	ldr	r4, [pc, #52]	; (800430c <__libc_init_array+0x3c>)
 80042d8:	1b64      	subs	r4, r4, r5
 80042da:	10a4      	asrs	r4, r4, #2
 80042dc:	42a6      	cmp	r6, r4
 80042de:	d109      	bne.n	80042f4 <__libc_init_array+0x24>
 80042e0:	f004 fd00 	bl	8008ce4 <_init>
 80042e4:	2600      	movs	r6, #0
 80042e6:	4d0a      	ldr	r5, [pc, #40]	; (8004310 <__libc_init_array+0x40>)
 80042e8:	4c0a      	ldr	r4, [pc, #40]	; (8004314 <__libc_init_array+0x44>)
 80042ea:	1b64      	subs	r4, r4, r5
 80042ec:	10a4      	asrs	r4, r4, #2
 80042ee:	42a6      	cmp	r6, r4
 80042f0:	d105      	bne.n	80042fe <__libc_init_array+0x2e>
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f8:	4798      	blx	r3
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7ee      	b.n	80042dc <__libc_init_array+0xc>
 80042fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004302:	4798      	blx	r3
 8004304:	3601      	adds	r6, #1
 8004306:	e7f2      	b.n	80042ee <__libc_init_array+0x1e>
 8004308:	08009250 	.word	0x08009250
 800430c:	08009250 	.word	0x08009250
 8004310:	08009250 	.word	0x08009250
 8004314:	08009254 	.word	0x08009254

08004318 <memset>:
 8004318:	4603      	mov	r3, r0
 800431a:	4402      	add	r2, r0
 800431c:	4293      	cmp	r3, r2
 800431e:	d100      	bne.n	8004322 <memset+0xa>
 8004320:	4770      	bx	lr
 8004322:	f803 1b01 	strb.w	r1, [r3], #1
 8004326:	e7f9      	b.n	800431c <memset+0x4>

08004328 <__cvt>:
 8004328:	2b00      	cmp	r3, #0
 800432a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800432e:	461f      	mov	r7, r3
 8004330:	bfbb      	ittet	lt
 8004332:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004336:	461f      	movlt	r7, r3
 8004338:	2300      	movge	r3, #0
 800433a:	232d      	movlt	r3, #45	; 0x2d
 800433c:	b088      	sub	sp, #32
 800433e:	4614      	mov	r4, r2
 8004340:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004342:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004344:	7013      	strb	r3, [r2, #0]
 8004346:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004348:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800434c:	f023 0820 	bic.w	r8, r3, #32
 8004350:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004354:	d005      	beq.n	8004362 <__cvt+0x3a>
 8004356:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800435a:	d100      	bne.n	800435e <__cvt+0x36>
 800435c:	3501      	adds	r5, #1
 800435e:	2302      	movs	r3, #2
 8004360:	e000      	b.n	8004364 <__cvt+0x3c>
 8004362:	2303      	movs	r3, #3
 8004364:	aa07      	add	r2, sp, #28
 8004366:	9204      	str	r2, [sp, #16]
 8004368:	aa06      	add	r2, sp, #24
 800436a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800436e:	e9cd 3500 	strd	r3, r5, [sp]
 8004372:	4622      	mov	r2, r4
 8004374:	463b      	mov	r3, r7
 8004376:	f001 fe4f 	bl	8006018 <_dtoa_r>
 800437a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800437e:	4606      	mov	r6, r0
 8004380:	d102      	bne.n	8004388 <__cvt+0x60>
 8004382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004384:	07db      	lsls	r3, r3, #31
 8004386:	d522      	bpl.n	80043ce <__cvt+0xa6>
 8004388:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800438c:	eb06 0905 	add.w	r9, r6, r5
 8004390:	d110      	bne.n	80043b4 <__cvt+0x8c>
 8004392:	7833      	ldrb	r3, [r6, #0]
 8004394:	2b30      	cmp	r3, #48	; 0x30
 8004396:	d10a      	bne.n	80043ae <__cvt+0x86>
 8004398:	2200      	movs	r2, #0
 800439a:	2300      	movs	r3, #0
 800439c:	4620      	mov	r0, r4
 800439e:	4639      	mov	r1, r7
 80043a0:	f7fc fb0c 	bl	80009bc <__aeabi_dcmpeq>
 80043a4:	b918      	cbnz	r0, 80043ae <__cvt+0x86>
 80043a6:	f1c5 0501 	rsb	r5, r5, #1
 80043aa:	f8ca 5000 	str.w	r5, [sl]
 80043ae:	f8da 3000 	ldr.w	r3, [sl]
 80043b2:	4499      	add	r9, r3
 80043b4:	2200      	movs	r2, #0
 80043b6:	2300      	movs	r3, #0
 80043b8:	4620      	mov	r0, r4
 80043ba:	4639      	mov	r1, r7
 80043bc:	f7fc fafe 	bl	80009bc <__aeabi_dcmpeq>
 80043c0:	b108      	cbz	r0, 80043c6 <__cvt+0x9e>
 80043c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80043c6:	2230      	movs	r2, #48	; 0x30
 80043c8:	9b07      	ldr	r3, [sp, #28]
 80043ca:	454b      	cmp	r3, r9
 80043cc:	d307      	bcc.n	80043de <__cvt+0xb6>
 80043ce:	4630      	mov	r0, r6
 80043d0:	9b07      	ldr	r3, [sp, #28]
 80043d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043d4:	1b9b      	subs	r3, r3, r6
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	b008      	add	sp, #32
 80043da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043de:	1c59      	adds	r1, r3, #1
 80043e0:	9107      	str	r1, [sp, #28]
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	e7f0      	b.n	80043c8 <__cvt+0xa0>

080043e6 <__exponent>:
 80043e6:	4603      	mov	r3, r0
 80043e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043ea:	2900      	cmp	r1, #0
 80043ec:	f803 2b02 	strb.w	r2, [r3], #2
 80043f0:	bfb6      	itet	lt
 80043f2:	222d      	movlt	r2, #45	; 0x2d
 80043f4:	222b      	movge	r2, #43	; 0x2b
 80043f6:	4249      	neglt	r1, r1
 80043f8:	2909      	cmp	r1, #9
 80043fa:	7042      	strb	r2, [r0, #1]
 80043fc:	dd2b      	ble.n	8004456 <__exponent+0x70>
 80043fe:	f10d 0407 	add.w	r4, sp, #7
 8004402:	46a4      	mov	ip, r4
 8004404:	270a      	movs	r7, #10
 8004406:	fb91 f6f7 	sdiv	r6, r1, r7
 800440a:	460a      	mov	r2, r1
 800440c:	46a6      	mov	lr, r4
 800440e:	fb07 1516 	mls	r5, r7, r6, r1
 8004412:	2a63      	cmp	r2, #99	; 0x63
 8004414:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004418:	4631      	mov	r1, r6
 800441a:	f104 34ff 	add.w	r4, r4, #4294967295
 800441e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004422:	dcf0      	bgt.n	8004406 <__exponent+0x20>
 8004424:	3130      	adds	r1, #48	; 0x30
 8004426:	f1ae 0502 	sub.w	r5, lr, #2
 800442a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800442e:	4629      	mov	r1, r5
 8004430:	1c44      	adds	r4, r0, #1
 8004432:	4561      	cmp	r1, ip
 8004434:	d30a      	bcc.n	800444c <__exponent+0x66>
 8004436:	f10d 0209 	add.w	r2, sp, #9
 800443a:	eba2 020e 	sub.w	r2, r2, lr
 800443e:	4565      	cmp	r5, ip
 8004440:	bf88      	it	hi
 8004442:	2200      	movhi	r2, #0
 8004444:	4413      	add	r3, r2
 8004446:	1a18      	subs	r0, r3, r0
 8004448:	b003      	add	sp, #12
 800444a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800444c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004450:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004454:	e7ed      	b.n	8004432 <__exponent+0x4c>
 8004456:	2330      	movs	r3, #48	; 0x30
 8004458:	3130      	adds	r1, #48	; 0x30
 800445a:	7083      	strb	r3, [r0, #2]
 800445c:	70c1      	strb	r1, [r0, #3]
 800445e:	1d03      	adds	r3, r0, #4
 8004460:	e7f1      	b.n	8004446 <__exponent+0x60>
	...

08004464 <_printf_float>:
 8004464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004468:	b091      	sub	sp, #68	; 0x44
 800446a:	460c      	mov	r4, r1
 800446c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004470:	4616      	mov	r6, r2
 8004472:	461f      	mov	r7, r3
 8004474:	4605      	mov	r5, r0
 8004476:	f002 ff35 	bl	80072e4 <_localeconv_r>
 800447a:	6803      	ldr	r3, [r0, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	9309      	str	r3, [sp, #36]	; 0x24
 8004480:	f7fb fe70 	bl	8000164 <strlen>
 8004484:	2300      	movs	r3, #0
 8004486:	930e      	str	r3, [sp, #56]	; 0x38
 8004488:	f8d8 3000 	ldr.w	r3, [r8]
 800448c:	900a      	str	r0, [sp, #40]	; 0x28
 800448e:	3307      	adds	r3, #7
 8004490:	f023 0307 	bic.w	r3, r3, #7
 8004494:	f103 0208 	add.w	r2, r3, #8
 8004498:	f894 9018 	ldrb.w	r9, [r4, #24]
 800449c:	f8d4 b000 	ldr.w	fp, [r4]
 80044a0:	f8c8 2000 	str.w	r2, [r8]
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80044b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80044b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80044b6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ba:	4640      	mov	r0, r8
 80044bc:	4b9c      	ldr	r3, [pc, #624]	; (8004730 <_printf_float+0x2cc>)
 80044be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044c0:	f7fc faae 	bl	8000a20 <__aeabi_dcmpun>
 80044c4:	bb70      	cbnz	r0, 8004524 <_printf_float+0xc0>
 80044c6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ca:	4640      	mov	r0, r8
 80044cc:	4b98      	ldr	r3, [pc, #608]	; (8004730 <_printf_float+0x2cc>)
 80044ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044d0:	f7fc fa88 	bl	80009e4 <__aeabi_dcmple>
 80044d4:	bb30      	cbnz	r0, 8004524 <_printf_float+0xc0>
 80044d6:	2200      	movs	r2, #0
 80044d8:	2300      	movs	r3, #0
 80044da:	4640      	mov	r0, r8
 80044dc:	4651      	mov	r1, sl
 80044de:	f7fc fa77 	bl	80009d0 <__aeabi_dcmplt>
 80044e2:	b110      	cbz	r0, 80044ea <_printf_float+0x86>
 80044e4:	232d      	movs	r3, #45	; 0x2d
 80044e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ea:	4b92      	ldr	r3, [pc, #584]	; (8004734 <_printf_float+0x2d0>)
 80044ec:	4892      	ldr	r0, [pc, #584]	; (8004738 <_printf_float+0x2d4>)
 80044ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044f2:	bf94      	ite	ls
 80044f4:	4698      	movls	r8, r3
 80044f6:	4680      	movhi	r8, r0
 80044f8:	2303      	movs	r3, #3
 80044fa:	f04f 0a00 	mov.w	sl, #0
 80044fe:	6123      	str	r3, [r4, #16]
 8004500:	f02b 0304 	bic.w	r3, fp, #4
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	4633      	mov	r3, r6
 8004508:	4621      	mov	r1, r4
 800450a:	4628      	mov	r0, r5
 800450c:	9700      	str	r7, [sp, #0]
 800450e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004510:	f000 f9d4 	bl	80048bc <_printf_common>
 8004514:	3001      	adds	r0, #1
 8004516:	f040 8090 	bne.w	800463a <_printf_float+0x1d6>
 800451a:	f04f 30ff 	mov.w	r0, #4294967295
 800451e:	b011      	add	sp, #68	; 0x44
 8004520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004524:	4642      	mov	r2, r8
 8004526:	4653      	mov	r3, sl
 8004528:	4640      	mov	r0, r8
 800452a:	4651      	mov	r1, sl
 800452c:	f7fc fa78 	bl	8000a20 <__aeabi_dcmpun>
 8004530:	b148      	cbz	r0, 8004546 <_printf_float+0xe2>
 8004532:	f1ba 0f00 	cmp.w	sl, #0
 8004536:	bfb8      	it	lt
 8004538:	232d      	movlt	r3, #45	; 0x2d
 800453a:	4880      	ldr	r0, [pc, #512]	; (800473c <_printf_float+0x2d8>)
 800453c:	bfb8      	it	lt
 800453e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004542:	4b7f      	ldr	r3, [pc, #508]	; (8004740 <_printf_float+0x2dc>)
 8004544:	e7d3      	b.n	80044ee <_printf_float+0x8a>
 8004546:	6863      	ldr	r3, [r4, #4]
 8004548:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	d142      	bne.n	80045d6 <_printf_float+0x172>
 8004550:	2306      	movs	r3, #6
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	9206      	str	r2, [sp, #24]
 8004558:	aa0e      	add	r2, sp, #56	; 0x38
 800455a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800455e:	aa0d      	add	r2, sp, #52	; 0x34
 8004560:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004564:	9203      	str	r2, [sp, #12]
 8004566:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800456a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	4642      	mov	r2, r8
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	4628      	mov	r0, r5
 8004578:	4653      	mov	r3, sl
 800457a:	910b      	str	r1, [sp, #44]	; 0x2c
 800457c:	f7ff fed4 	bl	8004328 <__cvt>
 8004580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004582:	4680      	mov	r8, r0
 8004584:	2947      	cmp	r1, #71	; 0x47
 8004586:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004588:	d108      	bne.n	800459c <_printf_float+0x138>
 800458a:	1cc8      	adds	r0, r1, #3
 800458c:	db02      	blt.n	8004594 <_printf_float+0x130>
 800458e:	6863      	ldr	r3, [r4, #4]
 8004590:	4299      	cmp	r1, r3
 8004592:	dd40      	ble.n	8004616 <_printf_float+0x1b2>
 8004594:	f1a9 0902 	sub.w	r9, r9, #2
 8004598:	fa5f f989 	uxtb.w	r9, r9
 800459c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045a0:	d81f      	bhi.n	80045e2 <_printf_float+0x17e>
 80045a2:	464a      	mov	r2, r9
 80045a4:	3901      	subs	r1, #1
 80045a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045aa:	910d      	str	r1, [sp, #52]	; 0x34
 80045ac:	f7ff ff1b 	bl	80043e6 <__exponent>
 80045b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045b2:	4682      	mov	sl, r0
 80045b4:	1813      	adds	r3, r2, r0
 80045b6:	2a01      	cmp	r2, #1
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	dc02      	bgt.n	80045c2 <_printf_float+0x15e>
 80045bc:	6822      	ldr	r2, [r4, #0]
 80045be:	07d2      	lsls	r2, r2, #31
 80045c0:	d501      	bpl.n	80045c6 <_printf_float+0x162>
 80045c2:	3301      	adds	r3, #1
 80045c4:	6123      	str	r3, [r4, #16]
 80045c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d09b      	beq.n	8004506 <_printf_float+0xa2>
 80045ce:	232d      	movs	r3, #45	; 0x2d
 80045d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d4:	e797      	b.n	8004506 <_printf_float+0xa2>
 80045d6:	2947      	cmp	r1, #71	; 0x47
 80045d8:	d1bc      	bne.n	8004554 <_printf_float+0xf0>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ba      	bne.n	8004554 <_printf_float+0xf0>
 80045de:	2301      	movs	r3, #1
 80045e0:	e7b7      	b.n	8004552 <_printf_float+0xee>
 80045e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045e6:	d118      	bne.n	800461a <_printf_float+0x1b6>
 80045e8:	2900      	cmp	r1, #0
 80045ea:	6863      	ldr	r3, [r4, #4]
 80045ec:	dd0b      	ble.n	8004606 <_printf_float+0x1a2>
 80045ee:	6121      	str	r1, [r4, #16]
 80045f0:	b913      	cbnz	r3, 80045f8 <_printf_float+0x194>
 80045f2:	6822      	ldr	r2, [r4, #0]
 80045f4:	07d0      	lsls	r0, r2, #31
 80045f6:	d502      	bpl.n	80045fe <_printf_float+0x19a>
 80045f8:	3301      	adds	r3, #1
 80045fa:	440b      	add	r3, r1
 80045fc:	6123      	str	r3, [r4, #16]
 80045fe:	f04f 0a00 	mov.w	sl, #0
 8004602:	65a1      	str	r1, [r4, #88]	; 0x58
 8004604:	e7df      	b.n	80045c6 <_printf_float+0x162>
 8004606:	b913      	cbnz	r3, 800460e <_printf_float+0x1aa>
 8004608:	6822      	ldr	r2, [r4, #0]
 800460a:	07d2      	lsls	r2, r2, #31
 800460c:	d501      	bpl.n	8004612 <_printf_float+0x1ae>
 800460e:	3302      	adds	r3, #2
 8004610:	e7f4      	b.n	80045fc <_printf_float+0x198>
 8004612:	2301      	movs	r3, #1
 8004614:	e7f2      	b.n	80045fc <_printf_float+0x198>
 8004616:	f04f 0967 	mov.w	r9, #103	; 0x67
 800461a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800461c:	4299      	cmp	r1, r3
 800461e:	db05      	blt.n	800462c <_printf_float+0x1c8>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	6121      	str	r1, [r4, #16]
 8004624:	07d8      	lsls	r0, r3, #31
 8004626:	d5ea      	bpl.n	80045fe <_printf_float+0x19a>
 8004628:	1c4b      	adds	r3, r1, #1
 800462a:	e7e7      	b.n	80045fc <_printf_float+0x198>
 800462c:	2900      	cmp	r1, #0
 800462e:	bfcc      	ite	gt
 8004630:	2201      	movgt	r2, #1
 8004632:	f1c1 0202 	rsble	r2, r1, #2
 8004636:	4413      	add	r3, r2
 8004638:	e7e0      	b.n	80045fc <_printf_float+0x198>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	055a      	lsls	r2, r3, #21
 800463e:	d407      	bmi.n	8004650 <_printf_float+0x1ec>
 8004640:	6923      	ldr	r3, [r4, #16]
 8004642:	4642      	mov	r2, r8
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
 8004648:	47b8      	blx	r7
 800464a:	3001      	adds	r0, #1
 800464c:	d12b      	bne.n	80046a6 <_printf_float+0x242>
 800464e:	e764      	b.n	800451a <_printf_float+0xb6>
 8004650:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004654:	f240 80dd 	bls.w	8004812 <_printf_float+0x3ae>
 8004658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800465c:	2200      	movs	r2, #0
 800465e:	2300      	movs	r3, #0
 8004660:	f7fc f9ac 	bl	80009bc <__aeabi_dcmpeq>
 8004664:	2800      	cmp	r0, #0
 8004666:	d033      	beq.n	80046d0 <_printf_float+0x26c>
 8004668:	2301      	movs	r3, #1
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	4a35      	ldr	r2, [pc, #212]	; (8004744 <_printf_float+0x2e0>)
 8004670:	47b8      	blx	r7
 8004672:	3001      	adds	r0, #1
 8004674:	f43f af51 	beq.w	800451a <_printf_float+0xb6>
 8004678:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800467c:	429a      	cmp	r2, r3
 800467e:	db02      	blt.n	8004686 <_printf_float+0x222>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	07d8      	lsls	r0, r3, #31
 8004684:	d50f      	bpl.n	80046a6 <_printf_float+0x242>
 8004686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	f43f af42 	beq.w	800451a <_printf_float+0xb6>
 8004696:	f04f 0800 	mov.w	r8, #0
 800469a:	f104 091a 	add.w	r9, r4, #26
 800469e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046a0:	3b01      	subs	r3, #1
 80046a2:	4543      	cmp	r3, r8
 80046a4:	dc09      	bgt.n	80046ba <_printf_float+0x256>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	079b      	lsls	r3, r3, #30
 80046aa:	f100 8102 	bmi.w	80048b2 <_printf_float+0x44e>
 80046ae:	68e0      	ldr	r0, [r4, #12]
 80046b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046b2:	4298      	cmp	r0, r3
 80046b4:	bfb8      	it	lt
 80046b6:	4618      	movlt	r0, r3
 80046b8:	e731      	b.n	800451e <_printf_float+0xba>
 80046ba:	2301      	movs	r3, #1
 80046bc:	464a      	mov	r2, r9
 80046be:	4631      	mov	r1, r6
 80046c0:	4628      	mov	r0, r5
 80046c2:	47b8      	blx	r7
 80046c4:	3001      	adds	r0, #1
 80046c6:	f43f af28 	beq.w	800451a <_printf_float+0xb6>
 80046ca:	f108 0801 	add.w	r8, r8, #1
 80046ce:	e7e6      	b.n	800469e <_printf_float+0x23a>
 80046d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	dc38      	bgt.n	8004748 <_printf_float+0x2e4>
 80046d6:	2301      	movs	r3, #1
 80046d8:	4631      	mov	r1, r6
 80046da:	4628      	mov	r0, r5
 80046dc:	4a19      	ldr	r2, [pc, #100]	; (8004744 <_printf_float+0x2e0>)
 80046de:	47b8      	blx	r7
 80046e0:	3001      	adds	r0, #1
 80046e2:	f43f af1a 	beq.w	800451a <_printf_float+0xb6>
 80046e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046ea:	4313      	orrs	r3, r2
 80046ec:	d102      	bne.n	80046f4 <_printf_float+0x290>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	07d9      	lsls	r1, r3, #31
 80046f2:	d5d8      	bpl.n	80046a6 <_printf_float+0x242>
 80046f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046f8:	4631      	mov	r1, r6
 80046fa:	4628      	mov	r0, r5
 80046fc:	47b8      	blx	r7
 80046fe:	3001      	adds	r0, #1
 8004700:	f43f af0b 	beq.w	800451a <_printf_float+0xb6>
 8004704:	f04f 0900 	mov.w	r9, #0
 8004708:	f104 0a1a 	add.w	sl, r4, #26
 800470c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800470e:	425b      	negs	r3, r3
 8004710:	454b      	cmp	r3, r9
 8004712:	dc01      	bgt.n	8004718 <_printf_float+0x2b4>
 8004714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004716:	e794      	b.n	8004642 <_printf_float+0x1de>
 8004718:	2301      	movs	r3, #1
 800471a:	4652      	mov	r2, sl
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	f43f aef9 	beq.w	800451a <_printf_float+0xb6>
 8004728:	f109 0901 	add.w	r9, r9, #1
 800472c:	e7ee      	b.n	800470c <_printf_float+0x2a8>
 800472e:	bf00      	nop
 8004730:	7fefffff 	.word	0x7fefffff
 8004734:	08008d54 	.word	0x08008d54
 8004738:	08008d58 	.word	0x08008d58
 800473c:	08008d60 	.word	0x08008d60
 8004740:	08008d5c 	.word	0x08008d5c
 8004744:	08008d64 	.word	0x08008d64
 8004748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800474a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800474c:	429a      	cmp	r2, r3
 800474e:	bfa8      	it	ge
 8004750:	461a      	movge	r2, r3
 8004752:	2a00      	cmp	r2, #0
 8004754:	4691      	mov	r9, r2
 8004756:	dc37      	bgt.n	80047c8 <_printf_float+0x364>
 8004758:	f04f 0b00 	mov.w	fp, #0
 800475c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004760:	f104 021a 	add.w	r2, r4, #26
 8004764:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004768:	ebaa 0309 	sub.w	r3, sl, r9
 800476c:	455b      	cmp	r3, fp
 800476e:	dc33      	bgt.n	80047d8 <_printf_float+0x374>
 8004770:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004774:	429a      	cmp	r2, r3
 8004776:	db3b      	blt.n	80047f0 <_printf_float+0x38c>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	07da      	lsls	r2, r3, #31
 800477c:	d438      	bmi.n	80047f0 <_printf_float+0x38c>
 800477e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004780:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004782:	eba3 020a 	sub.w	r2, r3, sl
 8004786:	eba3 0901 	sub.w	r9, r3, r1
 800478a:	4591      	cmp	r9, r2
 800478c:	bfa8      	it	ge
 800478e:	4691      	movge	r9, r2
 8004790:	f1b9 0f00 	cmp.w	r9, #0
 8004794:	dc34      	bgt.n	8004800 <_printf_float+0x39c>
 8004796:	f04f 0800 	mov.w	r8, #0
 800479a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800479e:	f104 0a1a 	add.w	sl, r4, #26
 80047a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	eba3 0309 	sub.w	r3, r3, r9
 80047ac:	4543      	cmp	r3, r8
 80047ae:	f77f af7a 	ble.w	80046a6 <_printf_float+0x242>
 80047b2:	2301      	movs	r3, #1
 80047b4:	4652      	mov	r2, sl
 80047b6:	4631      	mov	r1, r6
 80047b8:	4628      	mov	r0, r5
 80047ba:	47b8      	blx	r7
 80047bc:	3001      	adds	r0, #1
 80047be:	f43f aeac 	beq.w	800451a <_printf_float+0xb6>
 80047c2:	f108 0801 	add.w	r8, r8, #1
 80047c6:	e7ec      	b.n	80047a2 <_printf_float+0x33e>
 80047c8:	4613      	mov	r3, r2
 80047ca:	4631      	mov	r1, r6
 80047cc:	4642      	mov	r2, r8
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	d1c0      	bne.n	8004758 <_printf_float+0x2f4>
 80047d6:	e6a0      	b.n	800451a <_printf_float+0xb6>
 80047d8:	2301      	movs	r3, #1
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	920b      	str	r2, [sp, #44]	; 0x2c
 80047e0:	47b8      	blx	r7
 80047e2:	3001      	adds	r0, #1
 80047e4:	f43f ae99 	beq.w	800451a <_printf_float+0xb6>
 80047e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047ea:	f10b 0b01 	add.w	fp, fp, #1
 80047ee:	e7b9      	b.n	8004764 <_printf_float+0x300>
 80047f0:	4631      	mov	r1, r6
 80047f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	d1bf      	bne.n	800477e <_printf_float+0x31a>
 80047fe:	e68c      	b.n	800451a <_printf_float+0xb6>
 8004800:	464b      	mov	r3, r9
 8004802:	4631      	mov	r1, r6
 8004804:	4628      	mov	r0, r5
 8004806:	eb08 020a 	add.w	r2, r8, sl
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	d1c2      	bne.n	8004796 <_printf_float+0x332>
 8004810:	e683      	b.n	800451a <_printf_float+0xb6>
 8004812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004814:	2a01      	cmp	r2, #1
 8004816:	dc01      	bgt.n	800481c <_printf_float+0x3b8>
 8004818:	07db      	lsls	r3, r3, #31
 800481a:	d537      	bpl.n	800488c <_printf_float+0x428>
 800481c:	2301      	movs	r3, #1
 800481e:	4642      	mov	r2, r8
 8004820:	4631      	mov	r1, r6
 8004822:	4628      	mov	r0, r5
 8004824:	47b8      	blx	r7
 8004826:	3001      	adds	r0, #1
 8004828:	f43f ae77 	beq.w	800451a <_printf_float+0xb6>
 800482c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004830:	4631      	mov	r1, r6
 8004832:	4628      	mov	r0, r5
 8004834:	47b8      	blx	r7
 8004836:	3001      	adds	r0, #1
 8004838:	f43f ae6f 	beq.w	800451a <_printf_float+0xb6>
 800483c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004840:	2200      	movs	r2, #0
 8004842:	2300      	movs	r3, #0
 8004844:	f7fc f8ba 	bl	80009bc <__aeabi_dcmpeq>
 8004848:	b9d8      	cbnz	r0, 8004882 <_printf_float+0x41e>
 800484a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800484c:	f108 0201 	add.w	r2, r8, #1
 8004850:	3b01      	subs	r3, #1
 8004852:	4631      	mov	r1, r6
 8004854:	4628      	mov	r0, r5
 8004856:	47b8      	blx	r7
 8004858:	3001      	adds	r0, #1
 800485a:	d10e      	bne.n	800487a <_printf_float+0x416>
 800485c:	e65d      	b.n	800451a <_printf_float+0xb6>
 800485e:	2301      	movs	r3, #1
 8004860:	464a      	mov	r2, r9
 8004862:	4631      	mov	r1, r6
 8004864:	4628      	mov	r0, r5
 8004866:	47b8      	blx	r7
 8004868:	3001      	adds	r0, #1
 800486a:	f43f ae56 	beq.w	800451a <_printf_float+0xb6>
 800486e:	f108 0801 	add.w	r8, r8, #1
 8004872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004874:	3b01      	subs	r3, #1
 8004876:	4543      	cmp	r3, r8
 8004878:	dcf1      	bgt.n	800485e <_printf_float+0x3fa>
 800487a:	4653      	mov	r3, sl
 800487c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004880:	e6e0      	b.n	8004644 <_printf_float+0x1e0>
 8004882:	f04f 0800 	mov.w	r8, #0
 8004886:	f104 091a 	add.w	r9, r4, #26
 800488a:	e7f2      	b.n	8004872 <_printf_float+0x40e>
 800488c:	2301      	movs	r3, #1
 800488e:	4642      	mov	r2, r8
 8004890:	e7df      	b.n	8004852 <_printf_float+0x3ee>
 8004892:	2301      	movs	r3, #1
 8004894:	464a      	mov	r2, r9
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	47b8      	blx	r7
 800489c:	3001      	adds	r0, #1
 800489e:	f43f ae3c 	beq.w	800451a <_printf_float+0xb6>
 80048a2:	f108 0801 	add.w	r8, r8, #1
 80048a6:	68e3      	ldr	r3, [r4, #12]
 80048a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048aa:	1a5b      	subs	r3, r3, r1
 80048ac:	4543      	cmp	r3, r8
 80048ae:	dcf0      	bgt.n	8004892 <_printf_float+0x42e>
 80048b0:	e6fd      	b.n	80046ae <_printf_float+0x24a>
 80048b2:	f04f 0800 	mov.w	r8, #0
 80048b6:	f104 0919 	add.w	r9, r4, #25
 80048ba:	e7f4      	b.n	80048a6 <_printf_float+0x442>

080048bc <_printf_common>:
 80048bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	4616      	mov	r6, r2
 80048c2:	4699      	mov	r9, r3
 80048c4:	688a      	ldr	r2, [r1, #8]
 80048c6:	690b      	ldr	r3, [r1, #16]
 80048c8:	4607      	mov	r7, r0
 80048ca:	4293      	cmp	r3, r2
 80048cc:	bfb8      	it	lt
 80048ce:	4613      	movlt	r3, r2
 80048d0:	6033      	str	r3, [r6, #0]
 80048d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048d6:	460c      	mov	r4, r1
 80048d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048dc:	b10a      	cbz	r2, 80048e2 <_printf_common+0x26>
 80048de:	3301      	adds	r3, #1
 80048e0:	6033      	str	r3, [r6, #0]
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	0699      	lsls	r1, r3, #26
 80048e6:	bf42      	ittt	mi
 80048e8:	6833      	ldrmi	r3, [r6, #0]
 80048ea:	3302      	addmi	r3, #2
 80048ec:	6033      	strmi	r3, [r6, #0]
 80048ee:	6825      	ldr	r5, [r4, #0]
 80048f0:	f015 0506 	ands.w	r5, r5, #6
 80048f4:	d106      	bne.n	8004904 <_printf_common+0x48>
 80048f6:	f104 0a19 	add.w	sl, r4, #25
 80048fa:	68e3      	ldr	r3, [r4, #12]
 80048fc:	6832      	ldr	r2, [r6, #0]
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	42ab      	cmp	r3, r5
 8004902:	dc28      	bgt.n	8004956 <_printf_common+0x9a>
 8004904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004908:	1e13      	subs	r3, r2, #0
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	bf18      	it	ne
 800490e:	2301      	movne	r3, #1
 8004910:	0692      	lsls	r2, r2, #26
 8004912:	d42d      	bmi.n	8004970 <_printf_common+0xb4>
 8004914:	4649      	mov	r1, r9
 8004916:	4638      	mov	r0, r7
 8004918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800491c:	47c0      	blx	r8
 800491e:	3001      	adds	r0, #1
 8004920:	d020      	beq.n	8004964 <_printf_common+0xa8>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	68e5      	ldr	r5, [r4, #12]
 8004926:	f003 0306 	and.w	r3, r3, #6
 800492a:	2b04      	cmp	r3, #4
 800492c:	bf18      	it	ne
 800492e:	2500      	movne	r5, #0
 8004930:	6832      	ldr	r2, [r6, #0]
 8004932:	f04f 0600 	mov.w	r6, #0
 8004936:	68a3      	ldr	r3, [r4, #8]
 8004938:	bf08      	it	eq
 800493a:	1aad      	subeq	r5, r5, r2
 800493c:	6922      	ldr	r2, [r4, #16]
 800493e:	bf08      	it	eq
 8004940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004944:	4293      	cmp	r3, r2
 8004946:	bfc4      	itt	gt
 8004948:	1a9b      	subgt	r3, r3, r2
 800494a:	18ed      	addgt	r5, r5, r3
 800494c:	341a      	adds	r4, #26
 800494e:	42b5      	cmp	r5, r6
 8004950:	d11a      	bne.n	8004988 <_printf_common+0xcc>
 8004952:	2000      	movs	r0, #0
 8004954:	e008      	b.n	8004968 <_printf_common+0xac>
 8004956:	2301      	movs	r3, #1
 8004958:	4652      	mov	r2, sl
 800495a:	4649      	mov	r1, r9
 800495c:	4638      	mov	r0, r7
 800495e:	47c0      	blx	r8
 8004960:	3001      	adds	r0, #1
 8004962:	d103      	bne.n	800496c <_printf_common+0xb0>
 8004964:	f04f 30ff 	mov.w	r0, #4294967295
 8004968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496c:	3501      	adds	r5, #1
 800496e:	e7c4      	b.n	80048fa <_printf_common+0x3e>
 8004970:	2030      	movs	r0, #48	; 0x30
 8004972:	18e1      	adds	r1, r4, r3
 8004974:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800497e:	4422      	add	r2, r4
 8004980:	3302      	adds	r3, #2
 8004982:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004986:	e7c5      	b.n	8004914 <_printf_common+0x58>
 8004988:	2301      	movs	r3, #1
 800498a:	4622      	mov	r2, r4
 800498c:	4649      	mov	r1, r9
 800498e:	4638      	mov	r0, r7
 8004990:	47c0      	blx	r8
 8004992:	3001      	adds	r0, #1
 8004994:	d0e6      	beq.n	8004964 <_printf_common+0xa8>
 8004996:	3601      	adds	r6, #1
 8004998:	e7d9      	b.n	800494e <_printf_common+0x92>
	...

0800499c <_printf_i>:
 800499c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	7e0f      	ldrb	r7, [r1, #24]
 80049a2:	4691      	mov	r9, r2
 80049a4:	2f78      	cmp	r7, #120	; 0x78
 80049a6:	4680      	mov	r8, r0
 80049a8:	460c      	mov	r4, r1
 80049aa:	469a      	mov	sl, r3
 80049ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049b2:	d807      	bhi.n	80049c4 <_printf_i+0x28>
 80049b4:	2f62      	cmp	r7, #98	; 0x62
 80049b6:	d80a      	bhi.n	80049ce <_printf_i+0x32>
 80049b8:	2f00      	cmp	r7, #0
 80049ba:	f000 80d9 	beq.w	8004b70 <_printf_i+0x1d4>
 80049be:	2f58      	cmp	r7, #88	; 0x58
 80049c0:	f000 80a4 	beq.w	8004b0c <_printf_i+0x170>
 80049c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049cc:	e03a      	b.n	8004a44 <_printf_i+0xa8>
 80049ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049d2:	2b15      	cmp	r3, #21
 80049d4:	d8f6      	bhi.n	80049c4 <_printf_i+0x28>
 80049d6:	a101      	add	r1, pc, #4	; (adr r1, 80049dc <_printf_i+0x40>)
 80049d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049dc:	08004a35 	.word	0x08004a35
 80049e0:	08004a49 	.word	0x08004a49
 80049e4:	080049c5 	.word	0x080049c5
 80049e8:	080049c5 	.word	0x080049c5
 80049ec:	080049c5 	.word	0x080049c5
 80049f0:	080049c5 	.word	0x080049c5
 80049f4:	08004a49 	.word	0x08004a49
 80049f8:	080049c5 	.word	0x080049c5
 80049fc:	080049c5 	.word	0x080049c5
 8004a00:	080049c5 	.word	0x080049c5
 8004a04:	080049c5 	.word	0x080049c5
 8004a08:	08004b57 	.word	0x08004b57
 8004a0c:	08004a79 	.word	0x08004a79
 8004a10:	08004b39 	.word	0x08004b39
 8004a14:	080049c5 	.word	0x080049c5
 8004a18:	080049c5 	.word	0x080049c5
 8004a1c:	08004b79 	.word	0x08004b79
 8004a20:	080049c5 	.word	0x080049c5
 8004a24:	08004a79 	.word	0x08004a79
 8004a28:	080049c5 	.word	0x080049c5
 8004a2c:	080049c5 	.word	0x080049c5
 8004a30:	08004b41 	.word	0x08004b41
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	1d1a      	adds	r2, r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	602a      	str	r2, [r5, #0]
 8004a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0a4      	b.n	8004b92 <_printf_i+0x1f6>
 8004a48:	6820      	ldr	r0, [r4, #0]
 8004a4a:	6829      	ldr	r1, [r5, #0]
 8004a4c:	0606      	lsls	r6, r0, #24
 8004a4e:	f101 0304 	add.w	r3, r1, #4
 8004a52:	d50a      	bpl.n	8004a6a <_printf_i+0xce>
 8004a54:	680e      	ldr	r6, [r1, #0]
 8004a56:	602b      	str	r3, [r5, #0]
 8004a58:	2e00      	cmp	r6, #0
 8004a5a:	da03      	bge.n	8004a64 <_printf_i+0xc8>
 8004a5c:	232d      	movs	r3, #45	; 0x2d
 8004a5e:	4276      	negs	r6, r6
 8004a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a64:	230a      	movs	r3, #10
 8004a66:	485e      	ldr	r0, [pc, #376]	; (8004be0 <_printf_i+0x244>)
 8004a68:	e019      	b.n	8004a9e <_printf_i+0x102>
 8004a6a:	680e      	ldr	r6, [r1, #0]
 8004a6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	bf18      	it	ne
 8004a74:	b236      	sxthne	r6, r6
 8004a76:	e7ef      	b.n	8004a58 <_printf_i+0xbc>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	1d19      	adds	r1, r3, #4
 8004a7e:	6029      	str	r1, [r5, #0]
 8004a80:	0601      	lsls	r1, r0, #24
 8004a82:	d501      	bpl.n	8004a88 <_printf_i+0xec>
 8004a84:	681e      	ldr	r6, [r3, #0]
 8004a86:	e002      	b.n	8004a8e <_printf_i+0xf2>
 8004a88:	0646      	lsls	r6, r0, #25
 8004a8a:	d5fb      	bpl.n	8004a84 <_printf_i+0xe8>
 8004a8c:	881e      	ldrh	r6, [r3, #0]
 8004a8e:	2f6f      	cmp	r7, #111	; 0x6f
 8004a90:	bf0c      	ite	eq
 8004a92:	2308      	moveq	r3, #8
 8004a94:	230a      	movne	r3, #10
 8004a96:	4852      	ldr	r0, [pc, #328]	; (8004be0 <_printf_i+0x244>)
 8004a98:	2100      	movs	r1, #0
 8004a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a9e:	6865      	ldr	r5, [r4, #4]
 8004aa0:	2d00      	cmp	r5, #0
 8004aa2:	bfa8      	it	ge
 8004aa4:	6821      	ldrge	r1, [r4, #0]
 8004aa6:	60a5      	str	r5, [r4, #8]
 8004aa8:	bfa4      	itt	ge
 8004aaa:	f021 0104 	bicge.w	r1, r1, #4
 8004aae:	6021      	strge	r1, [r4, #0]
 8004ab0:	b90e      	cbnz	r6, 8004ab6 <_printf_i+0x11a>
 8004ab2:	2d00      	cmp	r5, #0
 8004ab4:	d04d      	beq.n	8004b52 <_printf_i+0x1b6>
 8004ab6:	4615      	mov	r5, r2
 8004ab8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004abc:	fb03 6711 	mls	r7, r3, r1, r6
 8004ac0:	5dc7      	ldrb	r7, [r0, r7]
 8004ac2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ac6:	4637      	mov	r7, r6
 8004ac8:	42bb      	cmp	r3, r7
 8004aca:	460e      	mov	r6, r1
 8004acc:	d9f4      	bls.n	8004ab8 <_printf_i+0x11c>
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d10b      	bne.n	8004aea <_printf_i+0x14e>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	07de      	lsls	r6, r3, #31
 8004ad6:	d508      	bpl.n	8004aea <_printf_i+0x14e>
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	6861      	ldr	r1, [r4, #4]
 8004adc:	4299      	cmp	r1, r3
 8004ade:	bfde      	ittt	le
 8004ae0:	2330      	movle	r3, #48	; 0x30
 8004ae2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ae6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aea:	1b52      	subs	r2, r2, r5
 8004aec:	6122      	str	r2, [r4, #16]
 8004aee:	464b      	mov	r3, r9
 8004af0:	4621      	mov	r1, r4
 8004af2:	4640      	mov	r0, r8
 8004af4:	f8cd a000 	str.w	sl, [sp]
 8004af8:	aa03      	add	r2, sp, #12
 8004afa:	f7ff fedf 	bl	80048bc <_printf_common>
 8004afe:	3001      	adds	r0, #1
 8004b00:	d14c      	bne.n	8004b9c <_printf_i+0x200>
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295
 8004b06:	b004      	add	sp, #16
 8004b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0c:	4834      	ldr	r0, [pc, #208]	; (8004be0 <_printf_i+0x244>)
 8004b0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b12:	6829      	ldr	r1, [r5, #0]
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b1a:	6029      	str	r1, [r5, #0]
 8004b1c:	061d      	lsls	r5, r3, #24
 8004b1e:	d514      	bpl.n	8004b4a <_printf_i+0x1ae>
 8004b20:	07df      	lsls	r7, r3, #31
 8004b22:	bf44      	itt	mi
 8004b24:	f043 0320 	orrmi.w	r3, r3, #32
 8004b28:	6023      	strmi	r3, [r4, #0]
 8004b2a:	b91e      	cbnz	r6, 8004b34 <_printf_i+0x198>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	f023 0320 	bic.w	r3, r3, #32
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	2310      	movs	r3, #16
 8004b36:	e7af      	b.n	8004a98 <_printf_i+0xfc>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	f043 0320 	orr.w	r3, r3, #32
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	2378      	movs	r3, #120	; 0x78
 8004b42:	4828      	ldr	r0, [pc, #160]	; (8004be4 <_printf_i+0x248>)
 8004b44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b48:	e7e3      	b.n	8004b12 <_printf_i+0x176>
 8004b4a:	0659      	lsls	r1, r3, #25
 8004b4c:	bf48      	it	mi
 8004b4e:	b2b6      	uxthmi	r6, r6
 8004b50:	e7e6      	b.n	8004b20 <_printf_i+0x184>
 8004b52:	4615      	mov	r5, r2
 8004b54:	e7bb      	b.n	8004ace <_printf_i+0x132>
 8004b56:	682b      	ldr	r3, [r5, #0]
 8004b58:	6826      	ldr	r6, [r4, #0]
 8004b5a:	1d18      	adds	r0, r3, #4
 8004b5c:	6961      	ldr	r1, [r4, #20]
 8004b5e:	6028      	str	r0, [r5, #0]
 8004b60:	0635      	lsls	r5, r6, #24
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	d501      	bpl.n	8004b6a <_printf_i+0x1ce>
 8004b66:	6019      	str	r1, [r3, #0]
 8004b68:	e002      	b.n	8004b70 <_printf_i+0x1d4>
 8004b6a:	0670      	lsls	r0, r6, #25
 8004b6c:	d5fb      	bpl.n	8004b66 <_printf_i+0x1ca>
 8004b6e:	8019      	strh	r1, [r3, #0]
 8004b70:	2300      	movs	r3, #0
 8004b72:	4615      	mov	r5, r2
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	e7ba      	b.n	8004aee <_printf_i+0x152>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	1d1a      	adds	r2, r3, #4
 8004b7e:	602a      	str	r2, [r5, #0]
 8004b80:	681d      	ldr	r5, [r3, #0]
 8004b82:	6862      	ldr	r2, [r4, #4]
 8004b84:	4628      	mov	r0, r5
 8004b86:	f002 fbcb 	bl	8007320 <memchr>
 8004b8a:	b108      	cbz	r0, 8004b90 <_printf_i+0x1f4>
 8004b8c:	1b40      	subs	r0, r0, r5
 8004b8e:	6060      	str	r0, [r4, #4]
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	6123      	str	r3, [r4, #16]
 8004b94:	2300      	movs	r3, #0
 8004b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b9a:	e7a8      	b.n	8004aee <_printf_i+0x152>
 8004b9c:	462a      	mov	r2, r5
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	6923      	ldr	r3, [r4, #16]
 8004ba4:	47d0      	blx	sl
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d0ab      	beq.n	8004b02 <_printf_i+0x166>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	079b      	lsls	r3, r3, #30
 8004bae:	d413      	bmi.n	8004bd8 <_printf_i+0x23c>
 8004bb0:	68e0      	ldr	r0, [r4, #12]
 8004bb2:	9b03      	ldr	r3, [sp, #12]
 8004bb4:	4298      	cmp	r0, r3
 8004bb6:	bfb8      	it	lt
 8004bb8:	4618      	movlt	r0, r3
 8004bba:	e7a4      	b.n	8004b06 <_printf_i+0x16a>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	4632      	mov	r2, r6
 8004bc0:	4649      	mov	r1, r9
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	47d0      	blx	sl
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d09b      	beq.n	8004b02 <_printf_i+0x166>
 8004bca:	3501      	adds	r5, #1
 8004bcc:	68e3      	ldr	r3, [r4, #12]
 8004bce:	9903      	ldr	r1, [sp, #12]
 8004bd0:	1a5b      	subs	r3, r3, r1
 8004bd2:	42ab      	cmp	r3, r5
 8004bd4:	dcf2      	bgt.n	8004bbc <_printf_i+0x220>
 8004bd6:	e7eb      	b.n	8004bb0 <_printf_i+0x214>
 8004bd8:	2500      	movs	r5, #0
 8004bda:	f104 0619 	add.w	r6, r4, #25
 8004bde:	e7f5      	b.n	8004bcc <_printf_i+0x230>
 8004be0:	08008d66 	.word	0x08008d66
 8004be4:	08008d77 	.word	0x08008d77

08004be8 <_scanf_float>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	b087      	sub	sp, #28
 8004bee:	9303      	str	r3, [sp, #12]
 8004bf0:	688b      	ldr	r3, [r1, #8]
 8004bf2:	4617      	mov	r7, r2
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004bfa:	bf85      	ittet	hi
 8004bfc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004c00:	195b      	addhi	r3, r3, r5
 8004c02:	2300      	movls	r3, #0
 8004c04:	9302      	strhi	r3, [sp, #8]
 8004c06:	bf88      	it	hi
 8004c08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004c0c:	468b      	mov	fp, r1
 8004c0e:	f04f 0500 	mov.w	r5, #0
 8004c12:	bf8c      	ite	hi
 8004c14:	608b      	strhi	r3, [r1, #8]
 8004c16:	9302      	strls	r3, [sp, #8]
 8004c18:	680b      	ldr	r3, [r1, #0]
 8004c1a:	4680      	mov	r8, r0
 8004c1c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004c20:	f84b 3b1c 	str.w	r3, [fp], #28
 8004c24:	460c      	mov	r4, r1
 8004c26:	465e      	mov	r6, fp
 8004c28:	46aa      	mov	sl, r5
 8004c2a:	46a9      	mov	r9, r5
 8004c2c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004c30:	9501      	str	r5, [sp, #4]
 8004c32:	68a2      	ldr	r2, [r4, #8]
 8004c34:	b152      	cbz	r2, 8004c4c <_scanf_float+0x64>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b4e      	cmp	r3, #78	; 0x4e
 8004c3c:	d864      	bhi.n	8004d08 <_scanf_float+0x120>
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d83c      	bhi.n	8004cbc <_scanf_float+0xd4>
 8004c42:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004c46:	b2c8      	uxtb	r0, r1
 8004c48:	280e      	cmp	r0, #14
 8004c4a:	d93a      	bls.n	8004cc2 <_scanf_float+0xda>
 8004c4c:	f1b9 0f00 	cmp.w	r9, #0
 8004c50:	d003      	beq.n	8004c5a <_scanf_float+0x72>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c5e:	f1ba 0f01 	cmp.w	sl, #1
 8004c62:	f200 8113 	bhi.w	8004e8c <_scanf_float+0x2a4>
 8004c66:	455e      	cmp	r6, fp
 8004c68:	f200 8105 	bhi.w	8004e76 <_scanf_float+0x28e>
 8004c6c:	2501      	movs	r5, #1
 8004c6e:	4628      	mov	r0, r5
 8004c70:	b007      	add	sp, #28
 8004c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004c7a:	2a0d      	cmp	r2, #13
 8004c7c:	d8e6      	bhi.n	8004c4c <_scanf_float+0x64>
 8004c7e:	a101      	add	r1, pc, #4	; (adr r1, 8004c84 <_scanf_float+0x9c>)
 8004c80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c84:	08004dc3 	.word	0x08004dc3
 8004c88:	08004c4d 	.word	0x08004c4d
 8004c8c:	08004c4d 	.word	0x08004c4d
 8004c90:	08004c4d 	.word	0x08004c4d
 8004c94:	08004e23 	.word	0x08004e23
 8004c98:	08004dfb 	.word	0x08004dfb
 8004c9c:	08004c4d 	.word	0x08004c4d
 8004ca0:	08004c4d 	.word	0x08004c4d
 8004ca4:	08004dd1 	.word	0x08004dd1
 8004ca8:	08004c4d 	.word	0x08004c4d
 8004cac:	08004c4d 	.word	0x08004c4d
 8004cb0:	08004c4d 	.word	0x08004c4d
 8004cb4:	08004c4d 	.word	0x08004c4d
 8004cb8:	08004d89 	.word	0x08004d89
 8004cbc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004cc0:	e7db      	b.n	8004c7a <_scanf_float+0x92>
 8004cc2:	290e      	cmp	r1, #14
 8004cc4:	d8c2      	bhi.n	8004c4c <_scanf_float+0x64>
 8004cc6:	a001      	add	r0, pc, #4	; (adr r0, 8004ccc <_scanf_float+0xe4>)
 8004cc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ccc:	08004d7b 	.word	0x08004d7b
 8004cd0:	08004c4d 	.word	0x08004c4d
 8004cd4:	08004d7b 	.word	0x08004d7b
 8004cd8:	08004e0f 	.word	0x08004e0f
 8004cdc:	08004c4d 	.word	0x08004c4d
 8004ce0:	08004d29 	.word	0x08004d29
 8004ce4:	08004d65 	.word	0x08004d65
 8004ce8:	08004d65 	.word	0x08004d65
 8004cec:	08004d65 	.word	0x08004d65
 8004cf0:	08004d65 	.word	0x08004d65
 8004cf4:	08004d65 	.word	0x08004d65
 8004cf8:	08004d65 	.word	0x08004d65
 8004cfc:	08004d65 	.word	0x08004d65
 8004d00:	08004d65 	.word	0x08004d65
 8004d04:	08004d65 	.word	0x08004d65
 8004d08:	2b6e      	cmp	r3, #110	; 0x6e
 8004d0a:	d809      	bhi.n	8004d20 <_scanf_float+0x138>
 8004d0c:	2b60      	cmp	r3, #96	; 0x60
 8004d0e:	d8b2      	bhi.n	8004c76 <_scanf_float+0x8e>
 8004d10:	2b54      	cmp	r3, #84	; 0x54
 8004d12:	d077      	beq.n	8004e04 <_scanf_float+0x21c>
 8004d14:	2b59      	cmp	r3, #89	; 0x59
 8004d16:	d199      	bne.n	8004c4c <_scanf_float+0x64>
 8004d18:	2d07      	cmp	r5, #7
 8004d1a:	d197      	bne.n	8004c4c <_scanf_float+0x64>
 8004d1c:	2508      	movs	r5, #8
 8004d1e:	e029      	b.n	8004d74 <_scanf_float+0x18c>
 8004d20:	2b74      	cmp	r3, #116	; 0x74
 8004d22:	d06f      	beq.n	8004e04 <_scanf_float+0x21c>
 8004d24:	2b79      	cmp	r3, #121	; 0x79
 8004d26:	e7f6      	b.n	8004d16 <_scanf_float+0x12e>
 8004d28:	6821      	ldr	r1, [r4, #0]
 8004d2a:	05c8      	lsls	r0, r1, #23
 8004d2c:	d51a      	bpl.n	8004d64 <_scanf_float+0x17c>
 8004d2e:	9b02      	ldr	r3, [sp, #8]
 8004d30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004d34:	6021      	str	r1, [r4, #0]
 8004d36:	f109 0901 	add.w	r9, r9, #1
 8004d3a:	b11b      	cbz	r3, 8004d44 <_scanf_float+0x15c>
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	3201      	adds	r2, #1
 8004d40:	9302      	str	r3, [sp, #8]
 8004d42:	60a2      	str	r2, [r4, #8]
 8004d44:	68a3      	ldr	r3, [r4, #8]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	60a3      	str	r3, [r4, #8]
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	6123      	str	r3, [r4, #16]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	f340 8084 	ble.w	8004e64 <_scanf_float+0x27c>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	e766      	b.n	8004c32 <_scanf_float+0x4a>
 8004d64:	eb1a 0f05 	cmn.w	sl, r5
 8004d68:	f47f af70 	bne.w	8004c4c <_scanf_float+0x64>
 8004d6c:	6822      	ldr	r2, [r4, #0]
 8004d6e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004d72:	6022      	str	r2, [r4, #0]
 8004d74:	f806 3b01 	strb.w	r3, [r6], #1
 8004d78:	e7e4      	b.n	8004d44 <_scanf_float+0x15c>
 8004d7a:	6822      	ldr	r2, [r4, #0]
 8004d7c:	0610      	lsls	r0, r2, #24
 8004d7e:	f57f af65 	bpl.w	8004c4c <_scanf_float+0x64>
 8004d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d86:	e7f4      	b.n	8004d72 <_scanf_float+0x18a>
 8004d88:	f1ba 0f00 	cmp.w	sl, #0
 8004d8c:	d10e      	bne.n	8004dac <_scanf_float+0x1c4>
 8004d8e:	f1b9 0f00 	cmp.w	r9, #0
 8004d92:	d10e      	bne.n	8004db2 <_scanf_float+0x1ca>
 8004d94:	6822      	ldr	r2, [r4, #0]
 8004d96:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d9e:	d108      	bne.n	8004db2 <_scanf_float+0x1ca>
 8004da0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004da4:	f04f 0a01 	mov.w	sl, #1
 8004da8:	6022      	str	r2, [r4, #0]
 8004daa:	e7e3      	b.n	8004d74 <_scanf_float+0x18c>
 8004dac:	f1ba 0f02 	cmp.w	sl, #2
 8004db0:	d055      	beq.n	8004e5e <_scanf_float+0x276>
 8004db2:	2d01      	cmp	r5, #1
 8004db4:	d002      	beq.n	8004dbc <_scanf_float+0x1d4>
 8004db6:	2d04      	cmp	r5, #4
 8004db8:	f47f af48 	bne.w	8004c4c <_scanf_float+0x64>
 8004dbc:	3501      	adds	r5, #1
 8004dbe:	b2ed      	uxtb	r5, r5
 8004dc0:	e7d8      	b.n	8004d74 <_scanf_float+0x18c>
 8004dc2:	f1ba 0f01 	cmp.w	sl, #1
 8004dc6:	f47f af41 	bne.w	8004c4c <_scanf_float+0x64>
 8004dca:	f04f 0a02 	mov.w	sl, #2
 8004dce:	e7d1      	b.n	8004d74 <_scanf_float+0x18c>
 8004dd0:	b97d      	cbnz	r5, 8004df2 <_scanf_float+0x20a>
 8004dd2:	f1b9 0f00 	cmp.w	r9, #0
 8004dd6:	f47f af3c 	bne.w	8004c52 <_scanf_float+0x6a>
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004de0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004de4:	f47f af39 	bne.w	8004c5a <_scanf_float+0x72>
 8004de8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004dec:	2501      	movs	r5, #1
 8004dee:	6022      	str	r2, [r4, #0]
 8004df0:	e7c0      	b.n	8004d74 <_scanf_float+0x18c>
 8004df2:	2d03      	cmp	r5, #3
 8004df4:	d0e2      	beq.n	8004dbc <_scanf_float+0x1d4>
 8004df6:	2d05      	cmp	r5, #5
 8004df8:	e7de      	b.n	8004db8 <_scanf_float+0x1d0>
 8004dfa:	2d02      	cmp	r5, #2
 8004dfc:	f47f af26 	bne.w	8004c4c <_scanf_float+0x64>
 8004e00:	2503      	movs	r5, #3
 8004e02:	e7b7      	b.n	8004d74 <_scanf_float+0x18c>
 8004e04:	2d06      	cmp	r5, #6
 8004e06:	f47f af21 	bne.w	8004c4c <_scanf_float+0x64>
 8004e0a:	2507      	movs	r5, #7
 8004e0c:	e7b2      	b.n	8004d74 <_scanf_float+0x18c>
 8004e0e:	6822      	ldr	r2, [r4, #0]
 8004e10:	0591      	lsls	r1, r2, #22
 8004e12:	f57f af1b 	bpl.w	8004c4c <_scanf_float+0x64>
 8004e16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004e1a:	6022      	str	r2, [r4, #0]
 8004e1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e20:	e7a8      	b.n	8004d74 <_scanf_float+0x18c>
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004e28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004e2c:	d006      	beq.n	8004e3c <_scanf_float+0x254>
 8004e2e:	0550      	lsls	r0, r2, #21
 8004e30:	f57f af0c 	bpl.w	8004c4c <_scanf_float+0x64>
 8004e34:	f1b9 0f00 	cmp.w	r9, #0
 8004e38:	f43f af0f 	beq.w	8004c5a <_scanf_float+0x72>
 8004e3c:	0591      	lsls	r1, r2, #22
 8004e3e:	bf58      	it	pl
 8004e40:	9901      	ldrpl	r1, [sp, #4]
 8004e42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e46:	bf58      	it	pl
 8004e48:	eba9 0101 	subpl.w	r1, r9, r1
 8004e4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004e50:	f04f 0900 	mov.w	r9, #0
 8004e54:	bf58      	it	pl
 8004e56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e5a:	6022      	str	r2, [r4, #0]
 8004e5c:	e78a      	b.n	8004d74 <_scanf_float+0x18c>
 8004e5e:	f04f 0a03 	mov.w	sl, #3
 8004e62:	e787      	b.n	8004d74 <_scanf_float+0x18c>
 8004e64:	4639      	mov	r1, r7
 8004e66:	4640      	mov	r0, r8
 8004e68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e6c:	4798      	blx	r3
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	f43f aedf 	beq.w	8004c32 <_scanf_float+0x4a>
 8004e74:	e6ea      	b.n	8004c4c <_scanf_float+0x64>
 8004e76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e7a:	463a      	mov	r2, r7
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e82:	4798      	blx	r3
 8004e84:	6923      	ldr	r3, [r4, #16]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	e6ec      	b.n	8004c66 <_scanf_float+0x7e>
 8004e8c:	1e6b      	subs	r3, r5, #1
 8004e8e:	2b06      	cmp	r3, #6
 8004e90:	d825      	bhi.n	8004ede <_scanf_float+0x2f6>
 8004e92:	2d02      	cmp	r5, #2
 8004e94:	d836      	bhi.n	8004f04 <_scanf_float+0x31c>
 8004e96:	455e      	cmp	r6, fp
 8004e98:	f67f aee8 	bls.w	8004c6c <_scanf_float+0x84>
 8004e9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ea0:	463a      	mov	r2, r7
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ea8:	4798      	blx	r3
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	6123      	str	r3, [r4, #16]
 8004eb0:	e7f1      	b.n	8004e96 <_scanf_float+0x2ae>
 8004eb2:	9802      	ldr	r0, [sp, #8]
 8004eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004eb8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004ebc:	463a      	mov	r2, r7
 8004ebe:	9002      	str	r0, [sp, #8]
 8004ec0:	4640      	mov	r0, r8
 8004ec2:	4798      	blx	r3
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ece:	fa5f fa8a 	uxtb.w	sl, sl
 8004ed2:	f1ba 0f02 	cmp.w	sl, #2
 8004ed6:	d1ec      	bne.n	8004eb2 <_scanf_float+0x2ca>
 8004ed8:	3d03      	subs	r5, #3
 8004eda:	b2ed      	uxtb	r5, r5
 8004edc:	1b76      	subs	r6, r6, r5
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	05da      	lsls	r2, r3, #23
 8004ee2:	d52f      	bpl.n	8004f44 <_scanf_float+0x35c>
 8004ee4:	055b      	lsls	r3, r3, #21
 8004ee6:	d510      	bpl.n	8004f0a <_scanf_float+0x322>
 8004ee8:	455e      	cmp	r6, fp
 8004eea:	f67f aebf 	bls.w	8004c6c <_scanf_float+0x84>
 8004eee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ef2:	463a      	mov	r2, r7
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004efa:	4798      	blx	r3
 8004efc:	6923      	ldr	r3, [r4, #16]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	e7f1      	b.n	8004ee8 <_scanf_float+0x300>
 8004f04:	46aa      	mov	sl, r5
 8004f06:	9602      	str	r6, [sp, #8]
 8004f08:	e7df      	b.n	8004eca <_scanf_float+0x2e2>
 8004f0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004f0e:	6923      	ldr	r3, [r4, #16]
 8004f10:	2965      	cmp	r1, #101	; 0x65
 8004f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f16:	f106 35ff 	add.w	r5, r6, #4294967295
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	d00c      	beq.n	8004f38 <_scanf_float+0x350>
 8004f1e:	2945      	cmp	r1, #69	; 0x45
 8004f20:	d00a      	beq.n	8004f38 <_scanf_float+0x350>
 8004f22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f26:	463a      	mov	r2, r7
 8004f28:	4640      	mov	r0, r8
 8004f2a:	4798      	blx	r3
 8004f2c:	6923      	ldr	r3, [r4, #16]
 8004f2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	1eb5      	subs	r5, r6, #2
 8004f36:	6123      	str	r3, [r4, #16]
 8004f38:	463a      	mov	r2, r7
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f40:	4798      	blx	r3
 8004f42:	462e      	mov	r6, r5
 8004f44:	6825      	ldr	r5, [r4, #0]
 8004f46:	f015 0510 	ands.w	r5, r5, #16
 8004f4a:	d155      	bne.n	8004ff8 <_scanf_float+0x410>
 8004f4c:	7035      	strb	r5, [r6, #0]
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f58:	d11b      	bne.n	8004f92 <_scanf_float+0x3aa>
 8004f5a:	9b01      	ldr	r3, [sp, #4]
 8004f5c:	454b      	cmp	r3, r9
 8004f5e:	eba3 0209 	sub.w	r2, r3, r9
 8004f62:	d123      	bne.n	8004fac <_scanf_float+0x3c4>
 8004f64:	2200      	movs	r2, #0
 8004f66:	4659      	mov	r1, fp
 8004f68:	4640      	mov	r0, r8
 8004f6a:	f000 fec1 	bl	8005cf0 <_strtod_r>
 8004f6e:	6822      	ldr	r2, [r4, #0]
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	f012 0f02 	tst.w	r2, #2
 8004f76:	4606      	mov	r6, r0
 8004f78:	460f      	mov	r7, r1
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	d021      	beq.n	8004fc2 <_scanf_float+0x3da>
 8004f7e:	1d1a      	adds	r2, r3, #4
 8004f80:	9903      	ldr	r1, [sp, #12]
 8004f82:	600a      	str	r2, [r1, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	e9c3 6700 	strd	r6, r7, [r3]
 8004f8a:	68e3      	ldr	r3, [r4, #12]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	60e3      	str	r3, [r4, #12]
 8004f90:	e66d      	b.n	8004c6e <_scanf_float+0x86>
 8004f92:	9b04      	ldr	r3, [sp, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0e5      	beq.n	8004f64 <_scanf_float+0x37c>
 8004f98:	9905      	ldr	r1, [sp, #20]
 8004f9a:	230a      	movs	r3, #10
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	3101      	adds	r1, #1
 8004fa2:	f000 ff83 	bl	8005eac <_strtol_r>
 8004fa6:	9b04      	ldr	r3, [sp, #16]
 8004fa8:	9e05      	ldr	r6, [sp, #20]
 8004faa:	1ac2      	subs	r2, r0, r3
 8004fac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004fb0:	429e      	cmp	r6, r3
 8004fb2:	bf28      	it	cs
 8004fb4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004fb8:	4630      	mov	r0, r6
 8004fba:	4910      	ldr	r1, [pc, #64]	; (8004ffc <_scanf_float+0x414>)
 8004fbc:	f000 f85a 	bl	8005074 <siprintf>
 8004fc0:	e7d0      	b.n	8004f64 <_scanf_float+0x37c>
 8004fc2:	f012 0f04 	tst.w	r2, #4
 8004fc6:	f103 0204 	add.w	r2, r3, #4
 8004fca:	d1d9      	bne.n	8004f80 <_scanf_float+0x398>
 8004fcc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004fd0:	f8cc 2000 	str.w	r2, [ip]
 8004fd4:	f8d3 8000 	ldr.w	r8, [r3]
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	f7fb fd20 	bl	8000a20 <__aeabi_dcmpun>
 8004fe0:	b128      	cbz	r0, 8004fee <_scanf_float+0x406>
 8004fe2:	4807      	ldr	r0, [pc, #28]	; (8005000 <_scanf_float+0x418>)
 8004fe4:	f000 f80e 	bl	8005004 <nanf>
 8004fe8:	f8c8 0000 	str.w	r0, [r8]
 8004fec:	e7cd      	b.n	8004f8a <_scanf_float+0x3a2>
 8004fee:	4630      	mov	r0, r6
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	f7fb fd73 	bl	8000adc <__aeabi_d2f>
 8004ff6:	e7f7      	b.n	8004fe8 <_scanf_float+0x400>
 8004ff8:	2500      	movs	r5, #0
 8004ffa:	e638      	b.n	8004c6e <_scanf_float+0x86>
 8004ffc:	08008d88 	.word	0x08008d88
 8005000:	08008d12 	.word	0x08008d12

08005004 <nanf>:
 8005004:	4800      	ldr	r0, [pc, #0]	; (8005008 <nanf+0x4>)
 8005006:	4770      	bx	lr
 8005008:	7fc00000 	.word	0x7fc00000

0800500c <sniprintf>:
 800500c:	b40c      	push	{r2, r3}
 800500e:	b530      	push	{r4, r5, lr}
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <sniprintf+0x64>)
 8005012:	1e0c      	subs	r4, r1, #0
 8005014:	681d      	ldr	r5, [r3, #0]
 8005016:	b09d      	sub	sp, #116	; 0x74
 8005018:	da08      	bge.n	800502c <sniprintf+0x20>
 800501a:	238b      	movs	r3, #139	; 0x8b
 800501c:	f04f 30ff 	mov.w	r0, #4294967295
 8005020:	602b      	str	r3, [r5, #0]
 8005022:	b01d      	add	sp, #116	; 0x74
 8005024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005028:	b002      	add	sp, #8
 800502a:	4770      	bx	lr
 800502c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005030:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005034:	bf0c      	ite	eq
 8005036:	4623      	moveq	r3, r4
 8005038:	f104 33ff 	addne.w	r3, r4, #4294967295
 800503c:	9304      	str	r3, [sp, #16]
 800503e:	9307      	str	r3, [sp, #28]
 8005040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005044:	9002      	str	r0, [sp, #8]
 8005046:	9006      	str	r0, [sp, #24]
 8005048:	f8ad 3016 	strh.w	r3, [sp, #22]
 800504c:	4628      	mov	r0, r5
 800504e:	ab21      	add	r3, sp, #132	; 0x84
 8005050:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005052:	a902      	add	r1, sp, #8
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	f002 ff83 	bl	8007f60 <_svfiprintf_r>
 800505a:	1c43      	adds	r3, r0, #1
 800505c:	bfbc      	itt	lt
 800505e:	238b      	movlt	r3, #139	; 0x8b
 8005060:	602b      	strlt	r3, [r5, #0]
 8005062:	2c00      	cmp	r4, #0
 8005064:	d0dd      	beq.n	8005022 <sniprintf+0x16>
 8005066:	2200      	movs	r2, #0
 8005068:	9b02      	ldr	r3, [sp, #8]
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	e7d9      	b.n	8005022 <sniprintf+0x16>
 800506e:	bf00      	nop
 8005070:	20000018 	.word	0x20000018

08005074 <siprintf>:
 8005074:	b40e      	push	{r1, r2, r3}
 8005076:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800507a:	b500      	push	{lr}
 800507c:	b09c      	sub	sp, #112	; 0x70
 800507e:	ab1d      	add	r3, sp, #116	; 0x74
 8005080:	9002      	str	r0, [sp, #8]
 8005082:	9006      	str	r0, [sp, #24]
 8005084:	9107      	str	r1, [sp, #28]
 8005086:	9104      	str	r1, [sp, #16]
 8005088:	4808      	ldr	r0, [pc, #32]	; (80050ac <siprintf+0x38>)
 800508a:	4909      	ldr	r1, [pc, #36]	; (80050b0 <siprintf+0x3c>)
 800508c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005090:	9105      	str	r1, [sp, #20]
 8005092:	6800      	ldr	r0, [r0, #0]
 8005094:	a902      	add	r1, sp, #8
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	f002 ff62 	bl	8007f60 <_svfiprintf_r>
 800509c:	2200      	movs	r2, #0
 800509e:	9b02      	ldr	r3, [sp, #8]
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	b01c      	add	sp, #112	; 0x70
 80050a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050a8:	b003      	add	sp, #12
 80050aa:	4770      	bx	lr
 80050ac:	20000018 	.word	0x20000018
 80050b0:	ffff0208 	.word	0xffff0208

080050b4 <strncpy>:
 80050b4:	4603      	mov	r3, r0
 80050b6:	b510      	push	{r4, lr}
 80050b8:	3901      	subs	r1, #1
 80050ba:	b132      	cbz	r2, 80050ca <strncpy+0x16>
 80050bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80050c0:	3a01      	subs	r2, #1
 80050c2:	f803 4b01 	strb.w	r4, [r3], #1
 80050c6:	2c00      	cmp	r4, #0
 80050c8:	d1f7      	bne.n	80050ba <strncpy+0x6>
 80050ca:	2100      	movs	r1, #0
 80050cc:	441a      	add	r2, r3
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d100      	bne.n	80050d4 <strncpy+0x20>
 80050d2:	bd10      	pop	{r4, pc}
 80050d4:	f803 1b01 	strb.w	r1, [r3], #1
 80050d8:	e7f9      	b.n	80050ce <strncpy+0x1a>

080050da <sulp>:
 80050da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050de:	460f      	mov	r7, r1
 80050e0:	4690      	mov	r8, r2
 80050e2:	f002 fca9 	bl	8007a38 <__ulp>
 80050e6:	4604      	mov	r4, r0
 80050e8:	460d      	mov	r5, r1
 80050ea:	f1b8 0f00 	cmp.w	r8, #0
 80050ee:	d011      	beq.n	8005114 <sulp+0x3a>
 80050f0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80050f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dd0b      	ble.n	8005114 <sulp+0x3a>
 80050fc:	2400      	movs	r4, #0
 80050fe:	051b      	lsls	r3, r3, #20
 8005100:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005104:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005108:	4622      	mov	r2, r4
 800510a:	462b      	mov	r3, r5
 800510c:	f7fb f9ee 	bl	80004ec <__aeabi_dmul>
 8005110:	4604      	mov	r4, r0
 8005112:	460d      	mov	r5, r1
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800511c:	0000      	movs	r0, r0
	...

08005120 <_strtod_l>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	469b      	mov	fp, r3
 8005126:	2300      	movs	r3, #0
 8005128:	b09f      	sub	sp, #124	; 0x7c
 800512a:	931a      	str	r3, [sp, #104]	; 0x68
 800512c:	4b9e      	ldr	r3, [pc, #632]	; (80053a8 <_strtod_l+0x288>)
 800512e:	4682      	mov	sl, r0
 8005130:	681f      	ldr	r7, [r3, #0]
 8005132:	460e      	mov	r6, r1
 8005134:	4638      	mov	r0, r7
 8005136:	9215      	str	r2, [sp, #84]	; 0x54
 8005138:	f7fb f814 	bl	8000164 <strlen>
 800513c:	f04f 0800 	mov.w	r8, #0
 8005140:	4604      	mov	r4, r0
 8005142:	f04f 0900 	mov.w	r9, #0
 8005146:	9619      	str	r6, [sp, #100]	; 0x64
 8005148:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800514a:	781a      	ldrb	r2, [r3, #0]
 800514c:	2a2b      	cmp	r2, #43	; 0x2b
 800514e:	d04c      	beq.n	80051ea <_strtod_l+0xca>
 8005150:	d83a      	bhi.n	80051c8 <_strtod_l+0xa8>
 8005152:	2a0d      	cmp	r2, #13
 8005154:	d833      	bhi.n	80051be <_strtod_l+0x9e>
 8005156:	2a08      	cmp	r2, #8
 8005158:	d833      	bhi.n	80051c2 <_strtod_l+0xa2>
 800515a:	2a00      	cmp	r2, #0
 800515c:	d03d      	beq.n	80051da <_strtod_l+0xba>
 800515e:	2300      	movs	r3, #0
 8005160:	930a      	str	r3, [sp, #40]	; 0x28
 8005162:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005164:	782b      	ldrb	r3, [r5, #0]
 8005166:	2b30      	cmp	r3, #48	; 0x30
 8005168:	f040 80aa 	bne.w	80052c0 <_strtod_l+0x1a0>
 800516c:	786b      	ldrb	r3, [r5, #1]
 800516e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005172:	2b58      	cmp	r3, #88	; 0x58
 8005174:	d166      	bne.n	8005244 <_strtod_l+0x124>
 8005176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005178:	4650      	mov	r0, sl
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	ab1a      	add	r3, sp, #104	; 0x68
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	4a8a      	ldr	r2, [pc, #552]	; (80053ac <_strtod_l+0x28c>)
 8005182:	f8cd b008 	str.w	fp, [sp, #8]
 8005186:	ab1b      	add	r3, sp, #108	; 0x6c
 8005188:	a919      	add	r1, sp, #100	; 0x64
 800518a:	f001 fdad 	bl	8006ce8 <__gethex>
 800518e:	f010 0607 	ands.w	r6, r0, #7
 8005192:	4604      	mov	r4, r0
 8005194:	d005      	beq.n	80051a2 <_strtod_l+0x82>
 8005196:	2e06      	cmp	r6, #6
 8005198:	d129      	bne.n	80051ee <_strtod_l+0xce>
 800519a:	2300      	movs	r3, #0
 800519c:	3501      	adds	r5, #1
 800519e:	9519      	str	r5, [sp, #100]	; 0x64
 80051a0:	930a      	str	r3, [sp, #40]	; 0x28
 80051a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f040 858a 	bne.w	8005cbe <_strtod_l+0xb9e>
 80051aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ac:	b1d3      	cbz	r3, 80051e4 <_strtod_l+0xc4>
 80051ae:	4642      	mov	r2, r8
 80051b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	b01f      	add	sp, #124	; 0x7c
 80051ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051be:	2a20      	cmp	r2, #32
 80051c0:	d1cd      	bne.n	800515e <_strtod_l+0x3e>
 80051c2:	3301      	adds	r3, #1
 80051c4:	9319      	str	r3, [sp, #100]	; 0x64
 80051c6:	e7bf      	b.n	8005148 <_strtod_l+0x28>
 80051c8:	2a2d      	cmp	r2, #45	; 0x2d
 80051ca:	d1c8      	bne.n	800515e <_strtod_l+0x3e>
 80051cc:	2201      	movs	r2, #1
 80051ce:	920a      	str	r2, [sp, #40]	; 0x28
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	9219      	str	r2, [sp, #100]	; 0x64
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1c3      	bne.n	8005162 <_strtod_l+0x42>
 80051da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051dc:	9619      	str	r6, [sp, #100]	; 0x64
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 856b 	bne.w	8005cba <_strtod_l+0xb9a>
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	e7e4      	b.n	80051b4 <_strtod_l+0x94>
 80051ea:	2200      	movs	r2, #0
 80051ec:	e7ef      	b.n	80051ce <_strtod_l+0xae>
 80051ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80051f0:	b13a      	cbz	r2, 8005202 <_strtod_l+0xe2>
 80051f2:	2135      	movs	r1, #53	; 0x35
 80051f4:	a81c      	add	r0, sp, #112	; 0x70
 80051f6:	f002 fd23 	bl	8007c40 <__copybits>
 80051fa:	4650      	mov	r0, sl
 80051fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80051fe:	f002 f8eb 	bl	80073d8 <_Bfree>
 8005202:	3e01      	subs	r6, #1
 8005204:	2e04      	cmp	r6, #4
 8005206:	d806      	bhi.n	8005216 <_strtod_l+0xf6>
 8005208:	e8df f006 	tbb	[pc, r6]
 800520c:	1714030a 	.word	0x1714030a
 8005210:	0a          	.byte	0x0a
 8005211:	00          	.byte	0x00
 8005212:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005216:	0721      	lsls	r1, r4, #28
 8005218:	d5c3      	bpl.n	80051a2 <_strtod_l+0x82>
 800521a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800521e:	e7c0      	b.n	80051a2 <_strtod_l+0x82>
 8005220:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005222:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005226:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800522a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800522e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005232:	e7f0      	b.n	8005216 <_strtod_l+0xf6>
 8005234:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80053b0 <_strtod_l+0x290>
 8005238:	e7ed      	b.n	8005216 <_strtod_l+0xf6>
 800523a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800523e:	f04f 38ff 	mov.w	r8, #4294967295
 8005242:	e7e8      	b.n	8005216 <_strtod_l+0xf6>
 8005244:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	9219      	str	r2, [sp, #100]	; 0x64
 800524a:	785b      	ldrb	r3, [r3, #1]
 800524c:	2b30      	cmp	r3, #48	; 0x30
 800524e:	d0f9      	beq.n	8005244 <_strtod_l+0x124>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0a6      	beq.n	80051a2 <_strtod_l+0x82>
 8005254:	2301      	movs	r3, #1
 8005256:	9307      	str	r3, [sp, #28]
 8005258:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800525a:	220a      	movs	r2, #10
 800525c:	9308      	str	r3, [sp, #32]
 800525e:	2300      	movs	r3, #0
 8005260:	469b      	mov	fp, r3
 8005262:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005266:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005268:	7805      	ldrb	r5, [r0, #0]
 800526a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800526e:	b2d9      	uxtb	r1, r3
 8005270:	2909      	cmp	r1, #9
 8005272:	d927      	bls.n	80052c4 <_strtod_l+0x1a4>
 8005274:	4622      	mov	r2, r4
 8005276:	4639      	mov	r1, r7
 8005278:	f003 f8e0 	bl	800843c <strncmp>
 800527c:	2800      	cmp	r0, #0
 800527e:	d033      	beq.n	80052e8 <_strtod_l+0x1c8>
 8005280:	2000      	movs	r0, #0
 8005282:	462a      	mov	r2, r5
 8005284:	465c      	mov	r4, fp
 8005286:	4603      	mov	r3, r0
 8005288:	9004      	str	r0, [sp, #16]
 800528a:	2a65      	cmp	r2, #101	; 0x65
 800528c:	d001      	beq.n	8005292 <_strtod_l+0x172>
 800528e:	2a45      	cmp	r2, #69	; 0x45
 8005290:	d114      	bne.n	80052bc <_strtod_l+0x19c>
 8005292:	b91c      	cbnz	r4, 800529c <_strtod_l+0x17c>
 8005294:	9a07      	ldr	r2, [sp, #28]
 8005296:	4302      	orrs	r2, r0
 8005298:	d09f      	beq.n	80051da <_strtod_l+0xba>
 800529a:	2400      	movs	r4, #0
 800529c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800529e:	1c72      	adds	r2, r6, #1
 80052a0:	9219      	str	r2, [sp, #100]	; 0x64
 80052a2:	7872      	ldrb	r2, [r6, #1]
 80052a4:	2a2b      	cmp	r2, #43	; 0x2b
 80052a6:	d079      	beq.n	800539c <_strtod_l+0x27c>
 80052a8:	2a2d      	cmp	r2, #45	; 0x2d
 80052aa:	f000 8083 	beq.w	80053b4 <_strtod_l+0x294>
 80052ae:	2700      	movs	r7, #0
 80052b0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052b4:	2909      	cmp	r1, #9
 80052b6:	f240 8083 	bls.w	80053c0 <_strtod_l+0x2a0>
 80052ba:	9619      	str	r6, [sp, #100]	; 0x64
 80052bc:	2500      	movs	r5, #0
 80052be:	e09f      	b.n	8005400 <_strtod_l+0x2e0>
 80052c0:	2300      	movs	r3, #0
 80052c2:	e7c8      	b.n	8005256 <_strtod_l+0x136>
 80052c4:	f1bb 0f08 	cmp.w	fp, #8
 80052c8:	bfd5      	itete	le
 80052ca:	9906      	ldrle	r1, [sp, #24]
 80052cc:	9905      	ldrgt	r1, [sp, #20]
 80052ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80052d2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80052d6:	f100 0001 	add.w	r0, r0, #1
 80052da:	bfd4      	ite	le
 80052dc:	9306      	strle	r3, [sp, #24]
 80052de:	9305      	strgt	r3, [sp, #20]
 80052e0:	f10b 0b01 	add.w	fp, fp, #1
 80052e4:	9019      	str	r0, [sp, #100]	; 0x64
 80052e6:	e7be      	b.n	8005266 <_strtod_l+0x146>
 80052e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052ea:	191a      	adds	r2, r3, r4
 80052ec:	9219      	str	r2, [sp, #100]	; 0x64
 80052ee:	5d1a      	ldrb	r2, [r3, r4]
 80052f0:	f1bb 0f00 	cmp.w	fp, #0
 80052f4:	d036      	beq.n	8005364 <_strtod_l+0x244>
 80052f6:	465c      	mov	r4, fp
 80052f8:	9004      	str	r0, [sp, #16]
 80052fa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80052fe:	2b09      	cmp	r3, #9
 8005300:	d912      	bls.n	8005328 <_strtod_l+0x208>
 8005302:	2301      	movs	r3, #1
 8005304:	e7c1      	b.n	800528a <_strtod_l+0x16a>
 8005306:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005308:	3001      	adds	r0, #1
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	9219      	str	r2, [sp, #100]	; 0x64
 800530e:	785a      	ldrb	r2, [r3, #1]
 8005310:	2a30      	cmp	r2, #48	; 0x30
 8005312:	d0f8      	beq.n	8005306 <_strtod_l+0x1e6>
 8005314:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005318:	2b08      	cmp	r3, #8
 800531a:	f200 84d5 	bhi.w	8005cc8 <_strtod_l+0xba8>
 800531e:	9004      	str	r0, [sp, #16]
 8005320:	2000      	movs	r0, #0
 8005322:	4604      	mov	r4, r0
 8005324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005326:	9308      	str	r3, [sp, #32]
 8005328:	3a30      	subs	r2, #48	; 0x30
 800532a:	f100 0301 	add.w	r3, r0, #1
 800532e:	d013      	beq.n	8005358 <_strtod_l+0x238>
 8005330:	9904      	ldr	r1, [sp, #16]
 8005332:	1905      	adds	r5, r0, r4
 8005334:	4419      	add	r1, r3
 8005336:	9104      	str	r1, [sp, #16]
 8005338:	4623      	mov	r3, r4
 800533a:	210a      	movs	r1, #10
 800533c:	42ab      	cmp	r3, r5
 800533e:	d113      	bne.n	8005368 <_strtod_l+0x248>
 8005340:	1823      	adds	r3, r4, r0
 8005342:	2b08      	cmp	r3, #8
 8005344:	f104 0401 	add.w	r4, r4, #1
 8005348:	4404      	add	r4, r0
 800534a:	dc1b      	bgt.n	8005384 <_strtod_l+0x264>
 800534c:	230a      	movs	r3, #10
 800534e:	9906      	ldr	r1, [sp, #24]
 8005350:	fb03 2301 	mla	r3, r3, r1, r2
 8005354:	9306      	str	r3, [sp, #24]
 8005356:	2300      	movs	r3, #0
 8005358:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800535a:	4618      	mov	r0, r3
 800535c:	1c51      	adds	r1, r2, #1
 800535e:	9119      	str	r1, [sp, #100]	; 0x64
 8005360:	7852      	ldrb	r2, [r2, #1]
 8005362:	e7ca      	b.n	80052fa <_strtod_l+0x1da>
 8005364:	4658      	mov	r0, fp
 8005366:	e7d3      	b.n	8005310 <_strtod_l+0x1f0>
 8005368:	2b08      	cmp	r3, #8
 800536a:	dc04      	bgt.n	8005376 <_strtod_l+0x256>
 800536c:	9f06      	ldr	r7, [sp, #24]
 800536e:	434f      	muls	r7, r1
 8005370:	9706      	str	r7, [sp, #24]
 8005372:	3301      	adds	r3, #1
 8005374:	e7e2      	b.n	800533c <_strtod_l+0x21c>
 8005376:	1c5f      	adds	r7, r3, #1
 8005378:	2f10      	cmp	r7, #16
 800537a:	bfde      	ittt	le
 800537c:	9f05      	ldrle	r7, [sp, #20]
 800537e:	434f      	mulle	r7, r1
 8005380:	9705      	strle	r7, [sp, #20]
 8005382:	e7f6      	b.n	8005372 <_strtod_l+0x252>
 8005384:	2c10      	cmp	r4, #16
 8005386:	bfdf      	itttt	le
 8005388:	230a      	movle	r3, #10
 800538a:	9905      	ldrle	r1, [sp, #20]
 800538c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005390:	9305      	strle	r3, [sp, #20]
 8005392:	e7e0      	b.n	8005356 <_strtod_l+0x236>
 8005394:	2300      	movs	r3, #0
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	2301      	movs	r3, #1
 800539a:	e77b      	b.n	8005294 <_strtod_l+0x174>
 800539c:	2700      	movs	r7, #0
 800539e:	1cb2      	adds	r2, r6, #2
 80053a0:	9219      	str	r2, [sp, #100]	; 0x64
 80053a2:	78b2      	ldrb	r2, [r6, #2]
 80053a4:	e784      	b.n	80052b0 <_strtod_l+0x190>
 80053a6:	bf00      	nop
 80053a8:	08009070 	.word	0x08009070
 80053ac:	08008d90 	.word	0x08008d90
 80053b0:	7ff00000 	.word	0x7ff00000
 80053b4:	2701      	movs	r7, #1
 80053b6:	e7f2      	b.n	800539e <_strtod_l+0x27e>
 80053b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053ba:	1c51      	adds	r1, r2, #1
 80053bc:	9119      	str	r1, [sp, #100]	; 0x64
 80053be:	7852      	ldrb	r2, [r2, #1]
 80053c0:	2a30      	cmp	r2, #48	; 0x30
 80053c2:	d0f9      	beq.n	80053b8 <_strtod_l+0x298>
 80053c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80053c8:	2908      	cmp	r1, #8
 80053ca:	f63f af77 	bhi.w	80052bc <_strtod_l+0x19c>
 80053ce:	f04f 0e0a 	mov.w	lr, #10
 80053d2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80053d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053d8:	9209      	str	r2, [sp, #36]	; 0x24
 80053da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053dc:	1c51      	adds	r1, r2, #1
 80053de:	9119      	str	r1, [sp, #100]	; 0x64
 80053e0:	7852      	ldrb	r2, [r2, #1]
 80053e2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80053e6:	2d09      	cmp	r5, #9
 80053e8:	d935      	bls.n	8005456 <_strtod_l+0x336>
 80053ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053ec:	1b49      	subs	r1, r1, r5
 80053ee:	2908      	cmp	r1, #8
 80053f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80053f4:	dc02      	bgt.n	80053fc <_strtod_l+0x2dc>
 80053f6:	4565      	cmp	r5, ip
 80053f8:	bfa8      	it	ge
 80053fa:	4665      	movge	r5, ip
 80053fc:	b107      	cbz	r7, 8005400 <_strtod_l+0x2e0>
 80053fe:	426d      	negs	r5, r5
 8005400:	2c00      	cmp	r4, #0
 8005402:	d14c      	bne.n	800549e <_strtod_l+0x37e>
 8005404:	9907      	ldr	r1, [sp, #28]
 8005406:	4301      	orrs	r1, r0
 8005408:	f47f aecb 	bne.w	80051a2 <_strtod_l+0x82>
 800540c:	2b00      	cmp	r3, #0
 800540e:	f47f aee4 	bne.w	80051da <_strtod_l+0xba>
 8005412:	2a69      	cmp	r2, #105	; 0x69
 8005414:	d026      	beq.n	8005464 <_strtod_l+0x344>
 8005416:	dc23      	bgt.n	8005460 <_strtod_l+0x340>
 8005418:	2a49      	cmp	r2, #73	; 0x49
 800541a:	d023      	beq.n	8005464 <_strtod_l+0x344>
 800541c:	2a4e      	cmp	r2, #78	; 0x4e
 800541e:	f47f aedc 	bne.w	80051da <_strtod_l+0xba>
 8005422:	499d      	ldr	r1, [pc, #628]	; (8005698 <_strtod_l+0x578>)
 8005424:	a819      	add	r0, sp, #100	; 0x64
 8005426:	f001 fead 	bl	8007184 <__match>
 800542a:	2800      	cmp	r0, #0
 800542c:	f43f aed5 	beq.w	80051da <_strtod_l+0xba>
 8005430:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b28      	cmp	r3, #40	; 0x28
 8005436:	d12c      	bne.n	8005492 <_strtod_l+0x372>
 8005438:	4998      	ldr	r1, [pc, #608]	; (800569c <_strtod_l+0x57c>)
 800543a:	aa1c      	add	r2, sp, #112	; 0x70
 800543c:	a819      	add	r0, sp, #100	; 0x64
 800543e:	f001 feb5 	bl	80071ac <__hexnan>
 8005442:	2805      	cmp	r0, #5
 8005444:	d125      	bne.n	8005492 <_strtod_l+0x372>
 8005446:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005448:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800544c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005450:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005454:	e6a5      	b.n	80051a2 <_strtod_l+0x82>
 8005456:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800545a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800545e:	e7bc      	b.n	80053da <_strtod_l+0x2ba>
 8005460:	2a6e      	cmp	r2, #110	; 0x6e
 8005462:	e7dc      	b.n	800541e <_strtod_l+0x2fe>
 8005464:	498e      	ldr	r1, [pc, #568]	; (80056a0 <_strtod_l+0x580>)
 8005466:	a819      	add	r0, sp, #100	; 0x64
 8005468:	f001 fe8c 	bl	8007184 <__match>
 800546c:	2800      	cmp	r0, #0
 800546e:	f43f aeb4 	beq.w	80051da <_strtod_l+0xba>
 8005472:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005474:	498b      	ldr	r1, [pc, #556]	; (80056a4 <_strtod_l+0x584>)
 8005476:	3b01      	subs	r3, #1
 8005478:	a819      	add	r0, sp, #100	; 0x64
 800547a:	9319      	str	r3, [sp, #100]	; 0x64
 800547c:	f001 fe82 	bl	8007184 <__match>
 8005480:	b910      	cbnz	r0, 8005488 <_strtod_l+0x368>
 8005482:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005484:	3301      	adds	r3, #1
 8005486:	9319      	str	r3, [sp, #100]	; 0x64
 8005488:	f04f 0800 	mov.w	r8, #0
 800548c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80056a8 <_strtod_l+0x588>
 8005490:	e687      	b.n	80051a2 <_strtod_l+0x82>
 8005492:	4886      	ldr	r0, [pc, #536]	; (80056ac <_strtod_l+0x58c>)
 8005494:	f002 ffbc 	bl	8008410 <nan>
 8005498:	4680      	mov	r8, r0
 800549a:	4689      	mov	r9, r1
 800549c:	e681      	b.n	80051a2 <_strtod_l+0x82>
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	f1bb 0f00 	cmp.w	fp, #0
 80054a4:	bf08      	it	eq
 80054a6:	46a3      	moveq	fp, r4
 80054a8:	1aeb      	subs	r3, r5, r3
 80054aa:	2c10      	cmp	r4, #16
 80054ac:	9806      	ldr	r0, [sp, #24]
 80054ae:	4626      	mov	r6, r4
 80054b0:	9307      	str	r3, [sp, #28]
 80054b2:	bfa8      	it	ge
 80054b4:	2610      	movge	r6, #16
 80054b6:	f7fa ff9f 	bl	80003f8 <__aeabi_ui2d>
 80054ba:	2c09      	cmp	r4, #9
 80054bc:	4680      	mov	r8, r0
 80054be:	4689      	mov	r9, r1
 80054c0:	dd13      	ble.n	80054ea <_strtod_l+0x3ca>
 80054c2:	4b7b      	ldr	r3, [pc, #492]	; (80056b0 <_strtod_l+0x590>)
 80054c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054cc:	f7fb f80e 	bl	80004ec <__aeabi_dmul>
 80054d0:	4680      	mov	r8, r0
 80054d2:	9805      	ldr	r0, [sp, #20]
 80054d4:	4689      	mov	r9, r1
 80054d6:	f7fa ff8f 	bl	80003f8 <__aeabi_ui2d>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4640      	mov	r0, r8
 80054e0:	4649      	mov	r1, r9
 80054e2:	f7fa fe4d 	bl	8000180 <__adddf3>
 80054e6:	4680      	mov	r8, r0
 80054e8:	4689      	mov	r9, r1
 80054ea:	2c0f      	cmp	r4, #15
 80054ec:	dc36      	bgt.n	800555c <_strtod_l+0x43c>
 80054ee:	9b07      	ldr	r3, [sp, #28]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f43f ae56 	beq.w	80051a2 <_strtod_l+0x82>
 80054f6:	dd22      	ble.n	800553e <_strtod_l+0x41e>
 80054f8:	2b16      	cmp	r3, #22
 80054fa:	dc09      	bgt.n	8005510 <_strtod_l+0x3f0>
 80054fc:	496c      	ldr	r1, [pc, #432]	; (80056b0 <_strtod_l+0x590>)
 80054fe:	4642      	mov	r2, r8
 8005500:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005504:	464b      	mov	r3, r9
 8005506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800550a:	f7fa ffef 	bl	80004ec <__aeabi_dmul>
 800550e:	e7c3      	b.n	8005498 <_strtod_l+0x378>
 8005510:	9a07      	ldr	r2, [sp, #28]
 8005512:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005516:	4293      	cmp	r3, r2
 8005518:	db20      	blt.n	800555c <_strtod_l+0x43c>
 800551a:	4d65      	ldr	r5, [pc, #404]	; (80056b0 <_strtod_l+0x590>)
 800551c:	f1c4 040f 	rsb	r4, r4, #15
 8005520:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005524:	4642      	mov	r2, r8
 8005526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800552a:	464b      	mov	r3, r9
 800552c:	f7fa ffde 	bl	80004ec <__aeabi_dmul>
 8005530:	9b07      	ldr	r3, [sp, #28]
 8005532:	1b1c      	subs	r4, r3, r4
 8005534:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005538:	e9d5 2300 	ldrd	r2, r3, [r5]
 800553c:	e7e5      	b.n	800550a <_strtod_l+0x3ea>
 800553e:	9b07      	ldr	r3, [sp, #28]
 8005540:	3316      	adds	r3, #22
 8005542:	db0b      	blt.n	800555c <_strtod_l+0x43c>
 8005544:	9b04      	ldr	r3, [sp, #16]
 8005546:	4640      	mov	r0, r8
 8005548:	1b5d      	subs	r5, r3, r5
 800554a:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <_strtod_l+0x590>)
 800554c:	4649      	mov	r1, r9
 800554e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005552:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005556:	f7fb f8f3 	bl	8000740 <__aeabi_ddiv>
 800555a:	e79d      	b.n	8005498 <_strtod_l+0x378>
 800555c:	9b07      	ldr	r3, [sp, #28]
 800555e:	1ba6      	subs	r6, r4, r6
 8005560:	441e      	add	r6, r3
 8005562:	2e00      	cmp	r6, #0
 8005564:	dd74      	ble.n	8005650 <_strtod_l+0x530>
 8005566:	f016 030f 	ands.w	r3, r6, #15
 800556a:	d00a      	beq.n	8005582 <_strtod_l+0x462>
 800556c:	4950      	ldr	r1, [pc, #320]	; (80056b0 <_strtod_l+0x590>)
 800556e:	4642      	mov	r2, r8
 8005570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005578:	464b      	mov	r3, r9
 800557a:	f7fa ffb7 	bl	80004ec <__aeabi_dmul>
 800557e:	4680      	mov	r8, r0
 8005580:	4689      	mov	r9, r1
 8005582:	f036 060f 	bics.w	r6, r6, #15
 8005586:	d052      	beq.n	800562e <_strtod_l+0x50e>
 8005588:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800558c:	dd27      	ble.n	80055de <_strtod_l+0x4be>
 800558e:	f04f 0b00 	mov.w	fp, #0
 8005592:	f8cd b010 	str.w	fp, [sp, #16]
 8005596:	f8cd b020 	str.w	fp, [sp, #32]
 800559a:	f8cd b018 	str.w	fp, [sp, #24]
 800559e:	2322      	movs	r3, #34	; 0x22
 80055a0:	f04f 0800 	mov.w	r8, #0
 80055a4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80056a8 <_strtod_l+0x588>
 80055a8:	f8ca 3000 	str.w	r3, [sl]
 80055ac:	9b08      	ldr	r3, [sp, #32]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f43f adf7 	beq.w	80051a2 <_strtod_l+0x82>
 80055b4:	4650      	mov	r0, sl
 80055b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055b8:	f001 ff0e 	bl	80073d8 <_Bfree>
 80055bc:	4650      	mov	r0, sl
 80055be:	9906      	ldr	r1, [sp, #24]
 80055c0:	f001 ff0a 	bl	80073d8 <_Bfree>
 80055c4:	4650      	mov	r0, sl
 80055c6:	9904      	ldr	r1, [sp, #16]
 80055c8:	f001 ff06 	bl	80073d8 <_Bfree>
 80055cc:	4650      	mov	r0, sl
 80055ce:	9908      	ldr	r1, [sp, #32]
 80055d0:	f001 ff02 	bl	80073d8 <_Bfree>
 80055d4:	4659      	mov	r1, fp
 80055d6:	4650      	mov	r0, sl
 80055d8:	f001 fefe 	bl	80073d8 <_Bfree>
 80055dc:	e5e1      	b.n	80051a2 <_strtod_l+0x82>
 80055de:	4b35      	ldr	r3, [pc, #212]	; (80056b4 <_strtod_l+0x594>)
 80055e0:	4640      	mov	r0, r8
 80055e2:	9305      	str	r3, [sp, #20]
 80055e4:	2300      	movs	r3, #0
 80055e6:	4649      	mov	r1, r9
 80055e8:	461f      	mov	r7, r3
 80055ea:	1136      	asrs	r6, r6, #4
 80055ec:	2e01      	cmp	r6, #1
 80055ee:	dc21      	bgt.n	8005634 <_strtod_l+0x514>
 80055f0:	b10b      	cbz	r3, 80055f6 <_strtod_l+0x4d6>
 80055f2:	4680      	mov	r8, r0
 80055f4:	4689      	mov	r9, r1
 80055f6:	4b2f      	ldr	r3, [pc, #188]	; (80056b4 <_strtod_l+0x594>)
 80055f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80055fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005600:	4642      	mov	r2, r8
 8005602:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005606:	464b      	mov	r3, r9
 8005608:	f7fa ff70 	bl	80004ec <__aeabi_dmul>
 800560c:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <_strtod_l+0x588>)
 800560e:	460a      	mov	r2, r1
 8005610:	400b      	ands	r3, r1
 8005612:	4929      	ldr	r1, [pc, #164]	; (80056b8 <_strtod_l+0x598>)
 8005614:	4680      	mov	r8, r0
 8005616:	428b      	cmp	r3, r1
 8005618:	d8b9      	bhi.n	800558e <_strtod_l+0x46e>
 800561a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800561e:	428b      	cmp	r3, r1
 8005620:	bf86      	itte	hi
 8005622:	f04f 38ff 	movhi.w	r8, #4294967295
 8005626:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80056bc <_strtod_l+0x59c>
 800562a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800562e:	2300      	movs	r3, #0
 8005630:	9305      	str	r3, [sp, #20]
 8005632:	e07f      	b.n	8005734 <_strtod_l+0x614>
 8005634:	07f2      	lsls	r2, r6, #31
 8005636:	d505      	bpl.n	8005644 <_strtod_l+0x524>
 8005638:	9b05      	ldr	r3, [sp, #20]
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fa ff55 	bl	80004ec <__aeabi_dmul>
 8005642:	2301      	movs	r3, #1
 8005644:	9a05      	ldr	r2, [sp, #20]
 8005646:	3701      	adds	r7, #1
 8005648:	3208      	adds	r2, #8
 800564a:	1076      	asrs	r6, r6, #1
 800564c:	9205      	str	r2, [sp, #20]
 800564e:	e7cd      	b.n	80055ec <_strtod_l+0x4cc>
 8005650:	d0ed      	beq.n	800562e <_strtod_l+0x50e>
 8005652:	4276      	negs	r6, r6
 8005654:	f016 020f 	ands.w	r2, r6, #15
 8005658:	d00a      	beq.n	8005670 <_strtod_l+0x550>
 800565a:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <_strtod_l+0x590>)
 800565c:	4640      	mov	r0, r8
 800565e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005662:	4649      	mov	r1, r9
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f7fb f86a 	bl	8000740 <__aeabi_ddiv>
 800566c:	4680      	mov	r8, r0
 800566e:	4689      	mov	r9, r1
 8005670:	1136      	asrs	r6, r6, #4
 8005672:	d0dc      	beq.n	800562e <_strtod_l+0x50e>
 8005674:	2e1f      	cmp	r6, #31
 8005676:	dd23      	ble.n	80056c0 <_strtod_l+0x5a0>
 8005678:	f04f 0b00 	mov.w	fp, #0
 800567c:	f8cd b010 	str.w	fp, [sp, #16]
 8005680:	f8cd b020 	str.w	fp, [sp, #32]
 8005684:	f8cd b018 	str.w	fp, [sp, #24]
 8005688:	2322      	movs	r3, #34	; 0x22
 800568a:	f04f 0800 	mov.w	r8, #0
 800568e:	f04f 0900 	mov.w	r9, #0
 8005692:	f8ca 3000 	str.w	r3, [sl]
 8005696:	e789      	b.n	80055ac <_strtod_l+0x48c>
 8005698:	08008d61 	.word	0x08008d61
 800569c:	08008da4 	.word	0x08008da4
 80056a0:	08008d59 	.word	0x08008d59
 80056a4:	08008f94 	.word	0x08008f94
 80056a8:	7ff00000 	.word	0x7ff00000
 80056ac:	08008d12 	.word	0x08008d12
 80056b0:	08009108 	.word	0x08009108
 80056b4:	080090e0 	.word	0x080090e0
 80056b8:	7ca00000 	.word	0x7ca00000
 80056bc:	7fefffff 	.word	0x7fefffff
 80056c0:	f016 0310 	ands.w	r3, r6, #16
 80056c4:	bf18      	it	ne
 80056c6:	236a      	movne	r3, #106	; 0x6a
 80056c8:	4640      	mov	r0, r8
 80056ca:	9305      	str	r3, [sp, #20]
 80056cc:	4649      	mov	r1, r9
 80056ce:	2300      	movs	r3, #0
 80056d0:	4fb0      	ldr	r7, [pc, #704]	; (8005994 <_strtod_l+0x874>)
 80056d2:	07f2      	lsls	r2, r6, #31
 80056d4:	d504      	bpl.n	80056e0 <_strtod_l+0x5c0>
 80056d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056da:	f7fa ff07 	bl	80004ec <__aeabi_dmul>
 80056de:	2301      	movs	r3, #1
 80056e0:	1076      	asrs	r6, r6, #1
 80056e2:	f107 0708 	add.w	r7, r7, #8
 80056e6:	d1f4      	bne.n	80056d2 <_strtod_l+0x5b2>
 80056e8:	b10b      	cbz	r3, 80056ee <_strtod_l+0x5ce>
 80056ea:	4680      	mov	r8, r0
 80056ec:	4689      	mov	r9, r1
 80056ee:	9b05      	ldr	r3, [sp, #20]
 80056f0:	b1c3      	cbz	r3, 8005724 <_strtod_l+0x604>
 80056f2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80056f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	4649      	mov	r1, r9
 80056fe:	dd11      	ble.n	8005724 <_strtod_l+0x604>
 8005700:	2b1f      	cmp	r3, #31
 8005702:	f340 8127 	ble.w	8005954 <_strtod_l+0x834>
 8005706:	2b34      	cmp	r3, #52	; 0x34
 8005708:	bfd8      	it	le
 800570a:	f04f 33ff 	movle.w	r3, #4294967295
 800570e:	f04f 0800 	mov.w	r8, #0
 8005712:	bfcf      	iteee	gt
 8005714:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005718:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800571c:	fa03 f202 	lslle.w	r2, r3, r2
 8005720:	ea02 0901 	andle.w	r9, r2, r1
 8005724:	2200      	movs	r2, #0
 8005726:	2300      	movs	r3, #0
 8005728:	4640      	mov	r0, r8
 800572a:	4649      	mov	r1, r9
 800572c:	f7fb f946 	bl	80009bc <__aeabi_dcmpeq>
 8005730:	2800      	cmp	r0, #0
 8005732:	d1a1      	bne.n	8005678 <_strtod_l+0x558>
 8005734:	9b06      	ldr	r3, [sp, #24]
 8005736:	465a      	mov	r2, fp
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	4650      	mov	r0, sl
 800573c:	4623      	mov	r3, r4
 800573e:	9908      	ldr	r1, [sp, #32]
 8005740:	f001 feb2 	bl	80074a8 <__s2b>
 8005744:	9008      	str	r0, [sp, #32]
 8005746:	2800      	cmp	r0, #0
 8005748:	f43f af21 	beq.w	800558e <_strtod_l+0x46e>
 800574c:	9b04      	ldr	r3, [sp, #16]
 800574e:	f04f 0b00 	mov.w	fp, #0
 8005752:	1b5d      	subs	r5, r3, r5
 8005754:	9b07      	ldr	r3, [sp, #28]
 8005756:	f8cd b010 	str.w	fp, [sp, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	bfb4      	ite	lt
 800575e:	462b      	movlt	r3, r5
 8005760:	2300      	movge	r3, #0
 8005762:	930e      	str	r3, [sp, #56]	; 0x38
 8005764:	9b07      	ldr	r3, [sp, #28]
 8005766:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800576a:	9314      	str	r3, [sp, #80]	; 0x50
 800576c:	9b08      	ldr	r3, [sp, #32]
 800576e:	4650      	mov	r0, sl
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	f001 fdf1 	bl	8007358 <_Balloc>
 8005776:	9006      	str	r0, [sp, #24]
 8005778:	2800      	cmp	r0, #0
 800577a:	f43f af10 	beq.w	800559e <_strtod_l+0x47e>
 800577e:	9b08      	ldr	r3, [sp, #32]
 8005780:	300c      	adds	r0, #12
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	f103 010c 	add.w	r1, r3, #12
 8005788:	3202      	adds	r2, #2
 800578a:	0092      	lsls	r2, r2, #2
 800578c:	f001 fdd6 	bl	800733c <memcpy>
 8005790:	ab1c      	add	r3, sp, #112	; 0x70
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	ab1b      	add	r3, sp, #108	; 0x6c
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4642      	mov	r2, r8
 800579a:	464b      	mov	r3, r9
 800579c:	4650      	mov	r0, sl
 800579e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80057a2:	f002 f9c3 	bl	8007b2c <__d2b>
 80057a6:	901a      	str	r0, [sp, #104]	; 0x68
 80057a8:	2800      	cmp	r0, #0
 80057aa:	f43f aef8 	beq.w	800559e <_strtod_l+0x47e>
 80057ae:	2101      	movs	r1, #1
 80057b0:	4650      	mov	r0, sl
 80057b2:	f001 ff11 	bl	80075d8 <__i2b>
 80057b6:	4603      	mov	r3, r0
 80057b8:	9004      	str	r0, [sp, #16]
 80057ba:	2800      	cmp	r0, #0
 80057bc:	f43f aeef 	beq.w	800559e <_strtod_l+0x47e>
 80057c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80057c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80057c4:	2d00      	cmp	r5, #0
 80057c6:	bfab      	itete	ge
 80057c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80057ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80057cc:	18ee      	addge	r6, r5, r3
 80057ce:	1b5c      	sublt	r4, r3, r5
 80057d0:	9b05      	ldr	r3, [sp, #20]
 80057d2:	bfa8      	it	ge
 80057d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80057d6:	eba5 0503 	sub.w	r5, r5, r3
 80057da:	4415      	add	r5, r2
 80057dc:	4b6e      	ldr	r3, [pc, #440]	; (8005998 <_strtod_l+0x878>)
 80057de:	f105 35ff 	add.w	r5, r5, #4294967295
 80057e2:	bfb8      	it	lt
 80057e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80057e6:	429d      	cmp	r5, r3
 80057e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057ec:	f280 80c4 	bge.w	8005978 <_strtod_l+0x858>
 80057f0:	1b5b      	subs	r3, r3, r5
 80057f2:	2b1f      	cmp	r3, #31
 80057f4:	f04f 0701 	mov.w	r7, #1
 80057f8:	eba2 0203 	sub.w	r2, r2, r3
 80057fc:	f300 80b1 	bgt.w	8005962 <_strtod_l+0x842>
 8005800:	2500      	movs	r5, #0
 8005802:	fa07 f303 	lsl.w	r3, r7, r3
 8005806:	930f      	str	r3, [sp, #60]	; 0x3c
 8005808:	18b7      	adds	r7, r6, r2
 800580a:	9b05      	ldr	r3, [sp, #20]
 800580c:	42be      	cmp	r6, r7
 800580e:	4414      	add	r4, r2
 8005810:	441c      	add	r4, r3
 8005812:	4633      	mov	r3, r6
 8005814:	bfa8      	it	ge
 8005816:	463b      	movge	r3, r7
 8005818:	42a3      	cmp	r3, r4
 800581a:	bfa8      	it	ge
 800581c:	4623      	movge	r3, r4
 800581e:	2b00      	cmp	r3, #0
 8005820:	bfc2      	ittt	gt
 8005822:	1aff      	subgt	r7, r7, r3
 8005824:	1ae4      	subgt	r4, r4, r3
 8005826:	1af6      	subgt	r6, r6, r3
 8005828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800582a:	2b00      	cmp	r3, #0
 800582c:	dd17      	ble.n	800585e <_strtod_l+0x73e>
 800582e:	461a      	mov	r2, r3
 8005830:	4650      	mov	r0, sl
 8005832:	9904      	ldr	r1, [sp, #16]
 8005834:	f001 ff8e 	bl	8007754 <__pow5mult>
 8005838:	9004      	str	r0, [sp, #16]
 800583a:	2800      	cmp	r0, #0
 800583c:	f43f aeaf 	beq.w	800559e <_strtod_l+0x47e>
 8005840:	4601      	mov	r1, r0
 8005842:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005844:	4650      	mov	r0, sl
 8005846:	f001 fedd 	bl	8007604 <__multiply>
 800584a:	9009      	str	r0, [sp, #36]	; 0x24
 800584c:	2800      	cmp	r0, #0
 800584e:	f43f aea6 	beq.w	800559e <_strtod_l+0x47e>
 8005852:	4650      	mov	r0, sl
 8005854:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005856:	f001 fdbf 	bl	80073d8 <_Bfree>
 800585a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585c:	931a      	str	r3, [sp, #104]	; 0x68
 800585e:	2f00      	cmp	r7, #0
 8005860:	f300 808e 	bgt.w	8005980 <_strtod_l+0x860>
 8005864:	9b07      	ldr	r3, [sp, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	dd08      	ble.n	800587c <_strtod_l+0x75c>
 800586a:	4650      	mov	r0, sl
 800586c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800586e:	9906      	ldr	r1, [sp, #24]
 8005870:	f001 ff70 	bl	8007754 <__pow5mult>
 8005874:	9006      	str	r0, [sp, #24]
 8005876:	2800      	cmp	r0, #0
 8005878:	f43f ae91 	beq.w	800559e <_strtod_l+0x47e>
 800587c:	2c00      	cmp	r4, #0
 800587e:	dd08      	ble.n	8005892 <_strtod_l+0x772>
 8005880:	4622      	mov	r2, r4
 8005882:	4650      	mov	r0, sl
 8005884:	9906      	ldr	r1, [sp, #24]
 8005886:	f001 ffbf 	bl	8007808 <__lshift>
 800588a:	9006      	str	r0, [sp, #24]
 800588c:	2800      	cmp	r0, #0
 800588e:	f43f ae86 	beq.w	800559e <_strtod_l+0x47e>
 8005892:	2e00      	cmp	r6, #0
 8005894:	dd08      	ble.n	80058a8 <_strtod_l+0x788>
 8005896:	4632      	mov	r2, r6
 8005898:	4650      	mov	r0, sl
 800589a:	9904      	ldr	r1, [sp, #16]
 800589c:	f001 ffb4 	bl	8007808 <__lshift>
 80058a0:	9004      	str	r0, [sp, #16]
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f43f ae7b 	beq.w	800559e <_strtod_l+0x47e>
 80058a8:	4650      	mov	r0, sl
 80058aa:	9a06      	ldr	r2, [sp, #24]
 80058ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058ae:	f002 f837 	bl	8007920 <__mdiff>
 80058b2:	4683      	mov	fp, r0
 80058b4:	2800      	cmp	r0, #0
 80058b6:	f43f ae72 	beq.w	800559e <_strtod_l+0x47e>
 80058ba:	2400      	movs	r4, #0
 80058bc:	68c3      	ldr	r3, [r0, #12]
 80058be:	9904      	ldr	r1, [sp, #16]
 80058c0:	60c4      	str	r4, [r0, #12]
 80058c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80058c4:	f002 f810 	bl	80078e8 <__mcmp>
 80058c8:	42a0      	cmp	r0, r4
 80058ca:	da6b      	bge.n	80059a4 <_strtod_l+0x884>
 80058cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ce:	ea53 0308 	orrs.w	r3, r3, r8
 80058d2:	f040 8091 	bne.w	80059f8 <_strtod_l+0x8d8>
 80058d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f040 808c 	bne.w	80059f8 <_strtod_l+0x8d8>
 80058e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058e4:	0d1b      	lsrs	r3, r3, #20
 80058e6:	051b      	lsls	r3, r3, #20
 80058e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058ec:	f240 8084 	bls.w	80059f8 <_strtod_l+0x8d8>
 80058f0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80058f4:	b91b      	cbnz	r3, 80058fe <_strtod_l+0x7de>
 80058f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	dd7c      	ble.n	80059f8 <_strtod_l+0x8d8>
 80058fe:	4659      	mov	r1, fp
 8005900:	2201      	movs	r2, #1
 8005902:	4650      	mov	r0, sl
 8005904:	f001 ff80 	bl	8007808 <__lshift>
 8005908:	9904      	ldr	r1, [sp, #16]
 800590a:	4683      	mov	fp, r0
 800590c:	f001 ffec 	bl	80078e8 <__mcmp>
 8005910:	2800      	cmp	r0, #0
 8005912:	dd71      	ble.n	80059f8 <_strtod_l+0x8d8>
 8005914:	9905      	ldr	r1, [sp, #20]
 8005916:	464b      	mov	r3, r9
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <_strtod_l+0x87c>)
 800591a:	2900      	cmp	r1, #0
 800591c:	f000 808c 	beq.w	8005a38 <_strtod_l+0x918>
 8005920:	ea02 0109 	and.w	r1, r2, r9
 8005924:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005928:	f300 8086 	bgt.w	8005a38 <_strtod_l+0x918>
 800592c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005930:	f77f aeaa 	ble.w	8005688 <_strtod_l+0x568>
 8005934:	4640      	mov	r0, r8
 8005936:	4649      	mov	r1, r9
 8005938:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <_strtod_l+0x880>)
 800593a:	2200      	movs	r2, #0
 800593c:	f7fa fdd6 	bl	80004ec <__aeabi_dmul>
 8005940:	460b      	mov	r3, r1
 8005942:	4303      	orrs	r3, r0
 8005944:	bf08      	it	eq
 8005946:	2322      	moveq	r3, #34	; 0x22
 8005948:	4680      	mov	r8, r0
 800594a:	4689      	mov	r9, r1
 800594c:	bf08      	it	eq
 800594e:	f8ca 3000 	streq.w	r3, [sl]
 8005952:	e62f      	b.n	80055b4 <_strtod_l+0x494>
 8005954:	f04f 32ff 	mov.w	r2, #4294967295
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	ea03 0808 	and.w	r8, r3, r8
 8005960:	e6e0      	b.n	8005724 <_strtod_l+0x604>
 8005962:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005966:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800596a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800596e:	35e2      	adds	r5, #226	; 0xe2
 8005970:	fa07 f505 	lsl.w	r5, r7, r5
 8005974:	970f      	str	r7, [sp, #60]	; 0x3c
 8005976:	e747      	b.n	8005808 <_strtod_l+0x6e8>
 8005978:	2301      	movs	r3, #1
 800597a:	2500      	movs	r5, #0
 800597c:	930f      	str	r3, [sp, #60]	; 0x3c
 800597e:	e743      	b.n	8005808 <_strtod_l+0x6e8>
 8005980:	463a      	mov	r2, r7
 8005982:	4650      	mov	r0, sl
 8005984:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005986:	f001 ff3f 	bl	8007808 <__lshift>
 800598a:	901a      	str	r0, [sp, #104]	; 0x68
 800598c:	2800      	cmp	r0, #0
 800598e:	f47f af69 	bne.w	8005864 <_strtod_l+0x744>
 8005992:	e604      	b.n	800559e <_strtod_l+0x47e>
 8005994:	08008db8 	.word	0x08008db8
 8005998:	fffffc02 	.word	0xfffffc02
 800599c:	7ff00000 	.word	0x7ff00000
 80059a0:	39500000 	.word	0x39500000
 80059a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80059a8:	d165      	bne.n	8005a76 <_strtod_l+0x956>
 80059aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059b0:	b35a      	cbz	r2, 8005a0a <_strtod_l+0x8ea>
 80059b2:	4a99      	ldr	r2, [pc, #612]	; (8005c18 <_strtod_l+0xaf8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d12b      	bne.n	8005a10 <_strtod_l+0x8f0>
 80059b8:	9b05      	ldr	r3, [sp, #20]
 80059ba:	4641      	mov	r1, r8
 80059bc:	b303      	cbz	r3, 8005a00 <_strtod_l+0x8e0>
 80059be:	464a      	mov	r2, r9
 80059c0:	4b96      	ldr	r3, [pc, #600]	; (8005c1c <_strtod_l+0xafc>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80059c8:	f04f 32ff 	mov.w	r2, #4294967295
 80059cc:	d81b      	bhi.n	8005a06 <_strtod_l+0x8e6>
 80059ce:	0d1b      	lsrs	r3, r3, #20
 80059d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	4299      	cmp	r1, r3
 80059da:	d119      	bne.n	8005a10 <_strtod_l+0x8f0>
 80059dc:	4b90      	ldr	r3, [pc, #576]	; (8005c20 <_strtod_l+0xb00>)
 80059de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d102      	bne.n	80059ea <_strtod_l+0x8ca>
 80059e4:	3101      	adds	r1, #1
 80059e6:	f43f adda 	beq.w	800559e <_strtod_l+0x47e>
 80059ea:	f04f 0800 	mov.w	r8, #0
 80059ee:	4b8b      	ldr	r3, [pc, #556]	; (8005c1c <_strtod_l+0xafc>)
 80059f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f2:	401a      	ands	r2, r3
 80059f4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80059f8:	9b05      	ldr	r3, [sp, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d19a      	bne.n	8005934 <_strtod_l+0x814>
 80059fe:	e5d9      	b.n	80055b4 <_strtod_l+0x494>
 8005a00:	f04f 33ff 	mov.w	r3, #4294967295
 8005a04:	e7e8      	b.n	80059d8 <_strtod_l+0x8b8>
 8005a06:	4613      	mov	r3, r2
 8005a08:	e7e6      	b.n	80059d8 <_strtod_l+0x8b8>
 8005a0a:	ea53 0308 	orrs.w	r3, r3, r8
 8005a0e:	d081      	beq.n	8005914 <_strtod_l+0x7f4>
 8005a10:	b1e5      	cbz	r5, 8005a4c <_strtod_l+0x92c>
 8005a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a14:	421d      	tst	r5, r3
 8005a16:	d0ef      	beq.n	80059f8 <_strtod_l+0x8d8>
 8005a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	9a05      	ldr	r2, [sp, #20]
 8005a20:	b1c3      	cbz	r3, 8005a54 <_strtod_l+0x934>
 8005a22:	f7ff fb5a 	bl	80050da <sulp>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a2e:	f7fa fba7 	bl	8000180 <__adddf3>
 8005a32:	4680      	mov	r8, r0
 8005a34:	4689      	mov	r9, r1
 8005a36:	e7df      	b.n	80059f8 <_strtod_l+0x8d8>
 8005a38:	4013      	ands	r3, r2
 8005a3a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a3e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005a42:	f04f 38ff 	mov.w	r8, #4294967295
 8005a46:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005a4a:	e7d5      	b.n	80059f8 <_strtod_l+0x8d8>
 8005a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a4e:	ea13 0f08 	tst.w	r3, r8
 8005a52:	e7e0      	b.n	8005a16 <_strtod_l+0x8f6>
 8005a54:	f7ff fb41 	bl	80050da <sulp>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a60:	f7fa fb8c 	bl	800017c <__aeabi_dsub>
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	f7fa ffa6 	bl	80009bc <__aeabi_dcmpeq>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d0c1      	beq.n	80059f8 <_strtod_l+0x8d8>
 8005a74:	e608      	b.n	8005688 <_strtod_l+0x568>
 8005a76:	4658      	mov	r0, fp
 8005a78:	9904      	ldr	r1, [sp, #16]
 8005a7a:	f002 f8b3 	bl	8007be4 <__ratio>
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a84:	4606      	mov	r6, r0
 8005a86:	460f      	mov	r7, r1
 8005a88:	f7fa ffac 	bl	80009e4 <__aeabi_dcmple>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d070      	beq.n	8005b72 <_strtod_l+0xa52>
 8005a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d042      	beq.n	8005b1c <_strtod_l+0x9fc>
 8005a96:	2600      	movs	r6, #0
 8005a98:	4f62      	ldr	r7, [pc, #392]	; (8005c24 <_strtod_l+0xb04>)
 8005a9a:	4d62      	ldr	r5, [pc, #392]	; (8005c24 <_strtod_l+0xb04>)
 8005a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005aa2:	0d1b      	lsrs	r3, r3, #20
 8005aa4:	051b      	lsls	r3, r3, #20
 8005aa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005aa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005aaa:	4b5f      	ldr	r3, [pc, #380]	; (8005c28 <_strtod_l+0xb08>)
 8005aac:	429a      	cmp	r2, r3
 8005aae:	f040 80c3 	bne.w	8005c38 <_strtod_l+0xb18>
 8005ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005aba:	4649      	mov	r1, r9
 8005abc:	f001 ffbc 	bl	8007a38 <__ulp>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	f7fa fd10 	bl	80004ec <__aeabi_dmul>
 8005acc:	4642      	mov	r2, r8
 8005ace:	464b      	mov	r3, r9
 8005ad0:	f7fa fb56 	bl	8000180 <__adddf3>
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4951      	ldr	r1, [pc, #324]	; (8005c1c <_strtod_l+0xafc>)
 8005ad8:	4a54      	ldr	r2, [pc, #336]	; (8005c2c <_strtod_l+0xb0c>)
 8005ada:	4019      	ands	r1, r3
 8005adc:	4291      	cmp	r1, r2
 8005ade:	4680      	mov	r8, r0
 8005ae0:	d95d      	bls.n	8005b9e <_strtod_l+0xa7e>
 8005ae2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ae4:	4b4e      	ldr	r3, [pc, #312]	; (8005c20 <_strtod_l+0xb00>)
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d103      	bne.n	8005af2 <_strtod_l+0x9d2>
 8005aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aec:	3301      	adds	r3, #1
 8005aee:	f43f ad56 	beq.w	800559e <_strtod_l+0x47e>
 8005af2:	f04f 38ff 	mov.w	r8, #4294967295
 8005af6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005c20 <_strtod_l+0xb00>
 8005afa:	4650      	mov	r0, sl
 8005afc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005afe:	f001 fc6b 	bl	80073d8 <_Bfree>
 8005b02:	4650      	mov	r0, sl
 8005b04:	9906      	ldr	r1, [sp, #24]
 8005b06:	f001 fc67 	bl	80073d8 <_Bfree>
 8005b0a:	4650      	mov	r0, sl
 8005b0c:	9904      	ldr	r1, [sp, #16]
 8005b0e:	f001 fc63 	bl	80073d8 <_Bfree>
 8005b12:	4659      	mov	r1, fp
 8005b14:	4650      	mov	r0, sl
 8005b16:	f001 fc5f 	bl	80073d8 <_Bfree>
 8005b1a:	e627      	b.n	800576c <_strtod_l+0x64c>
 8005b1c:	f1b8 0f00 	cmp.w	r8, #0
 8005b20:	d119      	bne.n	8005b56 <_strtod_l+0xa36>
 8005b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b28:	b9e3      	cbnz	r3, 8005b64 <_strtod_l+0xa44>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	4639      	mov	r1, r7
 8005b30:	4b3c      	ldr	r3, [pc, #240]	; (8005c24 <_strtod_l+0xb04>)
 8005b32:	f7fa ff4d 	bl	80009d0 <__aeabi_dcmplt>
 8005b36:	b9c8      	cbnz	r0, 8005b6c <_strtod_l+0xa4c>
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <_strtod_l+0xb10>)
 8005b40:	f7fa fcd4 	bl	80004ec <__aeabi_dmul>
 8005b44:	4604      	mov	r4, r0
 8005b46:	460d      	mov	r5, r1
 8005b48:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005b4c:	9416      	str	r4, [sp, #88]	; 0x58
 8005b4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b50:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005b54:	e7a2      	b.n	8005a9c <_strtod_l+0x97c>
 8005b56:	f1b8 0f01 	cmp.w	r8, #1
 8005b5a:	d103      	bne.n	8005b64 <_strtod_l+0xa44>
 8005b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f43f ad92 	beq.w	8005688 <_strtod_l+0x568>
 8005b64:	2600      	movs	r6, #0
 8005b66:	2400      	movs	r4, #0
 8005b68:	4f32      	ldr	r7, [pc, #200]	; (8005c34 <_strtod_l+0xb14>)
 8005b6a:	e796      	b.n	8005a9a <_strtod_l+0x97a>
 8005b6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005b6e:	4d30      	ldr	r5, [pc, #192]	; (8005c30 <_strtod_l+0xb10>)
 8005b70:	e7ea      	b.n	8005b48 <_strtod_l+0xa28>
 8005b72:	4b2f      	ldr	r3, [pc, #188]	; (8005c30 <_strtod_l+0xb10>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	4630      	mov	r0, r6
 8005b78:	4639      	mov	r1, r7
 8005b7a:	f7fa fcb7 	bl	80004ec <__aeabi_dmul>
 8005b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b80:	4604      	mov	r4, r0
 8005b82:	460d      	mov	r5, r1
 8005b84:	b933      	cbnz	r3, 8005b94 <_strtod_l+0xa74>
 8005b86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b8a:	9010      	str	r0, [sp, #64]	; 0x40
 8005b8c:	9311      	str	r3, [sp, #68]	; 0x44
 8005b8e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005b92:	e783      	b.n	8005a9c <_strtod_l+0x97c>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005b9c:	e7f7      	b.n	8005b8e <_strtod_l+0xa6e>
 8005b9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005ba2:	9b05      	ldr	r3, [sp, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1a8      	bne.n	8005afa <_strtod_l+0x9da>
 8005ba8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bae:	0d1b      	lsrs	r3, r3, #20
 8005bb0:	051b      	lsls	r3, r3, #20
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d1a1      	bne.n	8005afa <_strtod_l+0x9da>
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	4629      	mov	r1, r5
 8005bba:	f7fb fad9 	bl	8001170 <__aeabi_d2lz>
 8005bbe:	f7fa fc67 	bl	8000490 <__aeabi_l2d>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f7fa fad7 	bl	800017c <__aeabi_dsub>
 8005bce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bd4:	ea43 0308 	orr.w	r3, r3, r8
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	4604      	mov	r4, r0
 8005bdc:	460d      	mov	r5, r1
 8005bde:	d066      	beq.n	8005cae <_strtod_l+0xb8e>
 8005be0:	a309      	add	r3, pc, #36	; (adr r3, 8005c08 <_strtod_l+0xae8>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fef3 	bl	80009d0 <__aeabi_dcmplt>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	f47f ace2 	bne.w	80055b4 <_strtod_l+0x494>
 8005bf0:	a307      	add	r3, pc, #28	; (adr r3, 8005c10 <_strtod_l+0xaf0>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	f7fa ff07 	bl	8000a0c <__aeabi_dcmpgt>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f43f af7b 	beq.w	8005afa <_strtod_l+0x9da>
 8005c04:	e4d6      	b.n	80055b4 <_strtod_l+0x494>
 8005c06:	bf00      	nop
 8005c08:	94a03595 	.word	0x94a03595
 8005c0c:	3fdfffff 	.word	0x3fdfffff
 8005c10:	35afe535 	.word	0x35afe535
 8005c14:	3fe00000 	.word	0x3fe00000
 8005c18:	000fffff 	.word	0x000fffff
 8005c1c:	7ff00000 	.word	0x7ff00000
 8005c20:	7fefffff 	.word	0x7fefffff
 8005c24:	3ff00000 	.word	0x3ff00000
 8005c28:	7fe00000 	.word	0x7fe00000
 8005c2c:	7c9fffff 	.word	0x7c9fffff
 8005c30:	3fe00000 	.word	0x3fe00000
 8005c34:	bff00000 	.word	0xbff00000
 8005c38:	9b05      	ldr	r3, [sp, #20]
 8005c3a:	b313      	cbz	r3, 8005c82 <_strtod_l+0xb62>
 8005c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c42:	d81e      	bhi.n	8005c82 <_strtod_l+0xb62>
 8005c44:	a326      	add	r3, pc, #152	; (adr r3, 8005ce0 <_strtod_l+0xbc0>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	f7fa fec9 	bl	80009e4 <__aeabi_dcmple>
 8005c52:	b190      	cbz	r0, 8005c7a <_strtod_l+0xb5a>
 8005c54:	4629      	mov	r1, r5
 8005c56:	4620      	mov	r0, r4
 8005c58:	f7fa ff20 	bl	8000a9c <__aeabi_d2uiz>
 8005c5c:	2801      	cmp	r0, #1
 8005c5e:	bf38      	it	cc
 8005c60:	2001      	movcc	r0, #1
 8005c62:	f7fa fbc9 	bl	80003f8 <__aeabi_ui2d>
 8005c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c68:	4604      	mov	r4, r0
 8005c6a:	460d      	mov	r5, r1
 8005c6c:	b9d3      	cbnz	r3, 8005ca4 <_strtod_l+0xb84>
 8005c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c72:	9012      	str	r0, [sp, #72]	; 0x48
 8005c74:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c76:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005c7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c7c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005c80:	1a9f      	subs	r7, r3, r2
 8005c82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c86:	f001 fed7 	bl	8007a38 <__ulp>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4630      	mov	r0, r6
 8005c90:	4639      	mov	r1, r7
 8005c92:	f7fa fc2b 	bl	80004ec <__aeabi_dmul>
 8005c96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c9a:	f7fa fa71 	bl	8000180 <__adddf3>
 8005c9e:	4680      	mov	r8, r0
 8005ca0:	4689      	mov	r9, r1
 8005ca2:	e77e      	b.n	8005ba2 <_strtod_l+0xa82>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005cac:	e7e3      	b.n	8005c76 <_strtod_l+0xb56>
 8005cae:	a30e      	add	r3, pc, #56	; (adr r3, 8005ce8 <_strtod_l+0xbc8>)
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	f7fa fe8c 	bl	80009d0 <__aeabi_dcmplt>
 8005cb8:	e7a1      	b.n	8005bfe <_strtod_l+0xade>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8005cbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	f7ff ba71 	b.w	80051aa <_strtod_l+0x8a>
 8005cc8:	2a65      	cmp	r2, #101	; 0x65
 8005cca:	f43f ab63 	beq.w	8005394 <_strtod_l+0x274>
 8005cce:	2a45      	cmp	r2, #69	; 0x45
 8005cd0:	f43f ab60 	beq.w	8005394 <_strtod_l+0x274>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f7ff bb95 	b.w	8005404 <_strtod_l+0x2e4>
 8005cda:	bf00      	nop
 8005cdc:	f3af 8000 	nop.w
 8005ce0:	ffc00000 	.word	0xffc00000
 8005ce4:	41dfffff 	.word	0x41dfffff
 8005ce8:	94a03595 	.word	0x94a03595
 8005cec:	3fcfffff 	.word	0x3fcfffff

08005cf0 <_strtod_r>:
 8005cf0:	4b01      	ldr	r3, [pc, #4]	; (8005cf8 <_strtod_r+0x8>)
 8005cf2:	f7ff ba15 	b.w	8005120 <_strtod_l>
 8005cf6:	bf00      	nop
 8005cf8:	20000080 	.word	0x20000080

08005cfc <strtok>:
 8005cfc:	4b16      	ldr	r3, [pc, #88]	; (8005d58 <strtok+0x5c>)
 8005cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d02:	681f      	ldr	r7, [r3, #0]
 8005d04:	4605      	mov	r5, r0
 8005d06:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005d08:	460e      	mov	r6, r1
 8005d0a:	b9ec      	cbnz	r4, 8005d48 <strtok+0x4c>
 8005d0c:	2050      	movs	r0, #80	; 0x50
 8005d0e:	f001 faed 	bl	80072ec <malloc>
 8005d12:	4602      	mov	r2, r0
 8005d14:	65b8      	str	r0, [r7, #88]	; 0x58
 8005d16:	b920      	cbnz	r0, 8005d22 <strtok+0x26>
 8005d18:	2157      	movs	r1, #87	; 0x57
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <strtok+0x60>)
 8005d1c:	4810      	ldr	r0, [pc, #64]	; (8005d60 <strtok+0x64>)
 8005d1e:	f000 f8d1 	bl	8005ec4 <__assert_func>
 8005d22:	e9c0 4400 	strd	r4, r4, [r0]
 8005d26:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005d2a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005d2e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005d32:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005d36:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005d3a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005d3e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005d42:	6184      	str	r4, [r0, #24]
 8005d44:	7704      	strb	r4, [r0, #28]
 8005d46:	6244      	str	r4, [r0, #36]	; 0x24
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d54:	f000 b806 	b.w	8005d64 <__strtok_r>
 8005d58:	20000018 	.word	0x20000018
 8005d5c:	08008de0 	.word	0x08008de0
 8005d60:	08008df7 	.word	0x08008df7

08005d64 <__strtok_r>:
 8005d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d66:	b908      	cbnz	r0, 8005d6c <__strtok_r+0x8>
 8005d68:	6810      	ldr	r0, [r2, #0]
 8005d6a:	b188      	cbz	r0, 8005d90 <__strtok_r+0x2c>
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	460f      	mov	r7, r1
 8005d70:	4620      	mov	r0, r4
 8005d72:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005d76:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005d7a:	b91e      	cbnz	r6, 8005d84 <__strtok_r+0x20>
 8005d7c:	b965      	cbnz	r5, 8005d98 <__strtok_r+0x34>
 8005d7e:	4628      	mov	r0, r5
 8005d80:	6015      	str	r5, [r2, #0]
 8005d82:	e005      	b.n	8005d90 <__strtok_r+0x2c>
 8005d84:	42b5      	cmp	r5, r6
 8005d86:	d1f6      	bne.n	8005d76 <__strtok_r+0x12>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f0      	bne.n	8005d6e <__strtok_r+0xa>
 8005d8c:	6014      	str	r4, [r2, #0]
 8005d8e:	7003      	strb	r3, [r0, #0]
 8005d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d92:	461c      	mov	r4, r3
 8005d94:	e00c      	b.n	8005db0 <__strtok_r+0x4c>
 8005d96:	b915      	cbnz	r5, 8005d9e <__strtok_r+0x3a>
 8005d98:	460e      	mov	r6, r1
 8005d9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005da2:	42ab      	cmp	r3, r5
 8005da4:	d1f7      	bne.n	8005d96 <__strtok_r+0x32>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0f3      	beq.n	8005d92 <__strtok_r+0x2e>
 8005daa:	2300      	movs	r3, #0
 8005dac:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005db0:	6014      	str	r4, [r2, #0]
 8005db2:	e7ed      	b.n	8005d90 <__strtok_r+0x2c>

08005db4 <_strtol_l.constprop.0>:
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dba:	4680      	mov	r8, r0
 8005dbc:	d001      	beq.n	8005dc2 <_strtol_l.constprop.0+0xe>
 8005dbe:	2b24      	cmp	r3, #36	; 0x24
 8005dc0:	d906      	bls.n	8005dd0 <_strtol_l.constprop.0+0x1c>
 8005dc2:	f7fe fa7f 	bl	80042c4 <__errno>
 8005dc6:	2316      	movs	r3, #22
 8005dc8:	6003      	str	r3, [r0, #0]
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	4f35      	ldr	r7, [pc, #212]	; (8005ea8 <_strtol_l.constprop.0+0xf4>)
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dda:	5de6      	ldrb	r6, [r4, r7]
 8005ddc:	f016 0608 	ands.w	r6, r6, #8
 8005de0:	d1f8      	bne.n	8005dd4 <_strtol_l.constprop.0+0x20>
 8005de2:	2c2d      	cmp	r4, #45	; 0x2d
 8005de4:	d12f      	bne.n	8005e46 <_strtol_l.constprop.0+0x92>
 8005de6:	2601      	movs	r6, #1
 8005de8:	782c      	ldrb	r4, [r5, #0]
 8005dea:	1c85      	adds	r5, r0, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d057      	beq.n	8005ea0 <_strtol_l.constprop.0+0xec>
 8005df0:	2b10      	cmp	r3, #16
 8005df2:	d109      	bne.n	8005e08 <_strtol_l.constprop.0+0x54>
 8005df4:	2c30      	cmp	r4, #48	; 0x30
 8005df6:	d107      	bne.n	8005e08 <_strtol_l.constprop.0+0x54>
 8005df8:	7828      	ldrb	r0, [r5, #0]
 8005dfa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005dfe:	2858      	cmp	r0, #88	; 0x58
 8005e00:	d149      	bne.n	8005e96 <_strtol_l.constprop.0+0xe2>
 8005e02:	2310      	movs	r3, #16
 8005e04:	786c      	ldrb	r4, [r5, #1]
 8005e06:	3502      	adds	r5, #2
 8005e08:	2700      	movs	r7, #0
 8005e0a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005e0e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005e12:	fbbe f9f3 	udiv	r9, lr, r3
 8005e16:	4638      	mov	r0, r7
 8005e18:	fb03 ea19 	mls	sl, r3, r9, lr
 8005e1c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005e20:	f1bc 0f09 	cmp.w	ip, #9
 8005e24:	d814      	bhi.n	8005e50 <_strtol_l.constprop.0+0x9c>
 8005e26:	4664      	mov	r4, ip
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	dd22      	ble.n	8005e72 <_strtol_l.constprop.0+0xbe>
 8005e2c:	2f00      	cmp	r7, #0
 8005e2e:	db1d      	blt.n	8005e6c <_strtol_l.constprop.0+0xb8>
 8005e30:	4581      	cmp	r9, r0
 8005e32:	d31b      	bcc.n	8005e6c <_strtol_l.constprop.0+0xb8>
 8005e34:	d101      	bne.n	8005e3a <_strtol_l.constprop.0+0x86>
 8005e36:	45a2      	cmp	sl, r4
 8005e38:	db18      	blt.n	8005e6c <_strtol_l.constprop.0+0xb8>
 8005e3a:	2701      	movs	r7, #1
 8005e3c:	fb00 4003 	mla	r0, r0, r3, r4
 8005e40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e44:	e7ea      	b.n	8005e1c <_strtol_l.constprop.0+0x68>
 8005e46:	2c2b      	cmp	r4, #43	; 0x2b
 8005e48:	bf04      	itt	eq
 8005e4a:	782c      	ldrbeq	r4, [r5, #0]
 8005e4c:	1c85      	addeq	r5, r0, #2
 8005e4e:	e7cd      	b.n	8005dec <_strtol_l.constprop.0+0x38>
 8005e50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005e54:	f1bc 0f19 	cmp.w	ip, #25
 8005e58:	d801      	bhi.n	8005e5e <_strtol_l.constprop.0+0xaa>
 8005e5a:	3c37      	subs	r4, #55	; 0x37
 8005e5c:	e7e4      	b.n	8005e28 <_strtol_l.constprop.0+0x74>
 8005e5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005e62:	f1bc 0f19 	cmp.w	ip, #25
 8005e66:	d804      	bhi.n	8005e72 <_strtol_l.constprop.0+0xbe>
 8005e68:	3c57      	subs	r4, #87	; 0x57
 8005e6a:	e7dd      	b.n	8005e28 <_strtol_l.constprop.0+0x74>
 8005e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e70:	e7e6      	b.n	8005e40 <_strtol_l.constprop.0+0x8c>
 8005e72:	2f00      	cmp	r7, #0
 8005e74:	da07      	bge.n	8005e86 <_strtol_l.constprop.0+0xd2>
 8005e76:	2322      	movs	r3, #34	; 0x22
 8005e78:	4670      	mov	r0, lr
 8005e7a:	f8c8 3000 	str.w	r3, [r8]
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	d0a4      	beq.n	8005dcc <_strtol_l.constprop.0+0x18>
 8005e82:	1e69      	subs	r1, r5, #1
 8005e84:	e005      	b.n	8005e92 <_strtol_l.constprop.0+0xde>
 8005e86:	b106      	cbz	r6, 8005e8a <_strtol_l.constprop.0+0xd6>
 8005e88:	4240      	negs	r0, r0
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	d09e      	beq.n	8005dcc <_strtol_l.constprop.0+0x18>
 8005e8e:	2f00      	cmp	r7, #0
 8005e90:	d1f7      	bne.n	8005e82 <_strtol_l.constprop.0+0xce>
 8005e92:	6011      	str	r1, [r2, #0]
 8005e94:	e79a      	b.n	8005dcc <_strtol_l.constprop.0+0x18>
 8005e96:	2430      	movs	r4, #48	; 0x30
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1b5      	bne.n	8005e08 <_strtol_l.constprop.0+0x54>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	e7b3      	b.n	8005e08 <_strtol_l.constprop.0+0x54>
 8005ea0:	2c30      	cmp	r4, #48	; 0x30
 8005ea2:	d0a9      	beq.n	8005df8 <_strtol_l.constprop.0+0x44>
 8005ea4:	230a      	movs	r3, #10
 8005ea6:	e7af      	b.n	8005e08 <_strtol_l.constprop.0+0x54>
 8005ea8:	08008e91 	.word	0x08008e91

08005eac <_strtol_r>:
 8005eac:	f7ff bf82 	b.w	8005db4 <_strtol_l.constprop.0>

08005eb0 <strtol>:
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	4601      	mov	r1, r0
 8005eb6:	4802      	ldr	r0, [pc, #8]	; (8005ec0 <strtol+0x10>)
 8005eb8:	6800      	ldr	r0, [r0, #0]
 8005eba:	f7ff bf7b 	b.w	8005db4 <_strtol_l.constprop.0>
 8005ebe:	bf00      	nop
 8005ec0:	20000018 	.word	0x20000018

08005ec4 <__assert_func>:
 8005ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ec6:	4614      	mov	r4, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <__assert_func+0x2c>)
 8005ecc:	4605      	mov	r5, r0
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68d8      	ldr	r0, [r3, #12]
 8005ed2:	b14c      	cbz	r4, 8005ee8 <__assert_func+0x24>
 8005ed4:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <__assert_func+0x30>)
 8005ed6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005eda:	9100      	str	r1, [sp, #0]
 8005edc:	462b      	mov	r3, r5
 8005ede:	4906      	ldr	r1, [pc, #24]	; (8005ef8 <__assert_func+0x34>)
 8005ee0:	f000 fe88 	bl	8006bf4 <fiprintf>
 8005ee4:	f002 fb8c 	bl	8008600 <abort>
 8005ee8:	4b04      	ldr	r3, [pc, #16]	; (8005efc <__assert_func+0x38>)
 8005eea:	461c      	mov	r4, r3
 8005eec:	e7f3      	b.n	8005ed6 <__assert_func+0x12>
 8005eee:	bf00      	nop
 8005ef0:	20000018 	.word	0x20000018
 8005ef4:	08008e54 	.word	0x08008e54
 8005ef8:	08008e61 	.word	0x08008e61
 8005efc:	08008d12 	.word	0x08008d12

08005f00 <quorem>:
 8005f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f04:	6903      	ldr	r3, [r0, #16]
 8005f06:	690c      	ldr	r4, [r1, #16]
 8005f08:	4607      	mov	r7, r0
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	f2c0 8082 	blt.w	8006014 <quorem+0x114>
 8005f10:	3c01      	subs	r4, #1
 8005f12:	f100 0514 	add.w	r5, r0, #20
 8005f16:	f101 0814 	add.w	r8, r1, #20
 8005f1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f38:	d331      	bcc.n	8005f9e <quorem+0x9e>
 8005f3a:	f04f 0e00 	mov.w	lr, #0
 8005f3e:	4640      	mov	r0, r8
 8005f40:	46ac      	mov	ip, r5
 8005f42:	46f2      	mov	sl, lr
 8005f44:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f48:	b293      	uxth	r3, r2
 8005f4a:	fb06 e303 	mla	r3, r6, r3, lr
 8005f4e:	0c12      	lsrs	r2, r2, #16
 8005f50:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	fb06 e202 	mla	r2, r6, r2, lr
 8005f5a:	ebaa 0303 	sub.w	r3, sl, r3
 8005f5e:	f8dc a000 	ldr.w	sl, [ip]
 8005f62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f66:	fa1f fa8a 	uxth.w	sl, sl
 8005f6a:	4453      	add	r3, sl
 8005f6c:	f8dc a000 	ldr.w	sl, [ip]
 8005f70:	b292      	uxth	r2, r2
 8005f72:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f80:	4581      	cmp	r9, r0
 8005f82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f86:	f84c 3b04 	str.w	r3, [ip], #4
 8005f8a:	d2db      	bcs.n	8005f44 <quorem+0x44>
 8005f8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f90:	b92b      	cbnz	r3, 8005f9e <quorem+0x9e>
 8005f92:	9b01      	ldr	r3, [sp, #4]
 8005f94:	3b04      	subs	r3, #4
 8005f96:	429d      	cmp	r5, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	d32f      	bcc.n	8005ffc <quorem+0xfc>
 8005f9c:	613c      	str	r4, [r7, #16]
 8005f9e:	4638      	mov	r0, r7
 8005fa0:	f001 fca2 	bl	80078e8 <__mcmp>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	db25      	blt.n	8005ff4 <quorem+0xf4>
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f04f 0c00 	mov.w	ip, #0
 8005fae:	3601      	adds	r6, #1
 8005fb0:	f858 1b04 	ldr.w	r1, [r8], #4
 8005fb4:	f8d0 e000 	ldr.w	lr, [r0]
 8005fb8:	b28b      	uxth	r3, r1
 8005fba:	ebac 0303 	sub.w	r3, ip, r3
 8005fbe:	fa1f f28e 	uxth.w	r2, lr
 8005fc2:	4413      	add	r3, r2
 8005fc4:	0c0a      	lsrs	r2, r1, #16
 8005fc6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fd4:	45c1      	cmp	r9, r8
 8005fd6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fda:	f840 3b04 	str.w	r3, [r0], #4
 8005fde:	d2e7      	bcs.n	8005fb0 <quorem+0xb0>
 8005fe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fe8:	b922      	cbnz	r2, 8005ff4 <quorem+0xf4>
 8005fea:	3b04      	subs	r3, #4
 8005fec:	429d      	cmp	r5, r3
 8005fee:	461a      	mov	r2, r3
 8005ff0:	d30a      	bcc.n	8006008 <quorem+0x108>
 8005ff2:	613c      	str	r4, [r7, #16]
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	b003      	add	sp, #12
 8005ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffc:	6812      	ldr	r2, [r2, #0]
 8005ffe:	3b04      	subs	r3, #4
 8006000:	2a00      	cmp	r2, #0
 8006002:	d1cb      	bne.n	8005f9c <quorem+0x9c>
 8006004:	3c01      	subs	r4, #1
 8006006:	e7c6      	b.n	8005f96 <quorem+0x96>
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	3b04      	subs	r3, #4
 800600c:	2a00      	cmp	r2, #0
 800600e:	d1f0      	bne.n	8005ff2 <quorem+0xf2>
 8006010:	3c01      	subs	r4, #1
 8006012:	e7eb      	b.n	8005fec <quorem+0xec>
 8006014:	2000      	movs	r0, #0
 8006016:	e7ee      	b.n	8005ff6 <quorem+0xf6>

08006018 <_dtoa_r>:
 8006018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601c:	4616      	mov	r6, r2
 800601e:	461f      	mov	r7, r3
 8006020:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006022:	b099      	sub	sp, #100	; 0x64
 8006024:	4605      	mov	r5, r0
 8006026:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800602a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800602e:	b974      	cbnz	r4, 800604e <_dtoa_r+0x36>
 8006030:	2010      	movs	r0, #16
 8006032:	f001 f95b 	bl	80072ec <malloc>
 8006036:	4602      	mov	r2, r0
 8006038:	6268      	str	r0, [r5, #36]	; 0x24
 800603a:	b920      	cbnz	r0, 8006046 <_dtoa_r+0x2e>
 800603c:	21ea      	movs	r1, #234	; 0xea
 800603e:	4ba8      	ldr	r3, [pc, #672]	; (80062e0 <_dtoa_r+0x2c8>)
 8006040:	48a8      	ldr	r0, [pc, #672]	; (80062e4 <_dtoa_r+0x2cc>)
 8006042:	f7ff ff3f 	bl	8005ec4 <__assert_func>
 8006046:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800604a:	6004      	str	r4, [r0, #0]
 800604c:	60c4      	str	r4, [r0, #12]
 800604e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006050:	6819      	ldr	r1, [r3, #0]
 8006052:	b151      	cbz	r1, 800606a <_dtoa_r+0x52>
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	2301      	movs	r3, #1
 8006058:	4093      	lsls	r3, r2
 800605a:	604a      	str	r2, [r1, #4]
 800605c:	608b      	str	r3, [r1, #8]
 800605e:	4628      	mov	r0, r5
 8006060:	f001 f9ba 	bl	80073d8 <_Bfree>
 8006064:	2200      	movs	r2, #0
 8006066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	1e3b      	subs	r3, r7, #0
 800606c:	bfaf      	iteee	ge
 800606e:	2300      	movge	r3, #0
 8006070:	2201      	movlt	r2, #1
 8006072:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006076:	9305      	strlt	r3, [sp, #20]
 8006078:	bfa8      	it	ge
 800607a:	f8c8 3000 	strge.w	r3, [r8]
 800607e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006082:	4b99      	ldr	r3, [pc, #612]	; (80062e8 <_dtoa_r+0x2d0>)
 8006084:	bfb8      	it	lt
 8006086:	f8c8 2000 	strlt.w	r2, [r8]
 800608a:	ea33 0309 	bics.w	r3, r3, r9
 800608e:	d119      	bne.n	80060c4 <_dtoa_r+0xac>
 8006090:	f242 730f 	movw	r3, #9999	; 0x270f
 8006094:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800609c:	4333      	orrs	r3, r6
 800609e:	f000 857f 	beq.w	8006ba0 <_dtoa_r+0xb88>
 80060a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060a4:	b953      	cbnz	r3, 80060bc <_dtoa_r+0xa4>
 80060a6:	4b91      	ldr	r3, [pc, #580]	; (80062ec <_dtoa_r+0x2d4>)
 80060a8:	e022      	b.n	80060f0 <_dtoa_r+0xd8>
 80060aa:	4b91      	ldr	r3, [pc, #580]	; (80062f0 <_dtoa_r+0x2d8>)
 80060ac:	9303      	str	r3, [sp, #12]
 80060ae:	3308      	adds	r3, #8
 80060b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	9803      	ldr	r0, [sp, #12]
 80060b6:	b019      	add	sp, #100	; 0x64
 80060b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060bc:	4b8b      	ldr	r3, [pc, #556]	; (80062ec <_dtoa_r+0x2d4>)
 80060be:	9303      	str	r3, [sp, #12]
 80060c0:	3303      	adds	r3, #3
 80060c2:	e7f5      	b.n	80060b0 <_dtoa_r+0x98>
 80060c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80060c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80060cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060d0:	2200      	movs	r2, #0
 80060d2:	2300      	movs	r3, #0
 80060d4:	f7fa fc72 	bl	80009bc <__aeabi_dcmpeq>
 80060d8:	4680      	mov	r8, r0
 80060da:	b158      	cbz	r0, 80060f4 <_dtoa_r+0xdc>
 80060dc:	2301      	movs	r3, #1
 80060de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8558 	beq.w	8006b9a <_dtoa_r+0xb82>
 80060ea:	4882      	ldr	r0, [pc, #520]	; (80062f4 <_dtoa_r+0x2dc>)
 80060ec:	6018      	str	r0, [r3, #0]
 80060ee:	1e43      	subs	r3, r0, #1
 80060f0:	9303      	str	r3, [sp, #12]
 80060f2:	e7df      	b.n	80060b4 <_dtoa_r+0x9c>
 80060f4:	ab16      	add	r3, sp, #88	; 0x58
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	ab17      	add	r3, sp, #92	; 0x5c
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4628      	mov	r0, r5
 80060fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006102:	f001 fd13 	bl	8007b2c <__d2b>
 8006106:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800610a:	4683      	mov	fp, r0
 800610c:	2c00      	cmp	r4, #0
 800610e:	d07f      	beq.n	8006210 <_dtoa_r+0x1f8>
 8006110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006116:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800611a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800611e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006122:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006126:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800612a:	2200      	movs	r2, #0
 800612c:	4b72      	ldr	r3, [pc, #456]	; (80062f8 <_dtoa_r+0x2e0>)
 800612e:	f7fa f825 	bl	800017c <__aeabi_dsub>
 8006132:	a365      	add	r3, pc, #404	; (adr r3, 80062c8 <_dtoa_r+0x2b0>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa f9d8 	bl	80004ec <__aeabi_dmul>
 800613c:	a364      	add	r3, pc, #400	; (adr r3, 80062d0 <_dtoa_r+0x2b8>)
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f7fa f81d 	bl	8000180 <__adddf3>
 8006146:	4606      	mov	r6, r0
 8006148:	4620      	mov	r0, r4
 800614a:	460f      	mov	r7, r1
 800614c:	f7fa f964 	bl	8000418 <__aeabi_i2d>
 8006150:	a361      	add	r3, pc, #388	; (adr r3, 80062d8 <_dtoa_r+0x2c0>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f7fa f9c9 	bl	80004ec <__aeabi_dmul>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4630      	mov	r0, r6
 8006160:	4639      	mov	r1, r7
 8006162:	f7fa f80d 	bl	8000180 <__adddf3>
 8006166:	4606      	mov	r6, r0
 8006168:	460f      	mov	r7, r1
 800616a:	f7fa fc6f 	bl	8000a4c <__aeabi_d2iz>
 800616e:	2200      	movs	r2, #0
 8006170:	4682      	mov	sl, r0
 8006172:	2300      	movs	r3, #0
 8006174:	4630      	mov	r0, r6
 8006176:	4639      	mov	r1, r7
 8006178:	f7fa fc2a 	bl	80009d0 <__aeabi_dcmplt>
 800617c:	b148      	cbz	r0, 8006192 <_dtoa_r+0x17a>
 800617e:	4650      	mov	r0, sl
 8006180:	f7fa f94a 	bl	8000418 <__aeabi_i2d>
 8006184:	4632      	mov	r2, r6
 8006186:	463b      	mov	r3, r7
 8006188:	f7fa fc18 	bl	80009bc <__aeabi_dcmpeq>
 800618c:	b908      	cbnz	r0, 8006192 <_dtoa_r+0x17a>
 800618e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006192:	f1ba 0f16 	cmp.w	sl, #22
 8006196:	d858      	bhi.n	800624a <_dtoa_r+0x232>
 8006198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800619c:	4b57      	ldr	r3, [pc, #348]	; (80062fc <_dtoa_r+0x2e4>)
 800619e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f7fa fc13 	bl	80009d0 <__aeabi_dcmplt>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d04f      	beq.n	800624e <_dtoa_r+0x236>
 80061ae:	2300      	movs	r3, #0
 80061b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80061b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061b8:	1b1c      	subs	r4, r3, r4
 80061ba:	1e63      	subs	r3, r4, #1
 80061bc:	9309      	str	r3, [sp, #36]	; 0x24
 80061be:	bf49      	itett	mi
 80061c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80061c4:	2300      	movpl	r3, #0
 80061c6:	9306      	strmi	r3, [sp, #24]
 80061c8:	2300      	movmi	r3, #0
 80061ca:	bf54      	ite	pl
 80061cc:	9306      	strpl	r3, [sp, #24]
 80061ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80061d0:	f1ba 0f00 	cmp.w	sl, #0
 80061d4:	db3d      	blt.n	8006252 <_dtoa_r+0x23a>
 80061d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80061dc:	4453      	add	r3, sl
 80061de:	9309      	str	r3, [sp, #36]	; 0x24
 80061e0:	2300      	movs	r3, #0
 80061e2:	930a      	str	r3, [sp, #40]	; 0x28
 80061e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061e6:	2b09      	cmp	r3, #9
 80061e8:	f200 808c 	bhi.w	8006304 <_dtoa_r+0x2ec>
 80061ec:	2b05      	cmp	r3, #5
 80061ee:	bfc4      	itt	gt
 80061f0:	3b04      	subgt	r3, #4
 80061f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80061f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061f6:	bfc8      	it	gt
 80061f8:	2400      	movgt	r4, #0
 80061fa:	f1a3 0302 	sub.w	r3, r3, #2
 80061fe:	bfd8      	it	le
 8006200:	2401      	movle	r4, #1
 8006202:	2b03      	cmp	r3, #3
 8006204:	f200 808a 	bhi.w	800631c <_dtoa_r+0x304>
 8006208:	e8df f003 	tbb	[pc, r3]
 800620c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006210:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006214:	441c      	add	r4, r3
 8006216:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800621a:	2b20      	cmp	r3, #32
 800621c:	bfc3      	ittte	gt
 800621e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006222:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006226:	fa09 f303 	lslgt.w	r3, r9, r3
 800622a:	f1c3 0320 	rsble	r3, r3, #32
 800622e:	bfc6      	itte	gt
 8006230:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006234:	4318      	orrgt	r0, r3
 8006236:	fa06 f003 	lslle.w	r0, r6, r3
 800623a:	f7fa f8dd 	bl	80003f8 <__aeabi_ui2d>
 800623e:	2301      	movs	r3, #1
 8006240:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006244:	3c01      	subs	r4, #1
 8006246:	9313      	str	r3, [sp, #76]	; 0x4c
 8006248:	e76f      	b.n	800612a <_dtoa_r+0x112>
 800624a:	2301      	movs	r3, #1
 800624c:	e7b2      	b.n	80061b4 <_dtoa_r+0x19c>
 800624e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006250:	e7b1      	b.n	80061b6 <_dtoa_r+0x19e>
 8006252:	9b06      	ldr	r3, [sp, #24]
 8006254:	eba3 030a 	sub.w	r3, r3, sl
 8006258:	9306      	str	r3, [sp, #24]
 800625a:	f1ca 0300 	rsb	r3, sl, #0
 800625e:	930a      	str	r3, [sp, #40]	; 0x28
 8006260:	2300      	movs	r3, #0
 8006262:	930e      	str	r3, [sp, #56]	; 0x38
 8006264:	e7be      	b.n	80061e4 <_dtoa_r+0x1cc>
 8006266:	2300      	movs	r3, #0
 8006268:	930b      	str	r3, [sp, #44]	; 0x2c
 800626a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800626c:	2b00      	cmp	r3, #0
 800626e:	dc58      	bgt.n	8006322 <_dtoa_r+0x30a>
 8006270:	f04f 0901 	mov.w	r9, #1
 8006274:	464b      	mov	r3, r9
 8006276:	f8cd 9020 	str.w	r9, [sp, #32]
 800627a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800627e:	2200      	movs	r2, #0
 8006280:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006282:	6042      	str	r2, [r0, #4]
 8006284:	2204      	movs	r2, #4
 8006286:	f102 0614 	add.w	r6, r2, #20
 800628a:	429e      	cmp	r6, r3
 800628c:	6841      	ldr	r1, [r0, #4]
 800628e:	d94e      	bls.n	800632e <_dtoa_r+0x316>
 8006290:	4628      	mov	r0, r5
 8006292:	f001 f861 	bl	8007358 <_Balloc>
 8006296:	9003      	str	r0, [sp, #12]
 8006298:	2800      	cmp	r0, #0
 800629a:	d14c      	bne.n	8006336 <_dtoa_r+0x31e>
 800629c:	4602      	mov	r2, r0
 800629e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062a2:	4b17      	ldr	r3, [pc, #92]	; (8006300 <_dtoa_r+0x2e8>)
 80062a4:	e6cc      	b.n	8006040 <_dtoa_r+0x28>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e7de      	b.n	8006268 <_dtoa_r+0x250>
 80062aa:	2300      	movs	r3, #0
 80062ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80062ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062b0:	eb0a 0903 	add.w	r9, sl, r3
 80062b4:	f109 0301 	add.w	r3, r9, #1
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	9308      	str	r3, [sp, #32]
 80062bc:	bfb8      	it	lt
 80062be:	2301      	movlt	r3, #1
 80062c0:	e7dd      	b.n	800627e <_dtoa_r+0x266>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e7f2      	b.n	80062ac <_dtoa_r+0x294>
 80062c6:	bf00      	nop
 80062c8:	636f4361 	.word	0x636f4361
 80062cc:	3fd287a7 	.word	0x3fd287a7
 80062d0:	8b60c8b3 	.word	0x8b60c8b3
 80062d4:	3fc68a28 	.word	0x3fc68a28
 80062d8:	509f79fb 	.word	0x509f79fb
 80062dc:	3fd34413 	.word	0x3fd34413
 80062e0:	08008de0 	.word	0x08008de0
 80062e4:	08008f9e 	.word	0x08008f9e
 80062e8:	7ff00000 	.word	0x7ff00000
 80062ec:	08008f9a 	.word	0x08008f9a
 80062f0:	08008f91 	.word	0x08008f91
 80062f4:	08008d65 	.word	0x08008d65
 80062f8:	3ff80000 	.word	0x3ff80000
 80062fc:	08009108 	.word	0x08009108
 8006300:	08008ff9 	.word	0x08008ff9
 8006304:	2401      	movs	r4, #1
 8006306:	2300      	movs	r3, #0
 8006308:	940b      	str	r4, [sp, #44]	; 0x2c
 800630a:	9322      	str	r3, [sp, #136]	; 0x88
 800630c:	f04f 39ff 	mov.w	r9, #4294967295
 8006310:	2200      	movs	r2, #0
 8006312:	2312      	movs	r3, #18
 8006314:	f8cd 9020 	str.w	r9, [sp, #32]
 8006318:	9223      	str	r2, [sp, #140]	; 0x8c
 800631a:	e7b0      	b.n	800627e <_dtoa_r+0x266>
 800631c:	2301      	movs	r3, #1
 800631e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006320:	e7f4      	b.n	800630c <_dtoa_r+0x2f4>
 8006322:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006326:	464b      	mov	r3, r9
 8006328:	f8cd 9020 	str.w	r9, [sp, #32]
 800632c:	e7a7      	b.n	800627e <_dtoa_r+0x266>
 800632e:	3101      	adds	r1, #1
 8006330:	6041      	str	r1, [r0, #4]
 8006332:	0052      	lsls	r2, r2, #1
 8006334:	e7a7      	b.n	8006286 <_dtoa_r+0x26e>
 8006336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006338:	9a03      	ldr	r2, [sp, #12]
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	9b08      	ldr	r3, [sp, #32]
 800633e:	2b0e      	cmp	r3, #14
 8006340:	f200 80a8 	bhi.w	8006494 <_dtoa_r+0x47c>
 8006344:	2c00      	cmp	r4, #0
 8006346:	f000 80a5 	beq.w	8006494 <_dtoa_r+0x47c>
 800634a:	f1ba 0f00 	cmp.w	sl, #0
 800634e:	dd34      	ble.n	80063ba <_dtoa_r+0x3a2>
 8006350:	4a9a      	ldr	r2, [pc, #616]	; (80065bc <_dtoa_r+0x5a4>)
 8006352:	f00a 030f 	and.w	r3, sl, #15
 8006356:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800635a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800635e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006362:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006366:	ea4f 142a 	mov.w	r4, sl, asr #4
 800636a:	d016      	beq.n	800639a <_dtoa_r+0x382>
 800636c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006370:	4b93      	ldr	r3, [pc, #588]	; (80065c0 <_dtoa_r+0x5a8>)
 8006372:	2703      	movs	r7, #3
 8006374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006378:	f7fa f9e2 	bl	8000740 <__aeabi_ddiv>
 800637c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006380:	f004 040f 	and.w	r4, r4, #15
 8006384:	4e8e      	ldr	r6, [pc, #568]	; (80065c0 <_dtoa_r+0x5a8>)
 8006386:	b954      	cbnz	r4, 800639e <_dtoa_r+0x386>
 8006388:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800638c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006390:	f7fa f9d6 	bl	8000740 <__aeabi_ddiv>
 8006394:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006398:	e029      	b.n	80063ee <_dtoa_r+0x3d6>
 800639a:	2702      	movs	r7, #2
 800639c:	e7f2      	b.n	8006384 <_dtoa_r+0x36c>
 800639e:	07e1      	lsls	r1, r4, #31
 80063a0:	d508      	bpl.n	80063b4 <_dtoa_r+0x39c>
 80063a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063aa:	f7fa f89f 	bl	80004ec <__aeabi_dmul>
 80063ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063b2:	3701      	adds	r7, #1
 80063b4:	1064      	asrs	r4, r4, #1
 80063b6:	3608      	adds	r6, #8
 80063b8:	e7e5      	b.n	8006386 <_dtoa_r+0x36e>
 80063ba:	f000 80a5 	beq.w	8006508 <_dtoa_r+0x4f0>
 80063be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063c2:	f1ca 0400 	rsb	r4, sl, #0
 80063c6:	4b7d      	ldr	r3, [pc, #500]	; (80065bc <_dtoa_r+0x5a4>)
 80063c8:	f004 020f 	and.w	r2, r4, #15
 80063cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7fa f88a 	bl	80004ec <__aeabi_dmul>
 80063d8:	2702      	movs	r7, #2
 80063da:	2300      	movs	r3, #0
 80063dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063e0:	4e77      	ldr	r6, [pc, #476]	; (80065c0 <_dtoa_r+0x5a8>)
 80063e2:	1124      	asrs	r4, r4, #4
 80063e4:	2c00      	cmp	r4, #0
 80063e6:	f040 8084 	bne.w	80064f2 <_dtoa_r+0x4da>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1d2      	bne.n	8006394 <_dtoa_r+0x37c>
 80063ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 808b 	beq.w	800650c <_dtoa_r+0x4f4>
 80063f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80063fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80063fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006402:	2200      	movs	r2, #0
 8006404:	4b6f      	ldr	r3, [pc, #444]	; (80065c4 <_dtoa_r+0x5ac>)
 8006406:	f7fa fae3 	bl	80009d0 <__aeabi_dcmplt>
 800640a:	2800      	cmp	r0, #0
 800640c:	d07e      	beq.n	800650c <_dtoa_r+0x4f4>
 800640e:	9b08      	ldr	r3, [sp, #32]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d07b      	beq.n	800650c <_dtoa_r+0x4f4>
 8006414:	f1b9 0f00 	cmp.w	r9, #0
 8006418:	dd38      	ble.n	800648c <_dtoa_r+0x474>
 800641a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800641e:	2200      	movs	r2, #0
 8006420:	4b69      	ldr	r3, [pc, #420]	; (80065c8 <_dtoa_r+0x5b0>)
 8006422:	f7fa f863 	bl	80004ec <__aeabi_dmul>
 8006426:	464c      	mov	r4, r9
 8006428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800642c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006430:	3701      	adds	r7, #1
 8006432:	4638      	mov	r0, r7
 8006434:	f7f9 fff0 	bl	8000418 <__aeabi_i2d>
 8006438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800643c:	f7fa f856 	bl	80004ec <__aeabi_dmul>
 8006440:	2200      	movs	r2, #0
 8006442:	4b62      	ldr	r3, [pc, #392]	; (80065cc <_dtoa_r+0x5b4>)
 8006444:	f7f9 fe9c 	bl	8000180 <__adddf3>
 8006448:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800644c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006450:	9611      	str	r6, [sp, #68]	; 0x44
 8006452:	2c00      	cmp	r4, #0
 8006454:	d15d      	bne.n	8006512 <_dtoa_r+0x4fa>
 8006456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800645a:	2200      	movs	r2, #0
 800645c:	4b5c      	ldr	r3, [pc, #368]	; (80065d0 <_dtoa_r+0x5b8>)
 800645e:	f7f9 fe8d 	bl	800017c <__aeabi_dsub>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800646a:	4633      	mov	r3, r6
 800646c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800646e:	f7fa facd 	bl	8000a0c <__aeabi_dcmpgt>
 8006472:	2800      	cmp	r0, #0
 8006474:	f040 829c 	bne.w	80069b0 <_dtoa_r+0x998>
 8006478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800647c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800647e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006482:	f7fa faa5 	bl	80009d0 <__aeabi_dcmplt>
 8006486:	2800      	cmp	r0, #0
 8006488:	f040 8290 	bne.w	80069ac <_dtoa_r+0x994>
 800648c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006490:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006496:	2b00      	cmp	r3, #0
 8006498:	f2c0 8152 	blt.w	8006740 <_dtoa_r+0x728>
 800649c:	f1ba 0f0e 	cmp.w	sl, #14
 80064a0:	f300 814e 	bgt.w	8006740 <_dtoa_r+0x728>
 80064a4:	4b45      	ldr	r3, [pc, #276]	; (80065bc <_dtoa_r+0x5a4>)
 80064a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80064b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f280 80db 	bge.w	8006670 <_dtoa_r+0x658>
 80064ba:	9b08      	ldr	r3, [sp, #32]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f300 80d7 	bgt.w	8006670 <_dtoa_r+0x658>
 80064c2:	f040 8272 	bne.w	80069aa <_dtoa_r+0x992>
 80064c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064ca:	2200      	movs	r2, #0
 80064cc:	4b40      	ldr	r3, [pc, #256]	; (80065d0 <_dtoa_r+0x5b8>)
 80064ce:	f7fa f80d 	bl	80004ec <__aeabi_dmul>
 80064d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064d6:	f7fa fa8f 	bl	80009f8 <__aeabi_dcmpge>
 80064da:	9c08      	ldr	r4, [sp, #32]
 80064dc:	4626      	mov	r6, r4
 80064de:	2800      	cmp	r0, #0
 80064e0:	f040 8248 	bne.w	8006974 <_dtoa_r+0x95c>
 80064e4:	2331      	movs	r3, #49	; 0x31
 80064e6:	9f03      	ldr	r7, [sp, #12]
 80064e8:	f10a 0a01 	add.w	sl, sl, #1
 80064ec:	f807 3b01 	strb.w	r3, [r7], #1
 80064f0:	e244      	b.n	800697c <_dtoa_r+0x964>
 80064f2:	07e2      	lsls	r2, r4, #31
 80064f4:	d505      	bpl.n	8006502 <_dtoa_r+0x4ea>
 80064f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064fa:	f7f9 fff7 	bl	80004ec <__aeabi_dmul>
 80064fe:	2301      	movs	r3, #1
 8006500:	3701      	adds	r7, #1
 8006502:	1064      	asrs	r4, r4, #1
 8006504:	3608      	adds	r6, #8
 8006506:	e76d      	b.n	80063e4 <_dtoa_r+0x3cc>
 8006508:	2702      	movs	r7, #2
 800650a:	e770      	b.n	80063ee <_dtoa_r+0x3d6>
 800650c:	46d0      	mov	r8, sl
 800650e:	9c08      	ldr	r4, [sp, #32]
 8006510:	e78f      	b.n	8006432 <_dtoa_r+0x41a>
 8006512:	9903      	ldr	r1, [sp, #12]
 8006514:	4b29      	ldr	r3, [pc, #164]	; (80065bc <_dtoa_r+0x5a4>)
 8006516:	4421      	add	r1, r4
 8006518:	9112      	str	r1, [sp, #72]	; 0x48
 800651a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800651c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006520:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006524:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006528:	2900      	cmp	r1, #0
 800652a:	d055      	beq.n	80065d8 <_dtoa_r+0x5c0>
 800652c:	2000      	movs	r0, #0
 800652e:	4929      	ldr	r1, [pc, #164]	; (80065d4 <_dtoa_r+0x5bc>)
 8006530:	f7fa f906 	bl	8000740 <__aeabi_ddiv>
 8006534:	463b      	mov	r3, r7
 8006536:	4632      	mov	r2, r6
 8006538:	f7f9 fe20 	bl	800017c <__aeabi_dsub>
 800653c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006540:	9f03      	ldr	r7, [sp, #12]
 8006542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006546:	f7fa fa81 	bl	8000a4c <__aeabi_d2iz>
 800654a:	4604      	mov	r4, r0
 800654c:	f7f9 ff64 	bl	8000418 <__aeabi_i2d>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006558:	f7f9 fe10 	bl	800017c <__aeabi_dsub>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	3430      	adds	r4, #48	; 0x30
 8006562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006566:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800656a:	f807 4b01 	strb.w	r4, [r7], #1
 800656e:	f7fa fa2f 	bl	80009d0 <__aeabi_dcmplt>
 8006572:	2800      	cmp	r0, #0
 8006574:	d174      	bne.n	8006660 <_dtoa_r+0x648>
 8006576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800657a:	2000      	movs	r0, #0
 800657c:	4911      	ldr	r1, [pc, #68]	; (80065c4 <_dtoa_r+0x5ac>)
 800657e:	f7f9 fdfd 	bl	800017c <__aeabi_dsub>
 8006582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006586:	f7fa fa23 	bl	80009d0 <__aeabi_dcmplt>
 800658a:	2800      	cmp	r0, #0
 800658c:	f040 80b7 	bne.w	80066fe <_dtoa_r+0x6e6>
 8006590:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006592:	429f      	cmp	r7, r3
 8006594:	f43f af7a 	beq.w	800648c <_dtoa_r+0x474>
 8006598:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800659c:	2200      	movs	r2, #0
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <_dtoa_r+0x5b0>)
 80065a0:	f7f9 ffa4 	bl	80004ec <__aeabi_dmul>
 80065a4:	2200      	movs	r2, #0
 80065a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <_dtoa_r+0x5b0>)
 80065b0:	f7f9 ff9c 	bl	80004ec <__aeabi_dmul>
 80065b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065b8:	e7c3      	b.n	8006542 <_dtoa_r+0x52a>
 80065ba:	bf00      	nop
 80065bc:	08009108 	.word	0x08009108
 80065c0:	080090e0 	.word	0x080090e0
 80065c4:	3ff00000 	.word	0x3ff00000
 80065c8:	40240000 	.word	0x40240000
 80065cc:	401c0000 	.word	0x401c0000
 80065d0:	40140000 	.word	0x40140000
 80065d4:	3fe00000 	.word	0x3fe00000
 80065d8:	4630      	mov	r0, r6
 80065da:	4639      	mov	r1, r7
 80065dc:	f7f9 ff86 	bl	80004ec <__aeabi_dmul>
 80065e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065e6:	9c03      	ldr	r4, [sp, #12]
 80065e8:	9314      	str	r3, [sp, #80]	; 0x50
 80065ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065ee:	f7fa fa2d 	bl	8000a4c <__aeabi_d2iz>
 80065f2:	9015      	str	r0, [sp, #84]	; 0x54
 80065f4:	f7f9 ff10 	bl	8000418 <__aeabi_i2d>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006600:	f7f9 fdbc 	bl	800017c <__aeabi_dsub>
 8006604:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006606:	4606      	mov	r6, r0
 8006608:	3330      	adds	r3, #48	; 0x30
 800660a:	f804 3b01 	strb.w	r3, [r4], #1
 800660e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006610:	460f      	mov	r7, r1
 8006612:	429c      	cmp	r4, r3
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	d124      	bne.n	8006664 <_dtoa_r+0x64c>
 800661a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800661e:	4bb0      	ldr	r3, [pc, #704]	; (80068e0 <_dtoa_r+0x8c8>)
 8006620:	f7f9 fdae 	bl	8000180 <__adddf3>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4630      	mov	r0, r6
 800662a:	4639      	mov	r1, r7
 800662c:	f7fa f9ee 	bl	8000a0c <__aeabi_dcmpgt>
 8006630:	2800      	cmp	r0, #0
 8006632:	d163      	bne.n	80066fc <_dtoa_r+0x6e4>
 8006634:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006638:	2000      	movs	r0, #0
 800663a:	49a9      	ldr	r1, [pc, #676]	; (80068e0 <_dtoa_r+0x8c8>)
 800663c:	f7f9 fd9e 	bl	800017c <__aeabi_dsub>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4630      	mov	r0, r6
 8006646:	4639      	mov	r1, r7
 8006648:	f7fa f9c2 	bl	80009d0 <__aeabi_dcmplt>
 800664c:	2800      	cmp	r0, #0
 800664e:	f43f af1d 	beq.w	800648c <_dtoa_r+0x474>
 8006652:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006654:	1e7b      	subs	r3, r7, #1
 8006656:	9314      	str	r3, [sp, #80]	; 0x50
 8006658:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800665c:	2b30      	cmp	r3, #48	; 0x30
 800665e:	d0f8      	beq.n	8006652 <_dtoa_r+0x63a>
 8006660:	46c2      	mov	sl, r8
 8006662:	e03b      	b.n	80066dc <_dtoa_r+0x6c4>
 8006664:	4b9f      	ldr	r3, [pc, #636]	; (80068e4 <_dtoa_r+0x8cc>)
 8006666:	f7f9 ff41 	bl	80004ec <__aeabi_dmul>
 800666a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800666e:	e7bc      	b.n	80065ea <_dtoa_r+0x5d2>
 8006670:	9f03      	ldr	r7, [sp, #12]
 8006672:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006676:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800667a:	4640      	mov	r0, r8
 800667c:	4649      	mov	r1, r9
 800667e:	f7fa f85f 	bl	8000740 <__aeabi_ddiv>
 8006682:	f7fa f9e3 	bl	8000a4c <__aeabi_d2iz>
 8006686:	4604      	mov	r4, r0
 8006688:	f7f9 fec6 	bl	8000418 <__aeabi_i2d>
 800668c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006690:	f7f9 ff2c 	bl	80004ec <__aeabi_dmul>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4640      	mov	r0, r8
 800669a:	4649      	mov	r1, r9
 800669c:	f7f9 fd6e 	bl	800017c <__aeabi_dsub>
 80066a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80066a4:	f807 6b01 	strb.w	r6, [r7], #1
 80066a8:	9e03      	ldr	r6, [sp, #12]
 80066aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80066ae:	1bbe      	subs	r6, r7, r6
 80066b0:	45b4      	cmp	ip, r6
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	d136      	bne.n	8006726 <_dtoa_r+0x70e>
 80066b8:	f7f9 fd62 	bl	8000180 <__adddf3>
 80066bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066c0:	4680      	mov	r8, r0
 80066c2:	4689      	mov	r9, r1
 80066c4:	f7fa f9a2 	bl	8000a0c <__aeabi_dcmpgt>
 80066c8:	bb58      	cbnz	r0, 8006722 <_dtoa_r+0x70a>
 80066ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066ce:	4640      	mov	r0, r8
 80066d0:	4649      	mov	r1, r9
 80066d2:	f7fa f973 	bl	80009bc <__aeabi_dcmpeq>
 80066d6:	b108      	cbz	r0, 80066dc <_dtoa_r+0x6c4>
 80066d8:	07e1      	lsls	r1, r4, #31
 80066da:	d422      	bmi.n	8006722 <_dtoa_r+0x70a>
 80066dc:	4628      	mov	r0, r5
 80066de:	4659      	mov	r1, fp
 80066e0:	f000 fe7a 	bl	80073d8 <_Bfree>
 80066e4:	2300      	movs	r3, #0
 80066e6:	703b      	strb	r3, [r7, #0]
 80066e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80066ea:	f10a 0001 	add.w	r0, sl, #1
 80066ee:	6018      	str	r0, [r3, #0]
 80066f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f43f acde 	beq.w	80060b4 <_dtoa_r+0x9c>
 80066f8:	601f      	str	r7, [r3, #0]
 80066fa:	e4db      	b.n	80060b4 <_dtoa_r+0x9c>
 80066fc:	4627      	mov	r7, r4
 80066fe:	463b      	mov	r3, r7
 8006700:	461f      	mov	r7, r3
 8006702:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006706:	2a39      	cmp	r2, #57	; 0x39
 8006708:	d107      	bne.n	800671a <_dtoa_r+0x702>
 800670a:	9a03      	ldr	r2, [sp, #12]
 800670c:	429a      	cmp	r2, r3
 800670e:	d1f7      	bne.n	8006700 <_dtoa_r+0x6e8>
 8006710:	2230      	movs	r2, #48	; 0x30
 8006712:	9903      	ldr	r1, [sp, #12]
 8006714:	f108 0801 	add.w	r8, r8, #1
 8006718:	700a      	strb	r2, [r1, #0]
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	3201      	adds	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	e79e      	b.n	8006660 <_dtoa_r+0x648>
 8006722:	46d0      	mov	r8, sl
 8006724:	e7eb      	b.n	80066fe <_dtoa_r+0x6e6>
 8006726:	2200      	movs	r2, #0
 8006728:	4b6e      	ldr	r3, [pc, #440]	; (80068e4 <_dtoa_r+0x8cc>)
 800672a:	f7f9 fedf 	bl	80004ec <__aeabi_dmul>
 800672e:	2200      	movs	r2, #0
 8006730:	2300      	movs	r3, #0
 8006732:	4680      	mov	r8, r0
 8006734:	4689      	mov	r9, r1
 8006736:	f7fa f941 	bl	80009bc <__aeabi_dcmpeq>
 800673a:	2800      	cmp	r0, #0
 800673c:	d09b      	beq.n	8006676 <_dtoa_r+0x65e>
 800673e:	e7cd      	b.n	80066dc <_dtoa_r+0x6c4>
 8006740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006742:	2a00      	cmp	r2, #0
 8006744:	f000 80d0 	beq.w	80068e8 <_dtoa_r+0x8d0>
 8006748:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800674a:	2a01      	cmp	r2, #1
 800674c:	f300 80ae 	bgt.w	80068ac <_dtoa_r+0x894>
 8006750:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006752:	2a00      	cmp	r2, #0
 8006754:	f000 80a6 	beq.w	80068a4 <_dtoa_r+0x88c>
 8006758:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800675c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800675e:	9f06      	ldr	r7, [sp, #24]
 8006760:	9a06      	ldr	r2, [sp, #24]
 8006762:	2101      	movs	r1, #1
 8006764:	441a      	add	r2, r3
 8006766:	9206      	str	r2, [sp, #24]
 8006768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800676a:	4628      	mov	r0, r5
 800676c:	441a      	add	r2, r3
 800676e:	9209      	str	r2, [sp, #36]	; 0x24
 8006770:	f000 ff32 	bl	80075d8 <__i2b>
 8006774:	4606      	mov	r6, r0
 8006776:	2f00      	cmp	r7, #0
 8006778:	dd0c      	ble.n	8006794 <_dtoa_r+0x77c>
 800677a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	dd09      	ble.n	8006794 <_dtoa_r+0x77c>
 8006780:	42bb      	cmp	r3, r7
 8006782:	bfa8      	it	ge
 8006784:	463b      	movge	r3, r7
 8006786:	9a06      	ldr	r2, [sp, #24]
 8006788:	1aff      	subs	r7, r7, r3
 800678a:	1ad2      	subs	r2, r2, r3
 800678c:	9206      	str	r2, [sp, #24]
 800678e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	9309      	str	r3, [sp, #36]	; 0x24
 8006794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006796:	b1f3      	cbz	r3, 80067d6 <_dtoa_r+0x7be>
 8006798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80a8 	beq.w	80068f0 <_dtoa_r+0x8d8>
 80067a0:	2c00      	cmp	r4, #0
 80067a2:	dd10      	ble.n	80067c6 <_dtoa_r+0x7ae>
 80067a4:	4631      	mov	r1, r6
 80067a6:	4622      	mov	r2, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 ffd3 	bl	8007754 <__pow5mult>
 80067ae:	465a      	mov	r2, fp
 80067b0:	4601      	mov	r1, r0
 80067b2:	4606      	mov	r6, r0
 80067b4:	4628      	mov	r0, r5
 80067b6:	f000 ff25 	bl	8007604 <__multiply>
 80067ba:	4680      	mov	r8, r0
 80067bc:	4659      	mov	r1, fp
 80067be:	4628      	mov	r0, r5
 80067c0:	f000 fe0a 	bl	80073d8 <_Bfree>
 80067c4:	46c3      	mov	fp, r8
 80067c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c8:	1b1a      	subs	r2, r3, r4
 80067ca:	d004      	beq.n	80067d6 <_dtoa_r+0x7be>
 80067cc:	4659      	mov	r1, fp
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 ffc0 	bl	8007754 <__pow5mult>
 80067d4:	4683      	mov	fp, r0
 80067d6:	2101      	movs	r1, #1
 80067d8:	4628      	mov	r0, r5
 80067da:	f000 fefd 	bl	80075d8 <__i2b>
 80067de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067e0:	4604      	mov	r4, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f340 8086 	ble.w	80068f4 <_dtoa_r+0x8dc>
 80067e8:	461a      	mov	r2, r3
 80067ea:	4601      	mov	r1, r0
 80067ec:	4628      	mov	r0, r5
 80067ee:	f000 ffb1 	bl	8007754 <__pow5mult>
 80067f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067f4:	4604      	mov	r4, r0
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	dd7f      	ble.n	80068fa <_dtoa_r+0x8e2>
 80067fa:	f04f 0800 	mov.w	r8, #0
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006804:	6918      	ldr	r0, [r3, #16]
 8006806:	f000 fe99 	bl	800753c <__hi0bits>
 800680a:	f1c0 0020 	rsb	r0, r0, #32
 800680e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006810:	4418      	add	r0, r3
 8006812:	f010 001f 	ands.w	r0, r0, #31
 8006816:	f000 8092 	beq.w	800693e <_dtoa_r+0x926>
 800681a:	f1c0 0320 	rsb	r3, r0, #32
 800681e:	2b04      	cmp	r3, #4
 8006820:	f340 808a 	ble.w	8006938 <_dtoa_r+0x920>
 8006824:	f1c0 001c 	rsb	r0, r0, #28
 8006828:	9b06      	ldr	r3, [sp, #24]
 800682a:	4407      	add	r7, r0
 800682c:	4403      	add	r3, r0
 800682e:	9306      	str	r3, [sp, #24]
 8006830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006832:	4403      	add	r3, r0
 8006834:	9309      	str	r3, [sp, #36]	; 0x24
 8006836:	9b06      	ldr	r3, [sp, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	dd05      	ble.n	8006848 <_dtoa_r+0x830>
 800683c:	4659      	mov	r1, fp
 800683e:	461a      	mov	r2, r3
 8006840:	4628      	mov	r0, r5
 8006842:	f000 ffe1 	bl	8007808 <__lshift>
 8006846:	4683      	mov	fp, r0
 8006848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684a:	2b00      	cmp	r3, #0
 800684c:	dd05      	ble.n	800685a <_dtoa_r+0x842>
 800684e:	4621      	mov	r1, r4
 8006850:	461a      	mov	r2, r3
 8006852:	4628      	mov	r0, r5
 8006854:	f000 ffd8 	bl	8007808 <__lshift>
 8006858:	4604      	mov	r4, r0
 800685a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d070      	beq.n	8006942 <_dtoa_r+0x92a>
 8006860:	4621      	mov	r1, r4
 8006862:	4658      	mov	r0, fp
 8006864:	f001 f840 	bl	80078e8 <__mcmp>
 8006868:	2800      	cmp	r0, #0
 800686a:	da6a      	bge.n	8006942 <_dtoa_r+0x92a>
 800686c:	2300      	movs	r3, #0
 800686e:	4659      	mov	r1, fp
 8006870:	220a      	movs	r2, #10
 8006872:	4628      	mov	r0, r5
 8006874:	f000 fdd2 	bl	800741c <__multadd>
 8006878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687a:	4683      	mov	fp, r0
 800687c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 8194 	beq.w	8006bae <_dtoa_r+0xb96>
 8006886:	4631      	mov	r1, r6
 8006888:	2300      	movs	r3, #0
 800688a:	220a      	movs	r2, #10
 800688c:	4628      	mov	r0, r5
 800688e:	f000 fdc5 	bl	800741c <__multadd>
 8006892:	f1b9 0f00 	cmp.w	r9, #0
 8006896:	4606      	mov	r6, r0
 8006898:	f300 8093 	bgt.w	80069c2 <_dtoa_r+0x9aa>
 800689c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800689e:	2b02      	cmp	r3, #2
 80068a0:	dc57      	bgt.n	8006952 <_dtoa_r+0x93a>
 80068a2:	e08e      	b.n	80069c2 <_dtoa_r+0x9aa>
 80068a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80068a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068aa:	e757      	b.n	800675c <_dtoa_r+0x744>
 80068ac:	9b08      	ldr	r3, [sp, #32]
 80068ae:	1e5c      	subs	r4, r3, #1
 80068b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	bfb7      	itett	lt
 80068b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068b8:	1b1c      	subge	r4, r3, r4
 80068ba:	1ae2      	sublt	r2, r4, r3
 80068bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068be:	bfbe      	ittt	lt
 80068c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80068c2:	189b      	addlt	r3, r3, r2
 80068c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068c6:	9b08      	ldr	r3, [sp, #32]
 80068c8:	bfb8      	it	lt
 80068ca:	2400      	movlt	r4, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bfbb      	ittet	lt
 80068d0:	9b06      	ldrlt	r3, [sp, #24]
 80068d2:	9a08      	ldrlt	r2, [sp, #32]
 80068d4:	9f06      	ldrge	r7, [sp, #24]
 80068d6:	1a9f      	sublt	r7, r3, r2
 80068d8:	bfac      	ite	ge
 80068da:	9b08      	ldrge	r3, [sp, #32]
 80068dc:	2300      	movlt	r3, #0
 80068de:	e73f      	b.n	8006760 <_dtoa_r+0x748>
 80068e0:	3fe00000 	.word	0x3fe00000
 80068e4:	40240000 	.word	0x40240000
 80068e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068ea:	9f06      	ldr	r7, [sp, #24]
 80068ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80068ee:	e742      	b.n	8006776 <_dtoa_r+0x75e>
 80068f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068f2:	e76b      	b.n	80067cc <_dtoa_r+0x7b4>
 80068f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	dc19      	bgt.n	800692e <_dtoa_r+0x916>
 80068fa:	9b04      	ldr	r3, [sp, #16]
 80068fc:	b9bb      	cbnz	r3, 800692e <_dtoa_r+0x916>
 80068fe:	9b05      	ldr	r3, [sp, #20]
 8006900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006904:	b99b      	cbnz	r3, 800692e <_dtoa_r+0x916>
 8006906:	9b05      	ldr	r3, [sp, #20]
 8006908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800690c:	0d1b      	lsrs	r3, r3, #20
 800690e:	051b      	lsls	r3, r3, #20
 8006910:	b183      	cbz	r3, 8006934 <_dtoa_r+0x91c>
 8006912:	f04f 0801 	mov.w	r8, #1
 8006916:	9b06      	ldr	r3, [sp, #24]
 8006918:	3301      	adds	r3, #1
 800691a:	9306      	str	r3, [sp, #24]
 800691c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691e:	3301      	adds	r3, #1
 8006920:	9309      	str	r3, [sp, #36]	; 0x24
 8006922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006924:	2b00      	cmp	r3, #0
 8006926:	f47f af6a 	bne.w	80067fe <_dtoa_r+0x7e6>
 800692a:	2001      	movs	r0, #1
 800692c:	e76f      	b.n	800680e <_dtoa_r+0x7f6>
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	e7f6      	b.n	8006922 <_dtoa_r+0x90a>
 8006934:	4698      	mov	r8, r3
 8006936:	e7f4      	b.n	8006922 <_dtoa_r+0x90a>
 8006938:	f43f af7d 	beq.w	8006836 <_dtoa_r+0x81e>
 800693c:	4618      	mov	r0, r3
 800693e:	301c      	adds	r0, #28
 8006940:	e772      	b.n	8006828 <_dtoa_r+0x810>
 8006942:	9b08      	ldr	r3, [sp, #32]
 8006944:	2b00      	cmp	r3, #0
 8006946:	dc36      	bgt.n	80069b6 <_dtoa_r+0x99e>
 8006948:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800694a:	2b02      	cmp	r3, #2
 800694c:	dd33      	ble.n	80069b6 <_dtoa_r+0x99e>
 800694e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006952:	f1b9 0f00 	cmp.w	r9, #0
 8006956:	d10d      	bne.n	8006974 <_dtoa_r+0x95c>
 8006958:	4621      	mov	r1, r4
 800695a:	464b      	mov	r3, r9
 800695c:	2205      	movs	r2, #5
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fd5c 	bl	800741c <__multadd>
 8006964:	4601      	mov	r1, r0
 8006966:	4604      	mov	r4, r0
 8006968:	4658      	mov	r0, fp
 800696a:	f000 ffbd 	bl	80078e8 <__mcmp>
 800696e:	2800      	cmp	r0, #0
 8006970:	f73f adb8 	bgt.w	80064e4 <_dtoa_r+0x4cc>
 8006974:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006976:	9f03      	ldr	r7, [sp, #12]
 8006978:	ea6f 0a03 	mvn.w	sl, r3
 800697c:	f04f 0800 	mov.w	r8, #0
 8006980:	4621      	mov	r1, r4
 8006982:	4628      	mov	r0, r5
 8006984:	f000 fd28 	bl	80073d8 <_Bfree>
 8006988:	2e00      	cmp	r6, #0
 800698a:	f43f aea7 	beq.w	80066dc <_dtoa_r+0x6c4>
 800698e:	f1b8 0f00 	cmp.w	r8, #0
 8006992:	d005      	beq.n	80069a0 <_dtoa_r+0x988>
 8006994:	45b0      	cmp	r8, r6
 8006996:	d003      	beq.n	80069a0 <_dtoa_r+0x988>
 8006998:	4641      	mov	r1, r8
 800699a:	4628      	mov	r0, r5
 800699c:	f000 fd1c 	bl	80073d8 <_Bfree>
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 fd18 	bl	80073d8 <_Bfree>
 80069a8:	e698      	b.n	80066dc <_dtoa_r+0x6c4>
 80069aa:	2400      	movs	r4, #0
 80069ac:	4626      	mov	r6, r4
 80069ae:	e7e1      	b.n	8006974 <_dtoa_r+0x95c>
 80069b0:	46c2      	mov	sl, r8
 80069b2:	4626      	mov	r6, r4
 80069b4:	e596      	b.n	80064e4 <_dtoa_r+0x4cc>
 80069b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80fd 	beq.w	8006bbc <_dtoa_r+0xba4>
 80069c2:	2f00      	cmp	r7, #0
 80069c4:	dd05      	ble.n	80069d2 <_dtoa_r+0x9ba>
 80069c6:	4631      	mov	r1, r6
 80069c8:	463a      	mov	r2, r7
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 ff1c 	bl	8007808 <__lshift>
 80069d0:	4606      	mov	r6, r0
 80069d2:	f1b8 0f00 	cmp.w	r8, #0
 80069d6:	d05c      	beq.n	8006a92 <_dtoa_r+0xa7a>
 80069d8:	4628      	mov	r0, r5
 80069da:	6871      	ldr	r1, [r6, #4]
 80069dc:	f000 fcbc 	bl	8007358 <_Balloc>
 80069e0:	4607      	mov	r7, r0
 80069e2:	b928      	cbnz	r0, 80069f0 <_dtoa_r+0x9d8>
 80069e4:	4602      	mov	r2, r0
 80069e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069ea:	4b7f      	ldr	r3, [pc, #508]	; (8006be8 <_dtoa_r+0xbd0>)
 80069ec:	f7ff bb28 	b.w	8006040 <_dtoa_r+0x28>
 80069f0:	6932      	ldr	r2, [r6, #16]
 80069f2:	f106 010c 	add.w	r1, r6, #12
 80069f6:	3202      	adds	r2, #2
 80069f8:	0092      	lsls	r2, r2, #2
 80069fa:	300c      	adds	r0, #12
 80069fc:	f000 fc9e 	bl	800733c <memcpy>
 8006a00:	2201      	movs	r2, #1
 8006a02:	4639      	mov	r1, r7
 8006a04:	4628      	mov	r0, r5
 8006a06:	f000 feff 	bl	8007808 <__lshift>
 8006a0a:	46b0      	mov	r8, r6
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	3301      	adds	r3, #1
 8006a12:	9308      	str	r3, [sp, #32]
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	444b      	add	r3, r9
 8006a18:	930a      	str	r3, [sp, #40]	; 0x28
 8006a1a:	9b04      	ldr	r3, [sp, #16]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	9309      	str	r3, [sp, #36]	; 0x24
 8006a22:	9b08      	ldr	r3, [sp, #32]
 8006a24:	4621      	mov	r1, r4
 8006a26:	3b01      	subs	r3, #1
 8006a28:	4658      	mov	r0, fp
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	f7ff fa68 	bl	8005f00 <quorem>
 8006a30:	4603      	mov	r3, r0
 8006a32:	4641      	mov	r1, r8
 8006a34:	3330      	adds	r3, #48	; 0x30
 8006a36:	9006      	str	r0, [sp, #24]
 8006a38:	4658      	mov	r0, fp
 8006a3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a3c:	f000 ff54 	bl	80078e8 <__mcmp>
 8006a40:	4632      	mov	r2, r6
 8006a42:	4681      	mov	r9, r0
 8006a44:	4621      	mov	r1, r4
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 ff6a 	bl	8007920 <__mdiff>
 8006a4c:	68c2      	ldr	r2, [r0, #12]
 8006a4e:	4607      	mov	r7, r0
 8006a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a52:	bb02      	cbnz	r2, 8006a96 <_dtoa_r+0xa7e>
 8006a54:	4601      	mov	r1, r0
 8006a56:	4658      	mov	r0, fp
 8006a58:	f000 ff46 	bl	80078e8 <__mcmp>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a60:	4639      	mov	r1, r7
 8006a62:	4628      	mov	r0, r5
 8006a64:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006a68:	f000 fcb6 	bl	80073d8 <_Bfree>
 8006a6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a70:	9f08      	ldr	r7, [sp, #32]
 8006a72:	ea43 0102 	orr.w	r1, r3, r2
 8006a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a7c:	d10d      	bne.n	8006a9a <_dtoa_r+0xa82>
 8006a7e:	2b39      	cmp	r3, #57	; 0x39
 8006a80:	d029      	beq.n	8006ad6 <_dtoa_r+0xabe>
 8006a82:	f1b9 0f00 	cmp.w	r9, #0
 8006a86:	dd01      	ble.n	8006a8c <_dtoa_r+0xa74>
 8006a88:	9b06      	ldr	r3, [sp, #24]
 8006a8a:	3331      	adds	r3, #49	; 0x31
 8006a8c:	9a04      	ldr	r2, [sp, #16]
 8006a8e:	7013      	strb	r3, [r2, #0]
 8006a90:	e776      	b.n	8006980 <_dtoa_r+0x968>
 8006a92:	4630      	mov	r0, r6
 8006a94:	e7b9      	b.n	8006a0a <_dtoa_r+0x9f2>
 8006a96:	2201      	movs	r2, #1
 8006a98:	e7e2      	b.n	8006a60 <_dtoa_r+0xa48>
 8006a9a:	f1b9 0f00 	cmp.w	r9, #0
 8006a9e:	db06      	blt.n	8006aae <_dtoa_r+0xa96>
 8006aa0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006aa2:	ea41 0909 	orr.w	r9, r1, r9
 8006aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aa8:	ea59 0101 	orrs.w	r1, r9, r1
 8006aac:	d120      	bne.n	8006af0 <_dtoa_r+0xad8>
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	ddec      	ble.n	8006a8c <_dtoa_r+0xa74>
 8006ab2:	4659      	mov	r1, fp
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	9308      	str	r3, [sp, #32]
 8006aba:	f000 fea5 	bl	8007808 <__lshift>
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4683      	mov	fp, r0
 8006ac2:	f000 ff11 	bl	80078e8 <__mcmp>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	9b08      	ldr	r3, [sp, #32]
 8006aca:	dc02      	bgt.n	8006ad2 <_dtoa_r+0xaba>
 8006acc:	d1de      	bne.n	8006a8c <_dtoa_r+0xa74>
 8006ace:	07da      	lsls	r2, r3, #31
 8006ad0:	d5dc      	bpl.n	8006a8c <_dtoa_r+0xa74>
 8006ad2:	2b39      	cmp	r3, #57	; 0x39
 8006ad4:	d1d8      	bne.n	8006a88 <_dtoa_r+0xa70>
 8006ad6:	2339      	movs	r3, #57	; 0x39
 8006ad8:	9a04      	ldr	r2, [sp, #16]
 8006ada:	7013      	strb	r3, [r2, #0]
 8006adc:	463b      	mov	r3, r7
 8006ade:	461f      	mov	r7, r3
 8006ae0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	2a39      	cmp	r2, #57	; 0x39
 8006ae8:	d050      	beq.n	8006b8c <_dtoa_r+0xb74>
 8006aea:	3201      	adds	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	e747      	b.n	8006980 <_dtoa_r+0x968>
 8006af0:	2a00      	cmp	r2, #0
 8006af2:	dd03      	ble.n	8006afc <_dtoa_r+0xae4>
 8006af4:	2b39      	cmp	r3, #57	; 0x39
 8006af6:	d0ee      	beq.n	8006ad6 <_dtoa_r+0xabe>
 8006af8:	3301      	adds	r3, #1
 8006afa:	e7c7      	b.n	8006a8c <_dtoa_r+0xa74>
 8006afc:	9a08      	ldr	r2, [sp, #32]
 8006afe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b00:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b04:	428a      	cmp	r2, r1
 8006b06:	d02a      	beq.n	8006b5e <_dtoa_r+0xb46>
 8006b08:	4659      	mov	r1, fp
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	220a      	movs	r2, #10
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 fc84 	bl	800741c <__multadd>
 8006b14:	45b0      	cmp	r8, r6
 8006b16:	4683      	mov	fp, r0
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	f04f 020a 	mov.w	r2, #10
 8006b20:	4641      	mov	r1, r8
 8006b22:	4628      	mov	r0, r5
 8006b24:	d107      	bne.n	8006b36 <_dtoa_r+0xb1e>
 8006b26:	f000 fc79 	bl	800741c <__multadd>
 8006b2a:	4680      	mov	r8, r0
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	9b08      	ldr	r3, [sp, #32]
 8006b30:	3301      	adds	r3, #1
 8006b32:	9308      	str	r3, [sp, #32]
 8006b34:	e775      	b.n	8006a22 <_dtoa_r+0xa0a>
 8006b36:	f000 fc71 	bl	800741c <__multadd>
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	220a      	movs	r2, #10
 8006b42:	4628      	mov	r0, r5
 8006b44:	f000 fc6a 	bl	800741c <__multadd>
 8006b48:	4606      	mov	r6, r0
 8006b4a:	e7f0      	b.n	8006b2e <_dtoa_r+0xb16>
 8006b4c:	f1b9 0f00 	cmp.w	r9, #0
 8006b50:	bfcc      	ite	gt
 8006b52:	464f      	movgt	r7, r9
 8006b54:	2701      	movle	r7, #1
 8006b56:	f04f 0800 	mov.w	r8, #0
 8006b5a:	9a03      	ldr	r2, [sp, #12]
 8006b5c:	4417      	add	r7, r2
 8006b5e:	4659      	mov	r1, fp
 8006b60:	2201      	movs	r2, #1
 8006b62:	4628      	mov	r0, r5
 8006b64:	9308      	str	r3, [sp, #32]
 8006b66:	f000 fe4f 	bl	8007808 <__lshift>
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4683      	mov	fp, r0
 8006b6e:	f000 febb 	bl	80078e8 <__mcmp>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	dcb2      	bgt.n	8006adc <_dtoa_r+0xac4>
 8006b76:	d102      	bne.n	8006b7e <_dtoa_r+0xb66>
 8006b78:	9b08      	ldr	r3, [sp, #32]
 8006b7a:	07db      	lsls	r3, r3, #31
 8006b7c:	d4ae      	bmi.n	8006adc <_dtoa_r+0xac4>
 8006b7e:	463b      	mov	r3, r7
 8006b80:	461f      	mov	r7, r3
 8006b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b86:	2a30      	cmp	r2, #48	; 0x30
 8006b88:	d0fa      	beq.n	8006b80 <_dtoa_r+0xb68>
 8006b8a:	e6f9      	b.n	8006980 <_dtoa_r+0x968>
 8006b8c:	9a03      	ldr	r2, [sp, #12]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d1a5      	bne.n	8006ade <_dtoa_r+0xac6>
 8006b92:	2331      	movs	r3, #49	; 0x31
 8006b94:	f10a 0a01 	add.w	sl, sl, #1
 8006b98:	e779      	b.n	8006a8e <_dtoa_r+0xa76>
 8006b9a:	4b14      	ldr	r3, [pc, #80]	; (8006bec <_dtoa_r+0xbd4>)
 8006b9c:	f7ff baa8 	b.w	80060f0 <_dtoa_r+0xd8>
 8006ba0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f47f aa81 	bne.w	80060aa <_dtoa_r+0x92>
 8006ba8:	4b11      	ldr	r3, [pc, #68]	; (8006bf0 <_dtoa_r+0xbd8>)
 8006baa:	f7ff baa1 	b.w	80060f0 <_dtoa_r+0xd8>
 8006bae:	f1b9 0f00 	cmp.w	r9, #0
 8006bb2:	dc03      	bgt.n	8006bbc <_dtoa_r+0xba4>
 8006bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	f73f aecb 	bgt.w	8006952 <_dtoa_r+0x93a>
 8006bbc:	9f03      	ldr	r7, [sp, #12]
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4658      	mov	r0, fp
 8006bc2:	f7ff f99d 	bl	8005f00 <quorem>
 8006bc6:	9a03      	ldr	r2, [sp, #12]
 8006bc8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006bcc:	f807 3b01 	strb.w	r3, [r7], #1
 8006bd0:	1aba      	subs	r2, r7, r2
 8006bd2:	4591      	cmp	r9, r2
 8006bd4:	ddba      	ble.n	8006b4c <_dtoa_r+0xb34>
 8006bd6:	4659      	mov	r1, fp
 8006bd8:	2300      	movs	r3, #0
 8006bda:	220a      	movs	r2, #10
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f000 fc1d 	bl	800741c <__multadd>
 8006be2:	4683      	mov	fp, r0
 8006be4:	e7eb      	b.n	8006bbe <_dtoa_r+0xba6>
 8006be6:	bf00      	nop
 8006be8:	08008ff9 	.word	0x08008ff9
 8006bec:	08008d64 	.word	0x08008d64
 8006bf0:	08008f91 	.word	0x08008f91

08006bf4 <fiprintf>:
 8006bf4:	b40e      	push	{r1, r2, r3}
 8006bf6:	b503      	push	{r0, r1, lr}
 8006bf8:	4601      	mov	r1, r0
 8006bfa:	ab03      	add	r3, sp, #12
 8006bfc:	4805      	ldr	r0, [pc, #20]	; (8006c14 <fiprintf+0x20>)
 8006bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c02:	6800      	ldr	r0, [r0, #0]
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	f001 fad3 	bl	80081b0 <_vfiprintf_r>
 8006c0a:	b002      	add	sp, #8
 8006c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c10:	b003      	add	sp, #12
 8006c12:	4770      	bx	lr
 8006c14:	20000018 	.word	0x20000018

08006c18 <rshift>:
 8006c18:	6903      	ldr	r3, [r0, #16]
 8006c1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c22:	f100 0414 	add.w	r4, r0, #20
 8006c26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c2a:	dd46      	ble.n	8006cba <rshift+0xa2>
 8006c2c:	f011 011f 	ands.w	r1, r1, #31
 8006c30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c38:	d10c      	bne.n	8006c54 <rshift+0x3c>
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	f100 0710 	add.w	r7, r0, #16
 8006c40:	42b1      	cmp	r1, r6
 8006c42:	d335      	bcc.n	8006cb0 <rshift+0x98>
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	1eea      	subs	r2, r5, #3
 8006c4a:	4296      	cmp	r6, r2
 8006c4c:	bf38      	it	cc
 8006c4e:	2300      	movcc	r3, #0
 8006c50:	4423      	add	r3, r4
 8006c52:	e015      	b.n	8006c80 <rshift+0x68>
 8006c54:	46a1      	mov	r9, r4
 8006c56:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c5a:	f1c1 0820 	rsb	r8, r1, #32
 8006c5e:	40cf      	lsrs	r7, r1
 8006c60:	f105 0e04 	add.w	lr, r5, #4
 8006c64:	4576      	cmp	r6, lr
 8006c66:	46f4      	mov	ip, lr
 8006c68:	d816      	bhi.n	8006c98 <rshift+0x80>
 8006c6a:	1a9a      	subs	r2, r3, r2
 8006c6c:	0092      	lsls	r2, r2, #2
 8006c6e:	3a04      	subs	r2, #4
 8006c70:	3501      	adds	r5, #1
 8006c72:	42ae      	cmp	r6, r5
 8006c74:	bf38      	it	cc
 8006c76:	2200      	movcc	r2, #0
 8006c78:	18a3      	adds	r3, r4, r2
 8006c7a:	50a7      	str	r7, [r4, r2]
 8006c7c:	b107      	cbz	r7, 8006c80 <rshift+0x68>
 8006c7e:	3304      	adds	r3, #4
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	eba3 0204 	sub.w	r2, r3, r4
 8006c86:	bf08      	it	eq
 8006c88:	2300      	moveq	r3, #0
 8006c8a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c8e:	6102      	str	r2, [r0, #16]
 8006c90:	bf08      	it	eq
 8006c92:	6143      	streq	r3, [r0, #20]
 8006c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c98:	f8dc c000 	ldr.w	ip, [ip]
 8006c9c:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ca0:	ea4c 0707 	orr.w	r7, ip, r7
 8006ca4:	f849 7b04 	str.w	r7, [r9], #4
 8006ca8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006cac:	40cf      	lsrs	r7, r1
 8006cae:	e7d9      	b.n	8006c64 <rshift+0x4c>
 8006cb0:	f851 cb04 	ldr.w	ip, [r1], #4
 8006cb4:	f847 cf04 	str.w	ip, [r7, #4]!
 8006cb8:	e7c2      	b.n	8006c40 <rshift+0x28>
 8006cba:	4623      	mov	r3, r4
 8006cbc:	e7e0      	b.n	8006c80 <rshift+0x68>

08006cbe <__hexdig_fun>:
 8006cbe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d802      	bhi.n	8006ccc <__hexdig_fun+0xe>
 8006cc6:	3820      	subs	r0, #32
 8006cc8:	b2c0      	uxtb	r0, r0
 8006cca:	4770      	bx	lr
 8006ccc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006cd0:	2b05      	cmp	r3, #5
 8006cd2:	d801      	bhi.n	8006cd8 <__hexdig_fun+0x1a>
 8006cd4:	3847      	subs	r0, #71	; 0x47
 8006cd6:	e7f7      	b.n	8006cc8 <__hexdig_fun+0xa>
 8006cd8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006cdc:	2b05      	cmp	r3, #5
 8006cde:	d801      	bhi.n	8006ce4 <__hexdig_fun+0x26>
 8006ce0:	3827      	subs	r0, #39	; 0x27
 8006ce2:	e7f1      	b.n	8006cc8 <__hexdig_fun+0xa>
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	4770      	bx	lr

08006ce8 <__gethex>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	b08b      	sub	sp, #44	; 0x2c
 8006cee:	9305      	str	r3, [sp, #20]
 8006cf0:	4bb2      	ldr	r3, [pc, #712]	; (8006fbc <__gethex+0x2d4>)
 8006cf2:	9002      	str	r0, [sp, #8]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	468b      	mov	fp, r1
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	4690      	mov	r8, r2
 8006cfc:	9303      	str	r3, [sp, #12]
 8006cfe:	f7f9 fa31 	bl	8000164 <strlen>
 8006d02:	4682      	mov	sl, r0
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	f8db 2000 	ldr.w	r2, [fp]
 8006d0a:	4403      	add	r3, r0
 8006d0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006d10:	9306      	str	r3, [sp, #24]
 8006d12:	1c93      	adds	r3, r2, #2
 8006d14:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006d18:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006d1c:	32fe      	adds	r2, #254	; 0xfe
 8006d1e:	18d1      	adds	r1, r2, r3
 8006d20:	461f      	mov	r7, r3
 8006d22:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d26:	9101      	str	r1, [sp, #4]
 8006d28:	2830      	cmp	r0, #48	; 0x30
 8006d2a:	d0f8      	beq.n	8006d1e <__gethex+0x36>
 8006d2c:	f7ff ffc7 	bl	8006cbe <__hexdig_fun>
 8006d30:	4604      	mov	r4, r0
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d13a      	bne.n	8006dac <__gethex+0xc4>
 8006d36:	4652      	mov	r2, sl
 8006d38:	4638      	mov	r0, r7
 8006d3a:	9903      	ldr	r1, [sp, #12]
 8006d3c:	f001 fb7e 	bl	800843c <strncmp>
 8006d40:	4605      	mov	r5, r0
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d166      	bne.n	8006e14 <__gethex+0x12c>
 8006d46:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006d4a:	eb07 060a 	add.w	r6, r7, sl
 8006d4e:	f7ff ffb6 	bl	8006cbe <__hexdig_fun>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d060      	beq.n	8006e18 <__gethex+0x130>
 8006d56:	4633      	mov	r3, r6
 8006d58:	7818      	ldrb	r0, [r3, #0]
 8006d5a:	461f      	mov	r7, r3
 8006d5c:	2830      	cmp	r0, #48	; 0x30
 8006d5e:	f103 0301 	add.w	r3, r3, #1
 8006d62:	d0f9      	beq.n	8006d58 <__gethex+0x70>
 8006d64:	f7ff ffab 	bl	8006cbe <__hexdig_fun>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	fab0 f480 	clz	r4, r0
 8006d6e:	4635      	mov	r5, r6
 8006d70:	0964      	lsrs	r4, r4, #5
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	463a      	mov	r2, r7
 8006d76:	4616      	mov	r6, r2
 8006d78:	7830      	ldrb	r0, [r6, #0]
 8006d7a:	3201      	adds	r2, #1
 8006d7c:	f7ff ff9f 	bl	8006cbe <__hexdig_fun>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d1f8      	bne.n	8006d76 <__gethex+0x8e>
 8006d84:	4652      	mov	r2, sl
 8006d86:	4630      	mov	r0, r6
 8006d88:	9903      	ldr	r1, [sp, #12]
 8006d8a:	f001 fb57 	bl	800843c <strncmp>
 8006d8e:	b980      	cbnz	r0, 8006db2 <__gethex+0xca>
 8006d90:	b94d      	cbnz	r5, 8006da6 <__gethex+0xbe>
 8006d92:	eb06 050a 	add.w	r5, r6, sl
 8006d96:	462a      	mov	r2, r5
 8006d98:	4616      	mov	r6, r2
 8006d9a:	7830      	ldrb	r0, [r6, #0]
 8006d9c:	3201      	adds	r2, #1
 8006d9e:	f7ff ff8e 	bl	8006cbe <__hexdig_fun>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d1f8      	bne.n	8006d98 <__gethex+0xb0>
 8006da6:	1bad      	subs	r5, r5, r6
 8006da8:	00ad      	lsls	r5, r5, #2
 8006daa:	e004      	b.n	8006db6 <__gethex+0xce>
 8006dac:	2400      	movs	r4, #0
 8006dae:	4625      	mov	r5, r4
 8006db0:	e7e0      	b.n	8006d74 <__gethex+0x8c>
 8006db2:	2d00      	cmp	r5, #0
 8006db4:	d1f7      	bne.n	8006da6 <__gethex+0xbe>
 8006db6:	7833      	ldrb	r3, [r6, #0]
 8006db8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006dbc:	2b50      	cmp	r3, #80	; 0x50
 8006dbe:	d139      	bne.n	8006e34 <__gethex+0x14c>
 8006dc0:	7873      	ldrb	r3, [r6, #1]
 8006dc2:	2b2b      	cmp	r3, #43	; 0x2b
 8006dc4:	d02a      	beq.n	8006e1c <__gethex+0x134>
 8006dc6:	2b2d      	cmp	r3, #45	; 0x2d
 8006dc8:	d02c      	beq.n	8006e24 <__gethex+0x13c>
 8006dca:	f04f 0900 	mov.w	r9, #0
 8006dce:	1c71      	adds	r1, r6, #1
 8006dd0:	7808      	ldrb	r0, [r1, #0]
 8006dd2:	f7ff ff74 	bl	8006cbe <__hexdig_fun>
 8006dd6:	1e43      	subs	r3, r0, #1
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b18      	cmp	r3, #24
 8006ddc:	d82a      	bhi.n	8006e34 <__gethex+0x14c>
 8006dde:	f1a0 0210 	sub.w	r2, r0, #16
 8006de2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006de6:	f7ff ff6a 	bl	8006cbe <__hexdig_fun>
 8006dea:	1e43      	subs	r3, r0, #1
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b18      	cmp	r3, #24
 8006df0:	d91b      	bls.n	8006e2a <__gethex+0x142>
 8006df2:	f1b9 0f00 	cmp.w	r9, #0
 8006df6:	d000      	beq.n	8006dfa <__gethex+0x112>
 8006df8:	4252      	negs	r2, r2
 8006dfa:	4415      	add	r5, r2
 8006dfc:	f8cb 1000 	str.w	r1, [fp]
 8006e00:	b1d4      	cbz	r4, 8006e38 <__gethex+0x150>
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bf14      	ite	ne
 8006e08:	2700      	movne	r7, #0
 8006e0a:	2706      	moveq	r7, #6
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	b00b      	add	sp, #44	; 0x2c
 8006e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e14:	463e      	mov	r6, r7
 8006e16:	4625      	mov	r5, r4
 8006e18:	2401      	movs	r4, #1
 8006e1a:	e7cc      	b.n	8006db6 <__gethex+0xce>
 8006e1c:	f04f 0900 	mov.w	r9, #0
 8006e20:	1cb1      	adds	r1, r6, #2
 8006e22:	e7d5      	b.n	8006dd0 <__gethex+0xe8>
 8006e24:	f04f 0901 	mov.w	r9, #1
 8006e28:	e7fa      	b.n	8006e20 <__gethex+0x138>
 8006e2a:	230a      	movs	r3, #10
 8006e2c:	fb03 0202 	mla	r2, r3, r2, r0
 8006e30:	3a10      	subs	r2, #16
 8006e32:	e7d6      	b.n	8006de2 <__gethex+0xfa>
 8006e34:	4631      	mov	r1, r6
 8006e36:	e7e1      	b.n	8006dfc <__gethex+0x114>
 8006e38:	4621      	mov	r1, r4
 8006e3a:	1bf3      	subs	r3, r6, r7
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	2b07      	cmp	r3, #7
 8006e40:	dc0a      	bgt.n	8006e58 <__gethex+0x170>
 8006e42:	9802      	ldr	r0, [sp, #8]
 8006e44:	f000 fa88 	bl	8007358 <_Balloc>
 8006e48:	4604      	mov	r4, r0
 8006e4a:	b940      	cbnz	r0, 8006e5e <__gethex+0x176>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	21de      	movs	r1, #222	; 0xde
 8006e50:	4b5b      	ldr	r3, [pc, #364]	; (8006fc0 <__gethex+0x2d8>)
 8006e52:	485c      	ldr	r0, [pc, #368]	; (8006fc4 <__gethex+0x2dc>)
 8006e54:	f7ff f836 	bl	8005ec4 <__assert_func>
 8006e58:	3101      	adds	r1, #1
 8006e5a:	105b      	asrs	r3, r3, #1
 8006e5c:	e7ef      	b.n	8006e3e <__gethex+0x156>
 8006e5e:	f04f 0b00 	mov.w	fp, #0
 8006e62:	f100 0914 	add.w	r9, r0, #20
 8006e66:	f1ca 0301 	rsb	r3, sl, #1
 8006e6a:	f8cd 9010 	str.w	r9, [sp, #16]
 8006e6e:	f8cd b004 	str.w	fp, [sp, #4]
 8006e72:	9308      	str	r3, [sp, #32]
 8006e74:	42b7      	cmp	r7, r6
 8006e76:	d33f      	bcc.n	8006ef8 <__gethex+0x210>
 8006e78:	9f04      	ldr	r7, [sp, #16]
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	f847 3b04 	str.w	r3, [r7], #4
 8006e80:	eba7 0709 	sub.w	r7, r7, r9
 8006e84:	10bf      	asrs	r7, r7, #2
 8006e86:	6127      	str	r7, [r4, #16]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fb57 	bl	800753c <__hi0bits>
 8006e8e:	017f      	lsls	r7, r7, #5
 8006e90:	f8d8 6000 	ldr.w	r6, [r8]
 8006e94:	1a3f      	subs	r7, r7, r0
 8006e96:	42b7      	cmp	r7, r6
 8006e98:	dd62      	ble.n	8006f60 <__gethex+0x278>
 8006e9a:	1bbf      	subs	r7, r7, r6
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 fef1 	bl	8007c86 <__any_on>
 8006ea4:	4682      	mov	sl, r0
 8006ea6:	b1a8      	cbz	r0, 8006ed4 <__gethex+0x1ec>
 8006ea8:	f04f 0a01 	mov.w	sl, #1
 8006eac:	1e7b      	subs	r3, r7, #1
 8006eae:	1159      	asrs	r1, r3, #5
 8006eb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006eb4:	f003 021f 	and.w	r2, r3, #31
 8006eb8:	fa0a f202 	lsl.w	r2, sl, r2
 8006ebc:	420a      	tst	r2, r1
 8006ebe:	d009      	beq.n	8006ed4 <__gethex+0x1ec>
 8006ec0:	4553      	cmp	r3, sl
 8006ec2:	dd05      	ble.n	8006ed0 <__gethex+0x1e8>
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	1eb9      	subs	r1, r7, #2
 8006ec8:	f000 fedd 	bl	8007c86 <__any_on>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d144      	bne.n	8006f5a <__gethex+0x272>
 8006ed0:	f04f 0a02 	mov.w	sl, #2
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f7ff fe9e 	bl	8006c18 <rshift>
 8006edc:	443d      	add	r5, r7
 8006ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ee2:	42ab      	cmp	r3, r5
 8006ee4:	da4a      	bge.n	8006f7c <__gethex+0x294>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	9802      	ldr	r0, [sp, #8]
 8006eea:	f000 fa75 	bl	80073d8 <_Bfree>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ef2:	27a3      	movs	r7, #163	; 0xa3
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	e789      	b.n	8006e0c <__gethex+0x124>
 8006ef8:	1e73      	subs	r3, r6, #1
 8006efa:	9a06      	ldr	r2, [sp, #24]
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d019      	beq.n	8006f3a <__gethex+0x252>
 8006f06:	f1bb 0f20 	cmp.w	fp, #32
 8006f0a:	d107      	bne.n	8006f1c <__gethex+0x234>
 8006f0c:	9b04      	ldr	r3, [sp, #16]
 8006f0e:	9a01      	ldr	r2, [sp, #4]
 8006f10:	f843 2b04 	str.w	r2, [r3], #4
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	2300      	movs	r3, #0
 8006f18:	469b      	mov	fp, r3
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006f20:	f7ff fecd 	bl	8006cbe <__hexdig_fun>
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	f000 000f 	and.w	r0, r0, #15
 8006f2a:	fa00 f00b 	lsl.w	r0, r0, fp
 8006f2e:	4303      	orrs	r3, r0
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	f10b 0b04 	add.w	fp, fp, #4
 8006f36:	9b07      	ldr	r3, [sp, #28]
 8006f38:	e00d      	b.n	8006f56 <__gethex+0x26e>
 8006f3a:	9a08      	ldr	r2, [sp, #32]
 8006f3c:	1e73      	subs	r3, r6, #1
 8006f3e:	4413      	add	r3, r2
 8006f40:	42bb      	cmp	r3, r7
 8006f42:	d3e0      	bcc.n	8006f06 <__gethex+0x21e>
 8006f44:	4618      	mov	r0, r3
 8006f46:	4652      	mov	r2, sl
 8006f48:	9903      	ldr	r1, [sp, #12]
 8006f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f4c:	f001 fa76 	bl	800843c <strncmp>
 8006f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d1d7      	bne.n	8006f06 <__gethex+0x21e>
 8006f56:	461e      	mov	r6, r3
 8006f58:	e78c      	b.n	8006e74 <__gethex+0x18c>
 8006f5a:	f04f 0a03 	mov.w	sl, #3
 8006f5e:	e7b9      	b.n	8006ed4 <__gethex+0x1ec>
 8006f60:	da09      	bge.n	8006f76 <__gethex+0x28e>
 8006f62:	1bf7      	subs	r7, r6, r7
 8006f64:	4621      	mov	r1, r4
 8006f66:	463a      	mov	r2, r7
 8006f68:	9802      	ldr	r0, [sp, #8]
 8006f6a:	f000 fc4d 	bl	8007808 <__lshift>
 8006f6e:	4604      	mov	r4, r0
 8006f70:	1bed      	subs	r5, r5, r7
 8006f72:	f100 0914 	add.w	r9, r0, #20
 8006f76:	f04f 0a00 	mov.w	sl, #0
 8006f7a:	e7b0      	b.n	8006ede <__gethex+0x1f6>
 8006f7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f80:	42a8      	cmp	r0, r5
 8006f82:	dd72      	ble.n	800706a <__gethex+0x382>
 8006f84:	1b45      	subs	r5, r0, r5
 8006f86:	42ae      	cmp	r6, r5
 8006f88:	dc35      	bgt.n	8006ff6 <__gethex+0x30e>
 8006f8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d029      	beq.n	8006fe6 <__gethex+0x2fe>
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d02b      	beq.n	8006fee <__gethex+0x306>
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d11c      	bne.n	8006fd4 <__gethex+0x2ec>
 8006f9a:	42ae      	cmp	r6, r5
 8006f9c:	d11a      	bne.n	8006fd4 <__gethex+0x2ec>
 8006f9e:	2e01      	cmp	r6, #1
 8006fa0:	d112      	bne.n	8006fc8 <__gethex+0x2e0>
 8006fa2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fa6:	9a05      	ldr	r2, [sp, #20]
 8006fa8:	2762      	movs	r7, #98	; 0x62
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	2301      	movs	r3, #1
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	f8c9 3000 	str.w	r3, [r9]
 8006fb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fb6:	601c      	str	r4, [r3, #0]
 8006fb8:	e728      	b.n	8006e0c <__gethex+0x124>
 8006fba:	bf00      	nop
 8006fbc:	08009070 	.word	0x08009070
 8006fc0:	08008ff9 	.word	0x08008ff9
 8006fc4:	0800900a 	.word	0x0800900a
 8006fc8:	4620      	mov	r0, r4
 8006fca:	1e71      	subs	r1, r6, #1
 8006fcc:	f000 fe5b 	bl	8007c86 <__any_on>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d1e6      	bne.n	8006fa2 <__gethex+0x2ba>
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	9802      	ldr	r0, [sp, #8]
 8006fd8:	f000 f9fe 	bl	80073d8 <_Bfree>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fe0:	2750      	movs	r7, #80	; 0x50
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	e712      	b.n	8006e0c <__gethex+0x124>
 8006fe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f3      	bne.n	8006fd4 <__gethex+0x2ec>
 8006fec:	e7d9      	b.n	8006fa2 <__gethex+0x2ba>
 8006fee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1d6      	bne.n	8006fa2 <__gethex+0x2ba>
 8006ff4:	e7ee      	b.n	8006fd4 <__gethex+0x2ec>
 8006ff6:	1e6f      	subs	r7, r5, #1
 8006ff8:	f1ba 0f00 	cmp.w	sl, #0
 8006ffc:	d132      	bne.n	8007064 <__gethex+0x37c>
 8006ffe:	b127      	cbz	r7, 800700a <__gethex+0x322>
 8007000:	4639      	mov	r1, r7
 8007002:	4620      	mov	r0, r4
 8007004:	f000 fe3f 	bl	8007c86 <__any_on>
 8007008:	4682      	mov	sl, r0
 800700a:	2101      	movs	r1, #1
 800700c:	117b      	asrs	r3, r7, #5
 800700e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007012:	f007 071f 	and.w	r7, r7, #31
 8007016:	fa01 f707 	lsl.w	r7, r1, r7
 800701a:	421f      	tst	r7, r3
 800701c:	f04f 0702 	mov.w	r7, #2
 8007020:	4629      	mov	r1, r5
 8007022:	4620      	mov	r0, r4
 8007024:	bf18      	it	ne
 8007026:	f04a 0a02 	orrne.w	sl, sl, #2
 800702a:	1b76      	subs	r6, r6, r5
 800702c:	f7ff fdf4 	bl	8006c18 <rshift>
 8007030:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007034:	f1ba 0f00 	cmp.w	sl, #0
 8007038:	d048      	beq.n	80070cc <__gethex+0x3e4>
 800703a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d015      	beq.n	800706e <__gethex+0x386>
 8007042:	2b03      	cmp	r3, #3
 8007044:	d017      	beq.n	8007076 <__gethex+0x38e>
 8007046:	2b01      	cmp	r3, #1
 8007048:	d109      	bne.n	800705e <__gethex+0x376>
 800704a:	f01a 0f02 	tst.w	sl, #2
 800704e:	d006      	beq.n	800705e <__gethex+0x376>
 8007050:	f8d9 0000 	ldr.w	r0, [r9]
 8007054:	ea4a 0a00 	orr.w	sl, sl, r0
 8007058:	f01a 0f01 	tst.w	sl, #1
 800705c:	d10e      	bne.n	800707c <__gethex+0x394>
 800705e:	f047 0710 	orr.w	r7, r7, #16
 8007062:	e033      	b.n	80070cc <__gethex+0x3e4>
 8007064:	f04f 0a01 	mov.w	sl, #1
 8007068:	e7cf      	b.n	800700a <__gethex+0x322>
 800706a:	2701      	movs	r7, #1
 800706c:	e7e2      	b.n	8007034 <__gethex+0x34c>
 800706e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007070:	f1c3 0301 	rsb	r3, r3, #1
 8007074:	9315      	str	r3, [sp, #84]	; 0x54
 8007076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0f0      	beq.n	800705e <__gethex+0x376>
 800707c:	f04f 0c00 	mov.w	ip, #0
 8007080:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007084:	f104 0314 	add.w	r3, r4, #20
 8007088:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800708c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007090:	4618      	mov	r0, r3
 8007092:	f853 2b04 	ldr.w	r2, [r3], #4
 8007096:	f1b2 3fff 	cmp.w	r2, #4294967295
 800709a:	d01c      	beq.n	80070d6 <__gethex+0x3ee>
 800709c:	3201      	adds	r2, #1
 800709e:	6002      	str	r2, [r0, #0]
 80070a0:	2f02      	cmp	r7, #2
 80070a2:	f104 0314 	add.w	r3, r4, #20
 80070a6:	d13d      	bne.n	8007124 <__gethex+0x43c>
 80070a8:	f8d8 2000 	ldr.w	r2, [r8]
 80070ac:	3a01      	subs	r2, #1
 80070ae:	42b2      	cmp	r2, r6
 80070b0:	d10a      	bne.n	80070c8 <__gethex+0x3e0>
 80070b2:	2201      	movs	r2, #1
 80070b4:	1171      	asrs	r1, r6, #5
 80070b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070ba:	f006 061f 	and.w	r6, r6, #31
 80070be:	fa02 f606 	lsl.w	r6, r2, r6
 80070c2:	421e      	tst	r6, r3
 80070c4:	bf18      	it	ne
 80070c6:	4617      	movne	r7, r2
 80070c8:	f047 0720 	orr.w	r7, r7, #32
 80070cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070ce:	601c      	str	r4, [r3, #0]
 80070d0:	9b05      	ldr	r3, [sp, #20]
 80070d2:	601d      	str	r5, [r3, #0]
 80070d4:	e69a      	b.n	8006e0c <__gethex+0x124>
 80070d6:	4299      	cmp	r1, r3
 80070d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80070dc:	d8d8      	bhi.n	8007090 <__gethex+0x3a8>
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	459b      	cmp	fp, r3
 80070e2:	db17      	blt.n	8007114 <__gethex+0x42c>
 80070e4:	6861      	ldr	r1, [r4, #4]
 80070e6:	9802      	ldr	r0, [sp, #8]
 80070e8:	3101      	adds	r1, #1
 80070ea:	f000 f935 	bl	8007358 <_Balloc>
 80070ee:	4681      	mov	r9, r0
 80070f0:	b918      	cbnz	r0, 80070fa <__gethex+0x412>
 80070f2:	4602      	mov	r2, r0
 80070f4:	2184      	movs	r1, #132	; 0x84
 80070f6:	4b19      	ldr	r3, [pc, #100]	; (800715c <__gethex+0x474>)
 80070f8:	e6ab      	b.n	8006e52 <__gethex+0x16a>
 80070fa:	6922      	ldr	r2, [r4, #16]
 80070fc:	f104 010c 	add.w	r1, r4, #12
 8007100:	3202      	adds	r2, #2
 8007102:	0092      	lsls	r2, r2, #2
 8007104:	300c      	adds	r0, #12
 8007106:	f000 f919 	bl	800733c <memcpy>
 800710a:	4621      	mov	r1, r4
 800710c:	9802      	ldr	r0, [sp, #8]
 800710e:	f000 f963 	bl	80073d8 <_Bfree>
 8007112:	464c      	mov	r4, r9
 8007114:	6923      	ldr	r3, [r4, #16]
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	6122      	str	r2, [r4, #16]
 800711a:	2201      	movs	r2, #1
 800711c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007120:	615a      	str	r2, [r3, #20]
 8007122:	e7bd      	b.n	80070a0 <__gethex+0x3b8>
 8007124:	6922      	ldr	r2, [r4, #16]
 8007126:	455a      	cmp	r2, fp
 8007128:	dd0b      	ble.n	8007142 <__gethex+0x45a>
 800712a:	2101      	movs	r1, #1
 800712c:	4620      	mov	r0, r4
 800712e:	f7ff fd73 	bl	8006c18 <rshift>
 8007132:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007136:	3501      	adds	r5, #1
 8007138:	42ab      	cmp	r3, r5
 800713a:	f6ff aed4 	blt.w	8006ee6 <__gethex+0x1fe>
 800713e:	2701      	movs	r7, #1
 8007140:	e7c2      	b.n	80070c8 <__gethex+0x3e0>
 8007142:	f016 061f 	ands.w	r6, r6, #31
 8007146:	d0fa      	beq.n	800713e <__gethex+0x456>
 8007148:	4453      	add	r3, sl
 800714a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800714e:	f000 f9f5 	bl	800753c <__hi0bits>
 8007152:	f1c6 0620 	rsb	r6, r6, #32
 8007156:	42b0      	cmp	r0, r6
 8007158:	dbe7      	blt.n	800712a <__gethex+0x442>
 800715a:	e7f0      	b.n	800713e <__gethex+0x456>
 800715c:	08008ff9 	.word	0x08008ff9

08007160 <L_shift>:
 8007160:	f1c2 0208 	rsb	r2, r2, #8
 8007164:	0092      	lsls	r2, r2, #2
 8007166:	b570      	push	{r4, r5, r6, lr}
 8007168:	f1c2 0620 	rsb	r6, r2, #32
 800716c:	6843      	ldr	r3, [r0, #4]
 800716e:	6804      	ldr	r4, [r0, #0]
 8007170:	fa03 f506 	lsl.w	r5, r3, r6
 8007174:	432c      	orrs	r4, r5
 8007176:	40d3      	lsrs	r3, r2
 8007178:	6004      	str	r4, [r0, #0]
 800717a:	f840 3f04 	str.w	r3, [r0, #4]!
 800717e:	4288      	cmp	r0, r1
 8007180:	d3f4      	bcc.n	800716c <L_shift+0xc>
 8007182:	bd70      	pop	{r4, r5, r6, pc}

08007184 <__match>:
 8007184:	b530      	push	{r4, r5, lr}
 8007186:	6803      	ldr	r3, [r0, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718e:	b914      	cbnz	r4, 8007196 <__match+0x12>
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	2001      	movs	r0, #1
 8007194:	bd30      	pop	{r4, r5, pc}
 8007196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800719a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800719e:	2d19      	cmp	r5, #25
 80071a0:	bf98      	it	ls
 80071a2:	3220      	addls	r2, #32
 80071a4:	42a2      	cmp	r2, r4
 80071a6:	d0f0      	beq.n	800718a <__match+0x6>
 80071a8:	2000      	movs	r0, #0
 80071aa:	e7f3      	b.n	8007194 <__match+0x10>

080071ac <__hexnan>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	2500      	movs	r5, #0
 80071b2:	680b      	ldr	r3, [r1, #0]
 80071b4:	4682      	mov	sl, r0
 80071b6:	115e      	asrs	r6, r3, #5
 80071b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071bc:	f013 031f 	ands.w	r3, r3, #31
 80071c0:	bf18      	it	ne
 80071c2:	3604      	addne	r6, #4
 80071c4:	1f37      	subs	r7, r6, #4
 80071c6:	46b9      	mov	r9, r7
 80071c8:	463c      	mov	r4, r7
 80071ca:	46ab      	mov	fp, r5
 80071cc:	b087      	sub	sp, #28
 80071ce:	4690      	mov	r8, r2
 80071d0:	6802      	ldr	r2, [r0, #0]
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	f846 5c04 	str.w	r5, [r6, #-4]
 80071d8:	9502      	str	r5, [sp, #8]
 80071da:	7851      	ldrb	r1, [r2, #1]
 80071dc:	1c53      	adds	r3, r2, #1
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	b341      	cbz	r1, 8007234 <__hexnan+0x88>
 80071e2:	4608      	mov	r0, r1
 80071e4:	9205      	str	r2, [sp, #20]
 80071e6:	9104      	str	r1, [sp, #16]
 80071e8:	f7ff fd69 	bl	8006cbe <__hexdig_fun>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d14f      	bne.n	8007290 <__hexnan+0xe4>
 80071f0:	9904      	ldr	r1, [sp, #16]
 80071f2:	9a05      	ldr	r2, [sp, #20]
 80071f4:	2920      	cmp	r1, #32
 80071f6:	d818      	bhi.n	800722a <__hexnan+0x7e>
 80071f8:	9b02      	ldr	r3, [sp, #8]
 80071fa:	459b      	cmp	fp, r3
 80071fc:	dd13      	ble.n	8007226 <__hexnan+0x7a>
 80071fe:	454c      	cmp	r4, r9
 8007200:	d206      	bcs.n	8007210 <__hexnan+0x64>
 8007202:	2d07      	cmp	r5, #7
 8007204:	dc04      	bgt.n	8007210 <__hexnan+0x64>
 8007206:	462a      	mov	r2, r5
 8007208:	4649      	mov	r1, r9
 800720a:	4620      	mov	r0, r4
 800720c:	f7ff ffa8 	bl	8007160 <L_shift>
 8007210:	4544      	cmp	r4, r8
 8007212:	d950      	bls.n	80072b6 <__hexnan+0x10a>
 8007214:	2300      	movs	r3, #0
 8007216:	f1a4 0904 	sub.w	r9, r4, #4
 800721a:	f844 3c04 	str.w	r3, [r4, #-4]
 800721e:	461d      	mov	r5, r3
 8007220:	464c      	mov	r4, r9
 8007222:	f8cd b008 	str.w	fp, [sp, #8]
 8007226:	9a03      	ldr	r2, [sp, #12]
 8007228:	e7d7      	b.n	80071da <__hexnan+0x2e>
 800722a:	2929      	cmp	r1, #41	; 0x29
 800722c:	d156      	bne.n	80072dc <__hexnan+0x130>
 800722e:	3202      	adds	r2, #2
 8007230:	f8ca 2000 	str.w	r2, [sl]
 8007234:	f1bb 0f00 	cmp.w	fp, #0
 8007238:	d050      	beq.n	80072dc <__hexnan+0x130>
 800723a:	454c      	cmp	r4, r9
 800723c:	d206      	bcs.n	800724c <__hexnan+0xa0>
 800723e:	2d07      	cmp	r5, #7
 8007240:	dc04      	bgt.n	800724c <__hexnan+0xa0>
 8007242:	462a      	mov	r2, r5
 8007244:	4649      	mov	r1, r9
 8007246:	4620      	mov	r0, r4
 8007248:	f7ff ff8a 	bl	8007160 <L_shift>
 800724c:	4544      	cmp	r4, r8
 800724e:	d934      	bls.n	80072ba <__hexnan+0x10e>
 8007250:	4623      	mov	r3, r4
 8007252:	f1a8 0204 	sub.w	r2, r8, #4
 8007256:	f853 1b04 	ldr.w	r1, [r3], #4
 800725a:	429f      	cmp	r7, r3
 800725c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007260:	d2f9      	bcs.n	8007256 <__hexnan+0xaa>
 8007262:	1b3b      	subs	r3, r7, r4
 8007264:	f023 0303 	bic.w	r3, r3, #3
 8007268:	3304      	adds	r3, #4
 800726a:	3401      	adds	r4, #1
 800726c:	3e03      	subs	r6, #3
 800726e:	42b4      	cmp	r4, r6
 8007270:	bf88      	it	hi
 8007272:	2304      	movhi	r3, #4
 8007274:	2200      	movs	r2, #0
 8007276:	4443      	add	r3, r8
 8007278:	f843 2b04 	str.w	r2, [r3], #4
 800727c:	429f      	cmp	r7, r3
 800727e:	d2fb      	bcs.n	8007278 <__hexnan+0xcc>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	b91b      	cbnz	r3, 800728c <__hexnan+0xe0>
 8007284:	4547      	cmp	r7, r8
 8007286:	d127      	bne.n	80072d8 <__hexnan+0x12c>
 8007288:	2301      	movs	r3, #1
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	2005      	movs	r0, #5
 800728e:	e026      	b.n	80072de <__hexnan+0x132>
 8007290:	3501      	adds	r5, #1
 8007292:	2d08      	cmp	r5, #8
 8007294:	f10b 0b01 	add.w	fp, fp, #1
 8007298:	dd06      	ble.n	80072a8 <__hexnan+0xfc>
 800729a:	4544      	cmp	r4, r8
 800729c:	d9c3      	bls.n	8007226 <__hexnan+0x7a>
 800729e:	2300      	movs	r3, #0
 80072a0:	2501      	movs	r5, #1
 80072a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80072a6:	3c04      	subs	r4, #4
 80072a8:	6822      	ldr	r2, [r4, #0]
 80072aa:	f000 000f 	and.w	r0, r0, #15
 80072ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80072b2:	6022      	str	r2, [r4, #0]
 80072b4:	e7b7      	b.n	8007226 <__hexnan+0x7a>
 80072b6:	2508      	movs	r5, #8
 80072b8:	e7b5      	b.n	8007226 <__hexnan+0x7a>
 80072ba:	9b01      	ldr	r3, [sp, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0df      	beq.n	8007280 <__hexnan+0xd4>
 80072c0:	f04f 32ff 	mov.w	r2, #4294967295
 80072c4:	f1c3 0320 	rsb	r3, r3, #32
 80072c8:	fa22 f303 	lsr.w	r3, r2, r3
 80072cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80072d0:	401a      	ands	r2, r3
 80072d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80072d6:	e7d3      	b.n	8007280 <__hexnan+0xd4>
 80072d8:	3f04      	subs	r7, #4
 80072da:	e7d1      	b.n	8007280 <__hexnan+0xd4>
 80072dc:	2004      	movs	r0, #4
 80072de:	b007      	add	sp, #28
 80072e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072e4 <_localeconv_r>:
 80072e4:	4800      	ldr	r0, [pc, #0]	; (80072e8 <_localeconv_r+0x4>)
 80072e6:	4770      	bx	lr
 80072e8:	20000170 	.word	0x20000170

080072ec <malloc>:
 80072ec:	4b02      	ldr	r3, [pc, #8]	; (80072f8 <malloc+0xc>)
 80072ee:	4601      	mov	r1, r0
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	f000 bd65 	b.w	8007dc0 <_malloc_r>
 80072f6:	bf00      	nop
 80072f8:	20000018 	.word	0x20000018

080072fc <__ascii_mbtowc>:
 80072fc:	b082      	sub	sp, #8
 80072fe:	b901      	cbnz	r1, 8007302 <__ascii_mbtowc+0x6>
 8007300:	a901      	add	r1, sp, #4
 8007302:	b142      	cbz	r2, 8007316 <__ascii_mbtowc+0x1a>
 8007304:	b14b      	cbz	r3, 800731a <__ascii_mbtowc+0x1e>
 8007306:	7813      	ldrb	r3, [r2, #0]
 8007308:	600b      	str	r3, [r1, #0]
 800730a:	7812      	ldrb	r2, [r2, #0]
 800730c:	1e10      	subs	r0, r2, #0
 800730e:	bf18      	it	ne
 8007310:	2001      	movne	r0, #1
 8007312:	b002      	add	sp, #8
 8007314:	4770      	bx	lr
 8007316:	4610      	mov	r0, r2
 8007318:	e7fb      	b.n	8007312 <__ascii_mbtowc+0x16>
 800731a:	f06f 0001 	mvn.w	r0, #1
 800731e:	e7f8      	b.n	8007312 <__ascii_mbtowc+0x16>

08007320 <memchr>:
 8007320:	4603      	mov	r3, r0
 8007322:	b510      	push	{r4, lr}
 8007324:	b2c9      	uxtb	r1, r1
 8007326:	4402      	add	r2, r0
 8007328:	4293      	cmp	r3, r2
 800732a:	4618      	mov	r0, r3
 800732c:	d101      	bne.n	8007332 <memchr+0x12>
 800732e:	2000      	movs	r0, #0
 8007330:	e003      	b.n	800733a <memchr+0x1a>
 8007332:	7804      	ldrb	r4, [r0, #0]
 8007334:	3301      	adds	r3, #1
 8007336:	428c      	cmp	r4, r1
 8007338:	d1f6      	bne.n	8007328 <memchr+0x8>
 800733a:	bd10      	pop	{r4, pc}

0800733c <memcpy>:
 800733c:	440a      	add	r2, r1
 800733e:	4291      	cmp	r1, r2
 8007340:	f100 33ff 	add.w	r3, r0, #4294967295
 8007344:	d100      	bne.n	8007348 <memcpy+0xc>
 8007346:	4770      	bx	lr
 8007348:	b510      	push	{r4, lr}
 800734a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734e:	4291      	cmp	r1, r2
 8007350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007354:	d1f9      	bne.n	800734a <memcpy+0xe>
 8007356:	bd10      	pop	{r4, pc}

08007358 <_Balloc>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	b976      	cbnz	r6, 8007380 <_Balloc+0x28>
 8007362:	2010      	movs	r0, #16
 8007364:	f7ff ffc2 	bl	80072ec <malloc>
 8007368:	4602      	mov	r2, r0
 800736a:	6260      	str	r0, [r4, #36]	; 0x24
 800736c:	b920      	cbnz	r0, 8007378 <_Balloc+0x20>
 800736e:	2166      	movs	r1, #102	; 0x66
 8007370:	4b17      	ldr	r3, [pc, #92]	; (80073d0 <_Balloc+0x78>)
 8007372:	4818      	ldr	r0, [pc, #96]	; (80073d4 <_Balloc+0x7c>)
 8007374:	f7fe fda6 	bl	8005ec4 <__assert_func>
 8007378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800737c:	6006      	str	r6, [r0, #0]
 800737e:	60c6      	str	r6, [r0, #12]
 8007380:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007382:	68f3      	ldr	r3, [r6, #12]
 8007384:	b183      	cbz	r3, 80073a8 <_Balloc+0x50>
 8007386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800738e:	b9b8      	cbnz	r0, 80073c0 <_Balloc+0x68>
 8007390:	2101      	movs	r1, #1
 8007392:	fa01 f605 	lsl.w	r6, r1, r5
 8007396:	1d72      	adds	r2, r6, #5
 8007398:	4620      	mov	r0, r4
 800739a:	0092      	lsls	r2, r2, #2
 800739c:	f000 fc94 	bl	8007cc8 <_calloc_r>
 80073a0:	b160      	cbz	r0, 80073bc <_Balloc+0x64>
 80073a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073a6:	e00e      	b.n	80073c6 <_Balloc+0x6e>
 80073a8:	2221      	movs	r2, #33	; 0x21
 80073aa:	2104      	movs	r1, #4
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fc8b 	bl	8007cc8 <_calloc_r>
 80073b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b4:	60f0      	str	r0, [r6, #12]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e4      	bne.n	8007386 <_Balloc+0x2e>
 80073bc:	2000      	movs	r0, #0
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	6802      	ldr	r2, [r0, #0]
 80073c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073c6:	2300      	movs	r3, #0
 80073c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073cc:	e7f7      	b.n	80073be <_Balloc+0x66>
 80073ce:	bf00      	nop
 80073d0:	08008de0 	.word	0x08008de0
 80073d4:	08009084 	.word	0x08009084

080073d8 <_Bfree>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073dc:	4605      	mov	r5, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	b976      	cbnz	r6, 8007400 <_Bfree+0x28>
 80073e2:	2010      	movs	r0, #16
 80073e4:	f7ff ff82 	bl	80072ec <malloc>
 80073e8:	4602      	mov	r2, r0
 80073ea:	6268      	str	r0, [r5, #36]	; 0x24
 80073ec:	b920      	cbnz	r0, 80073f8 <_Bfree+0x20>
 80073ee:	218a      	movs	r1, #138	; 0x8a
 80073f0:	4b08      	ldr	r3, [pc, #32]	; (8007414 <_Bfree+0x3c>)
 80073f2:	4809      	ldr	r0, [pc, #36]	; (8007418 <_Bfree+0x40>)
 80073f4:	f7fe fd66 	bl	8005ec4 <__assert_func>
 80073f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073fc:	6006      	str	r6, [r0, #0]
 80073fe:	60c6      	str	r6, [r0, #12]
 8007400:	b13c      	cbz	r4, 8007412 <_Bfree+0x3a>
 8007402:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007404:	6862      	ldr	r2, [r4, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800740c:	6021      	str	r1, [r4, #0]
 800740e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	08008de0 	.word	0x08008de0
 8007418:	08009084 	.word	0x08009084

0800741c <__multadd>:
 800741c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007420:	4607      	mov	r7, r0
 8007422:	460c      	mov	r4, r1
 8007424:	461e      	mov	r6, r3
 8007426:	2000      	movs	r0, #0
 8007428:	690d      	ldr	r5, [r1, #16]
 800742a:	f101 0c14 	add.w	ip, r1, #20
 800742e:	f8dc 3000 	ldr.w	r3, [ip]
 8007432:	3001      	adds	r0, #1
 8007434:	b299      	uxth	r1, r3
 8007436:	fb02 6101 	mla	r1, r2, r1, r6
 800743a:	0c1e      	lsrs	r6, r3, #16
 800743c:	0c0b      	lsrs	r3, r1, #16
 800743e:	fb02 3306 	mla	r3, r2, r6, r3
 8007442:	b289      	uxth	r1, r1
 8007444:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007448:	4285      	cmp	r5, r0
 800744a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800744e:	f84c 1b04 	str.w	r1, [ip], #4
 8007452:	dcec      	bgt.n	800742e <__multadd+0x12>
 8007454:	b30e      	cbz	r6, 800749a <__multadd+0x7e>
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	42ab      	cmp	r3, r5
 800745a:	dc19      	bgt.n	8007490 <__multadd+0x74>
 800745c:	6861      	ldr	r1, [r4, #4]
 800745e:	4638      	mov	r0, r7
 8007460:	3101      	adds	r1, #1
 8007462:	f7ff ff79 	bl	8007358 <_Balloc>
 8007466:	4680      	mov	r8, r0
 8007468:	b928      	cbnz	r0, 8007476 <__multadd+0x5a>
 800746a:	4602      	mov	r2, r0
 800746c:	21b5      	movs	r1, #181	; 0xb5
 800746e:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <__multadd+0x84>)
 8007470:	480c      	ldr	r0, [pc, #48]	; (80074a4 <__multadd+0x88>)
 8007472:	f7fe fd27 	bl	8005ec4 <__assert_func>
 8007476:	6922      	ldr	r2, [r4, #16]
 8007478:	f104 010c 	add.w	r1, r4, #12
 800747c:	3202      	adds	r2, #2
 800747e:	0092      	lsls	r2, r2, #2
 8007480:	300c      	adds	r0, #12
 8007482:	f7ff ff5b 	bl	800733c <memcpy>
 8007486:	4621      	mov	r1, r4
 8007488:	4638      	mov	r0, r7
 800748a:	f7ff ffa5 	bl	80073d8 <_Bfree>
 800748e:	4644      	mov	r4, r8
 8007490:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007494:	3501      	adds	r5, #1
 8007496:	615e      	str	r6, [r3, #20]
 8007498:	6125      	str	r5, [r4, #16]
 800749a:	4620      	mov	r0, r4
 800749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a0:	08008ff9 	.word	0x08008ff9
 80074a4:	08009084 	.word	0x08009084

080074a8 <__s2b>:
 80074a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ac:	4615      	mov	r5, r2
 80074ae:	2209      	movs	r2, #9
 80074b0:	461f      	mov	r7, r3
 80074b2:	3308      	adds	r3, #8
 80074b4:	460c      	mov	r4, r1
 80074b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ba:	4606      	mov	r6, r0
 80074bc:	2201      	movs	r2, #1
 80074be:	2100      	movs	r1, #0
 80074c0:	429a      	cmp	r2, r3
 80074c2:	db09      	blt.n	80074d8 <__s2b+0x30>
 80074c4:	4630      	mov	r0, r6
 80074c6:	f7ff ff47 	bl	8007358 <_Balloc>
 80074ca:	b940      	cbnz	r0, 80074de <__s2b+0x36>
 80074cc:	4602      	mov	r2, r0
 80074ce:	21ce      	movs	r1, #206	; 0xce
 80074d0:	4b18      	ldr	r3, [pc, #96]	; (8007534 <__s2b+0x8c>)
 80074d2:	4819      	ldr	r0, [pc, #100]	; (8007538 <__s2b+0x90>)
 80074d4:	f7fe fcf6 	bl	8005ec4 <__assert_func>
 80074d8:	0052      	lsls	r2, r2, #1
 80074da:	3101      	adds	r1, #1
 80074dc:	e7f0      	b.n	80074c0 <__s2b+0x18>
 80074de:	9b08      	ldr	r3, [sp, #32]
 80074e0:	2d09      	cmp	r5, #9
 80074e2:	6143      	str	r3, [r0, #20]
 80074e4:	f04f 0301 	mov.w	r3, #1
 80074e8:	6103      	str	r3, [r0, #16]
 80074ea:	dd16      	ble.n	800751a <__s2b+0x72>
 80074ec:	f104 0909 	add.w	r9, r4, #9
 80074f0:	46c8      	mov	r8, r9
 80074f2:	442c      	add	r4, r5
 80074f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80074f8:	4601      	mov	r1, r0
 80074fa:	220a      	movs	r2, #10
 80074fc:	4630      	mov	r0, r6
 80074fe:	3b30      	subs	r3, #48	; 0x30
 8007500:	f7ff ff8c 	bl	800741c <__multadd>
 8007504:	45a0      	cmp	r8, r4
 8007506:	d1f5      	bne.n	80074f4 <__s2b+0x4c>
 8007508:	f1a5 0408 	sub.w	r4, r5, #8
 800750c:	444c      	add	r4, r9
 800750e:	1b2d      	subs	r5, r5, r4
 8007510:	1963      	adds	r3, r4, r5
 8007512:	42bb      	cmp	r3, r7
 8007514:	db04      	blt.n	8007520 <__s2b+0x78>
 8007516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751a:	2509      	movs	r5, #9
 800751c:	340a      	adds	r4, #10
 800751e:	e7f6      	b.n	800750e <__s2b+0x66>
 8007520:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007524:	4601      	mov	r1, r0
 8007526:	220a      	movs	r2, #10
 8007528:	4630      	mov	r0, r6
 800752a:	3b30      	subs	r3, #48	; 0x30
 800752c:	f7ff ff76 	bl	800741c <__multadd>
 8007530:	e7ee      	b.n	8007510 <__s2b+0x68>
 8007532:	bf00      	nop
 8007534:	08008ff9 	.word	0x08008ff9
 8007538:	08009084 	.word	0x08009084

0800753c <__hi0bits>:
 800753c:	0c02      	lsrs	r2, r0, #16
 800753e:	0412      	lsls	r2, r2, #16
 8007540:	4603      	mov	r3, r0
 8007542:	b9ca      	cbnz	r2, 8007578 <__hi0bits+0x3c>
 8007544:	0403      	lsls	r3, r0, #16
 8007546:	2010      	movs	r0, #16
 8007548:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800754c:	bf04      	itt	eq
 800754e:	021b      	lsleq	r3, r3, #8
 8007550:	3008      	addeq	r0, #8
 8007552:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007556:	bf04      	itt	eq
 8007558:	011b      	lsleq	r3, r3, #4
 800755a:	3004      	addeq	r0, #4
 800755c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007560:	bf04      	itt	eq
 8007562:	009b      	lsleq	r3, r3, #2
 8007564:	3002      	addeq	r0, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	db05      	blt.n	8007576 <__hi0bits+0x3a>
 800756a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800756e:	f100 0001 	add.w	r0, r0, #1
 8007572:	bf08      	it	eq
 8007574:	2020      	moveq	r0, #32
 8007576:	4770      	bx	lr
 8007578:	2000      	movs	r0, #0
 800757a:	e7e5      	b.n	8007548 <__hi0bits+0xc>

0800757c <__lo0bits>:
 800757c:	6803      	ldr	r3, [r0, #0]
 800757e:	4602      	mov	r2, r0
 8007580:	f013 0007 	ands.w	r0, r3, #7
 8007584:	d00b      	beq.n	800759e <__lo0bits+0x22>
 8007586:	07d9      	lsls	r1, r3, #31
 8007588:	d421      	bmi.n	80075ce <__lo0bits+0x52>
 800758a:	0798      	lsls	r0, r3, #30
 800758c:	bf49      	itett	mi
 800758e:	085b      	lsrmi	r3, r3, #1
 8007590:	089b      	lsrpl	r3, r3, #2
 8007592:	2001      	movmi	r0, #1
 8007594:	6013      	strmi	r3, [r2, #0]
 8007596:	bf5c      	itt	pl
 8007598:	2002      	movpl	r0, #2
 800759a:	6013      	strpl	r3, [r2, #0]
 800759c:	4770      	bx	lr
 800759e:	b299      	uxth	r1, r3
 80075a0:	b909      	cbnz	r1, 80075a6 <__lo0bits+0x2a>
 80075a2:	2010      	movs	r0, #16
 80075a4:	0c1b      	lsrs	r3, r3, #16
 80075a6:	b2d9      	uxtb	r1, r3
 80075a8:	b909      	cbnz	r1, 80075ae <__lo0bits+0x32>
 80075aa:	3008      	adds	r0, #8
 80075ac:	0a1b      	lsrs	r3, r3, #8
 80075ae:	0719      	lsls	r1, r3, #28
 80075b0:	bf04      	itt	eq
 80075b2:	091b      	lsreq	r3, r3, #4
 80075b4:	3004      	addeq	r0, #4
 80075b6:	0799      	lsls	r1, r3, #30
 80075b8:	bf04      	itt	eq
 80075ba:	089b      	lsreq	r3, r3, #2
 80075bc:	3002      	addeq	r0, #2
 80075be:	07d9      	lsls	r1, r3, #31
 80075c0:	d403      	bmi.n	80075ca <__lo0bits+0x4e>
 80075c2:	085b      	lsrs	r3, r3, #1
 80075c4:	f100 0001 	add.w	r0, r0, #1
 80075c8:	d003      	beq.n	80075d2 <__lo0bits+0x56>
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	4770      	bx	lr
 80075ce:	2000      	movs	r0, #0
 80075d0:	4770      	bx	lr
 80075d2:	2020      	movs	r0, #32
 80075d4:	4770      	bx	lr
	...

080075d8 <__i2b>:
 80075d8:	b510      	push	{r4, lr}
 80075da:	460c      	mov	r4, r1
 80075dc:	2101      	movs	r1, #1
 80075de:	f7ff febb 	bl	8007358 <_Balloc>
 80075e2:	4602      	mov	r2, r0
 80075e4:	b928      	cbnz	r0, 80075f2 <__i2b+0x1a>
 80075e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075ea:	4b04      	ldr	r3, [pc, #16]	; (80075fc <__i2b+0x24>)
 80075ec:	4804      	ldr	r0, [pc, #16]	; (8007600 <__i2b+0x28>)
 80075ee:	f7fe fc69 	bl	8005ec4 <__assert_func>
 80075f2:	2301      	movs	r3, #1
 80075f4:	6144      	str	r4, [r0, #20]
 80075f6:	6103      	str	r3, [r0, #16]
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	08008ff9 	.word	0x08008ff9
 8007600:	08009084 	.word	0x08009084

08007604 <__multiply>:
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	4691      	mov	r9, r2
 800760a:	690a      	ldr	r2, [r1, #16]
 800760c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007610:	460c      	mov	r4, r1
 8007612:	429a      	cmp	r2, r3
 8007614:	bfbe      	ittt	lt
 8007616:	460b      	movlt	r3, r1
 8007618:	464c      	movlt	r4, r9
 800761a:	4699      	movlt	r9, r3
 800761c:	6927      	ldr	r7, [r4, #16]
 800761e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007622:	68a3      	ldr	r3, [r4, #8]
 8007624:	6861      	ldr	r1, [r4, #4]
 8007626:	eb07 060a 	add.w	r6, r7, sl
 800762a:	42b3      	cmp	r3, r6
 800762c:	b085      	sub	sp, #20
 800762e:	bfb8      	it	lt
 8007630:	3101      	addlt	r1, #1
 8007632:	f7ff fe91 	bl	8007358 <_Balloc>
 8007636:	b930      	cbnz	r0, 8007646 <__multiply+0x42>
 8007638:	4602      	mov	r2, r0
 800763a:	f240 115d 	movw	r1, #349	; 0x15d
 800763e:	4b43      	ldr	r3, [pc, #268]	; (800774c <__multiply+0x148>)
 8007640:	4843      	ldr	r0, [pc, #268]	; (8007750 <__multiply+0x14c>)
 8007642:	f7fe fc3f 	bl	8005ec4 <__assert_func>
 8007646:	f100 0514 	add.w	r5, r0, #20
 800764a:	462b      	mov	r3, r5
 800764c:	2200      	movs	r2, #0
 800764e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007652:	4543      	cmp	r3, r8
 8007654:	d321      	bcc.n	800769a <__multiply+0x96>
 8007656:	f104 0314 	add.w	r3, r4, #20
 800765a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800765e:	f109 0314 	add.w	r3, r9, #20
 8007662:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007666:	9202      	str	r2, [sp, #8]
 8007668:	1b3a      	subs	r2, r7, r4
 800766a:	3a15      	subs	r2, #21
 800766c:	f022 0203 	bic.w	r2, r2, #3
 8007670:	3204      	adds	r2, #4
 8007672:	f104 0115 	add.w	r1, r4, #21
 8007676:	428f      	cmp	r7, r1
 8007678:	bf38      	it	cc
 800767a:	2204      	movcc	r2, #4
 800767c:	9201      	str	r2, [sp, #4]
 800767e:	9a02      	ldr	r2, [sp, #8]
 8007680:	9303      	str	r3, [sp, #12]
 8007682:	429a      	cmp	r2, r3
 8007684:	d80c      	bhi.n	80076a0 <__multiply+0x9c>
 8007686:	2e00      	cmp	r6, #0
 8007688:	dd03      	ble.n	8007692 <__multiply+0x8e>
 800768a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800768e:	2b00      	cmp	r3, #0
 8007690:	d059      	beq.n	8007746 <__multiply+0x142>
 8007692:	6106      	str	r6, [r0, #16]
 8007694:	b005      	add	sp, #20
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769a:	f843 2b04 	str.w	r2, [r3], #4
 800769e:	e7d8      	b.n	8007652 <__multiply+0x4e>
 80076a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80076a4:	f1ba 0f00 	cmp.w	sl, #0
 80076a8:	d023      	beq.n	80076f2 <__multiply+0xee>
 80076aa:	46a9      	mov	r9, r5
 80076ac:	f04f 0c00 	mov.w	ip, #0
 80076b0:	f104 0e14 	add.w	lr, r4, #20
 80076b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076b8:	f8d9 1000 	ldr.w	r1, [r9]
 80076bc:	fa1f fb82 	uxth.w	fp, r2
 80076c0:	b289      	uxth	r1, r1
 80076c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80076c6:	4461      	add	r1, ip
 80076c8:	f8d9 c000 	ldr.w	ip, [r9]
 80076cc:	0c12      	lsrs	r2, r2, #16
 80076ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80076d2:	fb0a c202 	mla	r2, sl, r2, ip
 80076d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076da:	b289      	uxth	r1, r1
 80076dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076e0:	4577      	cmp	r7, lr
 80076e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076e6:	f849 1b04 	str.w	r1, [r9], #4
 80076ea:	d8e3      	bhi.n	80076b4 <__multiply+0xb0>
 80076ec:	9a01      	ldr	r2, [sp, #4]
 80076ee:	f845 c002 	str.w	ip, [r5, r2]
 80076f2:	9a03      	ldr	r2, [sp, #12]
 80076f4:	3304      	adds	r3, #4
 80076f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076fa:	f1b9 0f00 	cmp.w	r9, #0
 80076fe:	d020      	beq.n	8007742 <__multiply+0x13e>
 8007700:	46ae      	mov	lr, r5
 8007702:	f04f 0a00 	mov.w	sl, #0
 8007706:	6829      	ldr	r1, [r5, #0]
 8007708:	f104 0c14 	add.w	ip, r4, #20
 800770c:	f8bc b000 	ldrh.w	fp, [ip]
 8007710:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007714:	b289      	uxth	r1, r1
 8007716:	fb09 220b 	mla	r2, r9, fp, r2
 800771a:	4492      	add	sl, r2
 800771c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007720:	f84e 1b04 	str.w	r1, [lr], #4
 8007724:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007728:	f8be 1000 	ldrh.w	r1, [lr]
 800772c:	0c12      	lsrs	r2, r2, #16
 800772e:	fb09 1102 	mla	r1, r9, r2, r1
 8007732:	4567      	cmp	r7, ip
 8007734:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007738:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800773c:	d8e6      	bhi.n	800770c <__multiply+0x108>
 800773e:	9a01      	ldr	r2, [sp, #4]
 8007740:	50a9      	str	r1, [r5, r2]
 8007742:	3504      	adds	r5, #4
 8007744:	e79b      	b.n	800767e <__multiply+0x7a>
 8007746:	3e01      	subs	r6, #1
 8007748:	e79d      	b.n	8007686 <__multiply+0x82>
 800774a:	bf00      	nop
 800774c:	08008ff9 	.word	0x08008ff9
 8007750:	08009084 	.word	0x08009084

08007754 <__pow5mult>:
 8007754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007758:	4615      	mov	r5, r2
 800775a:	f012 0203 	ands.w	r2, r2, #3
 800775e:	4606      	mov	r6, r0
 8007760:	460f      	mov	r7, r1
 8007762:	d007      	beq.n	8007774 <__pow5mult+0x20>
 8007764:	4c25      	ldr	r4, [pc, #148]	; (80077fc <__pow5mult+0xa8>)
 8007766:	3a01      	subs	r2, #1
 8007768:	2300      	movs	r3, #0
 800776a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800776e:	f7ff fe55 	bl	800741c <__multadd>
 8007772:	4607      	mov	r7, r0
 8007774:	10ad      	asrs	r5, r5, #2
 8007776:	d03d      	beq.n	80077f4 <__pow5mult+0xa0>
 8007778:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800777a:	b97c      	cbnz	r4, 800779c <__pow5mult+0x48>
 800777c:	2010      	movs	r0, #16
 800777e:	f7ff fdb5 	bl	80072ec <malloc>
 8007782:	4602      	mov	r2, r0
 8007784:	6270      	str	r0, [r6, #36]	; 0x24
 8007786:	b928      	cbnz	r0, 8007794 <__pow5mult+0x40>
 8007788:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800778c:	4b1c      	ldr	r3, [pc, #112]	; (8007800 <__pow5mult+0xac>)
 800778e:	481d      	ldr	r0, [pc, #116]	; (8007804 <__pow5mult+0xb0>)
 8007790:	f7fe fb98 	bl	8005ec4 <__assert_func>
 8007794:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007798:	6004      	str	r4, [r0, #0]
 800779a:	60c4      	str	r4, [r0, #12]
 800779c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80077a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077a4:	b94c      	cbnz	r4, 80077ba <__pow5mult+0x66>
 80077a6:	f240 2171 	movw	r1, #625	; 0x271
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7ff ff14 	bl	80075d8 <__i2b>
 80077b0:	2300      	movs	r3, #0
 80077b2:	4604      	mov	r4, r0
 80077b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80077b8:	6003      	str	r3, [r0, #0]
 80077ba:	f04f 0900 	mov.w	r9, #0
 80077be:	07eb      	lsls	r3, r5, #31
 80077c0:	d50a      	bpl.n	80077d8 <__pow5mult+0x84>
 80077c2:	4639      	mov	r1, r7
 80077c4:	4622      	mov	r2, r4
 80077c6:	4630      	mov	r0, r6
 80077c8:	f7ff ff1c 	bl	8007604 <__multiply>
 80077cc:	4680      	mov	r8, r0
 80077ce:	4639      	mov	r1, r7
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff fe01 	bl	80073d8 <_Bfree>
 80077d6:	4647      	mov	r7, r8
 80077d8:	106d      	asrs	r5, r5, #1
 80077da:	d00b      	beq.n	80077f4 <__pow5mult+0xa0>
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	b938      	cbnz	r0, 80077f0 <__pow5mult+0x9c>
 80077e0:	4622      	mov	r2, r4
 80077e2:	4621      	mov	r1, r4
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7ff ff0d 	bl	8007604 <__multiply>
 80077ea:	6020      	str	r0, [r4, #0]
 80077ec:	f8c0 9000 	str.w	r9, [r0]
 80077f0:	4604      	mov	r4, r0
 80077f2:	e7e4      	b.n	80077be <__pow5mult+0x6a>
 80077f4:	4638      	mov	r0, r7
 80077f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fa:	bf00      	nop
 80077fc:	080091d0 	.word	0x080091d0
 8007800:	08008de0 	.word	0x08008de0
 8007804:	08009084 	.word	0x08009084

08007808 <__lshift>:
 8007808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800780c:	460c      	mov	r4, r1
 800780e:	4607      	mov	r7, r0
 8007810:	4691      	mov	r9, r2
 8007812:	6923      	ldr	r3, [r4, #16]
 8007814:	6849      	ldr	r1, [r1, #4]
 8007816:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800781a:	68a3      	ldr	r3, [r4, #8]
 800781c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007820:	f108 0601 	add.w	r6, r8, #1
 8007824:	42b3      	cmp	r3, r6
 8007826:	db0b      	blt.n	8007840 <__lshift+0x38>
 8007828:	4638      	mov	r0, r7
 800782a:	f7ff fd95 	bl	8007358 <_Balloc>
 800782e:	4605      	mov	r5, r0
 8007830:	b948      	cbnz	r0, 8007846 <__lshift+0x3e>
 8007832:	4602      	mov	r2, r0
 8007834:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007838:	4b29      	ldr	r3, [pc, #164]	; (80078e0 <__lshift+0xd8>)
 800783a:	482a      	ldr	r0, [pc, #168]	; (80078e4 <__lshift+0xdc>)
 800783c:	f7fe fb42 	bl	8005ec4 <__assert_func>
 8007840:	3101      	adds	r1, #1
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	e7ee      	b.n	8007824 <__lshift+0x1c>
 8007846:	2300      	movs	r3, #0
 8007848:	f100 0114 	add.w	r1, r0, #20
 800784c:	f100 0210 	add.w	r2, r0, #16
 8007850:	4618      	mov	r0, r3
 8007852:	4553      	cmp	r3, sl
 8007854:	db37      	blt.n	80078c6 <__lshift+0xbe>
 8007856:	6920      	ldr	r0, [r4, #16]
 8007858:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800785c:	f104 0314 	add.w	r3, r4, #20
 8007860:	f019 091f 	ands.w	r9, r9, #31
 8007864:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007868:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800786c:	d02f      	beq.n	80078ce <__lshift+0xc6>
 800786e:	468a      	mov	sl, r1
 8007870:	f04f 0c00 	mov.w	ip, #0
 8007874:	f1c9 0e20 	rsb	lr, r9, #32
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	fa02 f209 	lsl.w	r2, r2, r9
 800787e:	ea42 020c 	orr.w	r2, r2, ip
 8007882:	f84a 2b04 	str.w	r2, [sl], #4
 8007886:	f853 2b04 	ldr.w	r2, [r3], #4
 800788a:	4298      	cmp	r0, r3
 800788c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007890:	d8f2      	bhi.n	8007878 <__lshift+0x70>
 8007892:	1b03      	subs	r3, r0, r4
 8007894:	3b15      	subs	r3, #21
 8007896:	f023 0303 	bic.w	r3, r3, #3
 800789a:	3304      	adds	r3, #4
 800789c:	f104 0215 	add.w	r2, r4, #21
 80078a0:	4290      	cmp	r0, r2
 80078a2:	bf38      	it	cc
 80078a4:	2304      	movcc	r3, #4
 80078a6:	f841 c003 	str.w	ip, [r1, r3]
 80078aa:	f1bc 0f00 	cmp.w	ip, #0
 80078ae:	d001      	beq.n	80078b4 <__lshift+0xac>
 80078b0:	f108 0602 	add.w	r6, r8, #2
 80078b4:	3e01      	subs	r6, #1
 80078b6:	4638      	mov	r0, r7
 80078b8:	4621      	mov	r1, r4
 80078ba:	612e      	str	r6, [r5, #16]
 80078bc:	f7ff fd8c 	bl	80073d8 <_Bfree>
 80078c0:	4628      	mov	r0, r5
 80078c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80078ca:	3301      	adds	r3, #1
 80078cc:	e7c1      	b.n	8007852 <__lshift+0x4a>
 80078ce:	3904      	subs	r1, #4
 80078d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d4:	4298      	cmp	r0, r3
 80078d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80078da:	d8f9      	bhi.n	80078d0 <__lshift+0xc8>
 80078dc:	e7ea      	b.n	80078b4 <__lshift+0xac>
 80078de:	bf00      	nop
 80078e0:	08008ff9 	.word	0x08008ff9
 80078e4:	08009084 	.word	0x08009084

080078e8 <__mcmp>:
 80078e8:	4603      	mov	r3, r0
 80078ea:	690a      	ldr	r2, [r1, #16]
 80078ec:	6900      	ldr	r0, [r0, #16]
 80078ee:	b530      	push	{r4, r5, lr}
 80078f0:	1a80      	subs	r0, r0, r2
 80078f2:	d10d      	bne.n	8007910 <__mcmp+0x28>
 80078f4:	3314      	adds	r3, #20
 80078f6:	3114      	adds	r1, #20
 80078f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007900:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007904:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007908:	4295      	cmp	r5, r2
 800790a:	d002      	beq.n	8007912 <__mcmp+0x2a>
 800790c:	d304      	bcc.n	8007918 <__mcmp+0x30>
 800790e:	2001      	movs	r0, #1
 8007910:	bd30      	pop	{r4, r5, pc}
 8007912:	42a3      	cmp	r3, r4
 8007914:	d3f4      	bcc.n	8007900 <__mcmp+0x18>
 8007916:	e7fb      	b.n	8007910 <__mcmp+0x28>
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e7f8      	b.n	8007910 <__mcmp+0x28>
	...

08007920 <__mdiff>:
 8007920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	460d      	mov	r5, r1
 8007926:	4607      	mov	r7, r0
 8007928:	4611      	mov	r1, r2
 800792a:	4628      	mov	r0, r5
 800792c:	4614      	mov	r4, r2
 800792e:	f7ff ffdb 	bl	80078e8 <__mcmp>
 8007932:	1e06      	subs	r6, r0, #0
 8007934:	d111      	bne.n	800795a <__mdiff+0x3a>
 8007936:	4631      	mov	r1, r6
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff fd0d 	bl	8007358 <_Balloc>
 800793e:	4602      	mov	r2, r0
 8007940:	b928      	cbnz	r0, 800794e <__mdiff+0x2e>
 8007942:	f240 2132 	movw	r1, #562	; 0x232
 8007946:	4b3a      	ldr	r3, [pc, #232]	; (8007a30 <__mdiff+0x110>)
 8007948:	483a      	ldr	r0, [pc, #232]	; (8007a34 <__mdiff+0x114>)
 800794a:	f7fe fabb 	bl	8005ec4 <__assert_func>
 800794e:	2301      	movs	r3, #1
 8007950:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007954:	4610      	mov	r0, r2
 8007956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795a:	bfa4      	itt	ge
 800795c:	4623      	movge	r3, r4
 800795e:	462c      	movge	r4, r5
 8007960:	4638      	mov	r0, r7
 8007962:	6861      	ldr	r1, [r4, #4]
 8007964:	bfa6      	itte	ge
 8007966:	461d      	movge	r5, r3
 8007968:	2600      	movge	r6, #0
 800796a:	2601      	movlt	r6, #1
 800796c:	f7ff fcf4 	bl	8007358 <_Balloc>
 8007970:	4602      	mov	r2, r0
 8007972:	b918      	cbnz	r0, 800797c <__mdiff+0x5c>
 8007974:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007978:	4b2d      	ldr	r3, [pc, #180]	; (8007a30 <__mdiff+0x110>)
 800797a:	e7e5      	b.n	8007948 <__mdiff+0x28>
 800797c:	f102 0814 	add.w	r8, r2, #20
 8007980:	46c2      	mov	sl, r8
 8007982:	f04f 0c00 	mov.w	ip, #0
 8007986:	6927      	ldr	r7, [r4, #16]
 8007988:	60c6      	str	r6, [r0, #12]
 800798a:	692e      	ldr	r6, [r5, #16]
 800798c:	f104 0014 	add.w	r0, r4, #20
 8007990:	f105 0914 	add.w	r9, r5, #20
 8007994:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007998:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800799c:	3410      	adds	r4, #16
 800799e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80079a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80079a6:	fa1f f18b 	uxth.w	r1, fp
 80079aa:	448c      	add	ip, r1
 80079ac:	b299      	uxth	r1, r3
 80079ae:	0c1b      	lsrs	r3, r3, #16
 80079b0:	ebac 0101 	sub.w	r1, ip, r1
 80079b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079bc:	b289      	uxth	r1, r1
 80079be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80079c2:	454e      	cmp	r6, r9
 80079c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80079c8:	f84a 3b04 	str.w	r3, [sl], #4
 80079cc:	d8e7      	bhi.n	800799e <__mdiff+0x7e>
 80079ce:	1b73      	subs	r3, r6, r5
 80079d0:	3b15      	subs	r3, #21
 80079d2:	f023 0303 	bic.w	r3, r3, #3
 80079d6:	3515      	adds	r5, #21
 80079d8:	3304      	adds	r3, #4
 80079da:	42ae      	cmp	r6, r5
 80079dc:	bf38      	it	cc
 80079de:	2304      	movcc	r3, #4
 80079e0:	4418      	add	r0, r3
 80079e2:	4443      	add	r3, r8
 80079e4:	461e      	mov	r6, r3
 80079e6:	4605      	mov	r5, r0
 80079e8:	4575      	cmp	r5, lr
 80079ea:	d30e      	bcc.n	8007a0a <__mdiff+0xea>
 80079ec:	f10e 0103 	add.w	r1, lr, #3
 80079f0:	1a09      	subs	r1, r1, r0
 80079f2:	f021 0103 	bic.w	r1, r1, #3
 80079f6:	3803      	subs	r0, #3
 80079f8:	4586      	cmp	lr, r0
 80079fa:	bf38      	it	cc
 80079fc:	2100      	movcc	r1, #0
 80079fe:	4419      	add	r1, r3
 8007a00:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007a04:	b18b      	cbz	r3, 8007a2a <__mdiff+0x10a>
 8007a06:	6117      	str	r7, [r2, #16]
 8007a08:	e7a4      	b.n	8007954 <__mdiff+0x34>
 8007a0a:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a0e:	fa1f f188 	uxth.w	r1, r8
 8007a12:	4461      	add	r1, ip
 8007a14:	140c      	asrs	r4, r1, #16
 8007a16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a1a:	b289      	uxth	r1, r1
 8007a1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a20:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007a24:	f846 1b04 	str.w	r1, [r6], #4
 8007a28:	e7de      	b.n	80079e8 <__mdiff+0xc8>
 8007a2a:	3f01      	subs	r7, #1
 8007a2c:	e7e8      	b.n	8007a00 <__mdiff+0xe0>
 8007a2e:	bf00      	nop
 8007a30:	08008ff9 	.word	0x08008ff9
 8007a34:	08009084 	.word	0x08009084

08007a38 <__ulp>:
 8007a38:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <__ulp+0x48>)
 8007a3a:	400b      	ands	r3, r1
 8007a3c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dd02      	ble.n	8007a4a <__ulp+0x12>
 8007a44:	2000      	movs	r0, #0
 8007a46:	4619      	mov	r1, r3
 8007a48:	4770      	bx	lr
 8007a4a:	425b      	negs	r3, r3
 8007a4c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a50:	f04f 0000 	mov.w	r0, #0
 8007a54:	f04f 0100 	mov.w	r1, #0
 8007a58:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a5c:	da04      	bge.n	8007a68 <__ulp+0x30>
 8007a5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a62:	fa43 f102 	asr.w	r1, r3, r2
 8007a66:	4770      	bx	lr
 8007a68:	f1a2 0314 	sub.w	r3, r2, #20
 8007a6c:	2b1e      	cmp	r3, #30
 8007a6e:	bfd6      	itet	le
 8007a70:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007a74:	2301      	movgt	r3, #1
 8007a76:	fa22 f303 	lsrle.w	r3, r2, r3
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	7ff00000 	.word	0x7ff00000

08007a84 <__b2d>:
 8007a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a88:	6907      	ldr	r7, [r0, #16]
 8007a8a:	f100 0914 	add.w	r9, r0, #20
 8007a8e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007a92:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007a96:	f1a7 0804 	sub.w	r8, r7, #4
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7ff fd4e 	bl	800753c <__hi0bits>
 8007aa0:	f1c0 0320 	rsb	r3, r0, #32
 8007aa4:	280a      	cmp	r0, #10
 8007aa6:	600b      	str	r3, [r1, #0]
 8007aa8:	491f      	ldr	r1, [pc, #124]	; (8007b28 <__b2d+0xa4>)
 8007aaa:	dc17      	bgt.n	8007adc <__b2d+0x58>
 8007aac:	45c1      	cmp	r9, r8
 8007aae:	bf28      	it	cs
 8007ab0:	2200      	movcs	r2, #0
 8007ab2:	f1c0 0c0b 	rsb	ip, r0, #11
 8007ab6:	fa26 f30c 	lsr.w	r3, r6, ip
 8007aba:	bf38      	it	cc
 8007abc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007ac0:	ea43 0501 	orr.w	r5, r3, r1
 8007ac4:	f100 0315 	add.w	r3, r0, #21
 8007ac8:	fa06 f303 	lsl.w	r3, r6, r3
 8007acc:	fa22 f20c 	lsr.w	r2, r2, ip
 8007ad0:	ea43 0402 	orr.w	r4, r3, r2
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007adc:	45c1      	cmp	r9, r8
 8007ade:	bf2e      	itee	cs
 8007ae0:	2200      	movcs	r2, #0
 8007ae2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007ae6:	f1a7 0808 	subcc.w	r8, r7, #8
 8007aea:	f1b0 030b 	subs.w	r3, r0, #11
 8007aee:	d016      	beq.n	8007b1e <__b2d+0x9a>
 8007af0:	f1c3 0720 	rsb	r7, r3, #32
 8007af4:	fa22 f107 	lsr.w	r1, r2, r7
 8007af8:	45c8      	cmp	r8, r9
 8007afa:	fa06 f603 	lsl.w	r6, r6, r3
 8007afe:	ea46 0601 	orr.w	r6, r6, r1
 8007b02:	bf94      	ite	ls
 8007b04:	2100      	movls	r1, #0
 8007b06:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007b0a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007b0e:	fa02 f003 	lsl.w	r0, r2, r3
 8007b12:	40f9      	lsrs	r1, r7
 8007b14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007b18:	ea40 0401 	orr.w	r4, r0, r1
 8007b1c:	e7da      	b.n	8007ad4 <__b2d+0x50>
 8007b1e:	4614      	mov	r4, r2
 8007b20:	ea46 0501 	orr.w	r5, r6, r1
 8007b24:	e7d6      	b.n	8007ad4 <__b2d+0x50>
 8007b26:	bf00      	nop
 8007b28:	3ff00000 	.word	0x3ff00000

08007b2c <__d2b>:
 8007b2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007b30:	2101      	movs	r1, #1
 8007b32:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007b36:	4690      	mov	r8, r2
 8007b38:	461d      	mov	r5, r3
 8007b3a:	f7ff fc0d 	bl	8007358 <_Balloc>
 8007b3e:	4604      	mov	r4, r0
 8007b40:	b930      	cbnz	r0, 8007b50 <__d2b+0x24>
 8007b42:	4602      	mov	r2, r0
 8007b44:	f240 310a 	movw	r1, #778	; 0x30a
 8007b48:	4b24      	ldr	r3, [pc, #144]	; (8007bdc <__d2b+0xb0>)
 8007b4a:	4825      	ldr	r0, [pc, #148]	; (8007be0 <__d2b+0xb4>)
 8007b4c:	f7fe f9ba 	bl	8005ec4 <__assert_func>
 8007b50:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007b54:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007b58:	bb2d      	cbnz	r5, 8007ba6 <__d2b+0x7a>
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	f1b8 0300 	subs.w	r3, r8, #0
 8007b60:	d026      	beq.n	8007bb0 <__d2b+0x84>
 8007b62:	4668      	mov	r0, sp
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	f7ff fd09 	bl	800757c <__lo0bits>
 8007b6a:	9900      	ldr	r1, [sp, #0]
 8007b6c:	b1f0      	cbz	r0, 8007bac <__d2b+0x80>
 8007b6e:	9a01      	ldr	r2, [sp, #4]
 8007b70:	f1c0 0320 	rsb	r3, r0, #32
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	40c2      	lsrs	r2, r0
 8007b7c:	6163      	str	r3, [r4, #20]
 8007b7e:	9201      	str	r2, [sp, #4]
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf14      	ite	ne
 8007b86:	2102      	movne	r1, #2
 8007b88:	2101      	moveq	r1, #1
 8007b8a:	61a3      	str	r3, [r4, #24]
 8007b8c:	6121      	str	r1, [r4, #16]
 8007b8e:	b1c5      	cbz	r5, 8007bc2 <__d2b+0x96>
 8007b90:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b94:	4405      	add	r5, r0
 8007b96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b9a:	603d      	str	r5, [r7, #0]
 8007b9c:	6030      	str	r0, [r6, #0]
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	b002      	add	sp, #8
 8007ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007baa:	e7d6      	b.n	8007b5a <__d2b+0x2e>
 8007bac:	6161      	str	r1, [r4, #20]
 8007bae:	e7e7      	b.n	8007b80 <__d2b+0x54>
 8007bb0:	a801      	add	r0, sp, #4
 8007bb2:	f7ff fce3 	bl	800757c <__lo0bits>
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	9b01      	ldr	r3, [sp, #4]
 8007bba:	6121      	str	r1, [r4, #16]
 8007bbc:	6163      	str	r3, [r4, #20]
 8007bbe:	3020      	adds	r0, #32
 8007bc0:	e7e5      	b.n	8007b8e <__d2b+0x62>
 8007bc2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007bc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bca:	6038      	str	r0, [r7, #0]
 8007bcc:	6918      	ldr	r0, [r3, #16]
 8007bce:	f7ff fcb5 	bl	800753c <__hi0bits>
 8007bd2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007bd6:	6031      	str	r1, [r6, #0]
 8007bd8:	e7e1      	b.n	8007b9e <__d2b+0x72>
 8007bda:	bf00      	nop
 8007bdc:	08008ff9 	.word	0x08008ff9
 8007be0:	08009084 	.word	0x08009084

08007be4 <__ratio>:
 8007be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	4688      	mov	r8, r1
 8007bea:	4669      	mov	r1, sp
 8007bec:	4681      	mov	r9, r0
 8007bee:	f7ff ff49 	bl	8007a84 <__b2d>
 8007bf2:	460f      	mov	r7, r1
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	a901      	add	r1, sp, #4
 8007bfc:	f7ff ff42 	bl	8007a84 <__b2d>
 8007c00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c04:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007c08:	468b      	mov	fp, r1
 8007c0a:	eba3 0c02 	sub.w	ip, r3, r2
 8007c0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	bfd5      	itete	le
 8007c1c:	460a      	movle	r2, r1
 8007c1e:	462a      	movgt	r2, r5
 8007c20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c24:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c28:	bfd8      	it	le
 8007c2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007c2e:	465b      	mov	r3, fp
 8007c30:	4602      	mov	r2, r0
 8007c32:	4639      	mov	r1, r7
 8007c34:	4620      	mov	r0, r4
 8007c36:	f7f8 fd83 	bl	8000740 <__aeabi_ddiv>
 8007c3a:	b003      	add	sp, #12
 8007c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c40 <__copybits>:
 8007c40:	3901      	subs	r1, #1
 8007c42:	b570      	push	{r4, r5, r6, lr}
 8007c44:	1149      	asrs	r1, r1, #5
 8007c46:	6914      	ldr	r4, [r2, #16]
 8007c48:	3101      	adds	r1, #1
 8007c4a:	f102 0314 	add.w	r3, r2, #20
 8007c4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c56:	1f05      	subs	r5, r0, #4
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	d30c      	bcc.n	8007c76 <__copybits+0x36>
 8007c5c:	1aa3      	subs	r3, r4, r2
 8007c5e:	3b11      	subs	r3, #17
 8007c60:	f023 0303 	bic.w	r3, r3, #3
 8007c64:	3211      	adds	r2, #17
 8007c66:	42a2      	cmp	r2, r4
 8007c68:	bf88      	it	hi
 8007c6a:	2300      	movhi	r3, #0
 8007c6c:	4418      	add	r0, r3
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4288      	cmp	r0, r1
 8007c72:	d305      	bcc.n	8007c80 <__copybits+0x40>
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
 8007c76:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c7a:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c7e:	e7eb      	b.n	8007c58 <__copybits+0x18>
 8007c80:	f840 3b04 	str.w	r3, [r0], #4
 8007c84:	e7f4      	b.n	8007c70 <__copybits+0x30>

08007c86 <__any_on>:
 8007c86:	f100 0214 	add.w	r2, r0, #20
 8007c8a:	6900      	ldr	r0, [r0, #16]
 8007c8c:	114b      	asrs	r3, r1, #5
 8007c8e:	4298      	cmp	r0, r3
 8007c90:	b510      	push	{r4, lr}
 8007c92:	db11      	blt.n	8007cb8 <__any_on+0x32>
 8007c94:	dd0a      	ble.n	8007cac <__any_on+0x26>
 8007c96:	f011 011f 	ands.w	r1, r1, #31
 8007c9a:	d007      	beq.n	8007cac <__any_on+0x26>
 8007c9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ca0:	fa24 f001 	lsr.w	r0, r4, r1
 8007ca4:	fa00 f101 	lsl.w	r1, r0, r1
 8007ca8:	428c      	cmp	r4, r1
 8007caa:	d10b      	bne.n	8007cc4 <__any_on+0x3e>
 8007cac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d803      	bhi.n	8007cbc <__any_on+0x36>
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	bd10      	pop	{r4, pc}
 8007cb8:	4603      	mov	r3, r0
 8007cba:	e7f7      	b.n	8007cac <__any_on+0x26>
 8007cbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	d0f5      	beq.n	8007cb0 <__any_on+0x2a>
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	e7f6      	b.n	8007cb6 <__any_on+0x30>

08007cc8 <_calloc_r>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	fba1 5402 	umull	r5, r4, r1, r2
 8007cce:	b934      	cbnz	r4, 8007cde <_calloc_r+0x16>
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f000 f875 	bl	8007dc0 <_malloc_r>
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	b928      	cbnz	r0, 8007ce6 <_calloc_r+0x1e>
 8007cda:	4630      	mov	r0, r6
 8007cdc:	bd70      	pop	{r4, r5, r6, pc}
 8007cde:	220c      	movs	r2, #12
 8007ce0:	2600      	movs	r6, #0
 8007ce2:	6002      	str	r2, [r0, #0]
 8007ce4:	e7f9      	b.n	8007cda <_calloc_r+0x12>
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	4621      	mov	r1, r4
 8007cea:	f7fc fb15 	bl	8004318 <memset>
 8007cee:	e7f4      	b.n	8007cda <_calloc_r+0x12>

08007cf0 <_free_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	d040      	beq.n	8007d7a <_free_r+0x8a>
 8007cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cfc:	1f0c      	subs	r4, r1, #4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bfb8      	it	lt
 8007d02:	18e4      	addlt	r4, r4, r3
 8007d04:	f000 feba 	bl	8008a7c <__malloc_lock>
 8007d08:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <_free_r+0x8c>)
 8007d0a:	6813      	ldr	r3, [r2, #0]
 8007d0c:	b933      	cbnz	r3, 8007d1c <_free_r+0x2c>
 8007d0e:	6063      	str	r3, [r4, #4]
 8007d10:	6014      	str	r4, [r2, #0]
 8007d12:	4628      	mov	r0, r5
 8007d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d18:	f000 beb6 	b.w	8008a88 <__malloc_unlock>
 8007d1c:	42a3      	cmp	r3, r4
 8007d1e:	d908      	bls.n	8007d32 <_free_r+0x42>
 8007d20:	6820      	ldr	r0, [r4, #0]
 8007d22:	1821      	adds	r1, r4, r0
 8007d24:	428b      	cmp	r3, r1
 8007d26:	bf01      	itttt	eq
 8007d28:	6819      	ldreq	r1, [r3, #0]
 8007d2a:	685b      	ldreq	r3, [r3, #4]
 8007d2c:	1809      	addeq	r1, r1, r0
 8007d2e:	6021      	streq	r1, [r4, #0]
 8007d30:	e7ed      	b.n	8007d0e <_free_r+0x1e>
 8007d32:	461a      	mov	r2, r3
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	b10b      	cbz	r3, 8007d3c <_free_r+0x4c>
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d9fa      	bls.n	8007d32 <_free_r+0x42>
 8007d3c:	6811      	ldr	r1, [r2, #0]
 8007d3e:	1850      	adds	r0, r2, r1
 8007d40:	42a0      	cmp	r0, r4
 8007d42:	d10b      	bne.n	8007d5c <_free_r+0x6c>
 8007d44:	6820      	ldr	r0, [r4, #0]
 8007d46:	4401      	add	r1, r0
 8007d48:	1850      	adds	r0, r2, r1
 8007d4a:	4283      	cmp	r3, r0
 8007d4c:	6011      	str	r1, [r2, #0]
 8007d4e:	d1e0      	bne.n	8007d12 <_free_r+0x22>
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	4401      	add	r1, r0
 8007d56:	6011      	str	r1, [r2, #0]
 8007d58:	6053      	str	r3, [r2, #4]
 8007d5a:	e7da      	b.n	8007d12 <_free_r+0x22>
 8007d5c:	d902      	bls.n	8007d64 <_free_r+0x74>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	e7d6      	b.n	8007d12 <_free_r+0x22>
 8007d64:	6820      	ldr	r0, [r4, #0]
 8007d66:	1821      	adds	r1, r4, r0
 8007d68:	428b      	cmp	r3, r1
 8007d6a:	bf01      	itttt	eq
 8007d6c:	6819      	ldreq	r1, [r3, #0]
 8007d6e:	685b      	ldreq	r3, [r3, #4]
 8007d70:	1809      	addeq	r1, r1, r0
 8007d72:	6021      	streq	r1, [r4, #0]
 8007d74:	6063      	str	r3, [r4, #4]
 8007d76:	6054      	str	r4, [r2, #4]
 8007d78:	e7cb      	b.n	8007d12 <_free_r+0x22>
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	200005f4 	.word	0x200005f4

08007d80 <sbrk_aligned>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	4e0e      	ldr	r6, [pc, #56]	; (8007dbc <sbrk_aligned+0x3c>)
 8007d84:	460c      	mov	r4, r1
 8007d86:	6831      	ldr	r1, [r6, #0]
 8007d88:	4605      	mov	r5, r0
 8007d8a:	b911      	cbnz	r1, 8007d92 <sbrk_aligned+0x12>
 8007d8c:	f000 fb46 	bl	800841c <_sbrk_r>
 8007d90:	6030      	str	r0, [r6, #0]
 8007d92:	4621      	mov	r1, r4
 8007d94:	4628      	mov	r0, r5
 8007d96:	f000 fb41 	bl	800841c <_sbrk_r>
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	d00a      	beq.n	8007db4 <sbrk_aligned+0x34>
 8007d9e:	1cc4      	adds	r4, r0, #3
 8007da0:	f024 0403 	bic.w	r4, r4, #3
 8007da4:	42a0      	cmp	r0, r4
 8007da6:	d007      	beq.n	8007db8 <sbrk_aligned+0x38>
 8007da8:	1a21      	subs	r1, r4, r0
 8007daa:	4628      	mov	r0, r5
 8007dac:	f000 fb36 	bl	800841c <_sbrk_r>
 8007db0:	3001      	adds	r0, #1
 8007db2:	d101      	bne.n	8007db8 <sbrk_aligned+0x38>
 8007db4:	f04f 34ff 	mov.w	r4, #4294967295
 8007db8:	4620      	mov	r0, r4
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	200005f8 	.word	0x200005f8

08007dc0 <_malloc_r>:
 8007dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc4:	1ccd      	adds	r5, r1, #3
 8007dc6:	f025 0503 	bic.w	r5, r5, #3
 8007dca:	3508      	adds	r5, #8
 8007dcc:	2d0c      	cmp	r5, #12
 8007dce:	bf38      	it	cc
 8007dd0:	250c      	movcc	r5, #12
 8007dd2:	2d00      	cmp	r5, #0
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	db01      	blt.n	8007ddc <_malloc_r+0x1c>
 8007dd8:	42a9      	cmp	r1, r5
 8007dda:	d905      	bls.n	8007de8 <_malloc_r+0x28>
 8007ddc:	230c      	movs	r3, #12
 8007dde:	2600      	movs	r6, #0
 8007de0:	603b      	str	r3, [r7, #0]
 8007de2:	4630      	mov	r0, r6
 8007de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de8:	4e2e      	ldr	r6, [pc, #184]	; (8007ea4 <_malloc_r+0xe4>)
 8007dea:	f000 fe47 	bl	8008a7c <__malloc_lock>
 8007dee:	6833      	ldr	r3, [r6, #0]
 8007df0:	461c      	mov	r4, r3
 8007df2:	bb34      	cbnz	r4, 8007e42 <_malloc_r+0x82>
 8007df4:	4629      	mov	r1, r5
 8007df6:	4638      	mov	r0, r7
 8007df8:	f7ff ffc2 	bl	8007d80 <sbrk_aligned>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	4604      	mov	r4, r0
 8007e00:	d14d      	bne.n	8007e9e <_malloc_r+0xde>
 8007e02:	6834      	ldr	r4, [r6, #0]
 8007e04:	4626      	mov	r6, r4
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	d140      	bne.n	8007e8c <_malloc_r+0xcc>
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4638      	mov	r0, r7
 8007e10:	eb04 0803 	add.w	r8, r4, r3
 8007e14:	f000 fb02 	bl	800841c <_sbrk_r>
 8007e18:	4580      	cmp	r8, r0
 8007e1a:	d13a      	bne.n	8007e92 <_malloc_r+0xd2>
 8007e1c:	6821      	ldr	r1, [r4, #0]
 8007e1e:	3503      	adds	r5, #3
 8007e20:	1a6d      	subs	r5, r5, r1
 8007e22:	f025 0503 	bic.w	r5, r5, #3
 8007e26:	3508      	adds	r5, #8
 8007e28:	2d0c      	cmp	r5, #12
 8007e2a:	bf38      	it	cc
 8007e2c:	250c      	movcc	r5, #12
 8007e2e:	4638      	mov	r0, r7
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7ff ffa5 	bl	8007d80 <sbrk_aligned>
 8007e36:	3001      	adds	r0, #1
 8007e38:	d02b      	beq.n	8007e92 <_malloc_r+0xd2>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	442b      	add	r3, r5
 8007e3e:	6023      	str	r3, [r4, #0]
 8007e40:	e00e      	b.n	8007e60 <_malloc_r+0xa0>
 8007e42:	6822      	ldr	r2, [r4, #0]
 8007e44:	1b52      	subs	r2, r2, r5
 8007e46:	d41e      	bmi.n	8007e86 <_malloc_r+0xc6>
 8007e48:	2a0b      	cmp	r2, #11
 8007e4a:	d916      	bls.n	8007e7a <_malloc_r+0xba>
 8007e4c:	1961      	adds	r1, r4, r5
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	6025      	str	r5, [r4, #0]
 8007e52:	bf18      	it	ne
 8007e54:	6059      	strne	r1, [r3, #4]
 8007e56:	6863      	ldr	r3, [r4, #4]
 8007e58:	bf08      	it	eq
 8007e5a:	6031      	streq	r1, [r6, #0]
 8007e5c:	5162      	str	r2, [r4, r5]
 8007e5e:	604b      	str	r3, [r1, #4]
 8007e60:	4638      	mov	r0, r7
 8007e62:	f104 060b 	add.w	r6, r4, #11
 8007e66:	f000 fe0f 	bl	8008a88 <__malloc_unlock>
 8007e6a:	f026 0607 	bic.w	r6, r6, #7
 8007e6e:	1d23      	adds	r3, r4, #4
 8007e70:	1af2      	subs	r2, r6, r3
 8007e72:	d0b6      	beq.n	8007de2 <_malloc_r+0x22>
 8007e74:	1b9b      	subs	r3, r3, r6
 8007e76:	50a3      	str	r3, [r4, r2]
 8007e78:	e7b3      	b.n	8007de2 <_malloc_r+0x22>
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	bf0c      	ite	eq
 8007e80:	6032      	streq	r2, [r6, #0]
 8007e82:	605a      	strne	r2, [r3, #4]
 8007e84:	e7ec      	b.n	8007e60 <_malloc_r+0xa0>
 8007e86:	4623      	mov	r3, r4
 8007e88:	6864      	ldr	r4, [r4, #4]
 8007e8a:	e7b2      	b.n	8007df2 <_malloc_r+0x32>
 8007e8c:	4634      	mov	r4, r6
 8007e8e:	6876      	ldr	r6, [r6, #4]
 8007e90:	e7b9      	b.n	8007e06 <_malloc_r+0x46>
 8007e92:	230c      	movs	r3, #12
 8007e94:	4638      	mov	r0, r7
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	f000 fdf6 	bl	8008a88 <__malloc_unlock>
 8007e9c:	e7a1      	b.n	8007de2 <_malloc_r+0x22>
 8007e9e:	6025      	str	r5, [r4, #0]
 8007ea0:	e7de      	b.n	8007e60 <_malloc_r+0xa0>
 8007ea2:	bf00      	nop
 8007ea4:	200005f4 	.word	0x200005f4

08007ea8 <__ssputs_r>:
 8007ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	688e      	ldr	r6, [r1, #8]
 8007eae:	4682      	mov	sl, r0
 8007eb0:	429e      	cmp	r6, r3
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	4690      	mov	r8, r2
 8007eb6:	461f      	mov	r7, r3
 8007eb8:	d838      	bhi.n	8007f2c <__ssputs_r+0x84>
 8007eba:	898a      	ldrh	r2, [r1, #12]
 8007ebc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ec0:	d032      	beq.n	8007f28 <__ssputs_r+0x80>
 8007ec2:	6825      	ldr	r5, [r4, #0]
 8007ec4:	6909      	ldr	r1, [r1, #16]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	eba5 0901 	sub.w	r9, r5, r1
 8007ecc:	6965      	ldr	r5, [r4, #20]
 8007ece:	444b      	add	r3, r9
 8007ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ed4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ed8:	106d      	asrs	r5, r5, #1
 8007eda:	429d      	cmp	r5, r3
 8007edc:	bf38      	it	cc
 8007ede:	461d      	movcc	r5, r3
 8007ee0:	0553      	lsls	r3, r2, #21
 8007ee2:	d531      	bpl.n	8007f48 <__ssputs_r+0xa0>
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	f7ff ff6b 	bl	8007dc0 <_malloc_r>
 8007eea:	4606      	mov	r6, r0
 8007eec:	b950      	cbnz	r0, 8007f04 <__ssputs_r+0x5c>
 8007eee:	230c      	movs	r3, #12
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	f8ca 3000 	str.w	r3, [sl]
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007efe:	81a3      	strh	r3, [r4, #12]
 8007f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f04:	464a      	mov	r2, r9
 8007f06:	6921      	ldr	r1, [r4, #16]
 8007f08:	f7ff fa18 	bl	800733c <memcpy>
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f16:	81a3      	strh	r3, [r4, #12]
 8007f18:	6126      	str	r6, [r4, #16]
 8007f1a:	444e      	add	r6, r9
 8007f1c:	6026      	str	r6, [r4, #0]
 8007f1e:	463e      	mov	r6, r7
 8007f20:	6165      	str	r5, [r4, #20]
 8007f22:	eba5 0509 	sub.w	r5, r5, r9
 8007f26:	60a5      	str	r5, [r4, #8]
 8007f28:	42be      	cmp	r6, r7
 8007f2a:	d900      	bls.n	8007f2e <__ssputs_r+0x86>
 8007f2c:	463e      	mov	r6, r7
 8007f2e:	4632      	mov	r2, r6
 8007f30:	4641      	mov	r1, r8
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	f000 fd88 	bl	8008a48 <memmove>
 8007f38:	68a3      	ldr	r3, [r4, #8]
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	1b9b      	subs	r3, r3, r6
 8007f3e:	60a3      	str	r3, [r4, #8]
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	4433      	add	r3, r6
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	e7db      	b.n	8007f00 <__ssputs_r+0x58>
 8007f48:	462a      	mov	r2, r5
 8007f4a:	f000 fda3 	bl	8008a94 <_realloc_r>
 8007f4e:	4606      	mov	r6, r0
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d1e1      	bne.n	8007f18 <__ssputs_r+0x70>
 8007f54:	4650      	mov	r0, sl
 8007f56:	6921      	ldr	r1, [r4, #16]
 8007f58:	f7ff feca 	bl	8007cf0 <_free_r>
 8007f5c:	e7c7      	b.n	8007eee <__ssputs_r+0x46>
	...

08007f60 <_svfiprintf_r>:
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	4698      	mov	r8, r3
 8007f66:	898b      	ldrh	r3, [r1, #12]
 8007f68:	4607      	mov	r7, r0
 8007f6a:	061b      	lsls	r3, r3, #24
 8007f6c:	460d      	mov	r5, r1
 8007f6e:	4614      	mov	r4, r2
 8007f70:	b09d      	sub	sp, #116	; 0x74
 8007f72:	d50e      	bpl.n	8007f92 <_svfiprintf_r+0x32>
 8007f74:	690b      	ldr	r3, [r1, #16]
 8007f76:	b963      	cbnz	r3, 8007f92 <_svfiprintf_r+0x32>
 8007f78:	2140      	movs	r1, #64	; 0x40
 8007f7a:	f7ff ff21 	bl	8007dc0 <_malloc_r>
 8007f7e:	6028      	str	r0, [r5, #0]
 8007f80:	6128      	str	r0, [r5, #16]
 8007f82:	b920      	cbnz	r0, 8007f8e <_svfiprintf_r+0x2e>
 8007f84:	230c      	movs	r3, #12
 8007f86:	603b      	str	r3, [r7, #0]
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	e0d1      	b.n	8008132 <_svfiprintf_r+0x1d2>
 8007f8e:	2340      	movs	r3, #64	; 0x40
 8007f90:	616b      	str	r3, [r5, #20]
 8007f92:	2300      	movs	r3, #0
 8007f94:	9309      	str	r3, [sp, #36]	; 0x24
 8007f96:	2320      	movs	r3, #32
 8007f98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f9c:	2330      	movs	r3, #48	; 0x30
 8007f9e:	f04f 0901 	mov.w	r9, #1
 8007fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800814c <_svfiprintf_r+0x1ec>
 8007faa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fae:	4623      	mov	r3, r4
 8007fb0:	469a      	mov	sl, r3
 8007fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fb6:	b10a      	cbz	r2, 8007fbc <_svfiprintf_r+0x5c>
 8007fb8:	2a25      	cmp	r2, #37	; 0x25
 8007fba:	d1f9      	bne.n	8007fb0 <_svfiprintf_r+0x50>
 8007fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8007fc0:	d00b      	beq.n	8007fda <_svfiprintf_r+0x7a>
 8007fc2:	465b      	mov	r3, fp
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f7ff ff6d 	bl	8007ea8 <__ssputs_r>
 8007fce:	3001      	adds	r0, #1
 8007fd0:	f000 80aa 	beq.w	8008128 <_svfiprintf_r+0x1c8>
 8007fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fd6:	445a      	add	r2, fp
 8007fd8:	9209      	str	r2, [sp, #36]	; 0x24
 8007fda:	f89a 3000 	ldrb.w	r3, [sl]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 80a2 	beq.w	8008128 <_svfiprintf_r+0x1c8>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fee:	f10a 0a01 	add.w	sl, sl, #1
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	9307      	str	r3, [sp, #28]
 8007ff6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ffa:	931a      	str	r3, [sp, #104]	; 0x68
 8007ffc:	4654      	mov	r4, sl
 8007ffe:	2205      	movs	r2, #5
 8008000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008004:	4851      	ldr	r0, [pc, #324]	; (800814c <_svfiprintf_r+0x1ec>)
 8008006:	f7ff f98b 	bl	8007320 <memchr>
 800800a:	9a04      	ldr	r2, [sp, #16]
 800800c:	b9d8      	cbnz	r0, 8008046 <_svfiprintf_r+0xe6>
 800800e:	06d0      	lsls	r0, r2, #27
 8008010:	bf44      	itt	mi
 8008012:	2320      	movmi	r3, #32
 8008014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008018:	0711      	lsls	r1, r2, #28
 800801a:	bf44      	itt	mi
 800801c:	232b      	movmi	r3, #43	; 0x2b
 800801e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008022:	f89a 3000 	ldrb.w	r3, [sl]
 8008026:	2b2a      	cmp	r3, #42	; 0x2a
 8008028:	d015      	beq.n	8008056 <_svfiprintf_r+0xf6>
 800802a:	4654      	mov	r4, sl
 800802c:	2000      	movs	r0, #0
 800802e:	f04f 0c0a 	mov.w	ip, #10
 8008032:	9a07      	ldr	r2, [sp, #28]
 8008034:	4621      	mov	r1, r4
 8008036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800803a:	3b30      	subs	r3, #48	; 0x30
 800803c:	2b09      	cmp	r3, #9
 800803e:	d94e      	bls.n	80080de <_svfiprintf_r+0x17e>
 8008040:	b1b0      	cbz	r0, 8008070 <_svfiprintf_r+0x110>
 8008042:	9207      	str	r2, [sp, #28]
 8008044:	e014      	b.n	8008070 <_svfiprintf_r+0x110>
 8008046:	eba0 0308 	sub.w	r3, r0, r8
 800804a:	fa09 f303 	lsl.w	r3, r9, r3
 800804e:	4313      	orrs	r3, r2
 8008050:	46a2      	mov	sl, r4
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	e7d2      	b.n	8007ffc <_svfiprintf_r+0x9c>
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	1d19      	adds	r1, r3, #4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	9103      	str	r1, [sp, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	bfbb      	ittet	lt
 8008062:	425b      	neglt	r3, r3
 8008064:	f042 0202 	orrlt.w	r2, r2, #2
 8008068:	9307      	strge	r3, [sp, #28]
 800806a:	9307      	strlt	r3, [sp, #28]
 800806c:	bfb8      	it	lt
 800806e:	9204      	strlt	r2, [sp, #16]
 8008070:	7823      	ldrb	r3, [r4, #0]
 8008072:	2b2e      	cmp	r3, #46	; 0x2e
 8008074:	d10c      	bne.n	8008090 <_svfiprintf_r+0x130>
 8008076:	7863      	ldrb	r3, [r4, #1]
 8008078:	2b2a      	cmp	r3, #42	; 0x2a
 800807a:	d135      	bne.n	80080e8 <_svfiprintf_r+0x188>
 800807c:	9b03      	ldr	r3, [sp, #12]
 800807e:	3402      	adds	r4, #2
 8008080:	1d1a      	adds	r2, r3, #4
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	9203      	str	r2, [sp, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	bfb8      	it	lt
 800808a:	f04f 33ff 	movlt.w	r3, #4294967295
 800808e:	9305      	str	r3, [sp, #20]
 8008090:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008150 <_svfiprintf_r+0x1f0>
 8008094:	2203      	movs	r2, #3
 8008096:	4650      	mov	r0, sl
 8008098:	7821      	ldrb	r1, [r4, #0]
 800809a:	f7ff f941 	bl	8007320 <memchr>
 800809e:	b140      	cbz	r0, 80080b2 <_svfiprintf_r+0x152>
 80080a0:	2340      	movs	r3, #64	; 0x40
 80080a2:	eba0 000a 	sub.w	r0, r0, sl
 80080a6:	fa03 f000 	lsl.w	r0, r3, r0
 80080aa:	9b04      	ldr	r3, [sp, #16]
 80080ac:	3401      	adds	r4, #1
 80080ae:	4303      	orrs	r3, r0
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b6:	2206      	movs	r2, #6
 80080b8:	4826      	ldr	r0, [pc, #152]	; (8008154 <_svfiprintf_r+0x1f4>)
 80080ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080be:	f7ff f92f 	bl	8007320 <memchr>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d038      	beq.n	8008138 <_svfiprintf_r+0x1d8>
 80080c6:	4b24      	ldr	r3, [pc, #144]	; (8008158 <_svfiprintf_r+0x1f8>)
 80080c8:	bb1b      	cbnz	r3, 8008112 <_svfiprintf_r+0x1b2>
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	3307      	adds	r3, #7
 80080ce:	f023 0307 	bic.w	r3, r3, #7
 80080d2:	3308      	adds	r3, #8
 80080d4:	9303      	str	r3, [sp, #12]
 80080d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d8:	4433      	add	r3, r6
 80080da:	9309      	str	r3, [sp, #36]	; 0x24
 80080dc:	e767      	b.n	8007fae <_svfiprintf_r+0x4e>
 80080de:	460c      	mov	r4, r1
 80080e0:	2001      	movs	r0, #1
 80080e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080e6:	e7a5      	b.n	8008034 <_svfiprintf_r+0xd4>
 80080e8:	2300      	movs	r3, #0
 80080ea:	f04f 0c0a 	mov.w	ip, #10
 80080ee:	4619      	mov	r1, r3
 80080f0:	3401      	adds	r4, #1
 80080f2:	9305      	str	r3, [sp, #20]
 80080f4:	4620      	mov	r0, r4
 80080f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080fa:	3a30      	subs	r2, #48	; 0x30
 80080fc:	2a09      	cmp	r2, #9
 80080fe:	d903      	bls.n	8008108 <_svfiprintf_r+0x1a8>
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0c5      	beq.n	8008090 <_svfiprintf_r+0x130>
 8008104:	9105      	str	r1, [sp, #20]
 8008106:	e7c3      	b.n	8008090 <_svfiprintf_r+0x130>
 8008108:	4604      	mov	r4, r0
 800810a:	2301      	movs	r3, #1
 800810c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008110:	e7f0      	b.n	80080f4 <_svfiprintf_r+0x194>
 8008112:	ab03      	add	r3, sp, #12
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	462a      	mov	r2, r5
 8008118:	4638      	mov	r0, r7
 800811a:	4b10      	ldr	r3, [pc, #64]	; (800815c <_svfiprintf_r+0x1fc>)
 800811c:	a904      	add	r1, sp, #16
 800811e:	f7fc f9a1 	bl	8004464 <_printf_float>
 8008122:	1c42      	adds	r2, r0, #1
 8008124:	4606      	mov	r6, r0
 8008126:	d1d6      	bne.n	80080d6 <_svfiprintf_r+0x176>
 8008128:	89ab      	ldrh	r3, [r5, #12]
 800812a:	065b      	lsls	r3, r3, #25
 800812c:	f53f af2c 	bmi.w	8007f88 <_svfiprintf_r+0x28>
 8008130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008132:	b01d      	add	sp, #116	; 0x74
 8008134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	ab03      	add	r3, sp, #12
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	462a      	mov	r2, r5
 800813e:	4638      	mov	r0, r7
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <_svfiprintf_r+0x1fc>)
 8008142:	a904      	add	r1, sp, #16
 8008144:	f7fc fc2a 	bl	800499c <_printf_i>
 8008148:	e7eb      	b.n	8008122 <_svfiprintf_r+0x1c2>
 800814a:	bf00      	nop
 800814c:	080091dc 	.word	0x080091dc
 8008150:	080091e2 	.word	0x080091e2
 8008154:	080091e6 	.word	0x080091e6
 8008158:	08004465 	.word	0x08004465
 800815c:	08007ea9 	.word	0x08007ea9

08008160 <__sfputc_r>:
 8008160:	6893      	ldr	r3, [r2, #8]
 8008162:	b410      	push	{r4}
 8008164:	3b01      	subs	r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	6093      	str	r3, [r2, #8]
 800816a:	da07      	bge.n	800817c <__sfputc_r+0x1c>
 800816c:	6994      	ldr	r4, [r2, #24]
 800816e:	42a3      	cmp	r3, r4
 8008170:	db01      	blt.n	8008176 <__sfputc_r+0x16>
 8008172:	290a      	cmp	r1, #10
 8008174:	d102      	bne.n	800817c <__sfputc_r+0x1c>
 8008176:	bc10      	pop	{r4}
 8008178:	f000 b974 	b.w	8008464 <__swbuf_r>
 800817c:	6813      	ldr	r3, [r2, #0]
 800817e:	1c58      	adds	r0, r3, #1
 8008180:	6010      	str	r0, [r2, #0]
 8008182:	7019      	strb	r1, [r3, #0]
 8008184:	4608      	mov	r0, r1
 8008186:	bc10      	pop	{r4}
 8008188:	4770      	bx	lr

0800818a <__sfputs_r>:
 800818a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	4614      	mov	r4, r2
 8008192:	18d5      	adds	r5, r2, r3
 8008194:	42ac      	cmp	r4, r5
 8008196:	d101      	bne.n	800819c <__sfputs_r+0x12>
 8008198:	2000      	movs	r0, #0
 800819a:	e007      	b.n	80081ac <__sfputs_r+0x22>
 800819c:	463a      	mov	r2, r7
 800819e:	4630      	mov	r0, r6
 80081a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a4:	f7ff ffdc 	bl	8008160 <__sfputc_r>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d1f3      	bne.n	8008194 <__sfputs_r+0xa>
 80081ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081b0 <_vfiprintf_r>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	460d      	mov	r5, r1
 80081b6:	4614      	mov	r4, r2
 80081b8:	4698      	mov	r8, r3
 80081ba:	4606      	mov	r6, r0
 80081bc:	b09d      	sub	sp, #116	; 0x74
 80081be:	b118      	cbz	r0, 80081c8 <_vfiprintf_r+0x18>
 80081c0:	6983      	ldr	r3, [r0, #24]
 80081c2:	b90b      	cbnz	r3, 80081c8 <_vfiprintf_r+0x18>
 80081c4:	f000 fb3a 	bl	800883c <__sinit>
 80081c8:	4b89      	ldr	r3, [pc, #548]	; (80083f0 <_vfiprintf_r+0x240>)
 80081ca:	429d      	cmp	r5, r3
 80081cc:	d11b      	bne.n	8008206 <_vfiprintf_r+0x56>
 80081ce:	6875      	ldr	r5, [r6, #4]
 80081d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081d2:	07d9      	lsls	r1, r3, #31
 80081d4:	d405      	bmi.n	80081e2 <_vfiprintf_r+0x32>
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	059a      	lsls	r2, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_vfiprintf_r+0x32>
 80081dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081de:	f000 fbcb 	bl	8008978 <__retarget_lock_acquire_recursive>
 80081e2:	89ab      	ldrh	r3, [r5, #12]
 80081e4:	071b      	lsls	r3, r3, #28
 80081e6:	d501      	bpl.n	80081ec <_vfiprintf_r+0x3c>
 80081e8:	692b      	ldr	r3, [r5, #16]
 80081ea:	b9eb      	cbnz	r3, 8008228 <_vfiprintf_r+0x78>
 80081ec:	4629      	mov	r1, r5
 80081ee:	4630      	mov	r0, r6
 80081f0:	f000 f998 	bl	8008524 <__swsetup_r>
 80081f4:	b1c0      	cbz	r0, 8008228 <_vfiprintf_r+0x78>
 80081f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081f8:	07dc      	lsls	r4, r3, #31
 80081fa:	d50e      	bpl.n	800821a <_vfiprintf_r+0x6a>
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008200:	b01d      	add	sp, #116	; 0x74
 8008202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008206:	4b7b      	ldr	r3, [pc, #492]	; (80083f4 <_vfiprintf_r+0x244>)
 8008208:	429d      	cmp	r5, r3
 800820a:	d101      	bne.n	8008210 <_vfiprintf_r+0x60>
 800820c:	68b5      	ldr	r5, [r6, #8]
 800820e:	e7df      	b.n	80081d0 <_vfiprintf_r+0x20>
 8008210:	4b79      	ldr	r3, [pc, #484]	; (80083f8 <_vfiprintf_r+0x248>)
 8008212:	429d      	cmp	r5, r3
 8008214:	bf08      	it	eq
 8008216:	68f5      	ldreq	r5, [r6, #12]
 8008218:	e7da      	b.n	80081d0 <_vfiprintf_r+0x20>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	0598      	lsls	r0, r3, #22
 800821e:	d4ed      	bmi.n	80081fc <_vfiprintf_r+0x4c>
 8008220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008222:	f000 fbaa 	bl	800897a <__retarget_lock_release_recursive>
 8008226:	e7e9      	b.n	80081fc <_vfiprintf_r+0x4c>
 8008228:	2300      	movs	r3, #0
 800822a:	9309      	str	r3, [sp, #36]	; 0x24
 800822c:	2320      	movs	r3, #32
 800822e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008232:	2330      	movs	r3, #48	; 0x30
 8008234:	f04f 0901 	mov.w	r9, #1
 8008238:	f8cd 800c 	str.w	r8, [sp, #12]
 800823c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80083fc <_vfiprintf_r+0x24c>
 8008240:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008244:	4623      	mov	r3, r4
 8008246:	469a      	mov	sl, r3
 8008248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800824c:	b10a      	cbz	r2, 8008252 <_vfiprintf_r+0xa2>
 800824e:	2a25      	cmp	r2, #37	; 0x25
 8008250:	d1f9      	bne.n	8008246 <_vfiprintf_r+0x96>
 8008252:	ebba 0b04 	subs.w	fp, sl, r4
 8008256:	d00b      	beq.n	8008270 <_vfiprintf_r+0xc0>
 8008258:	465b      	mov	r3, fp
 800825a:	4622      	mov	r2, r4
 800825c:	4629      	mov	r1, r5
 800825e:	4630      	mov	r0, r6
 8008260:	f7ff ff93 	bl	800818a <__sfputs_r>
 8008264:	3001      	adds	r0, #1
 8008266:	f000 80aa 	beq.w	80083be <_vfiprintf_r+0x20e>
 800826a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800826c:	445a      	add	r2, fp
 800826e:	9209      	str	r2, [sp, #36]	; 0x24
 8008270:	f89a 3000 	ldrb.w	r3, [sl]
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 80a2 	beq.w	80083be <_vfiprintf_r+0x20e>
 800827a:	2300      	movs	r3, #0
 800827c:	f04f 32ff 	mov.w	r2, #4294967295
 8008280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008284:	f10a 0a01 	add.w	sl, sl, #1
 8008288:	9304      	str	r3, [sp, #16]
 800828a:	9307      	str	r3, [sp, #28]
 800828c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008290:	931a      	str	r3, [sp, #104]	; 0x68
 8008292:	4654      	mov	r4, sl
 8008294:	2205      	movs	r2, #5
 8008296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829a:	4858      	ldr	r0, [pc, #352]	; (80083fc <_vfiprintf_r+0x24c>)
 800829c:	f7ff f840 	bl	8007320 <memchr>
 80082a0:	9a04      	ldr	r2, [sp, #16]
 80082a2:	b9d8      	cbnz	r0, 80082dc <_vfiprintf_r+0x12c>
 80082a4:	06d1      	lsls	r1, r2, #27
 80082a6:	bf44      	itt	mi
 80082a8:	2320      	movmi	r3, #32
 80082aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ae:	0713      	lsls	r3, r2, #28
 80082b0:	bf44      	itt	mi
 80082b2:	232b      	movmi	r3, #43	; 0x2b
 80082b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082b8:	f89a 3000 	ldrb.w	r3, [sl]
 80082bc:	2b2a      	cmp	r3, #42	; 0x2a
 80082be:	d015      	beq.n	80082ec <_vfiprintf_r+0x13c>
 80082c0:	4654      	mov	r4, sl
 80082c2:	2000      	movs	r0, #0
 80082c4:	f04f 0c0a 	mov.w	ip, #10
 80082c8:	9a07      	ldr	r2, [sp, #28]
 80082ca:	4621      	mov	r1, r4
 80082cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082d0:	3b30      	subs	r3, #48	; 0x30
 80082d2:	2b09      	cmp	r3, #9
 80082d4:	d94e      	bls.n	8008374 <_vfiprintf_r+0x1c4>
 80082d6:	b1b0      	cbz	r0, 8008306 <_vfiprintf_r+0x156>
 80082d8:	9207      	str	r2, [sp, #28]
 80082da:	e014      	b.n	8008306 <_vfiprintf_r+0x156>
 80082dc:	eba0 0308 	sub.w	r3, r0, r8
 80082e0:	fa09 f303 	lsl.w	r3, r9, r3
 80082e4:	4313      	orrs	r3, r2
 80082e6:	46a2      	mov	sl, r4
 80082e8:	9304      	str	r3, [sp, #16]
 80082ea:	e7d2      	b.n	8008292 <_vfiprintf_r+0xe2>
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	1d19      	adds	r1, r3, #4
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	9103      	str	r1, [sp, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	bfbb      	ittet	lt
 80082f8:	425b      	neglt	r3, r3
 80082fa:	f042 0202 	orrlt.w	r2, r2, #2
 80082fe:	9307      	strge	r3, [sp, #28]
 8008300:	9307      	strlt	r3, [sp, #28]
 8008302:	bfb8      	it	lt
 8008304:	9204      	strlt	r2, [sp, #16]
 8008306:	7823      	ldrb	r3, [r4, #0]
 8008308:	2b2e      	cmp	r3, #46	; 0x2e
 800830a:	d10c      	bne.n	8008326 <_vfiprintf_r+0x176>
 800830c:	7863      	ldrb	r3, [r4, #1]
 800830e:	2b2a      	cmp	r3, #42	; 0x2a
 8008310:	d135      	bne.n	800837e <_vfiprintf_r+0x1ce>
 8008312:	9b03      	ldr	r3, [sp, #12]
 8008314:	3402      	adds	r4, #2
 8008316:	1d1a      	adds	r2, r3, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	9203      	str	r2, [sp, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	bfb8      	it	lt
 8008320:	f04f 33ff 	movlt.w	r3, #4294967295
 8008324:	9305      	str	r3, [sp, #20]
 8008326:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008400 <_vfiprintf_r+0x250>
 800832a:	2203      	movs	r2, #3
 800832c:	4650      	mov	r0, sl
 800832e:	7821      	ldrb	r1, [r4, #0]
 8008330:	f7fe fff6 	bl	8007320 <memchr>
 8008334:	b140      	cbz	r0, 8008348 <_vfiprintf_r+0x198>
 8008336:	2340      	movs	r3, #64	; 0x40
 8008338:	eba0 000a 	sub.w	r0, r0, sl
 800833c:	fa03 f000 	lsl.w	r0, r3, r0
 8008340:	9b04      	ldr	r3, [sp, #16]
 8008342:	3401      	adds	r4, #1
 8008344:	4303      	orrs	r3, r0
 8008346:	9304      	str	r3, [sp, #16]
 8008348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800834c:	2206      	movs	r2, #6
 800834e:	482d      	ldr	r0, [pc, #180]	; (8008404 <_vfiprintf_r+0x254>)
 8008350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008354:	f7fe ffe4 	bl	8007320 <memchr>
 8008358:	2800      	cmp	r0, #0
 800835a:	d03f      	beq.n	80083dc <_vfiprintf_r+0x22c>
 800835c:	4b2a      	ldr	r3, [pc, #168]	; (8008408 <_vfiprintf_r+0x258>)
 800835e:	bb1b      	cbnz	r3, 80083a8 <_vfiprintf_r+0x1f8>
 8008360:	9b03      	ldr	r3, [sp, #12]
 8008362:	3307      	adds	r3, #7
 8008364:	f023 0307 	bic.w	r3, r3, #7
 8008368:	3308      	adds	r3, #8
 800836a:	9303      	str	r3, [sp, #12]
 800836c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836e:	443b      	add	r3, r7
 8008370:	9309      	str	r3, [sp, #36]	; 0x24
 8008372:	e767      	b.n	8008244 <_vfiprintf_r+0x94>
 8008374:	460c      	mov	r4, r1
 8008376:	2001      	movs	r0, #1
 8008378:	fb0c 3202 	mla	r2, ip, r2, r3
 800837c:	e7a5      	b.n	80082ca <_vfiprintf_r+0x11a>
 800837e:	2300      	movs	r3, #0
 8008380:	f04f 0c0a 	mov.w	ip, #10
 8008384:	4619      	mov	r1, r3
 8008386:	3401      	adds	r4, #1
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	4620      	mov	r0, r4
 800838c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008390:	3a30      	subs	r2, #48	; 0x30
 8008392:	2a09      	cmp	r2, #9
 8008394:	d903      	bls.n	800839e <_vfiprintf_r+0x1ee>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0c5      	beq.n	8008326 <_vfiprintf_r+0x176>
 800839a:	9105      	str	r1, [sp, #20]
 800839c:	e7c3      	b.n	8008326 <_vfiprintf_r+0x176>
 800839e:	4604      	mov	r4, r0
 80083a0:	2301      	movs	r3, #1
 80083a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80083a6:	e7f0      	b.n	800838a <_vfiprintf_r+0x1da>
 80083a8:	ab03      	add	r3, sp, #12
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	462a      	mov	r2, r5
 80083ae:	4630      	mov	r0, r6
 80083b0:	4b16      	ldr	r3, [pc, #88]	; (800840c <_vfiprintf_r+0x25c>)
 80083b2:	a904      	add	r1, sp, #16
 80083b4:	f7fc f856 	bl	8004464 <_printf_float>
 80083b8:	4607      	mov	r7, r0
 80083ba:	1c78      	adds	r0, r7, #1
 80083bc:	d1d6      	bne.n	800836c <_vfiprintf_r+0x1bc>
 80083be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083c0:	07d9      	lsls	r1, r3, #31
 80083c2:	d405      	bmi.n	80083d0 <_vfiprintf_r+0x220>
 80083c4:	89ab      	ldrh	r3, [r5, #12]
 80083c6:	059a      	lsls	r2, r3, #22
 80083c8:	d402      	bmi.n	80083d0 <_vfiprintf_r+0x220>
 80083ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083cc:	f000 fad5 	bl	800897a <__retarget_lock_release_recursive>
 80083d0:	89ab      	ldrh	r3, [r5, #12]
 80083d2:	065b      	lsls	r3, r3, #25
 80083d4:	f53f af12 	bmi.w	80081fc <_vfiprintf_r+0x4c>
 80083d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083da:	e711      	b.n	8008200 <_vfiprintf_r+0x50>
 80083dc:	ab03      	add	r3, sp, #12
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	462a      	mov	r2, r5
 80083e2:	4630      	mov	r0, r6
 80083e4:	4b09      	ldr	r3, [pc, #36]	; (800840c <_vfiprintf_r+0x25c>)
 80083e6:	a904      	add	r1, sp, #16
 80083e8:	f7fc fad8 	bl	800499c <_printf_i>
 80083ec:	e7e4      	b.n	80083b8 <_vfiprintf_r+0x208>
 80083ee:	bf00      	nop
 80083f0:	08009210 	.word	0x08009210
 80083f4:	08009230 	.word	0x08009230
 80083f8:	080091f0 	.word	0x080091f0
 80083fc:	080091dc 	.word	0x080091dc
 8008400:	080091e2 	.word	0x080091e2
 8008404:	080091e6 	.word	0x080091e6
 8008408:	08004465 	.word	0x08004465
 800840c:	0800818b 	.word	0x0800818b

08008410 <nan>:
 8008410:	2000      	movs	r0, #0
 8008412:	4901      	ldr	r1, [pc, #4]	; (8008418 <nan+0x8>)
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	7ff80000 	.word	0x7ff80000

0800841c <_sbrk_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	2300      	movs	r3, #0
 8008420:	4d05      	ldr	r5, [pc, #20]	; (8008438 <_sbrk_r+0x1c>)
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	f7f9 fc38 	bl	8001c9c <_sbrk>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_sbrk_r+0x1a>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_sbrk_r+0x1a>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	20000600 	.word	0x20000600

0800843c <strncmp>:
 800843c:	4603      	mov	r3, r0
 800843e:	b510      	push	{r4, lr}
 8008440:	b172      	cbz	r2, 8008460 <strncmp+0x24>
 8008442:	3901      	subs	r1, #1
 8008444:	1884      	adds	r4, r0, r2
 8008446:	f813 0b01 	ldrb.w	r0, [r3], #1
 800844a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800844e:	4290      	cmp	r0, r2
 8008450:	d101      	bne.n	8008456 <strncmp+0x1a>
 8008452:	42a3      	cmp	r3, r4
 8008454:	d101      	bne.n	800845a <strncmp+0x1e>
 8008456:	1a80      	subs	r0, r0, r2
 8008458:	bd10      	pop	{r4, pc}
 800845a:	2800      	cmp	r0, #0
 800845c:	d1f3      	bne.n	8008446 <strncmp+0xa>
 800845e:	e7fa      	b.n	8008456 <strncmp+0x1a>
 8008460:	4610      	mov	r0, r2
 8008462:	e7f9      	b.n	8008458 <strncmp+0x1c>

08008464 <__swbuf_r>:
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008466:	460e      	mov	r6, r1
 8008468:	4614      	mov	r4, r2
 800846a:	4605      	mov	r5, r0
 800846c:	b118      	cbz	r0, 8008476 <__swbuf_r+0x12>
 800846e:	6983      	ldr	r3, [r0, #24]
 8008470:	b90b      	cbnz	r3, 8008476 <__swbuf_r+0x12>
 8008472:	f000 f9e3 	bl	800883c <__sinit>
 8008476:	4b21      	ldr	r3, [pc, #132]	; (80084fc <__swbuf_r+0x98>)
 8008478:	429c      	cmp	r4, r3
 800847a:	d12b      	bne.n	80084d4 <__swbuf_r+0x70>
 800847c:	686c      	ldr	r4, [r5, #4]
 800847e:	69a3      	ldr	r3, [r4, #24]
 8008480:	60a3      	str	r3, [r4, #8]
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	071a      	lsls	r2, r3, #28
 8008486:	d52f      	bpl.n	80084e8 <__swbuf_r+0x84>
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	b36b      	cbz	r3, 80084e8 <__swbuf_r+0x84>
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	6820      	ldr	r0, [r4, #0]
 8008490:	b2f6      	uxtb	r6, r6
 8008492:	1ac0      	subs	r0, r0, r3
 8008494:	6963      	ldr	r3, [r4, #20]
 8008496:	4637      	mov	r7, r6
 8008498:	4283      	cmp	r3, r0
 800849a:	dc04      	bgt.n	80084a6 <__swbuf_r+0x42>
 800849c:	4621      	mov	r1, r4
 800849e:	4628      	mov	r0, r5
 80084a0:	f000 f938 	bl	8008714 <_fflush_r>
 80084a4:	bb30      	cbnz	r0, 80084f4 <__swbuf_r+0x90>
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	3001      	adds	r0, #1
 80084aa:	3b01      	subs	r3, #1
 80084ac:	60a3      	str	r3, [r4, #8]
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	6022      	str	r2, [r4, #0]
 80084b4:	701e      	strb	r6, [r3, #0]
 80084b6:	6963      	ldr	r3, [r4, #20]
 80084b8:	4283      	cmp	r3, r0
 80084ba:	d004      	beq.n	80084c6 <__swbuf_r+0x62>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	07db      	lsls	r3, r3, #31
 80084c0:	d506      	bpl.n	80084d0 <__swbuf_r+0x6c>
 80084c2:	2e0a      	cmp	r6, #10
 80084c4:	d104      	bne.n	80084d0 <__swbuf_r+0x6c>
 80084c6:	4621      	mov	r1, r4
 80084c8:	4628      	mov	r0, r5
 80084ca:	f000 f923 	bl	8008714 <_fflush_r>
 80084ce:	b988      	cbnz	r0, 80084f4 <__swbuf_r+0x90>
 80084d0:	4638      	mov	r0, r7
 80084d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <__swbuf_r+0x9c>)
 80084d6:	429c      	cmp	r4, r3
 80084d8:	d101      	bne.n	80084de <__swbuf_r+0x7a>
 80084da:	68ac      	ldr	r4, [r5, #8]
 80084dc:	e7cf      	b.n	800847e <__swbuf_r+0x1a>
 80084de:	4b09      	ldr	r3, [pc, #36]	; (8008504 <__swbuf_r+0xa0>)
 80084e0:	429c      	cmp	r4, r3
 80084e2:	bf08      	it	eq
 80084e4:	68ec      	ldreq	r4, [r5, #12]
 80084e6:	e7ca      	b.n	800847e <__swbuf_r+0x1a>
 80084e8:	4621      	mov	r1, r4
 80084ea:	4628      	mov	r0, r5
 80084ec:	f000 f81a 	bl	8008524 <__swsetup_r>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d0cb      	beq.n	800848c <__swbuf_r+0x28>
 80084f4:	f04f 37ff 	mov.w	r7, #4294967295
 80084f8:	e7ea      	b.n	80084d0 <__swbuf_r+0x6c>
 80084fa:	bf00      	nop
 80084fc:	08009210 	.word	0x08009210
 8008500:	08009230 	.word	0x08009230
 8008504:	080091f0 	.word	0x080091f0

08008508 <__ascii_wctomb>:
 8008508:	4603      	mov	r3, r0
 800850a:	4608      	mov	r0, r1
 800850c:	b141      	cbz	r1, 8008520 <__ascii_wctomb+0x18>
 800850e:	2aff      	cmp	r2, #255	; 0xff
 8008510:	d904      	bls.n	800851c <__ascii_wctomb+0x14>
 8008512:	228a      	movs	r2, #138	; 0x8a
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	4770      	bx	lr
 800851c:	2001      	movs	r0, #1
 800851e:	700a      	strb	r2, [r1, #0]
 8008520:	4770      	bx	lr
	...

08008524 <__swsetup_r>:
 8008524:	4b32      	ldr	r3, [pc, #200]	; (80085f0 <__swsetup_r+0xcc>)
 8008526:	b570      	push	{r4, r5, r6, lr}
 8008528:	681d      	ldr	r5, [r3, #0]
 800852a:	4606      	mov	r6, r0
 800852c:	460c      	mov	r4, r1
 800852e:	b125      	cbz	r5, 800853a <__swsetup_r+0x16>
 8008530:	69ab      	ldr	r3, [r5, #24]
 8008532:	b913      	cbnz	r3, 800853a <__swsetup_r+0x16>
 8008534:	4628      	mov	r0, r5
 8008536:	f000 f981 	bl	800883c <__sinit>
 800853a:	4b2e      	ldr	r3, [pc, #184]	; (80085f4 <__swsetup_r+0xd0>)
 800853c:	429c      	cmp	r4, r3
 800853e:	d10f      	bne.n	8008560 <__swsetup_r+0x3c>
 8008540:	686c      	ldr	r4, [r5, #4]
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008548:	0719      	lsls	r1, r3, #28
 800854a:	d42c      	bmi.n	80085a6 <__swsetup_r+0x82>
 800854c:	06dd      	lsls	r5, r3, #27
 800854e:	d411      	bmi.n	8008574 <__swsetup_r+0x50>
 8008550:	2309      	movs	r3, #9
 8008552:	6033      	str	r3, [r6, #0]
 8008554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	e03e      	b.n	80085de <__swsetup_r+0xba>
 8008560:	4b25      	ldr	r3, [pc, #148]	; (80085f8 <__swsetup_r+0xd4>)
 8008562:	429c      	cmp	r4, r3
 8008564:	d101      	bne.n	800856a <__swsetup_r+0x46>
 8008566:	68ac      	ldr	r4, [r5, #8]
 8008568:	e7eb      	b.n	8008542 <__swsetup_r+0x1e>
 800856a:	4b24      	ldr	r3, [pc, #144]	; (80085fc <__swsetup_r+0xd8>)
 800856c:	429c      	cmp	r4, r3
 800856e:	bf08      	it	eq
 8008570:	68ec      	ldreq	r4, [r5, #12]
 8008572:	e7e6      	b.n	8008542 <__swsetup_r+0x1e>
 8008574:	0758      	lsls	r0, r3, #29
 8008576:	d512      	bpl.n	800859e <__swsetup_r+0x7a>
 8008578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800857a:	b141      	cbz	r1, 800858e <__swsetup_r+0x6a>
 800857c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008580:	4299      	cmp	r1, r3
 8008582:	d002      	beq.n	800858a <__swsetup_r+0x66>
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff fbb3 	bl	8007cf0 <_free_r>
 800858a:	2300      	movs	r3, #0
 800858c:	6363      	str	r3, [r4, #52]	; 0x34
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	2300      	movs	r3, #0
 8008598:	6063      	str	r3, [r4, #4]
 800859a:	6923      	ldr	r3, [r4, #16]
 800859c:	6023      	str	r3, [r4, #0]
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	f043 0308 	orr.w	r3, r3, #8
 80085a4:	81a3      	strh	r3, [r4, #12]
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	b94b      	cbnz	r3, 80085be <__swsetup_r+0x9a>
 80085aa:	89a3      	ldrh	r3, [r4, #12]
 80085ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b4:	d003      	beq.n	80085be <__swsetup_r+0x9a>
 80085b6:	4621      	mov	r1, r4
 80085b8:	4630      	mov	r0, r6
 80085ba:	f000 fa05 	bl	80089c8 <__smakebuf_r>
 80085be:	89a0      	ldrh	r0, [r4, #12]
 80085c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085c4:	f010 0301 	ands.w	r3, r0, #1
 80085c8:	d00a      	beq.n	80085e0 <__swsetup_r+0xbc>
 80085ca:	2300      	movs	r3, #0
 80085cc:	60a3      	str	r3, [r4, #8]
 80085ce:	6963      	ldr	r3, [r4, #20]
 80085d0:	425b      	negs	r3, r3
 80085d2:	61a3      	str	r3, [r4, #24]
 80085d4:	6923      	ldr	r3, [r4, #16]
 80085d6:	b943      	cbnz	r3, 80085ea <__swsetup_r+0xc6>
 80085d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085dc:	d1ba      	bne.n	8008554 <__swsetup_r+0x30>
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	0781      	lsls	r1, r0, #30
 80085e2:	bf58      	it	pl
 80085e4:	6963      	ldrpl	r3, [r4, #20]
 80085e6:	60a3      	str	r3, [r4, #8]
 80085e8:	e7f4      	b.n	80085d4 <__swsetup_r+0xb0>
 80085ea:	2000      	movs	r0, #0
 80085ec:	e7f7      	b.n	80085de <__swsetup_r+0xba>
 80085ee:	bf00      	nop
 80085f0:	20000018 	.word	0x20000018
 80085f4:	08009210 	.word	0x08009210
 80085f8:	08009230 	.word	0x08009230
 80085fc:	080091f0 	.word	0x080091f0

08008600 <abort>:
 8008600:	2006      	movs	r0, #6
 8008602:	b508      	push	{r3, lr}
 8008604:	f000 fa9e 	bl	8008b44 <raise>
 8008608:	2001      	movs	r0, #1
 800860a:	f7f9 fb19 	bl	8001c40 <_exit>
	...

08008610 <__sflush_r>:
 8008610:	898a      	ldrh	r2, [r1, #12]
 8008612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008614:	4605      	mov	r5, r0
 8008616:	0710      	lsls	r0, r2, #28
 8008618:	460c      	mov	r4, r1
 800861a:	d457      	bmi.n	80086cc <__sflush_r+0xbc>
 800861c:	684b      	ldr	r3, [r1, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	dc04      	bgt.n	800862c <__sflush_r+0x1c>
 8008622:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	dc01      	bgt.n	800862c <__sflush_r+0x1c>
 8008628:	2000      	movs	r0, #0
 800862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800862c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800862e:	2e00      	cmp	r6, #0
 8008630:	d0fa      	beq.n	8008628 <__sflush_r+0x18>
 8008632:	2300      	movs	r3, #0
 8008634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008638:	682f      	ldr	r7, [r5, #0]
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	d032      	beq.n	80086a4 <__sflush_r+0x94>
 800863e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	075a      	lsls	r2, r3, #29
 8008644:	d505      	bpl.n	8008652 <__sflush_r+0x42>
 8008646:	6863      	ldr	r3, [r4, #4]
 8008648:	1ac0      	subs	r0, r0, r3
 800864a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800864c:	b10b      	cbz	r3, 8008652 <__sflush_r+0x42>
 800864e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008650:	1ac0      	subs	r0, r0, r3
 8008652:	2300      	movs	r3, #0
 8008654:	4602      	mov	r2, r0
 8008656:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008658:	4628      	mov	r0, r5
 800865a:	6a21      	ldr	r1, [r4, #32]
 800865c:	47b0      	blx	r6
 800865e:	1c43      	adds	r3, r0, #1
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	d106      	bne.n	8008672 <__sflush_r+0x62>
 8008664:	6829      	ldr	r1, [r5, #0]
 8008666:	291d      	cmp	r1, #29
 8008668:	d82c      	bhi.n	80086c4 <__sflush_r+0xb4>
 800866a:	4a29      	ldr	r2, [pc, #164]	; (8008710 <__sflush_r+0x100>)
 800866c:	40ca      	lsrs	r2, r1
 800866e:	07d6      	lsls	r6, r2, #31
 8008670:	d528      	bpl.n	80086c4 <__sflush_r+0xb4>
 8008672:	2200      	movs	r2, #0
 8008674:	6062      	str	r2, [r4, #4]
 8008676:	6922      	ldr	r2, [r4, #16]
 8008678:	04d9      	lsls	r1, r3, #19
 800867a:	6022      	str	r2, [r4, #0]
 800867c:	d504      	bpl.n	8008688 <__sflush_r+0x78>
 800867e:	1c42      	adds	r2, r0, #1
 8008680:	d101      	bne.n	8008686 <__sflush_r+0x76>
 8008682:	682b      	ldr	r3, [r5, #0]
 8008684:	b903      	cbnz	r3, 8008688 <__sflush_r+0x78>
 8008686:	6560      	str	r0, [r4, #84]	; 0x54
 8008688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800868a:	602f      	str	r7, [r5, #0]
 800868c:	2900      	cmp	r1, #0
 800868e:	d0cb      	beq.n	8008628 <__sflush_r+0x18>
 8008690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008694:	4299      	cmp	r1, r3
 8008696:	d002      	beq.n	800869e <__sflush_r+0x8e>
 8008698:	4628      	mov	r0, r5
 800869a:	f7ff fb29 	bl	8007cf0 <_free_r>
 800869e:	2000      	movs	r0, #0
 80086a0:	6360      	str	r0, [r4, #52]	; 0x34
 80086a2:	e7c2      	b.n	800862a <__sflush_r+0x1a>
 80086a4:	6a21      	ldr	r1, [r4, #32]
 80086a6:	2301      	movs	r3, #1
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b0      	blx	r6
 80086ac:	1c41      	adds	r1, r0, #1
 80086ae:	d1c7      	bne.n	8008640 <__sflush_r+0x30>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0c4      	beq.n	8008640 <__sflush_r+0x30>
 80086b6:	2b1d      	cmp	r3, #29
 80086b8:	d001      	beq.n	80086be <__sflush_r+0xae>
 80086ba:	2b16      	cmp	r3, #22
 80086bc:	d101      	bne.n	80086c2 <__sflush_r+0xb2>
 80086be:	602f      	str	r7, [r5, #0]
 80086c0:	e7b2      	b.n	8008628 <__sflush_r+0x18>
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c8:	81a3      	strh	r3, [r4, #12]
 80086ca:	e7ae      	b.n	800862a <__sflush_r+0x1a>
 80086cc:	690f      	ldr	r7, [r1, #16]
 80086ce:	2f00      	cmp	r7, #0
 80086d0:	d0aa      	beq.n	8008628 <__sflush_r+0x18>
 80086d2:	0793      	lsls	r3, r2, #30
 80086d4:	bf18      	it	ne
 80086d6:	2300      	movne	r3, #0
 80086d8:	680e      	ldr	r6, [r1, #0]
 80086da:	bf08      	it	eq
 80086dc:	694b      	ldreq	r3, [r1, #20]
 80086de:	1bf6      	subs	r6, r6, r7
 80086e0:	600f      	str	r7, [r1, #0]
 80086e2:	608b      	str	r3, [r1, #8]
 80086e4:	2e00      	cmp	r6, #0
 80086e6:	dd9f      	ble.n	8008628 <__sflush_r+0x18>
 80086e8:	4633      	mov	r3, r6
 80086ea:	463a      	mov	r2, r7
 80086ec:	4628      	mov	r0, r5
 80086ee:	6a21      	ldr	r1, [r4, #32]
 80086f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80086f4:	47e0      	blx	ip
 80086f6:	2800      	cmp	r0, #0
 80086f8:	dc06      	bgt.n	8008708 <__sflush_r+0xf8>
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008704:	81a3      	strh	r3, [r4, #12]
 8008706:	e790      	b.n	800862a <__sflush_r+0x1a>
 8008708:	4407      	add	r7, r0
 800870a:	1a36      	subs	r6, r6, r0
 800870c:	e7ea      	b.n	80086e4 <__sflush_r+0xd4>
 800870e:	bf00      	nop
 8008710:	20400001 	.word	0x20400001

08008714 <_fflush_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	690b      	ldr	r3, [r1, #16]
 8008718:	4605      	mov	r5, r0
 800871a:	460c      	mov	r4, r1
 800871c:	b913      	cbnz	r3, 8008724 <_fflush_r+0x10>
 800871e:	2500      	movs	r5, #0
 8008720:	4628      	mov	r0, r5
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	b118      	cbz	r0, 800872e <_fflush_r+0x1a>
 8008726:	6983      	ldr	r3, [r0, #24]
 8008728:	b90b      	cbnz	r3, 800872e <_fflush_r+0x1a>
 800872a:	f000 f887 	bl	800883c <__sinit>
 800872e:	4b14      	ldr	r3, [pc, #80]	; (8008780 <_fflush_r+0x6c>)
 8008730:	429c      	cmp	r4, r3
 8008732:	d11b      	bne.n	800876c <_fflush_r+0x58>
 8008734:	686c      	ldr	r4, [r5, #4]
 8008736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0ef      	beq.n	800871e <_fflush_r+0xa>
 800873e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008740:	07d0      	lsls	r0, r2, #31
 8008742:	d404      	bmi.n	800874e <_fflush_r+0x3a>
 8008744:	0599      	lsls	r1, r3, #22
 8008746:	d402      	bmi.n	800874e <_fflush_r+0x3a>
 8008748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800874a:	f000 f915 	bl	8008978 <__retarget_lock_acquire_recursive>
 800874e:	4628      	mov	r0, r5
 8008750:	4621      	mov	r1, r4
 8008752:	f7ff ff5d 	bl	8008610 <__sflush_r>
 8008756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008758:	4605      	mov	r5, r0
 800875a:	07da      	lsls	r2, r3, #31
 800875c:	d4e0      	bmi.n	8008720 <_fflush_r+0xc>
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	059b      	lsls	r3, r3, #22
 8008762:	d4dd      	bmi.n	8008720 <_fflush_r+0xc>
 8008764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008766:	f000 f908 	bl	800897a <__retarget_lock_release_recursive>
 800876a:	e7d9      	b.n	8008720 <_fflush_r+0xc>
 800876c:	4b05      	ldr	r3, [pc, #20]	; (8008784 <_fflush_r+0x70>)
 800876e:	429c      	cmp	r4, r3
 8008770:	d101      	bne.n	8008776 <_fflush_r+0x62>
 8008772:	68ac      	ldr	r4, [r5, #8]
 8008774:	e7df      	b.n	8008736 <_fflush_r+0x22>
 8008776:	4b04      	ldr	r3, [pc, #16]	; (8008788 <_fflush_r+0x74>)
 8008778:	429c      	cmp	r4, r3
 800877a:	bf08      	it	eq
 800877c:	68ec      	ldreq	r4, [r5, #12]
 800877e:	e7da      	b.n	8008736 <_fflush_r+0x22>
 8008780:	08009210 	.word	0x08009210
 8008784:	08009230 	.word	0x08009230
 8008788:	080091f0 	.word	0x080091f0

0800878c <std>:
 800878c:	2300      	movs	r3, #0
 800878e:	b510      	push	{r4, lr}
 8008790:	4604      	mov	r4, r0
 8008792:	e9c0 3300 	strd	r3, r3, [r0]
 8008796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800879a:	6083      	str	r3, [r0, #8]
 800879c:	8181      	strh	r1, [r0, #12]
 800879e:	6643      	str	r3, [r0, #100]	; 0x64
 80087a0:	81c2      	strh	r2, [r0, #14]
 80087a2:	6183      	str	r3, [r0, #24]
 80087a4:	4619      	mov	r1, r3
 80087a6:	2208      	movs	r2, #8
 80087a8:	305c      	adds	r0, #92	; 0x5c
 80087aa:	f7fb fdb5 	bl	8004318 <memset>
 80087ae:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <std+0x38>)
 80087b0:	6224      	str	r4, [r4, #32]
 80087b2:	6263      	str	r3, [r4, #36]	; 0x24
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <std+0x3c>)
 80087b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80087b8:	4b04      	ldr	r3, [pc, #16]	; (80087cc <std+0x40>)
 80087ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087bc:	4b04      	ldr	r3, [pc, #16]	; (80087d0 <std+0x44>)
 80087be:	6323      	str	r3, [r4, #48]	; 0x30
 80087c0:	bd10      	pop	{r4, pc}
 80087c2:	bf00      	nop
 80087c4:	08008b7d 	.word	0x08008b7d
 80087c8:	08008b9f 	.word	0x08008b9f
 80087cc:	08008bd7 	.word	0x08008bd7
 80087d0:	08008bfb 	.word	0x08008bfb

080087d4 <_cleanup_r>:
 80087d4:	4901      	ldr	r1, [pc, #4]	; (80087dc <_cleanup_r+0x8>)
 80087d6:	f000 b8af 	b.w	8008938 <_fwalk_reent>
 80087da:	bf00      	nop
 80087dc:	08008715 	.word	0x08008715

080087e0 <__sfmoreglue>:
 80087e0:	2268      	movs	r2, #104	; 0x68
 80087e2:	b570      	push	{r4, r5, r6, lr}
 80087e4:	1e4d      	subs	r5, r1, #1
 80087e6:	4355      	muls	r5, r2
 80087e8:	460e      	mov	r6, r1
 80087ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087ee:	f7ff fae7 	bl	8007dc0 <_malloc_r>
 80087f2:	4604      	mov	r4, r0
 80087f4:	b140      	cbz	r0, 8008808 <__sfmoreglue+0x28>
 80087f6:	2100      	movs	r1, #0
 80087f8:	e9c0 1600 	strd	r1, r6, [r0]
 80087fc:	300c      	adds	r0, #12
 80087fe:	60a0      	str	r0, [r4, #8]
 8008800:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008804:	f7fb fd88 	bl	8004318 <memset>
 8008808:	4620      	mov	r0, r4
 800880a:	bd70      	pop	{r4, r5, r6, pc}

0800880c <__sfp_lock_acquire>:
 800880c:	4801      	ldr	r0, [pc, #4]	; (8008814 <__sfp_lock_acquire+0x8>)
 800880e:	f000 b8b3 	b.w	8008978 <__retarget_lock_acquire_recursive>
 8008812:	bf00      	nop
 8008814:	200005fd 	.word	0x200005fd

08008818 <__sfp_lock_release>:
 8008818:	4801      	ldr	r0, [pc, #4]	; (8008820 <__sfp_lock_release+0x8>)
 800881a:	f000 b8ae 	b.w	800897a <__retarget_lock_release_recursive>
 800881e:	bf00      	nop
 8008820:	200005fd 	.word	0x200005fd

08008824 <__sinit_lock_acquire>:
 8008824:	4801      	ldr	r0, [pc, #4]	; (800882c <__sinit_lock_acquire+0x8>)
 8008826:	f000 b8a7 	b.w	8008978 <__retarget_lock_acquire_recursive>
 800882a:	bf00      	nop
 800882c:	200005fe 	.word	0x200005fe

08008830 <__sinit_lock_release>:
 8008830:	4801      	ldr	r0, [pc, #4]	; (8008838 <__sinit_lock_release+0x8>)
 8008832:	f000 b8a2 	b.w	800897a <__retarget_lock_release_recursive>
 8008836:	bf00      	nop
 8008838:	200005fe 	.word	0x200005fe

0800883c <__sinit>:
 800883c:	b510      	push	{r4, lr}
 800883e:	4604      	mov	r4, r0
 8008840:	f7ff fff0 	bl	8008824 <__sinit_lock_acquire>
 8008844:	69a3      	ldr	r3, [r4, #24]
 8008846:	b11b      	cbz	r3, 8008850 <__sinit+0x14>
 8008848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800884c:	f7ff bff0 	b.w	8008830 <__sinit_lock_release>
 8008850:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008854:	6523      	str	r3, [r4, #80]	; 0x50
 8008856:	4b13      	ldr	r3, [pc, #76]	; (80088a4 <__sinit+0x68>)
 8008858:	4a13      	ldr	r2, [pc, #76]	; (80088a8 <__sinit+0x6c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	62a2      	str	r2, [r4, #40]	; 0x28
 800885e:	42a3      	cmp	r3, r4
 8008860:	bf08      	it	eq
 8008862:	2301      	moveq	r3, #1
 8008864:	4620      	mov	r0, r4
 8008866:	bf08      	it	eq
 8008868:	61a3      	streq	r3, [r4, #24]
 800886a:	f000 f81f 	bl	80088ac <__sfp>
 800886e:	6060      	str	r0, [r4, #4]
 8008870:	4620      	mov	r0, r4
 8008872:	f000 f81b 	bl	80088ac <__sfp>
 8008876:	60a0      	str	r0, [r4, #8]
 8008878:	4620      	mov	r0, r4
 800887a:	f000 f817 	bl	80088ac <__sfp>
 800887e:	2200      	movs	r2, #0
 8008880:	2104      	movs	r1, #4
 8008882:	60e0      	str	r0, [r4, #12]
 8008884:	6860      	ldr	r0, [r4, #4]
 8008886:	f7ff ff81 	bl	800878c <std>
 800888a:	2201      	movs	r2, #1
 800888c:	2109      	movs	r1, #9
 800888e:	68a0      	ldr	r0, [r4, #8]
 8008890:	f7ff ff7c 	bl	800878c <std>
 8008894:	2202      	movs	r2, #2
 8008896:	2112      	movs	r1, #18
 8008898:	68e0      	ldr	r0, [r4, #12]
 800889a:	f7ff ff77 	bl	800878c <std>
 800889e:	2301      	movs	r3, #1
 80088a0:	61a3      	str	r3, [r4, #24]
 80088a2:	e7d1      	b.n	8008848 <__sinit+0xc>
 80088a4:	08008d50 	.word	0x08008d50
 80088a8:	080087d5 	.word	0x080087d5

080088ac <__sfp>:
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ae:	4607      	mov	r7, r0
 80088b0:	f7ff ffac 	bl	800880c <__sfp_lock_acquire>
 80088b4:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <__sfp+0x84>)
 80088b6:	681e      	ldr	r6, [r3, #0]
 80088b8:	69b3      	ldr	r3, [r6, #24]
 80088ba:	b913      	cbnz	r3, 80088c2 <__sfp+0x16>
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff ffbd 	bl	800883c <__sinit>
 80088c2:	3648      	adds	r6, #72	; 0x48
 80088c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	d503      	bpl.n	80088d4 <__sfp+0x28>
 80088cc:	6833      	ldr	r3, [r6, #0]
 80088ce:	b30b      	cbz	r3, 8008914 <__sfp+0x68>
 80088d0:	6836      	ldr	r6, [r6, #0]
 80088d2:	e7f7      	b.n	80088c4 <__sfp+0x18>
 80088d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088d8:	b9d5      	cbnz	r5, 8008910 <__sfp+0x64>
 80088da:	4b16      	ldr	r3, [pc, #88]	; (8008934 <__sfp+0x88>)
 80088dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088e0:	60e3      	str	r3, [r4, #12]
 80088e2:	6665      	str	r5, [r4, #100]	; 0x64
 80088e4:	f000 f847 	bl	8008976 <__retarget_lock_init_recursive>
 80088e8:	f7ff ff96 	bl	8008818 <__sfp_lock_release>
 80088ec:	2208      	movs	r2, #8
 80088ee:	4629      	mov	r1, r5
 80088f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088f8:	6025      	str	r5, [r4, #0]
 80088fa:	61a5      	str	r5, [r4, #24]
 80088fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008900:	f7fb fd0a 	bl	8004318 <memset>
 8008904:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008908:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800890c:	4620      	mov	r0, r4
 800890e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008910:	3468      	adds	r4, #104	; 0x68
 8008912:	e7d9      	b.n	80088c8 <__sfp+0x1c>
 8008914:	2104      	movs	r1, #4
 8008916:	4638      	mov	r0, r7
 8008918:	f7ff ff62 	bl	80087e0 <__sfmoreglue>
 800891c:	4604      	mov	r4, r0
 800891e:	6030      	str	r0, [r6, #0]
 8008920:	2800      	cmp	r0, #0
 8008922:	d1d5      	bne.n	80088d0 <__sfp+0x24>
 8008924:	f7ff ff78 	bl	8008818 <__sfp_lock_release>
 8008928:	230c      	movs	r3, #12
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	e7ee      	b.n	800890c <__sfp+0x60>
 800892e:	bf00      	nop
 8008930:	08008d50 	.word	0x08008d50
 8008934:	ffff0001 	.word	0xffff0001

08008938 <_fwalk_reent>:
 8008938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800893c:	4606      	mov	r6, r0
 800893e:	4688      	mov	r8, r1
 8008940:	2700      	movs	r7, #0
 8008942:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008946:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800894a:	f1b9 0901 	subs.w	r9, r9, #1
 800894e:	d505      	bpl.n	800895c <_fwalk_reent+0x24>
 8008950:	6824      	ldr	r4, [r4, #0]
 8008952:	2c00      	cmp	r4, #0
 8008954:	d1f7      	bne.n	8008946 <_fwalk_reent+0xe>
 8008956:	4638      	mov	r0, r7
 8008958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895c:	89ab      	ldrh	r3, [r5, #12]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d907      	bls.n	8008972 <_fwalk_reent+0x3a>
 8008962:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008966:	3301      	adds	r3, #1
 8008968:	d003      	beq.n	8008972 <_fwalk_reent+0x3a>
 800896a:	4629      	mov	r1, r5
 800896c:	4630      	mov	r0, r6
 800896e:	47c0      	blx	r8
 8008970:	4307      	orrs	r7, r0
 8008972:	3568      	adds	r5, #104	; 0x68
 8008974:	e7e9      	b.n	800894a <_fwalk_reent+0x12>

08008976 <__retarget_lock_init_recursive>:
 8008976:	4770      	bx	lr

08008978 <__retarget_lock_acquire_recursive>:
 8008978:	4770      	bx	lr

0800897a <__retarget_lock_release_recursive>:
 800897a:	4770      	bx	lr

0800897c <__swhatbuf_r>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	460e      	mov	r6, r1
 8008980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008984:	4614      	mov	r4, r2
 8008986:	2900      	cmp	r1, #0
 8008988:	461d      	mov	r5, r3
 800898a:	b096      	sub	sp, #88	; 0x58
 800898c:	da08      	bge.n	80089a0 <__swhatbuf_r+0x24>
 800898e:	2200      	movs	r2, #0
 8008990:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008994:	602a      	str	r2, [r5, #0]
 8008996:	061a      	lsls	r2, r3, #24
 8008998:	d410      	bmi.n	80089bc <__swhatbuf_r+0x40>
 800899a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800899e:	e00e      	b.n	80089be <__swhatbuf_r+0x42>
 80089a0:	466a      	mov	r2, sp
 80089a2:	f000 f951 	bl	8008c48 <_fstat_r>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	dbf1      	blt.n	800898e <__swhatbuf_r+0x12>
 80089aa:	9a01      	ldr	r2, [sp, #4]
 80089ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089b4:	425a      	negs	r2, r3
 80089b6:	415a      	adcs	r2, r3
 80089b8:	602a      	str	r2, [r5, #0]
 80089ba:	e7ee      	b.n	800899a <__swhatbuf_r+0x1e>
 80089bc:	2340      	movs	r3, #64	; 0x40
 80089be:	2000      	movs	r0, #0
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	b016      	add	sp, #88	; 0x58
 80089c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080089c8 <__smakebuf_r>:
 80089c8:	898b      	ldrh	r3, [r1, #12]
 80089ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089cc:	079d      	lsls	r5, r3, #30
 80089ce:	4606      	mov	r6, r0
 80089d0:	460c      	mov	r4, r1
 80089d2:	d507      	bpl.n	80089e4 <__smakebuf_r+0x1c>
 80089d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	6123      	str	r3, [r4, #16]
 80089dc:	2301      	movs	r3, #1
 80089de:	6163      	str	r3, [r4, #20]
 80089e0:	b002      	add	sp, #8
 80089e2:	bd70      	pop	{r4, r5, r6, pc}
 80089e4:	466a      	mov	r2, sp
 80089e6:	ab01      	add	r3, sp, #4
 80089e8:	f7ff ffc8 	bl	800897c <__swhatbuf_r>
 80089ec:	9900      	ldr	r1, [sp, #0]
 80089ee:	4605      	mov	r5, r0
 80089f0:	4630      	mov	r0, r6
 80089f2:	f7ff f9e5 	bl	8007dc0 <_malloc_r>
 80089f6:	b948      	cbnz	r0, 8008a0c <__smakebuf_r+0x44>
 80089f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fc:	059a      	lsls	r2, r3, #22
 80089fe:	d4ef      	bmi.n	80089e0 <__smakebuf_r+0x18>
 8008a00:	f023 0303 	bic.w	r3, r3, #3
 8008a04:	f043 0302 	orr.w	r3, r3, #2
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	e7e3      	b.n	80089d4 <__smakebuf_r+0xc>
 8008a0c:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <__smakebuf_r+0x7c>)
 8008a0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	6020      	str	r0, [r4, #0]
 8008a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	9b00      	ldr	r3, [sp, #0]
 8008a1c:	6120      	str	r0, [r4, #16]
 8008a1e:	6163      	str	r3, [r4, #20]
 8008a20:	9b01      	ldr	r3, [sp, #4]
 8008a22:	b15b      	cbz	r3, 8008a3c <__smakebuf_r+0x74>
 8008a24:	4630      	mov	r0, r6
 8008a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a2a:	f000 f91f 	bl	8008c6c <_isatty_r>
 8008a2e:	b128      	cbz	r0, 8008a3c <__smakebuf_r+0x74>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f023 0303 	bic.w	r3, r3, #3
 8008a36:	f043 0301 	orr.w	r3, r3, #1
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	89a0      	ldrh	r0, [r4, #12]
 8008a3e:	4305      	orrs	r5, r0
 8008a40:	81a5      	strh	r5, [r4, #12]
 8008a42:	e7cd      	b.n	80089e0 <__smakebuf_r+0x18>
 8008a44:	080087d5 	.word	0x080087d5

08008a48 <memmove>:
 8008a48:	4288      	cmp	r0, r1
 8008a4a:	b510      	push	{r4, lr}
 8008a4c:	eb01 0402 	add.w	r4, r1, r2
 8008a50:	d902      	bls.n	8008a58 <memmove+0x10>
 8008a52:	4284      	cmp	r4, r0
 8008a54:	4623      	mov	r3, r4
 8008a56:	d807      	bhi.n	8008a68 <memmove+0x20>
 8008a58:	1e43      	subs	r3, r0, #1
 8008a5a:	42a1      	cmp	r1, r4
 8008a5c:	d008      	beq.n	8008a70 <memmove+0x28>
 8008a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a66:	e7f8      	b.n	8008a5a <memmove+0x12>
 8008a68:	4601      	mov	r1, r0
 8008a6a:	4402      	add	r2, r0
 8008a6c:	428a      	cmp	r2, r1
 8008a6e:	d100      	bne.n	8008a72 <memmove+0x2a>
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a7a:	e7f7      	b.n	8008a6c <memmove+0x24>

08008a7c <__malloc_lock>:
 8008a7c:	4801      	ldr	r0, [pc, #4]	; (8008a84 <__malloc_lock+0x8>)
 8008a7e:	f7ff bf7b 	b.w	8008978 <__retarget_lock_acquire_recursive>
 8008a82:	bf00      	nop
 8008a84:	200005fc 	.word	0x200005fc

08008a88 <__malloc_unlock>:
 8008a88:	4801      	ldr	r0, [pc, #4]	; (8008a90 <__malloc_unlock+0x8>)
 8008a8a:	f7ff bf76 	b.w	800897a <__retarget_lock_release_recursive>
 8008a8e:	bf00      	nop
 8008a90:	200005fc 	.word	0x200005fc

08008a94 <_realloc_r>:
 8008a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	4680      	mov	r8, r0
 8008a9a:	4614      	mov	r4, r2
 8008a9c:	460e      	mov	r6, r1
 8008a9e:	b921      	cbnz	r1, 8008aaa <_realloc_r+0x16>
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa6:	f7ff b98b 	b.w	8007dc0 <_malloc_r>
 8008aaa:	b92a      	cbnz	r2, 8008ab8 <_realloc_r+0x24>
 8008aac:	f7ff f920 	bl	8007cf0 <_free_r>
 8008ab0:	4625      	mov	r5, r4
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab8:	f000 f8fa 	bl	8008cb0 <_malloc_usable_size_r>
 8008abc:	4284      	cmp	r4, r0
 8008abe:	4607      	mov	r7, r0
 8008ac0:	d802      	bhi.n	8008ac8 <_realloc_r+0x34>
 8008ac2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ac6:	d812      	bhi.n	8008aee <_realloc_r+0x5a>
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4640      	mov	r0, r8
 8008acc:	f7ff f978 	bl	8007dc0 <_malloc_r>
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d0ed      	beq.n	8008ab2 <_realloc_r+0x1e>
 8008ad6:	42bc      	cmp	r4, r7
 8008ad8:	4622      	mov	r2, r4
 8008ada:	4631      	mov	r1, r6
 8008adc:	bf28      	it	cs
 8008ade:	463a      	movcs	r2, r7
 8008ae0:	f7fe fc2c 	bl	800733c <memcpy>
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	f7ff f902 	bl	8007cf0 <_free_r>
 8008aec:	e7e1      	b.n	8008ab2 <_realloc_r+0x1e>
 8008aee:	4635      	mov	r5, r6
 8008af0:	e7df      	b.n	8008ab2 <_realloc_r+0x1e>

08008af2 <_raise_r>:
 8008af2:	291f      	cmp	r1, #31
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4604      	mov	r4, r0
 8008af8:	460d      	mov	r5, r1
 8008afa:	d904      	bls.n	8008b06 <_raise_r+0x14>
 8008afc:	2316      	movs	r3, #22
 8008afe:	6003      	str	r3, [r0, #0]
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	bd38      	pop	{r3, r4, r5, pc}
 8008b06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b08:	b112      	cbz	r2, 8008b10 <_raise_r+0x1e>
 8008b0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b0e:	b94b      	cbnz	r3, 8008b24 <_raise_r+0x32>
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 f831 	bl	8008b78 <_getpid_r>
 8008b16:	462a      	mov	r2, r5
 8008b18:	4601      	mov	r1, r0
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b20:	f000 b818 	b.w	8008b54 <_kill_r>
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d00a      	beq.n	8008b3e <_raise_r+0x4c>
 8008b28:	1c59      	adds	r1, r3, #1
 8008b2a:	d103      	bne.n	8008b34 <_raise_r+0x42>
 8008b2c:	2316      	movs	r3, #22
 8008b2e:	6003      	str	r3, [r0, #0]
 8008b30:	2001      	movs	r0, #1
 8008b32:	e7e7      	b.n	8008b04 <_raise_r+0x12>
 8008b34:	2400      	movs	r4, #0
 8008b36:	4628      	mov	r0, r5
 8008b38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b3c:	4798      	blx	r3
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e7e0      	b.n	8008b04 <_raise_r+0x12>
	...

08008b44 <raise>:
 8008b44:	4b02      	ldr	r3, [pc, #8]	; (8008b50 <raise+0xc>)
 8008b46:	4601      	mov	r1, r0
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	f7ff bfd2 	b.w	8008af2 <_raise_r>
 8008b4e:	bf00      	nop
 8008b50:	20000018 	.word	0x20000018

08008b54 <_kill_r>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	2300      	movs	r3, #0
 8008b58:	4d06      	ldr	r5, [pc, #24]	; (8008b74 <_kill_r+0x20>)
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	4611      	mov	r1, r2
 8008b60:	602b      	str	r3, [r5, #0]
 8008b62:	f7f9 f865 	bl	8001c30 <_kill>
 8008b66:	1c43      	adds	r3, r0, #1
 8008b68:	d102      	bne.n	8008b70 <_kill_r+0x1c>
 8008b6a:	682b      	ldr	r3, [r5, #0]
 8008b6c:	b103      	cbz	r3, 8008b70 <_kill_r+0x1c>
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	bd38      	pop	{r3, r4, r5, pc}
 8008b72:	bf00      	nop
 8008b74:	20000600 	.word	0x20000600

08008b78 <_getpid_r>:
 8008b78:	f7f9 b858 	b.w	8001c2c <_getpid>

08008b7c <__sread>:
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	460c      	mov	r4, r1
 8008b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b84:	f000 f89c 	bl	8008cc0 <_read_r>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	bfab      	itete	ge
 8008b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b90:	181b      	addge	r3, r3, r0
 8008b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b96:	bfac      	ite	ge
 8008b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b9a:	81a3      	strhlt	r3, [r4, #12]
 8008b9c:	bd10      	pop	{r4, pc}

08008b9e <__swrite>:
 8008b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba2:	461f      	mov	r7, r3
 8008ba4:	898b      	ldrh	r3, [r1, #12]
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	05db      	lsls	r3, r3, #23
 8008baa:	460c      	mov	r4, r1
 8008bac:	4616      	mov	r6, r2
 8008bae:	d505      	bpl.n	8008bbc <__swrite+0x1e>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb8:	f000 f868 	bl	8008c8c <_lseek_r>
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	463b      	mov	r3, r7
 8008bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd2:	f000 b817 	b.w	8008c04 <_write_r>

08008bd6 <__sseek>:
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	460c      	mov	r4, r1
 8008bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bde:	f000 f855 	bl	8008c8c <_lseek_r>
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	bf15      	itete	ne
 8008be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bf2:	81a3      	strheq	r3, [r4, #12]
 8008bf4:	bf18      	it	ne
 8008bf6:	81a3      	strhne	r3, [r4, #12]
 8008bf8:	bd10      	pop	{r4, pc}

08008bfa <__sclose>:
 8008bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfe:	f000 b813 	b.w	8008c28 <_close_r>
	...

08008c04 <_write_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4604      	mov	r4, r0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	4d05      	ldr	r5, [pc, #20]	; (8008c24 <_write_r+0x20>)
 8008c10:	602a      	str	r2, [r5, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	f7f9 f828 	bl	8001c68 <_write>
 8008c18:	1c43      	adds	r3, r0, #1
 8008c1a:	d102      	bne.n	8008c22 <_write_r+0x1e>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	b103      	cbz	r3, 8008c22 <_write_r+0x1e>
 8008c20:	6023      	str	r3, [r4, #0]
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
 8008c24:	20000600 	.word	0x20000600

08008c28 <_close_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	4d05      	ldr	r5, [pc, #20]	; (8008c44 <_close_r+0x1c>)
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7f9 f826 	bl	8001c84 <_close>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_close_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_close_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	20000600 	.word	0x20000600

08008c48 <_fstat_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	4d06      	ldr	r5, [pc, #24]	; (8008c68 <_fstat_r+0x20>)
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	4611      	mov	r1, r2
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	f7f9 f818 	bl	8001c8a <_fstat>
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	d102      	bne.n	8008c64 <_fstat_r+0x1c>
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	b103      	cbz	r3, 8008c64 <_fstat_r+0x1c>
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	bd38      	pop	{r3, r4, r5, pc}
 8008c66:	bf00      	nop
 8008c68:	20000600 	.word	0x20000600

08008c6c <_isatty_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	2300      	movs	r3, #0
 8008c70:	4d05      	ldr	r5, [pc, #20]	; (8008c88 <_isatty_r+0x1c>)
 8008c72:	4604      	mov	r4, r0
 8008c74:	4608      	mov	r0, r1
 8008c76:	602b      	str	r3, [r5, #0]
 8008c78:	f7f9 f80c 	bl	8001c94 <_isatty>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_isatty_r+0x1a>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_isatty_r+0x1a>
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	20000600 	.word	0x20000600

08008c8c <_lseek_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4604      	mov	r4, r0
 8008c90:	4608      	mov	r0, r1
 8008c92:	4611      	mov	r1, r2
 8008c94:	2200      	movs	r2, #0
 8008c96:	4d05      	ldr	r5, [pc, #20]	; (8008cac <_lseek_r+0x20>)
 8008c98:	602a      	str	r2, [r5, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f7f8 fffc 	bl	8001c98 <_lseek>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d102      	bne.n	8008caa <_lseek_r+0x1e>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b103      	cbz	r3, 8008caa <_lseek_r+0x1e>
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	20000600 	.word	0x20000600

08008cb0 <_malloc_usable_size_r>:
 8008cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cb4:	1f18      	subs	r0, r3, #4
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bfbc      	itt	lt
 8008cba:	580b      	ldrlt	r3, [r1, r0]
 8008cbc:	18c0      	addlt	r0, r0, r3
 8008cbe:	4770      	bx	lr

08008cc0 <_read_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4d05      	ldr	r5, [pc, #20]	; (8008ce0 <_read_r+0x20>)
 8008ccc:	602a      	str	r2, [r5, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f7f8 ffbc 	bl	8001c4c <_read>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d102      	bne.n	8008cde <_read_r+0x1e>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	b103      	cbz	r3, 8008cde <_read_r+0x1e>
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	bd38      	pop	{r3, r4, r5, pc}
 8008ce0:	20000600 	.word	0x20000600

08008ce4 <_init>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr

08008cf0 <_fini>:
 8008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf2:	bf00      	nop
 8008cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf6:	bc08      	pop	{r3}
 8008cf8:	469e      	mov	lr, r3
 8008cfa:	4770      	bx	lr
