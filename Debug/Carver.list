
Carver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08008040  08008040  00018040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008578  08008578  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008578  08008578  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008578  08008578  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001e0  08008760  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08008760  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b210  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000417f  00000000  00000000  0003b419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011726  00000000  00000000  0003f598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00050cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001748  00000000  00000000  00051c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b07a  00000000  00000000  000533c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201c3  00000000  00000000  0006e43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009657b  00000000  00000000  0008e5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00124b78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004628  00000000  00000000  00124bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008024 	.word	0x08008024

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008024 	.word	0x08008024

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	4605      	mov	r5, r0
 8000b80:	460c      	mov	r4, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	2300      	movs	r3, #0
 8000b86:	4628      	mov	r0, r5
 8000b88:	4621      	mov	r1, r4
 8000b8a:	f7ff ff21 	bl	80009d0 <__aeabi_dcmplt>
 8000b8e:	b928      	cbnz	r0, 8000b9c <__aeabi_d2lz+0x20>
 8000b90:	4628      	mov	r0, r5
 8000b92:	4621      	mov	r1, r4
 8000b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b98:	f000 b80a 	b.w	8000bb0 <__aeabi_d2ulz>
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ba2:	f000 f805 	bl	8000bb0 <__aeabi_d2ulz>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	bd38      	pop	{r3, r4, r5, pc}
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2ulz>:
 8000bb0:	b5d0      	push	{r4, r6, r7, lr}
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <__aeabi_d2ulz+0x34>)
 8000bb6:	4606      	mov	r6, r0
 8000bb8:	460f      	mov	r7, r1
 8000bba:	f7ff fc97 	bl	80004ec <__aeabi_dmul>
 8000bbe:	f7ff ff6d 	bl	8000a9c <__aeabi_d2uiz>
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	f7ff fc18 	bl	80003f8 <__aeabi_ui2d>
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <__aeabi_d2ulz+0x38>)
 8000bcc:	f7ff fc8e 	bl	80004ec <__aeabi_dmul>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	f7ff fad0 	bl	800017c <__aeabi_dsub>
 8000bdc:	f7ff ff5e 	bl	8000a9c <__aeabi_d2uiz>
 8000be0:	4621      	mov	r1, r4
 8000be2:	bdd0      	pop	{r4, r6, r7, pc}
 8000be4:	3df00000 	.word	0x3df00000
 8000be8:	41f00000 	.word	0x41f00000

08000bec <IO_read_write>:
#include "IO.h"
#include "gpio.h"
#include "adc.h"

void IO_read_write(IOtypedef *var) {
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// read mode switch
	uint8_t AUTO_CMD = HAL_GPIO_ReadPin(AUTO_CMD_GPIO_Port, AUTO_CMD_Pin);
 8000bee:	2101      	movs	r1, #1
void IO_read_write(IOtypedef *var) {
 8000bf0:	4604      	mov	r4, r0
	uint8_t AUTO_CMD = HAL_GPIO_ReadPin(AUTO_CMD_GPIO_Port, AUTO_CMD_Pin);
 8000bf2:	4822      	ldr	r0, [pc, #136]	; (8000c7c <IO_read_write+0x90>)
 8000bf4:	f001 fc3c 	bl	8002470 <HAL_GPIO_ReadPin>
 8000bf8:	4605      	mov	r5, r0
	uint8_t MANUAL_CMD = HAL_GPIO_ReadPin(MANUAL_CMD_GPIO_Port, MANUAL_CMD_Pin);
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	481f      	ldr	r0, [pc, #124]	; (8000c7c <IO_read_write+0x90>)
 8000bfe:	f001 fc37 	bl	8002470 <HAL_GPIO_ReadPin>
	if ((AUTO_CMD && MANUAL_CMD) || (!AUTO_CMD && !MANUAL_CMD)) {
 8000c02:	b115      	cbz	r5, 8000c0a <IO_read_write+0x1e>
 8000c04:	b910      	cbnz	r0, 8000c0c <IO_read_write+0x20>
		var->DrivingMode = MODE_TRANSITION;
	} else if (AUTO_CMD) {
		var->DrivingMode = MODE_AUTO;
 8000c06:	2302      	movs	r3, #2
 8000c08:	e001      	b.n	8000c0e <IO_read_write+0x22>
	if ((AUTO_CMD && MANUAL_CMD) || (!AUTO_CMD && !MANUAL_CMD)) {
 8000c0a:	bb60      	cbnz	r0, 8000c66 <IO_read_write+0x7a>
		var->DrivingMode = MODE_TRANSITION;
 8000c0c:	2300      	movs	r3, #0
	} else {
		var->DrivingMode = MODE_MANUAL;
 8000c0e:	7023      	strb	r3, [r4, #0]
	}

	// read gear switch
	uint8_t P = HAL_GPIO_ReadPin(Gear_P_GPIO_Port, Gear_P_Pin);
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	481a      	ldr	r0, [pc, #104]	; (8000c80 <IO_read_write+0x94>)
 8000c16:	f001 fc2b 	bl	8002470 <HAL_GPIO_ReadPin>
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	uint8_t P = HAL_GPIO_ReadPin(Gear_P_GPIO_Port, Gear_P_Pin);
 8000c1e:	4607      	mov	r7, r0
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <IO_read_write+0x94>)
 8000c22:	f001 fc25 	bl	8002470 <HAL_GPIO_ReadPin>
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 8000c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	uint8_t R = HAL_GPIO_ReadPin(Gear_R_GPIO_Port, Gear_R_Pin);
 8000c2a:	4606      	mov	r6, r0
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 8000c2c:	4814      	ldr	r0, [pc, #80]	; (8000c80 <IO_read_write+0x94>)
 8000c2e:	f001 fc1f 	bl	8002470 <HAL_GPIO_ReadPin>
	uint8_t D = HAL_GPIO_ReadPin(Gear_D_GPIO_Port, Gear_D_Pin);
 8000c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	uint8_t N = HAL_GPIO_ReadPin(Gear_N_GPIO_Port, Gear_N_Pin);
 8000c36:	4605      	mov	r5, r0
	uint8_t D = HAL_GPIO_ReadPin(Gear_D_GPIO_Port, Gear_D_Pin);
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <IO_read_write+0x94>)
 8000c3a:	f001 fc19 	bl	8002470 <HAL_GPIO_ReadPin>
	if (P + R + N + D == 1) {
 8000c3e:	19bb      	adds	r3, r7, r6
 8000c40:	442b      	add	r3, r5
 8000c42:	4403      	add	r3, r0
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d102      	bne.n	8000c4e <IO_read_write+0x62>
		if (P) {
 8000c48:	b17f      	cbz	r7, 8000c6a <IO_read_write+0x7e>
			var->Gear = GEAR_P;
 8000c4a:	2300      	movs	r3, #0
		} else if (R) {
			var->Gear = GEAR_R;
		} else if (N) {
			var->Gear = GEAR_N;
		} else if (D) {
			var->Gear = GEAR_D;
 8000c4c:	7063      	strb	r3, [r4, #1]
		}
	}

	// read direction switch
	var->DrivingDirection = HAL_GPIO_ReadPin(DIR_SIG_GPIO_Port, DIR_SIG_Pin);
 8000c4e:	2102      	movs	r1, #2
 8000c50:	480b      	ldr	r0, [pc, #44]	; (8000c80 <IO_read_write+0x94>)
 8000c52:	f001 fc0d 	bl	8002470 <HAL_GPIO_ReadPin>

	// read brake input
	var->BrakeStatus = HAL_GPIO_ReadPin(BRAKE_SIG_GPIO_Port, BRAKE_SIG_Pin);
 8000c56:	f44f 7100 	mov.w	r1, #512	; 0x200
	var->DrivingDirection = HAL_GPIO_ReadPin(DIR_SIG_GPIO_Port, DIR_SIG_Pin);
 8000c5a:	70a0      	strb	r0, [r4, #2]
	var->BrakeStatus = HAL_GPIO_ReadPin(BRAKE_SIG_GPIO_Port, BRAKE_SIG_Pin);
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <IO_read_write+0x94>)
 8000c5e:	f001 fc07 	bl	8002470 <HAL_GPIO_ReadPin>
 8000c62:	70e0      	strb	r0, [r4, #3]
}
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		var->DrivingMode = MODE_MANUAL;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e7d1      	b.n	8000c0e <IO_read_write+0x22>
		} else if (R) {
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d1ee      	bne.n	8000c4c <IO_read_write+0x60>
		} else if (N) {
 8000c6e:	b10d      	cbz	r5, 8000c74 <IO_read_write+0x88>
			var->Gear = GEAR_N;
 8000c70:	2302      	movs	r3, #2
 8000c72:	e7eb      	b.n	8000c4c <IO_read_write+0x60>
		} else if (D) {
 8000c74:	2800      	cmp	r0, #0
 8000c76:	d0ea      	beq.n	8000c4e <IO_read_write+0x62>
			var->Gear = GEAR_D;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e7e7      	b.n	8000c4c <IO_read_write+0x60>
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <IO_init_ADC_DMA>:

uint16_t ADC_buffer[4];
void IO_init_ADC_DMA(){
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, 4);
 8000c84:	2204      	movs	r2, #4
 8000c86:	4902      	ldr	r1, [pc, #8]	; (8000c90 <IO_init_ADC_DMA+0xc>)
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <IO_init_ADC_DMA+0x10>)
 8000c8a:	f000 bf97 	b.w	8001bbc <HAL_ADC_Start_DMA>
 8000c8e:	bf00      	nop
 8000c90:	200001fc 	.word	0x200001fc
 8000c94:	200002a4 	.word	0x200002a4

08000c98 <UART_PC_Set>:
int rxIndex = 0;

// FUNCTIONS ======================================================================================

void UART_PC_Set(UART_HandleTypeDef *huart) {
	PChuart = huart;
 8000c98:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <UART_PC_Set+0xc>)
	HAL_UART_Receive_IT(PChuart, RxBuffer, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4902      	ldr	r1, [pc, #8]	; (8000ca8 <UART_PC_Set+0x10>)
	PChuart = huart;
 8000c9e:	6018      	str	r0, [r3, #0]
	HAL_UART_Receive_IT(PChuart, RxBuffer, 1);
 8000ca0:	f002 bcdd 	b.w	800365e <HAL_UART_Receive_IT>
 8000ca4:	20000204 	.word	0x20000204
 8000ca8:	20000208 	.word	0x20000208

08000cac <ProcessCommand>:
	}

	HAL_UART_Receive_IT(PChuart, RxBuffer, 1);
}

void ProcessCommand(const char *command) {
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *token;
	int paramIndex = 0;

	// Split the command into parameters
	token = strtok((char*) command, " ");
 8000cae:	4918      	ldr	r1, [pc, #96]	; (8000d10 <ProcessCommand+0x64>)
 8000cb0:	f004 f9cc 	bl	800504c <strtok>
	int paramIndex = 0;
 8000cb4:	2400      	movs	r4, #0
	token = strtok((char*) command, " ");
 8000cb6:	4601      	mov	r1, r0
	while (token != NULL && paramIndex < MAX_PARAMS_COUNT) {
		strncpy(rxParameters[paramIndex], token, MAX_PARAM_SIZE - 1);
		rxParameters[paramIndex][MAX_PARAM_SIZE - 1] = '\0'; // Ensure null-termination
 8000cb8:	4626      	mov	r6, r4
 8000cba:	4d16      	ldr	r5, [pc, #88]	; (8000d14 <ProcessCommand+0x68>)
		paramIndex++;
		token = strtok(NULL, " ");
 8000cbc:	4f14      	ldr	r7, [pc, #80]	; (8000d10 <ProcessCommand+0x64>)
	while (token != NULL && paramIndex < MAX_PARAMS_COUNT) {
 8000cbe:	b109      	cbz	r1, 8000cc4 <ProcessCommand+0x18>
 8000cc0:	2c05      	cmp	r4, #5
 8000cc2:	d10e      	bne.n	8000ce2 <ProcessCommand+0x36>
	}

	// Compare the command and perform actions
	if (strcmp(rxParameters[0], "1") == 0) {
 8000cc4:	4914      	ldr	r1, [pc, #80]	; (8000d18 <ProcessCommand+0x6c>)
 8000cc6:	4813      	ldr	r0, [pc, #76]	; (8000d14 <ProcessCommand+0x68>)
 8000cc8:	f7ff fa42 	bl	8000150 <strcmp>
 8000ccc:	b9b0      	cbnz	r0, 8000cfc <ProcessCommand+0x50>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000cd6:	f500 3088 	add.w	r0, r0, #69632	; 0x11000

//	sprintf(output, "PARAMETERS %d\r\n", paramIndex);
//	HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
//	sprintf(output, "%s %s %s %s %s\r\n", rxParameters[0], rxParameters[1], rxParameters[2], rxParameters[3], rxParameters[4]);
//	HAL_UART_Transmit(PChuart, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
}
 8000cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000cde:	f001 bbd2 	b.w	8002486 <HAL_GPIO_TogglePin>
		strncpy(rxParameters[paramIndex], token, MAX_PARAM_SIZE - 1);
 8000ce2:	2213      	movs	r2, #19
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	f003 fb8f 	bl	8004408 <strncpy>
		token = strtok(NULL, " ");
 8000cea:	4639      	mov	r1, r7
 8000cec:	2000      	movs	r0, #0
		rxParameters[paramIndex][MAX_PARAM_SIZE - 1] = '\0'; // Ensure null-termination
 8000cee:	74ee      	strb	r6, [r5, #19]
		token = strtok(NULL, " ");
 8000cf0:	f004 f9ac 	bl	800504c <strtok>
		paramIndex++;
 8000cf4:	3401      	adds	r4, #1
		token = strtok(NULL, " ");
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	3514      	adds	r5, #20
 8000cfa:	e7e0      	b.n	8000cbe <ProcessCommand+0x12>
	}else if(strcmp(rxParameters[0], "RELAY") == 0){
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <ProcessCommand+0x70>)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <ProcessCommand+0x68>)
 8000d00:	f7ff fa26 	bl	8000150 <strcmp>
 8000d04:	b918      	cbnz	r0, 8000d0e <ProcessCommand+0x62>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <ProcessCommand+0x74>)
 8000d0c:	e7e5      	b.n	8000cda <ProcessCommand+0x2e>
}
 8000d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d10:	08008508 	.word	0x08008508
 8000d14:	20000240 	.word	0x20000240
 8000d18:	08008040 	.word	0x08008040
 8000d1c:	08008042 	.word	0x08008042
 8000d20:	40010c00 	.word	0x40010c00

08000d24 <UART_PC_Callback>:
void UART_PC_Callback(UART_HandleTypeDef *huart) {
 8000d24:	b570      	push	{r4, r5, r6, lr}
	if (huart != PChuart) {
 8000d26:	4d11      	ldr	r5, [pc, #68]	; (8000d6c <UART_PC_Callback+0x48>)
 8000d28:	682b      	ldr	r3, [r5, #0]
 8000d2a:	4283      	cmp	r3, r0
 8000d2c:	d11d      	bne.n	8000d6a <UART_PC_Callback+0x46>
	if (RxBuffer[0] == '\r') {
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <UART_PC_Callback+0x4c>)
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	2a0d      	cmp	r2, #13
 8000d34:	d00b      	beq.n	8000d4e <UART_PC_Callback+0x2a>
		if (rxIndex > 0) {
 8000d36:	4c0f      	ldr	r4, [pc, #60]	; (8000d74 <UART_PC_Callback+0x50>)
	} else if (RxBuffer[0] == '\n') {
 8000d38:	2a0a      	cmp	r2, #10
		if (rxIndex > 0) {
 8000d3a:	6823      	ldr	r3, [r4, #0]
	} else if (RxBuffer[0] == '\n') {
 8000d3c:	d10e      	bne.n	8000d5c <UART_PC_Callback+0x38>
		if (rxIndex > 0) {
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	dd05      	ble.n	8000d4e <UART_PC_Callback+0x2a>
			rxCommand[rxIndex] = '\0'; // Null-terminate the command string
 8000d42:	2600      	movs	r6, #0
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <UART_PC_Callback+0x54>)
 8000d46:	54c6      	strb	r6, [r0, r3]
			ProcessCommand(rxCommand);
 8000d48:	f7ff ffb0 	bl	8000cac <ProcessCommand>
			rxIndex = 0;
 8000d4c:	6026      	str	r6, [r4, #0]
	HAL_UART_Receive_IT(PChuart, RxBuffer, 1);
 8000d4e:	6828      	ldr	r0, [r5, #0]
 8000d50:	2201      	movs	r2, #1
}
 8000d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_IT(PChuart, RxBuffer, 1);
 8000d56:	4906      	ldr	r1, [pc, #24]	; (8000d70 <UART_PC_Callback+0x4c>)
 8000d58:	f002 bc81 	b.w	800365e <HAL_UART_Receive_IT>
		if (rxIndex < MAX_CMD_SIZE - 1) {
 8000d5c:	2b30      	cmp	r3, #48	; 0x30
			rxCommand[rxIndex] = RxBuffer[0];
 8000d5e:	bfdf      	itttt	le
 8000d60:	4905      	ldrle	r1, [pc, #20]	; (8000d78 <UART_PC_Callback+0x54>)
 8000d62:	54ca      	strble	r2, [r1, r3]
			rxIndex++;
 8000d64:	3301      	addle	r3, #1
 8000d66:	6023      	strle	r3, [r4, #0]
 8000d68:	e7f1      	b.n	8000d4e <UART_PC_Callback+0x2a>
}
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
 8000d6c:	20000204 	.word	0x20000204
 8000d70:	20000208 	.word	0x20000208
 8000d74:	2000023c 	.word	0x2000023c
 8000d78:	20000209 	.word	0x20000209

08000d7c <MX_ADC1_Init>:

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d7c:	4824      	ldr	r0, [pc, #144]	; (8000e10 <MX_ADC1_Init+0x94>)
 8000d7e:	4a25      	ldr	r2, [pc, #148]	; (8000e14 <MX_ADC1_Init+0x98>)
{
 8000d80:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8000d82:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d84:	f44f 7280 	mov.w	r2, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d88:	2300      	movs	r3, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d8a:	2401      	movs	r4, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8000d8c:	2504      	movs	r5, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d8e:	6082      	str	r2, [r0, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d90:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
{
 8000d94:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000d9a:	9303      	str	r3, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d9c:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d9e:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da0:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da2:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000da4:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da6:	f000 ffbd 	bl	8001d24 <HAL_ADC_Init>
 8000daa:	b108      	cbz	r0, 8000db0 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8000dac:	f000 fa36 	bl	800121c <Error_Handler>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000db0:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	4817      	ldr	r0, [pc, #92]	; (8000e10 <MX_ADC1_Init+0x94>)
 8000db4:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db6:	e9cd 5401 	strd	r5, r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000dba:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbc:	f000 fe44 	bl	8001a48 <HAL_ADC_ConfigChannel>
 8000dc0:	b108      	cbz	r0, 8000dc6 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8000dc2:	f000 fa2b 	bl	800121c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dc6:	2005      	movs	r0, #5
 8000dc8:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dca:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dcc:	e9cd 0301 	strd	r0, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd0:	480f      	ldr	r0, [pc, #60]	; (8000e10 <MX_ADC1_Init+0x94>)
 8000dd2:	f000 fe39 	bl	8001a48 <HAL_ADC_ConfigChannel>
 8000dd6:	b108      	cbz	r0, 8000ddc <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8000dd8:	f000 fa20 	bl	800121c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ddc:	2106      	movs	r1, #6
 8000dde:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000de2:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de6:	a901      	add	r1, sp, #4
 8000de8:	f000 fe2e 	bl	8001a48 <HAL_ADC_ConfigChannel>
 8000dec:	b108      	cbz	r0, 8000df2 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000dee:	f000 fa15 	bl	800121c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000df2:	2304      	movs	r3, #4
 8000df4:	2207      	movs	r2, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_ADC1_Init+0x94>)
 8000df8:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000dfc:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e00:	f000 fe22 	bl	8001a48 <HAL_ADC_ConfigChannel>
 8000e04:	b108      	cbz	r0, 8000e0a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e06:	f000 fa09 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0a:	b005      	add	sp, #20
 8000e0c:	bd30      	pop	{r4, r5, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002a4 	.word	0x200002a4
 8000e14:	40012400 	.word	0x40012400

08000e18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e18:	b530      	push	{r4, r5, lr}
 8000e1a:	4605      	mov	r5, r0
 8000e1c:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	2210      	movs	r2, #16
 8000e20:	2100      	movs	r1, #0
 8000e22:	a802      	add	r0, sp, #8
 8000e24:	f002 fc56 	bl	80036d4 <memset>
  if(adcHandle->Instance==ADC1)
 8000e28:	682a      	ldr	r2, [r5, #0]
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <HAL_ADC_MspInit+0x98>)
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d13c      	bne.n	8000eaa <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e30:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000e34:	699a      	ldr	r2, [r3, #24]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_24VSENSE_Pin|ADC_POTEN_SIG_Pin|GPIO_PIN_6|ADC_BRAKE_CUR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e42:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000e46:	9200      	str	r2, [sp, #0]
 8000e48:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e4c:	4c1a      	ldr	r4, [pc, #104]	; (8000eb8 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	f042 0204 	orr.w	r2, r2, #4
 8000e52:	619a      	str	r2, [r3, #24]
 8000e54:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e56:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f001 fa29 	bl	80022bc <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e6a:	2080      	movs	r0, #128	; 0x80
 8000e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e70:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e72:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e76:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8000e7a:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7c:	490f      	ldr	r1, [pc, #60]	; (8000ebc <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e7e:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e80:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e84:	e9c4 c205 	strd	ip, r2, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e8a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e8c:	f001 f8aa 	bl	8001fe4 <HAL_DMA_Init>
 8000e90:	b108      	cbz	r0, 8000e96 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8000e92:	f000 f9c3 	bl	800121c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e9a:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e9c:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e9e:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ea0:	f001 f84c 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ea4:	2012      	movs	r0, #18
 8000ea6:	f001 f87b 	bl	8001fa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000eaa:	b007      	add	sp, #28
 8000eac:	bd30      	pop	{r4, r5, pc}
 8000eae:	bf00      	nop
 8000eb0:	40012400 	.word	0x40012400
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	200002d4 	.word	0x200002d4
 8000ebc:	40020008 	.word	0x40020008

08000ec0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000ec0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
 8000ec2:	2310      	movs	r3, #16
  hcan.Instance = CAN1;
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <MX_CAN_Init+0x2c>)
  hcan.Init.Prescaler = 16;
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <MX_CAN_Init+0x30>)
 8000ec8:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ecc:	2300      	movs	r3, #0
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ece:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ed0:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ed2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000eda:	f000 ffa2 	bl	8001e22 <HAL_CAN_Init>
 8000ede:	b118      	cbz	r0, 8000ee8 <MX_CAN_Init+0x28>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000ee0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000ee4:	f000 b99a 	b.w	800121c <Error_Handler>
}
 8000ee8:	bd08      	pop	{r3, pc}
 8000eea:	bf00      	nop
 8000eec:	20000318 	.word	0x20000318
 8000ef0:	40006400 	.word	0x40006400

08000ef4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	2210      	movs	r2, #16
 8000efc:	2100      	movs	r1, #0
 8000efe:	a802      	add	r0, sp, #8
 8000f00:	f002 fbe8 	bl	80036d4 <memset>
  if(canHandle->Instance==CAN1)
 8000f04:	6822      	ldr	r2, [r4, #0]
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_CAN_MspInit+0x68>)
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d125      	bne.n	8000f58 <HAL_CAN_MspInit+0x64>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f0c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8000f10:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	4813      	ldr	r0, [pc, #76]	; (8000f60 <HAL_CAN_MspInit+0x6c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f14:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000f18:	61da      	str	r2, [r3, #28]
 8000f1a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f1e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	f042 0204 	orr.w	r2, r2, #4
 8000f2c:	619a      	str	r2, [r3, #24]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f3c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f001 f9bd 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f48:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <HAL_CAN_MspInit+0x6c>)
 8000f50:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f52:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f001 f9b2 	bl	80022bc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f58:	b006      	add	sp, #24
 8000f5a:	bd10      	pop	{r4, pc}
 8000f5c:	40006400 	.word	0x40006400
 8000f60:	40010800 	.word	0x40010800

08000f64 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_DMA_Init+0x3c>)
{
 8000f66:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f68:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f6a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f6c:	f042 0201 	orr.w	r2, r2, #1
 8000f70:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f74:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f76:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f80:	f000 ffdc 	bl	8001f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f84:	200b      	movs	r0, #11
 8000f86:	f001 f80b 	bl	8001fa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	200c      	movs	r0, #12
 8000f8e:	4611      	mov	r1, r2
 8000f90:	f000 ffd4 	bl	8001f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f94:	200c      	movs	r0, #12

}
 8000f96:	b003      	add	sp, #12
 8000f98:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f9c:	f001 b800 	b.w	8001fa0 <HAL_NVIC_EnableIRQ>
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <MX_GPIO_Init>:
     PA6   ------> ADCx_IN6
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	2210      	movs	r2, #16
{
 8000fa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000faa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	eb0d 0002 	add.w	r0, sp, r2
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	f002 fb8f 	bl	80036d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fb8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800109c <MX_GPIO_Init+0xf8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbc:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRAKE_DIR_Pin|STEERING_RELAY_Pin, GPIO_PIN_RESET);
 8000fbe:	4d38      	ldr	r5, [pc, #224]	; (80010a0 <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	f042 0210 	orr.w	r2, r2, #16
 8000fc4:	619a      	str	r2, [r3, #24]
 8000fc6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fc8:	4640      	mov	r0, r8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	f002 0210 	and.w	r2, r2, #16
 8000fce:	9200      	str	r2, [sp, #0]
 8000fd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd8:	f042 0220 	orr.w	r2, r2, #32
 8000fdc:	619a      	str	r2, [r3, #24]
 8000fde:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	f002 0220 	and.w	r2, r2, #32
 8000fe6:	9201      	str	r2, [sp, #4]
 8000fe8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	f042 0204 	orr.w	r2, r2, #4
 8000ff2:	619a      	str	r2, [r3, #24]
 8000ff4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	f002 0204 	and.w	r2, r2, #4
 8000ffc:	9202      	str	r2, [sp, #8]
 8000ffe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AUTO_CMD_Pin|MANUAL_CMD_Pin;
 8001002:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	f042 0208 	orr.w	r2, r2, #8
 800100a:	619a      	str	r2, [r3, #24]
 800100c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	9303      	str	r3, [sp, #12]
 8001016:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001018:	f001 fa30 	bl	800247c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, BRAKE_DIR_Pin|STEERING_RELAY_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	4628      	mov	r0, r5
 8001020:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001024:	f001 fa2a 	bl	800247c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800102c:	4640      	mov	r0, r8
 800102e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f5a8 6800 	sub.w	r8, r8, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800103c:	f001 f93e 	bl	80022bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	4640      	mov	r0, r8
 8001042:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	e9cd 9404 	strd	r9, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f001 f937 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800104e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	4640      	mov	r0, r8
 8001052:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001054:	e9cd 3904 	strd	r3, r9, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f001 f930 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMER_SIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_GPIO_Init+0x100>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(EMER_SIG_GPIO_Port, &GPIO_InitStruct);
 800105e:	4628      	mov	r0, r5
 8001060:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pin = EMER_SIG_Pin;
 8001066:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(EMER_SIG_GPIO_Port, &GPIO_InitStruct);
 8001068:	f001 f928 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_SIG_Pin|Gear_P_Pin|Gear_R_Pin|Gear_N_Pin
 800106c:	f24f 2302 	movw	r3, #61954	; 0xf202
                          |Gear_D_Pin|BRAKE_SIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	4628      	mov	r0, r5
 8001072:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f001 f91f 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BRAKE_DIR_Pin|STEERING_RELAY_Pin;
 800107e:	f44f 7390 	mov.w	r3, #288	; 0x120
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	4628      	mov	r0, r5
 8001084:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f001 f915 	bl	80022bc <HAL_GPIO_Init>

}
 8001092:	b009      	add	sp, #36	; 0x24
 8001094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	40011000 	.word	0x40011000
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	10210000 	.word	0x10210000

080010a8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010a8:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010aa:	480b      	ldr	r0, [pc, #44]	; (80010d8 <MX_I2C2_Init+0x30>)
  hi2c2.Init.ClockSpeed = 100000;
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <MX_I2C2_Init+0x34>)
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_I2C2_Init+0x38>)
 80010b0:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	2300      	movs	r3, #0
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 80010ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010be:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010c8:	f001 f9e6 	bl	8002498 <HAL_I2C_Init>
 80010cc:	b118      	cbz	r0, 80010d6 <MX_I2C2_Init+0x2e>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80010d2:	f000 b8a3 	b.w	800121c <Error_Handler>
}
 80010d6:	bd08      	pop	{r3, pc}
 80010d8:	20000340 	.word	0x20000340
 80010dc:	40005800 	.word	0x40005800
 80010e0:	000186a0 	.word	0x000186a0

080010e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e4:	b510      	push	{r4, lr}
 80010e6:	4604      	mov	r4, r0
 80010e8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	2210      	movs	r2, #16
 80010ec:	2100      	movs	r1, #0
 80010ee:	a802      	add	r0, sp, #8
 80010f0:	f002 faf0 	bl	80036d4 <memset>
  if(i2cHandle->Instance==I2C2)
 80010f4:	6822      	ldr	r2, [r4, #0]
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_I2C_MspInit+0x58>)
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d11d      	bne.n	8001138 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	4c10      	ldr	r4, [pc, #64]	; (8001140 <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fe:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	480f      	ldr	r0, [pc, #60]	; (8001144 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	61a3      	str	r3, [r4, #24]
 800110c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001118:	2312      	movs	r3, #18
 800111a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f001 f8cb 	bl	80022bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001126:	69e3      	ldr	r3, [r4, #28]
 8001128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800112c:	61e3      	str	r3, [r4, #28]
 800112e:	69e3      	ldr	r3, [r4, #28]
 8001130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001138:	b006      	add	sp, #24
 800113a:	bd10      	pop	{r4, pc}
 800113c:	40005800 	.word	0x40005800
 8001140:	40021000 	.word	0x40021000
 8001144:	40010c00 	.word	0x40010c00

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b510      	push	{r4, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114c:	2214      	movs	r2, #20
 800114e:	2100      	movs	r1, #0
 8001150:	a80c      	add	r0, sp, #48	; 0x30
 8001152:	f002 fabf 	bl	80036d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001156:	2214      	movs	r2, #20
 8001158:	2100      	movs	r1, #0
 800115a:	eb0d 0002 	add.w	r0, sp, r2
 800115e:	f002 fab9 	bl	80036d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001162:	2210      	movs	r2, #16
 8001164:	2100      	movs	r1, #0
 8001166:	a801      	add	r0, sp, #4
 8001168:	f002 fab4 	bl	80036d4 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001172:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001174:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001178:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800117c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001182:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001184:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f001 fa2f 	bl	80025e8 <HAL_RCC_OscConfig>
 800118a:	b108      	cbz	r0, 8001190 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800118e:	e7fe      	b.n	800118e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001192:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001196:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a0:	4621      	mov	r1, r4
 80011a2:	a805      	add	r0, sp, #20
 80011a4:	f001 fbe2 	bl	800296c <HAL_RCC_ClockConfig>
 80011a8:	b108      	cbz	r0, 80011ae <SystemClock_Config+0x66>
 80011aa:	b672      	cpsid	i
	while (1) {
 80011ac:	e7fe      	b.n	80011ac <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011b4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011b6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	f001 fc94 	bl	8002ae4 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	b108      	cbz	r0, 80011c2 <SystemClock_Config+0x7a>
 80011be:	b672      	cpsid	i
	while (1) {
 80011c0:	e7fe      	b.n	80011c0 <SystemClock_Config+0x78>
}
 80011c2:	b014      	add	sp, #80	; 0x50
 80011c4:	bd10      	pop	{r4, pc}
	...

080011c8 <main>:
{
 80011c8:	b508      	push	{r3, lr}
  HAL_Init();
 80011ca:	f000 fb6b 	bl	80018a4 <HAL_Init>
  SystemClock_Config();
 80011ce:	f7ff ffbb 	bl	8001148 <SystemClock_Config>
  MX_GPIO_Init();
 80011d2:	f7ff fee7 	bl	8000fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d6:	f7ff fec5 	bl	8000f64 <MX_DMA_Init>
  MX_CAN_Init();
 80011da:	f7ff fe71 	bl	8000ec0 <MX_CAN_Init>
  MX_TIM1_Init();
 80011de:	f000 f9ad 	bl	800153c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80011e2:	f000 fa65 	bl	80016b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011e6:	f000 fa7f 	bl	80016e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011ea:	f7ff fdc7 	bl	8000d7c <MX_ADC1_Init>
  MX_TIM3_Init();
 80011ee:	f000 fa0f 	bl	8001610 <MX_TIM3_Init>
  MX_I2C2_Init();
 80011f2:	f7ff ff59 	bl	80010a8 <MX_I2C2_Init>
  MX_TIM4_Init();
 80011f6:	f000 f8b7 	bl	8001368 <MX_TIM4_Init>
	UART_PC_Set(&huart1);
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <main+0x48>)
 80011fc:	f7ff fd4c 	bl	8000c98 <UART_PC_Set>
	IO_init_ADC_DMA();
 8001200:	f7ff fd40 	bl	8000c84 <IO_init_ADC_DMA>
		IO_read_write(&IOVar);
 8001204:	4c03      	ldr	r4, [pc, #12]	; (8001214 <main+0x4c>)
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff fcf0 	bl	8000bec <IO_read_write>
	while (1) {
 800120c:	e7fb      	b.n	8001206 <main+0x3e>
 800120e:	bf00      	nop
 8001210:	200004b8 	.word	0x200004b8
 8001214:	20000394 	.word	0x20000394

08001218 <HAL_UART_RxCpltCallback>:
	UART_PC_Callback(huart);
 8001218:	f7ff bd84 	b.w	8000d24 <UART_PC_Callback>

0800121c <Error_Handler>:
 800121c:	b672      	cpsid	i
	while (1) {
 800121e:	e7fe      	b.n	800121e <Error_Handler+0x2>

08001220 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_MspInit+0x3c>)
{
 8001222:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	699a      	ldr	r2, [r3, #24]
 800122e:	f002 0201 	and.w	r2, r2, #1
 8001232:	9200      	str	r2, [sp, #0]
 8001234:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	69da      	ldr	r2, [r3, #28]
 8001238:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800123c:	61da      	str	r2, [r3, #28]
 800123e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800124a:	6853      	ldr	r3, [r2, #4]
 800124c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001254:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	b002      	add	sp, #8
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000

08001264 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler>

08001266 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler>

08001268 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler>

0800126a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler>

0800126c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler>

0800126e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 bb28 	b.w	80018c8 <HAL_IncTick>

08001278 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001278:	4801      	ldr	r0, [pc, #4]	; (8001280 <DMA1_Channel1_IRQHandler+0x8>)
 800127a:	f000 bf8b 	b.w	8002194 <HAL_DMA_IRQHandler>
 800127e:	bf00      	nop
 8001280:	200002d4 	.word	0x200002d4

08001284 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001284:	4801      	ldr	r0, [pc, #4]	; (800128c <DMA1_Channel2_IRQHandler+0x8>)
 8001286:	f000 bf85 	b.w	8002194 <HAL_DMA_IRQHandler>
 800128a:	bf00      	nop
 800128c:	2000039c 	.word	0x2000039c

08001290 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001290:	4801      	ldr	r0, [pc, #4]	; (8001298 <ADC1_2_IRQHandler+0x8>)
 8001292:	f000 bb5a 	b.w	800194a <HAL_ADC_IRQHandler>
 8001296:	bf00      	nop
 8001298:	200002a4 	.word	0x200002a4

0800129c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800129c:	4801      	ldr	r0, [pc, #4]	; (80012a4 <USART1_IRQHandler+0x8>)
 800129e:	f002 b873 	b.w	8003388 <HAL_UART_IRQHandler>
 80012a2:	bf00      	nop
 80012a4:	200004b8 	.word	0x200004b8

080012a8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a8:	4801      	ldr	r0, [pc, #4]	; (80012b0 <USART2_IRQHandler+0x8>)
 80012aa:	f002 b86d 	b.w	8003388 <HAL_UART_IRQHandler>
 80012ae:	bf00      	nop
 80012b0:	20000500 	.word	0x20000500

080012b4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80012b4:	2001      	movs	r0, #1
 80012b6:	4770      	bx	lr

080012b8 <_kill>:

int _kill(int pid, int sig)
{
 80012b8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ba:	f002 f9e1 	bl	8003680 <__errno>
 80012be:	2316      	movs	r3, #22
 80012c0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80012c2:	f04f 30ff 	mov.w	r0, #4294967295
 80012c6:	bd08      	pop	{r3, pc}

080012c8 <_exit>:

void _exit (int status)
{
 80012c8:	b508      	push	{r3, lr}
  errno = EINVAL;
 80012ca:	f002 f9d9 	bl	8003680 <__errno>
 80012ce:	2316      	movs	r3, #22
 80012d0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80012d2:	e7fe      	b.n	80012d2 <_exit+0xa>

080012d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d4:	b570      	push	{r4, r5, r6, lr}
 80012d6:	460d      	mov	r5, r1
 80012d8:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	460e      	mov	r6, r1
 80012dc:	1b73      	subs	r3, r6, r5
 80012de:	429c      	cmp	r4, r3
 80012e0:	dc01      	bgt.n	80012e6 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80012e2:	4620      	mov	r0, r4
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80012e6:	f3af 8000 	nop.w
 80012ea:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	e7f5      	b.n	80012dc <_read+0x8>

080012f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	460d      	mov	r5, r1
 80012f4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f6:	460e      	mov	r6, r1
 80012f8:	1b73      	subs	r3, r6, r5
 80012fa:	429c      	cmp	r4, r3
 80012fc:	dc01      	bgt.n	8001302 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80012fe:	4620      	mov	r0, r4
 8001300:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8001302:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001306:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	e7f5      	b.n	80012f8 <_write+0x8>

0800130c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	4770      	bx	lr

08001312 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8001316:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001318:	604b      	str	r3, [r1, #4]
}
 800131a:	4770      	bx	lr

0800131c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800131c:	2001      	movs	r0, #1
 800131e:	4770      	bx	lr

08001320 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001320:	2000      	movs	r0, #0
 8001322:	4770      	bx	lr

08001324 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <_sbrk+0x30>)
{
 8001326:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001328:	6811      	ldr	r1, [r2, #0]
{
 800132a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800132c:	b909      	cbnz	r1, 8001332 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800132e:	490a      	ldr	r1, [pc, #40]	; (8001358 <_sbrk+0x34>)
 8001330:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	6810      	ldr	r0, [r2, #0]
 8001334:	4909      	ldr	r1, [pc, #36]	; (800135c <_sbrk+0x38>)
 8001336:	4c0a      	ldr	r4, [pc, #40]	; (8001360 <_sbrk+0x3c>)
 8001338:	4403      	add	r3, r0
 800133a:	1b09      	subs	r1, r1, r4
 800133c:	428b      	cmp	r3, r1
 800133e:	d906      	bls.n	800134e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001340:	f002 f99e 	bl	8003680 <__errno>
 8001344:	230c      	movs	r3, #12
 8001346:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001348:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800134c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800134e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001350:	e7fc      	b.n	800134c <_sbrk+0x28>
 8001352:	bf00      	nop
 8001354:	20000398 	.word	0x20000398
 8001358:	20000560 	.word	0x20000560
 800135c:	20005000 	.word	0x20005000
 8001360:	00000400 	.word	0x00000400

08001364 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	4770      	bx	lr
	...

08001368 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001368:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	2400      	movs	r4, #0
{
 800136c:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 800136e:	2100      	movs	r1, #0
 8001370:	2220      	movs	r2, #32
 8001372:	a804      	add	r0, sp, #16
 8001374:	f002 f9ae 	bl	80036d4 <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001378:	4810      	ldr	r0, [pc, #64]	; (80013bc <MX_TIM4_Init+0x54>)
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_TIM4_Init+0x58>)
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800137c:	a903      	add	r1, sp, #12
  htim4.Init.Prescaler = 0;
 800137e:	e9c0 3400 	strd	r3, r4, [r0]
  htim4.Init.Period = 65535;
 8001382:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	e9c0 3403 	strd	r3, r4, [r0, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800138a:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001390:	6084      	str	r4, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	6184      	str	r4, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001394:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001396:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001398:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800139a:	f001 fd23 	bl	8002de4 <HAL_TIM_Encoder_Init>
 800139e:	b108      	cbz	r0, 80013a4 <MX_TIM4_Init+0x3c>
  {
    Error_Handler();
 80013a0:	f7ff ff3c 	bl	800121c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_TIM4_Init+0x54>)
 80013a6:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ac:	f001 fe9e 	bl	80030ec <HAL_TIMEx_MasterConfigSynchronization>
 80013b0:	b108      	cbz	r0, 80013b6 <MX_TIM4_Init+0x4e>
  {
    Error_Handler();
 80013b2:	f7ff ff33 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013b6:	b00c      	add	sp, #48	; 0x30
 80013b8:	bd10      	pop	{r4, pc}
 80013ba:	bf00      	nop
 80013bc:	20000470 	.word	0x20000470
 80013c0:	40000800 	.word	0x40000800

080013c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013c4:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(tim_baseHandle->Instance==TIM1)
 80013c6:	6803      	ldr	r3, [r0, #0]
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_TIM_Base_MspInit+0x70>)
{
 80013ca:	4605      	mov	r5, r0
  if(tim_baseHandle->Instance==TIM1)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d123      	bne.n	8001418 <HAL_TIM_Base_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_TIM_Base_MspInit+0x74>)

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80013d2:	4c1a      	ldr	r4, [pc, #104]	; (800143c <HAL_TIM_Base_MspInit+0x78>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d4:	699a      	ldr	r2, [r3, #24]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d6:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013dc:	619a      	str	r2, [r3, #24]
 80013de:	699b      	ldr	r3, [r3, #24]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013e0:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_TIM_Base_MspInit+0x7c>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f4:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80013fc:	4620      	mov	r0, r4
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80013fe:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001402:	60a3      	str	r3, [r4, #8]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001404:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001406:	f000 fded 	bl	8001fe4 <HAL_DMA_Init>
 800140a:	b108      	cbz	r0, 8001410 <HAL_TIM_Base_MspInit+0x4c>
    {
      Error_Handler();
 800140c:	f7ff ff06 	bl	800121c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001410:	626c      	str	r4, [r5, #36]	; 0x24
 8001412:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001414:	b003      	add	sp, #12
 8001416:	bd30      	pop	{r4, r5, pc}
  else if(tim_baseHandle->Instance==TIM3)
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_TIM_Base_MspInit+0x80>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d1fa      	bne.n	8001414 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_TIM_Base_MspInit+0x74>)
 8001420:	69da      	ldr	r2, [r3, #28]
 8001422:	f042 0202 	orr.w	r2, r2, #2
 8001426:	61da      	str	r2, [r3, #28]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	9b01      	ldr	r3, [sp, #4]
}
 8001432:	e7ef      	b.n	8001414 <HAL_TIM_Base_MspInit+0x50>
 8001434:	40012c00 	.word	0x40012c00
 8001438:	40021000 	.word	0x40021000
 800143c:	2000039c 	.word	0x2000039c
 8001440:	4002001c 	.word	0x4002001c
 8001444:	40000400 	.word	0x40000400

08001448 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001448:	b510      	push	{r4, lr}
 800144a:	4604      	mov	r4, r0
 800144c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	2210      	movs	r2, #16
 8001450:	2100      	movs	r1, #0
 8001452:	a802      	add	r0, sp, #8
 8001454:	f002 f93e 	bl	80036d4 <memset>
  if(tim_encoderHandle->Instance==TIM4)
 8001458:	6822      	ldr	r2, [r4, #0]
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_TIM_Encoder_MspInit+0x50>)
 800145c:	429a      	cmp	r2, r3
 800145e:	d119      	bne.n	8001494 <HAL_TIM_Encoder_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001460:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001464:	69da      	ldr	r2, [r3, #28]
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <HAL_TIM_Encoder_MspInit+0x54>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001468:	f042 0204 	orr.w	r2, r2, #4
 800146c:	61da      	str	r2, [r3, #28]
 800146e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001472:	f002 0204 	and.w	r2, r2, #4
 8001476:	9200      	str	r2, [sp, #0]
 8001478:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	f042 0208 	orr.w	r2, r2, #8
 8001480:	619a      	str	r2, [r3, #24]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 800148c:	23c0      	movs	r3, #192	; 0xc0
 800148e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f000 ff14 	bl	80022bc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001494:	b006      	add	sp, #24
 8001496:	bd10      	pop	{r4, pc}
 8001498:	40000800 	.word	0x40000800
 800149c:	40010c00 	.word	0x40010c00

080014a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014a0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	2510      	movs	r5, #16
{
 80014a4:	4604      	mov	r4, r0
 80014a6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	462a      	mov	r2, r5
 80014aa:	2100      	movs	r1, #0
 80014ac:	a802      	add	r0, sp, #8
 80014ae:	f002 f911 	bl	80036d4 <memset>
  if(timHandle->Instance==TIM1)
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <HAL_TIM_MspPostInit+0x84>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d115      	bne.n	80014e6 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_TIM_MspPostInit+0x88>)
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_WS2812_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 80014bc:	481b      	ldr	r0, [pc, #108]	; (800152c <HAL_TIM_MspPostInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 80014c0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	f042 0204 	orr.w	r2, r2, #4
 80014c6:	619a      	str	r2, [r3, #24]
 80014c8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(RGB_WS2812_GPIO_Port, &GPIO_InitStruct);
 80014de:	f000 feed 	bl	80022bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014e2:	b007      	add	sp, #28
 80014e4:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM3)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <HAL_TIM_MspPostInit+0x90>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d1fa      	bne.n	80014e2 <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_TIM_MspPostInit+0x88>)
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	6999      	ldr	r1, [r3, #24]
 80014f2:	f041 0108 	orr.w	r1, r1, #8
 80014f6:	6199      	str	r1, [r3, #24]
 80014f8:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 80014fa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = BRAKE_PWM_Pin;
 8001506:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 800150c:	f000 fed6 	bl	80022bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001510:	4a09      	ldr	r2, [pc, #36]	; (8001538 <HAL_TIM_MspPostInit+0x98>)
 8001512:	6853      	ldr	r3, [r2, #4]
 8001514:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001518:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800151c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001520:	6053      	str	r3, [r2, #4]
}
 8001522:	e7de      	b.n	80014e2 <HAL_TIM_MspPostInit+0x42>
 8001524:	40012c00 	.word	0x40012c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40010800 	.word	0x40010800
 8001530:	40000400 	.word	0x40000400
 8001534:	40010c00 	.word	0x40010c00
 8001538:	40010000 	.word	0x40010000

0800153c <MX_TIM1_Init>:
{
 800153c:	b510      	push	{r4, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001540:	2210      	movs	r2, #16
 8001542:	2100      	movs	r1, #0
 8001544:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001548:	f002 f8c4 	bl	80036d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154c:	221c      	movs	r2, #28
 800154e:	4621      	mov	r1, r4
 8001550:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001554:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001558:	f002 f8bc 	bl	80036d4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800155c:	2220      	movs	r2, #32
 800155e:	4621      	mov	r1, r4
 8001560:	a80e      	add	r0, sp, #56	; 0x38
 8001562:	f002 f8b7 	bl	80036d4 <memset>
  htim1.Instance = TIM1;
 8001566:	4828      	ldr	r0, [pc, #160]	; (8001608 <MX_TIM1_Init+0xcc>)
 8001568:	4b28      	ldr	r3, [pc, #160]	; (800160c <MX_TIM1_Init+0xd0>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim1.Init.Prescaler = 0;
 800156e:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 65535;
 8001572:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001578:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800157c:	f001 fbda 	bl	8002d34 <HAL_TIM_Base_Init>
 8001580:	b108      	cbz	r0, 8001586 <MX_TIM1_Init+0x4a>
    Error_Handler();
 8001582:	f7ff fe4b 	bl	800121c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158a:	481f      	ldr	r0, [pc, #124]	; (8001608 <MX_TIM1_Init+0xcc>)
 800158c:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001590:	f001 fd10 	bl	8002fb4 <HAL_TIM_ConfigClockSource>
 8001594:	b108      	cbz	r0, 800159a <MX_TIM1_Init+0x5e>
    Error_Handler();
 8001596:	f7ff fe41 	bl	800121c <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800159a:	481b      	ldr	r0, [pc, #108]	; (8001608 <MX_TIM1_Init+0xcc>)
 800159c:	f001 fbf6 	bl	8002d8c <HAL_TIM_PWM_Init>
 80015a0:	b108      	cbz	r0, 80015a6 <MX_TIM1_Init+0x6a>
    Error_Handler();
 80015a2:	f7ff fe3b 	bl	800121c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a8:	4817      	ldr	r0, [pc, #92]	; (8001608 <MX_TIM1_Init+0xcc>)
 80015aa:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015b0:	f001 fd9c 	bl	80030ec <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	b108      	cbz	r0, 80015ba <MX_TIM1_Init+0x7e>
    Error_Handler();
 80015b6:	f7ff fe31 	bl	800121c <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ba:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	2200      	movs	r2, #0
 80015be:	4812      	ldr	r0, [pc, #72]	; (8001608 <MX_TIM1_Init+0xcc>)
 80015c0:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 80015c2:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ca:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ce:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d0:	f001 fc8a 	bl	8002ee8 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	b108      	cbz	r0, 80015da <MX_TIM1_Init+0x9e>
    Error_Handler();
 80015d6:	f7ff fe21 	bl	800121c <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015da:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e0:	4809      	ldr	r0, [pc, #36]	; (8001608 <MX_TIM1_Init+0xcc>)
 80015e2:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e8:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ec:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ee:	9213      	str	r2, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f0:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015f2:	f001 fda9 	bl	8003148 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f6:	b108      	cbz	r0, 80015fc <MX_TIM1_Init+0xc0>
    Error_Handler();
 80015f8:	f7ff fe10 	bl	800121c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <MX_TIM1_Init+0xcc>)
 80015fe:	f7ff ff4f 	bl	80014a0 <HAL_TIM_MspPostInit>
}
 8001602:	b016      	add	sp, #88	; 0x58
 8001604:	bd10      	pop	{r4, pc}
 8001606:	bf00      	nop
 8001608:	200003e0 	.word	0x200003e0
 800160c:	40012c00 	.word	0x40012c00

08001610 <MX_TIM3_Init>:
{
 8001610:	b510      	push	{r4, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001614:	2210      	movs	r2, #16
 8001616:	2100      	movs	r1, #0
 8001618:	a803      	add	r0, sp, #12
 800161a:	f002 f85b 	bl	80036d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161e:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001620:	221c      	movs	r2, #28
 8001622:	4621      	mov	r1, r4
 8001624:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162c:	f002 f852 	bl	80036d4 <memset>
  htim3.Instance = TIM3;
 8001630:	481d      	ldr	r0, [pc, #116]	; (80016a8 <MX_TIM3_Init+0x98>)
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <MX_TIM3_Init+0x9c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8001636:	e9c0 3400 	strd	r3, r4, [r0]
  htim3.Init.Period = 65535;
 800163a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	6184      	str	r4, [r0, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001644:	f001 fb76 	bl	8002d34 <HAL_TIM_Base_Init>
 8001648:	b108      	cbz	r0, 800164e <MX_TIM3_Init+0x3e>
    Error_Handler();
 800164a:	f7ff fde7 	bl	800121c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <MX_TIM3_Init+0x98>)
 8001654:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001656:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001658:	f001 fcac 	bl	8002fb4 <HAL_TIM_ConfigClockSource>
 800165c:	b108      	cbz	r0, 8001662 <MX_TIM3_Init+0x52>
    Error_Handler();
 800165e:	f7ff fddd 	bl	800121c <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001662:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MX_TIM3_Init+0x98>)
 8001664:	f001 fb92 	bl	8002d8c <HAL_TIM_PWM_Init>
 8001668:	b108      	cbz	r0, 800166e <MX_TIM3_Init+0x5e>
    Error_Handler();
 800166a:	f7ff fdd7 	bl	800121c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_TIM3_Init+0x98>)
 8001672:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001674:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001678:	f001 fd38 	bl	80030ec <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	b108      	cbz	r0, 8001682 <MX_TIM3_Init+0x72>
    Error_Handler();
 800167e:	f7ff fdcd 	bl	800121c <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001682:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001684:	2200      	movs	r2, #0
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <MX_TIM3_Init+0x98>)
 8001688:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 800168a:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168e:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001690:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001692:	f001 fc29 	bl	8002ee8 <HAL_TIM_PWM_ConfigChannel>
 8001696:	b108      	cbz	r0, 800169c <MX_TIM3_Init+0x8c>
    Error_Handler();
 8001698:	f7ff fdc0 	bl	800121c <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <MX_TIM3_Init+0x98>)
 800169e:	f7ff feff 	bl	80014a0 <HAL_TIM_MspPostInit>
}
 80016a2:	b00e      	add	sp, #56	; 0x38
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	bf00      	nop
 80016a8:	20000428 	.word	0x20000428
 80016ac:	40000400 	.word	0x40000400

080016b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016b0:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b2:	480a      	ldr	r0, [pc, #40]	; (80016dc <MX_USART1_UART_Init+0x2c>)
  huart1.Init.BaudRate = 2000000;
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <MX_USART1_UART_Init+0x30>)
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART1_UART_Init+0x34>)
 80016b8:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016bc:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016be:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c4:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016c8:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ca:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016cc:	f001 fdca 	bl	8003264 <HAL_UART_Init>
 80016d0:	b118      	cbz	r0, 80016da <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80016d6:	f7ff bda1 	b.w	800121c <Error_Handler>
}
 80016da:	bd08      	pop	{r3, pc}
 80016dc:	200004b8 	.word	0x200004b8
 80016e0:	40013800 	.word	0x40013800
 80016e4:	001e8480 	.word	0x001e8480

080016e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016e8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80016ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <MX_USART2_UART_Init+0x34>)
 80016f2:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f8:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001706:	f001 fdad 	bl	8003264 <HAL_UART_Init>
 800170a:	b118      	cbz	r0, 8001714 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001710:	f7ff bd84 	b.w	800121c <Error_Handler>
}
 8001714:	bd08      	pop	{r3, pc}
 8001716:	bf00      	nop
 8001718:	20000500 	.word	0x20000500
 800171c:	40004400 	.word	0x40004400

08001720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	2210      	movs	r2, #16
{
 8001722:	b510      	push	{r4, lr}
 8001724:	4604      	mov	r4, r0
 8001726:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	eb0d 0002 	add.w	r0, sp, r2
 800172c:	2100      	movs	r1, #0
 800172e:	f001 ffd1 	bl	80036d4 <memset>
  if(uartHandle->Instance==USART1)
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	4a32      	ldr	r2, [pc, #200]	; (8001800 <HAL_UART_MspInit+0xe0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d131      	bne.n	800179e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <HAL_UART_MspInit+0xe4>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8001740:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	4831      	ldr	r0, [pc, #196]	; (8001808 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001744:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001748:	619a      	str	r2, [r3, #24]
 800174a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174c:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800174e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001752:	9200      	str	r2, [sp, #0]
 8001754:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	699a      	ldr	r2, [r3, #24]
 8001758:	f042 0204 	orr.w	r2, r2, #4
 800175c:	619a      	str	r2, [r3, #24]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f000 fda2 	bl	80022bc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	4822      	ldr	r0, [pc, #136]	; (8001808 <HAL_UART_MspInit+0xe8>)
 800177e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f000 fd99 	bl	80022bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800178a:	2025      	movs	r0, #37	; 0x25
 800178c:	4622      	mov	r2, r4
 800178e:	4621      	mov	r1, r4
 8001790:	f000 fbd4 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001794:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001796:	f000 fc03 	bl	8001fa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800179a:	b008      	add	sp, #32
 800179c:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 800179e:	4a1b      	ldr	r2, [pc, #108]	; (800180c <HAL_UART_MspInit+0xec>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d1fa      	bne.n	800179a <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	4818      	ldr	r0, [pc, #96]	; (8001808 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017b0:	61da      	str	r2, [r3, #28]
 80017b2:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017ba:	9202      	str	r2, [sp, #8]
 80017bc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	699a      	ldr	r2, [r3, #24]
 80017c0:	f042 0204 	orr.w	r2, r2, #4
 80017c4:	619a      	str	r2, [r3, #24]
 80017c6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	9303      	str	r3, [sp, #12]
 80017d0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f000 fd6e 	bl	80022bc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <HAL_UART_MspInit+0xe8>)
 80017e4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e6:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f000 fd66 	bl	80022bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017f0:	2026      	movs	r0, #38	; 0x26
 80017f2:	4622      	mov	r2, r4
 80017f4:	4621      	mov	r1, r4
 80017f6:	f000 fba1 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017fa:	2026      	movs	r0, #38	; 0x26
 80017fc:	e7cb      	b.n	8001796 <HAL_UART_MspInit+0x76>
 80017fe:	bf00      	nop
 8001800:	40013800 	.word	0x40013800
 8001804:	40021000 	.word	0x40021000
 8001808:	40010800 	.word	0x40010800
 800180c:	40004400 	.word	0x40004400

08001810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001810:	f7ff fda8 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001816:	490c      	ldr	r1, [pc, #48]	; (8001848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <LoopFillZerobss+0x16>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800182c:	4c09      	ldr	r4, [pc, #36]	; (8001854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f001 ff27 	bl	800368c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183e:	f7ff fcc3 	bl	80011c8 <main>
  bx lr
 8001842:	4770      	bx	lr
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800184c:	08008580 	.word	0x08008580
  ldr r2, =_sbss
 8001850:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001854:	2000055c 	.word	0x2000055c

08001858 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <CAN1_RX1_IRQHandler>
	...

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_InitTick+0x3c>)
{
 8001860:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001862:	7818      	ldrb	r0, [r3, #0]
 8001864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001868:	fbb3 f3f0 	udiv	r3, r3, r0
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_InitTick+0x40>)
 800186e:	6810      	ldr	r0, [r2, #0]
 8001870:	fbb0 f0f3 	udiv	r0, r0, r3
 8001874:	f000 fba2 	bl	8001fbc <HAL_SYSTICK_Config>
 8001878:	4604      	mov	r4, r0
 800187a:	b958      	cbnz	r0, 8001894 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187c:	2d0f      	cmp	r5, #15
 800187e:	d809      	bhi.n	8001894 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	4602      	mov	r2, r0
 8001882:	4629      	mov	r1, r5
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 fb58 	bl	8001f3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4620      	mov	r0, r4
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_InitTick+0x44>)
 8001890:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001892:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e7fc      	b.n	8001892 <HAL_InitTick+0x36>
 8001898:	20000004 	.word	0x20000004
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000008 	.word	0x20000008

080018a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_Init+0x20>)
{
 80018a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	f043 0310 	orr.w	r3, r3, #16
 80018b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b2:	f000 fb31 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	200f      	movs	r0, #15
 80018b8:	f7ff ffd0 	bl	800185c <HAL_InitTick>
  HAL_MspInit();
 80018bc:	f7ff fcb0 	bl	8001220 <HAL_MspInit>
}
 80018c0:	2000      	movs	r0, #0
 80018c2:	bd08      	pop	{r3, pc}
 80018c4:	40022000 	.word	0x40022000

080018c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018c8:	4a03      	ldr	r2, [pc, #12]	; (80018d8 <HAL_IncTick+0x10>)
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_IncTick+0x14>)
 80018cc:	6811      	ldr	r1, [r2, #0]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	440b      	add	r3, r1
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000548 	.word	0x20000548
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018e0:	4b01      	ldr	r3, [pc, #4]	; (80018e8 <HAL_GetTick+0x8>)
 80018e2:	6818      	ldr	r0, [r3, #0]
}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000548 	.word	0x20000548

080018ec <HAL_ADC_ConvCpltCallback>:
 80018ec:	4770      	bx	lr

080018ee <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80018f0:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80018f8:	d11b      	bne.n	8001932 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	6892      	ldr	r2, [r2, #8]
 8001906:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800190a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800190e:	d10c      	bne.n	800192a <ADC_DMAConvCplt+0x3c>
 8001910:	7b1a      	ldrb	r2, [r3, #12]
 8001912:	b952      	cbnz	r2, 800192a <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800191e:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001920:	bf5e      	ittt	pl
 8001922:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001924:	f042 0201 	orrpl.w	r2, r2, #1
 8001928:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ffde 	bl	80018ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001930:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001932:	6a1b      	ldr	r3, [r3, #32]
}
 8001934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4718      	bx	r3

0800193c <HAL_ADC_ConvHalfCpltCallback>:
 800193c:	4770      	bx	lr

0800193e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800193e:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001940:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001942:	f7ff fffb 	bl	800193c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001946:	bd08      	pop	{r3, pc}

08001948 <HAL_ADC_LevelOutOfWindowCallback>:
 8001948:	4770      	bx	lr

0800194a <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 800194a:	6803      	ldr	r3, [r0, #0]
{
 800194c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 800194e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001950:	685e      	ldr	r6, [r3, #4]
{
 8001952:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001954:	06b0      	lsls	r0, r6, #26
 8001956:	d526      	bpl.n	80019a6 <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001958:	07a9      	lsls	r1, r5, #30
 800195a:	d524      	bpl.n	80019a6 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800195c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800195e:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001960:	bf5e      	ittt	pl
 8001962:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001964:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001968:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001970:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001974:	d110      	bne.n	8001998 <HAL_ADC_IRQHandler+0x4e>
 8001976:	7b22      	ldrb	r2, [r4, #12]
 8001978:	b972      	cbnz	r2, 8001998 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	f022 0220 	bic.w	r2, r2, #32
 8001980:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001982:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001988:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800198c:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198e:	bf5e      	ittt	pl
 8001990:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001992:	f043 0301 	orrpl.w	r3, r3, #1
 8001996:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff ffa7 	bl	80018ec <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800199e:	f06f 0212 	mvn.w	r2, #18
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80019a6:	0631      	lsls	r1, r6, #24
 80019a8:	d530      	bpl.n	8001a0c <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80019aa:	076a      	lsls	r2, r5, #29
 80019ac:	d52e      	bpl.n	8001a0c <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019b0:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019b2:	bf5e      	ittt	pl
 80019b4:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80019b6:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 80019ba:	62a3      	strpl	r3, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80019c4:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80019c8:	d00a      	beq.n	80019e0 <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019ca:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019cc:	0550      	lsls	r0, r2, #21
 80019ce:	d416      	bmi.n	80019fe <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019d6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80019da:	d110      	bne.n	80019fe <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019dc:	7b22      	ldrb	r2, [r4, #12]
 80019de:	b972      	cbnz	r2, 80019fe <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e6:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019ee:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019f2:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f4:	bf5e      	ittt	pl
 80019f6:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80019f8:	f043 0301 	orrpl.w	r3, r3, #1
 80019fc:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f000 fa0e 	bl	8001e20 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a04:	f06f 020c 	mvn.w	r2, #12
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a0c:	0672      	lsls	r2, r6, #25
 8001a0e:	d50c      	bpl.n	8001a2a <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a10:	07eb      	lsls	r3, r5, #31
 8001a12:	d50a      	bpl.n	8001a2a <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a16:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a1e:	f7ff ff93 	bl	8001948 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a22:	f06f 0201 	mvn.w	r2, #1
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	601a      	str	r2, [r3, #0]
}
 8001a2a:	bd70      	pop	{r4, r5, r6, pc}

08001a2c <HAL_ADC_ErrorCallback>:
 8001a2c:	4770      	bx	lr

08001a2e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001a30:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a38:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a42:	f7ff fff3 	bl	8001a2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a46:	bd08      	pop	{r3, pc}

08001a48 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001a48:	2300      	movs	r3, #0
{ 
 8001a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001a4c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001a4e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8001a52:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d06c      	beq.n	8001b32 <HAL_ADC_ConfigChannel+0xea>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001a5e:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a60:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8001a62:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a64:	6808      	ldr	r0, [r1, #0]
 8001a66:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8001a6a:	d822      	bhi.n	8001ab2 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a6c:	261f      	movs	r6, #31
 8001a6e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001a70:	3b05      	subs	r3, #5
 8001a72:	409e      	lsls	r6, r3
 8001a74:	ea25 0506 	bic.w	r5, r5, r6
 8001a78:	fa00 f303 	lsl.w	r3, r0, r3
 8001a7c:	432b      	orrs	r3, r5
 8001a7e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a80:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a82:	688b      	ldr	r3, [r1, #8]
 8001a84:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001a88:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a8c:	d929      	bls.n	8001ae2 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a8e:	68d6      	ldr	r6, [r2, #12]
 8001a90:	3d1e      	subs	r5, #30
 8001a92:	40a9      	lsls	r1, r5
 8001a94:	ea26 0101 	bic.w	r1, r6, r1
 8001a98:	40ab      	lsls	r3, r5
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a9e:	f1a0 0310 	sub.w	r3, r0, #16
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d925      	bls.n	8001af2 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001ab2:	2d0c      	cmp	r5, #12
 8001ab4:	f04f 051f 	mov.w	r5, #31
 8001ab8:	d809      	bhi.n	8001ace <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001aba:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001abc:	3b23      	subs	r3, #35	; 0x23
 8001abe:	409d      	lsls	r5, r3
 8001ac0:	ea26 0505 	bic.w	r5, r6, r5
 8001ac4:	fa00 f303 	lsl.w	r3, r0, r3
 8001ac8:	432b      	orrs	r3, r5
 8001aca:	6313      	str	r3, [r2, #48]	; 0x30
 8001acc:	e7d8      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ace:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001ad0:	3b41      	subs	r3, #65	; 0x41
 8001ad2:	409d      	lsls	r5, r3
 8001ad4:	ea26 0505 	bic.w	r5, r6, r5
 8001ad8:	fa00 f303 	lsl.w	r3, r0, r3
 8001adc:	432b      	orrs	r3, r5
 8001ade:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ae0:	e7ce      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ae2:	6910      	ldr	r0, [r2, #16]
 8001ae4:	40a9      	lsls	r1, r5
 8001ae6:	ea20 0101 	bic.w	r1, r0, r1
 8001aea:	40ab      	lsls	r3, r5
 8001aec:	430b      	orrs	r3, r1
 8001aee:	6113      	str	r3, [r2, #16]
 8001af0:	e7d9      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_ADC_ConfigChannel+0xf0>)
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d116      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001af8:	6893      	ldr	r3, [r2, #8]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	d4d3      	bmi.n	8001aa6 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001afe:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b00:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b06:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b08:	d1cd      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_ADC_ConfigChannel+0xf4>)
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <HAL_ADC_ConfigChannel+0xf8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b14:	220a      	movs	r2, #10
 8001b16:	4353      	muls	r3, r2
            wait_loop_index--;
 8001b18:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001b1a:	9b01      	ldr	r3, [sp, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0c2      	beq.n	8001aa6 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	e7f8      	b.n	8001b18 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001b28:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2a:	f043 0320 	orr.w	r3, r3, #32
 8001b2e:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001b30:	e7ba      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8001b32:	2002      	movs	r0, #2
 8001b34:	e7bb      	b.n	8001aae <HAL_ADC_ConfigChannel+0x66>
 8001b36:	bf00      	nop
 8001b38:	40012400 	.word	0x40012400
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	000f4240 	.word	0x000f4240

08001b44 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001b44:	2300      	movs	r3, #0
{
 8001b46:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001b48:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b4a:	6803      	ldr	r3, [r0, #0]
{
 8001b4c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	07d2      	lsls	r2, r2, #31
 8001b52:	d502      	bpl.n	8001b5a <ADC_Enable+0x16>
  return HAL_OK;
 8001b54:	2000      	movs	r0, #0
}
 8001b56:	b003      	add	sp, #12
 8001b58:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <ADC_Enable+0x70>)
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <ADC_Enable+0x74>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001b6c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001b6e:	9b01      	ldr	r3, [sp, #4]
 8001b70:	b9e3      	cbnz	r3, 8001bac <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8001b72:	f7ff feb5 	bl	80018e0 <HAL_GetTick>
 8001b76:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	07db      	lsls	r3, r3, #31
 8001b7e:	d4e9      	bmi.n	8001b54 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b80:	f7ff feae 	bl	80018e0 <HAL_GetTick>
 8001b84:	1b40      	subs	r0, r0, r5
 8001b86:	2802      	cmp	r0, #2
 8001b88:	d9f6      	bls.n	8001b78 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f013 0301 	ands.w	r3, r3, #1
 8001b92:	d1f1      	bne.n	8001b78 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001b96:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b98:	f042 0210 	orr.w	r2, r2, #16
 8001b9c:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001ba0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001baa:	e7d4      	b.n	8001b56 <ADC_Enable+0x12>
      wait_loop_index--;
 8001bac:	9b01      	ldr	r3, [sp, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	e7dc      	b.n	8001b6c <ADC_Enable+0x28>
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	000f4240 	.word	0x000f4240

08001bbc <HAL_ADC_Start_DMA>:
{
 8001bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_ADC_Start_DMA+0x108>)
{
 8001bc2:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001bc4:	6802      	ldr	r2, [r0, #0]
{
 8001bc6:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001bc8:	429a      	cmp	r2, r3
{
 8001bca:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001bcc:	d002      	beq.n	8001bd4 <HAL_ADC_Start_DMA+0x18>
 8001bce:	493e      	ldr	r1, [pc, #248]	; (8001cc8 <HAL_ADC_Start_DMA+0x10c>)
 8001bd0:	428a      	cmp	r2, r1
 8001bd2:	d103      	bne.n	8001bdc <HAL_ADC_Start_DMA+0x20>
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001bda:	d16e      	bne.n	8001cba <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001bdc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d06c      	beq.n	8001cbe <HAL_ADC_Start_DMA+0x102>
 8001be4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001be6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001be8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001bec:	f7ff ffaa 	bl	8001b44 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001bf0:	4606      	mov	r6, r0
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d15d      	bne.n	8001cb2 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001bf6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bf8:	6821      	ldr	r1, [r4, #0]
 8001bfa:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001bfc:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8001c00:	f025 0501 	bic.w	r5, r5, #1
 8001c04:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c08:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c0c:	d104      	bne.n	8001c18 <HAL_ADC_Start_DMA+0x5c>
 8001c0e:	4a2d      	ldr	r2, [pc, #180]	; (8001cc4 <HAL_ADC_Start_DMA+0x108>)
 8001c10:	6853      	ldr	r3, [r2, #4]
 8001c12:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001c16:	d13e      	bne.n	8001c96 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c1e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c20:	684b      	ldr	r3, [r1, #4]
 8001c22:	055a      	lsls	r2, r3, #21
 8001c24:	d505      	bpl.n	8001c32 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c30:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c34:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c36:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c3a:	bf18      	it	ne
 8001c3c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c3e:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c40:	bf18      	it	ne
 8001c42:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001c46:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c50:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c52:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_ADC_Start_DMA+0x114>)
 8001c56:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <HAL_ADC_Start_DMA+0x118>)
 8001c5a:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c5c:	f06f 0302 	mvn.w	r3, #2
 8001c60:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c64:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c70:	4643      	mov	r3, r8
 8001c72:	f000 f9e9 	bl	8002048 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c7e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	bf0c      	ite	eq
 8001c86:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c8a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001c8e:	609a      	str	r2, [r3, #8]
}
 8001c90:	4630      	mov	r0, r6
 8001c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c9c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c9e:	6853      	ldr	r3, [r2, #4]
 8001ca0:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ca2:	bf41      	itttt	mi
 8001ca4:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001ca6:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001caa:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001cae:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001cb0:	e7bf      	b.n	8001c32 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001cb8:	e7ea      	b.n	8001c90 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8001cba:	2601      	movs	r6, #1
 8001cbc:	e7e8      	b.n	8001c90 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001cbe:	2602      	movs	r6, #2
 8001cc0:	e7e6      	b.n	8001c90 <HAL_ADC_Start_DMA+0xd4>
 8001cc2:	bf00      	nop
 8001cc4:	40012400 	.word	0x40012400
 8001cc8:	40012800 	.word	0x40012800
 8001ccc:	080018ef 	.word	0x080018ef
 8001cd0:	0800193f 	.word	0x0800193f
 8001cd4:	08001a2f 	.word	0x08001a2f

08001cd8 <ADC_ConversionStop_Disable>:
{
 8001cd8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cda:	6803      	ldr	r3, [r0, #0]
{
 8001cdc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	07d1      	lsls	r1, r2, #31
 8001ce2:	d401      	bmi.n	8001ce8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001ce4:	2000      	movs	r0, #0
}
 8001ce6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001cf0:	f7ff fdf6 	bl	80018e0 <HAL_GetTick>
 8001cf4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	07db      	lsls	r3, r3, #31
 8001cfc:	d5f2      	bpl.n	8001ce4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cfe:	f7ff fdef 	bl	80018e0 <HAL_GetTick>
 8001d02:	1b40      	subs	r0, r0, r5
 8001d04:	2802      	cmp	r0, #2
 8001d06:	d9f6      	bls.n	8001cf6 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	07da      	lsls	r2, r3, #31
 8001d0e:	d5f2      	bpl.n	8001cf6 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001d12:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001d22:	e7e0      	b.n	8001ce6 <ADC_ConversionStop_Disable+0xe>

08001d24 <HAL_ADC_Init>:
{
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001d26:	4604      	mov	r4, r0
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	d06e      	beq.n	8001e0a <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d2e:	b923      	cbnz	r3, 8001d3a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001d32:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001d36:	f7ff f86f 	bl	8000e18 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff ffcc 	bl	8001cd8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d42:	f013 0310 	ands.w	r3, r3, #16
 8001d46:	d162      	bne.n	8001e0e <HAL_ADC_Init+0xea>
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d160      	bne.n	8001e0e <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8001d4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d4e:	69e5      	ldr	r5, [r4, #28]
 8001d50:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001d52:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001d56:	f022 0202 	bic.w	r2, r2, #2
 8001d5a:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d5e:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d60:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001d62:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d64:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d66:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d6a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d6e:	d037      	beq.n	8001de0 <HAL_ADC_Init+0xbc>
 8001d70:	2d01      	cmp	r5, #1
 8001d72:	bf14      	ite	ne
 8001d74:	2700      	movne	r7, #0
 8001d76:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d7a:	7d26      	ldrb	r6, [r4, #20]
 8001d7c:	2e01      	cmp	r6, #1
 8001d7e:	d106      	bne.n	8001d8e <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d80:	bb82      	cbnz	r2, 8001de4 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d82:	69a2      	ldr	r2, [r4, #24]
 8001d84:	3a01      	subs	r2, #1
 8001d86:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8001d8a:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001d8e:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d90:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001d94:	6856      	ldr	r6, [r2, #4]
 8001d96:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001d9a:	ea46 0607 	orr.w	r6, r6, r7
 8001d9e:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001da0:	6897      	ldr	r7, [r2, #8]
 8001da2:	4e1d      	ldr	r6, [pc, #116]	; (8001e18 <HAL_ADC_Init+0xf4>)
 8001da4:	ea06 0607 	and.w	r6, r6, r7
 8001da8:	ea46 0601 	orr.w	r6, r6, r1
 8001dac:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dae:	d001      	beq.n	8001db4 <HAL_ADC_Init+0x90>
 8001db0:	2d01      	cmp	r5, #1
 8001db2:	d102      	bne.n	8001dba <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001db4:	6923      	ldr	r3, [r4, #16]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001dba:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001dbc:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001dc0:	432b      	orrs	r3, r5
 8001dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dc4:	6892      	ldr	r2, [r2, #8]
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_ADC_Init+0xf8>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	4299      	cmp	r1, r3
 8001dcc:	d113      	bne.n	8001df6 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001dd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dd4:	f023 0303 	bic.w	r3, r3, #3
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001de0:	462f      	mov	r7, r5
 8001de2:	e7ca      	b.n	8001d7a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001df4:	e7cb      	b.n	8001d8e <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8001df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001df8:	f023 0312 	bic.w	r3, r3, #18
 8001dfc:	f043 0310 	orr.w	r3, r3, #16
 8001e00:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	e7e7      	b.n	8001dde <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e10:	f043 0310 	orr.w	r3, r3, #16
 8001e14:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001e16:	e7f8      	b.n	8001e0a <HAL_ADC_Init+0xe6>
 8001e18:	ffe1f7fd 	.word	0xffe1f7fd
 8001e1c:	ff1f0efe 	.word	0xff1f0efe

08001e20 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e20:	4770      	bx	lr

08001e22 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e22:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e24:	4604      	mov	r4, r0
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d06e      	beq.n	8001f08 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e2a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001e2e:	b90b      	cbnz	r3, 8001e34 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e30:	f7ff f860 	bl	8000ef4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e34:	6822      	ldr	r2, [r4, #0]
 8001e36:	6813      	ldr	r3, [r2, #0]
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e3e:	f7ff fd4f 	bl	80018e0 <HAL_GetTick>
 8001e42:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	07d1      	lsls	r1, r2, #31
 8001e4a:	d551      	bpl.n	8001ef0 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f022 0202 	bic.w	r2, r2, #2
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e54:	f7ff fd44 	bl	80018e0 <HAL_GetTick>
 8001e58:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	0792      	lsls	r2, r2, #30
 8001e60:	d454      	bmi.n	8001f0c <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e62:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e64:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e66:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	bf0c      	ite	eq
 8001e6c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e70:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001e74:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e76:	7e62      	ldrb	r2, [r4, #25]
 8001e78:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	bf0c      	ite	eq
 8001e7e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e82:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8001e86:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e88:	7ea2      	ldrb	r2, [r4, #26]
 8001e8a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	bf0c      	ite	eq
 8001e90:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e94:	f022 0220 	bicne.w	r2, r2, #32
 8001e98:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e9a:	7ee2      	ldrb	r2, [r4, #27]
 8001e9c:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	bf0c      	ite	eq
 8001ea2:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ea6:	f042 0210 	orrne.w	r2, r2, #16
 8001eaa:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001eac:	7f22      	ldrb	r2, [r4, #28]
 8001eae:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	bf0c      	ite	eq
 8001eb4:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eb8:	f022 0208 	bicne.w	r2, r2, #8
 8001ebc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ebe:	7f62      	ldrb	r2, [r4, #29]
 8001ec0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	bf0c      	ite	eq
 8001ec6:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eca:	f022 0204 	bicne.w	r2, r2, #4
 8001ece:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ed0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	6921      	ldr	r1, [r4, #16]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	6961      	ldr	r1, [r4, #20]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	6861      	ldr	r1, [r4, #4]
 8001ee0:	3901      	subs	r1, #1
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ee6:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ee8:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001eea:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8001eee:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ef0:	f7ff fcf6 	bl	80018e0 <HAL_GetTick>
 8001ef4:	1b40      	subs	r0, r0, r5
 8001ef6:	280a      	cmp	r0, #10
 8001ef8:	d9a4      	bls.n	8001e44 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f02:	2305      	movs	r3, #5
 8001f04:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001f08:	2001      	movs	r0, #1
 8001f0a:	e7f0      	b.n	8001eee <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f0c:	f7ff fce8 	bl	80018e0 <HAL_GetTick>
 8001f10:	1b40      	subs	r0, r0, r5
 8001f12:	280a      	cmp	r0, #10
 8001f14:	d9a1      	bls.n	8001e5a <HAL_CAN_Init+0x38>
 8001f16:	e7f0      	b.n	8001efa <HAL_CAN_Init+0xd8>

08001f18 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f1a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f26:	0412      	lsls	r2, r2, #16
 8001f28:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f34:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b530      	push	{r4, r5, lr}
 8001f40:	68dc      	ldr	r4, [r3, #12]
 8001f42:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f46:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	bf28      	it	cs
 8001f50:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f58:	bf98      	it	ls
 8001f5a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f60:	bf88      	it	hi
 8001f62:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	ea21 0303 	bic.w	r3, r1, r3
 8001f68:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6a:	fa05 f404 	lsl.w	r4, r5, r4
 8001f6e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001f72:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	bfac      	ite	ge
 8001f7a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	4a07      	ldrlt	r2, [pc, #28]	; (8001f9c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	bfab      	itete	ge
 8001f88:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f96:	bd30      	pop	{r4, r5, pc}
 8001f98:	e000ed00 	.word	0xe000ed00
 8001f9c:	e000ed14 	.word	0xe000ed14

08001fa0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	db08      	blt.n	8001fb6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	0942      	lsrs	r2, r0, #5
 8001fa8:	f000 001f 	and.w	r0, r0, #31
 8001fac:	fa03 f000 	lsl.w	r0, r3, r0
 8001fb0:	4b01      	ldr	r3, [pc, #4]	; (8001fb8 <HAL_NVIC_EnableIRQ+0x18>)
 8001fb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	3801      	subs	r0, #1
 8001fbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001fc2:	d20b      	bcs.n	8001fdc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	21f0      	movs	r1, #240	; 0xf0
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fcc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fda:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001fdc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fe6:	b348      	cbz	r0, 800203c <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fe8:	2214      	movs	r2, #20
 8001fea:	6801      	ldr	r1, [r0, #0]
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_DMA_Init+0x5c>)
 8001fee:	440b      	add	r3, r1
 8001ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_DMA_Init+0x60>)
 8001ffa:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002002:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8002006:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002008:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 800200a:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200c:	4323      	orrs	r3, r4
 800200e:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002010:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002014:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002016:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002018:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201c:	4323      	orrs	r3, r4
 800201e:	6984      	ldr	r4, [r0, #24]
 8002020:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002022:	69c4      	ldr	r4, [r0, #28]
 8002024:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002026:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002028:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800202a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202c:	2300      	movs	r3, #0
 800202e:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002030:	f880 3020 	strb.w	r3, [r0, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002034:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  return HAL_OK;
 8002038:	4618      	mov	r0, r3
}
 800203a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800203c:	2001      	movs	r0, #1
 800203e:	e7fc      	b.n	800203a <HAL_DMA_Init+0x56>
 8002040:	bffdfff8 	.word	0xbffdfff8
 8002044:	40020000 	.word	0x40020000

08002048 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800204a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800204e:	2c01      	cmp	r4, #1
 8002050:	d034      	beq.n	80020bc <HAL_DMA_Start_IT+0x74>
 8002052:	2401      	movs	r4, #1
 8002054:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002058:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 800205c:	2600      	movs	r6, #0
 800205e:	2c01      	cmp	r4, #1
 8002060:	b2e5      	uxtb	r5, r4
 8002062:	f04f 0402 	mov.w	r4, #2
 8002066:	d127      	bne.n	80020b8 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002068:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800206c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002070:	6826      	ldr	r6, [r4, #0]
 8002072:	f026 0601 	bic.w	r6, r6, #1
 8002076:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002078:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 800207c:	40bd      	lsls	r5, r7
 800207e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002080:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002082:	6843      	ldr	r3, [r0, #4]
 8002084:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002086:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002088:	bf0b      	itete	eq
 800208a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800208c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800208e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002090:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002092:	b14b      	cbz	r3, 80020a8 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800209a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800209c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6023      	str	r3, [r4, #0]
}
 80020a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	f023 0304 	bic.w	r3, r3, #4
 80020ae:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	f043 030a 	orr.w	r3, r3, #10
 80020b6:	e7f0      	b.n	800209a <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80020b8:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80020bc:	2002      	movs	r0, #2
 80020be:	e7f2      	b.n	80020a6 <HAL_DMA_Start_IT+0x5e>

080020c0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d006      	beq.n	80020d6 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c8:	2304      	movs	r3, #4
 80020ca:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80020cc:	2300      	movs	r3, #0
 80020ce:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80020d2:	2001      	movs	r0, #1
 80020d4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020d8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	f022 020e 	bic.w	r2, r2, #14
 80020e0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ea:	2201      	movs	r2, #1
 80020ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	604b      	str	r3, [r1, #4]
  __HAL_UNLOCK(hdma);      
 80020f4:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80020f6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80020fa:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 80020fe:	4618      	mov	r0, r3
}
 8002100:	4770      	bx	lr
	...

08002104 <HAL_DMA_Abort_IT>:
{  
 8002104:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002106:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210e:	2304      	movs	r3, #4
 8002110:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002112:	2001      	movs	r0, #1
}
 8002114:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002116:	6803      	ldr	r3, [r0, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	f022 020e 	bic.w	r2, r2, #14
 800211e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002128:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_DMA_Abort_IT+0x88>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <HAL_DMA_Abort_IT+0x6a>
 800212e:	3214      	adds	r2, #20
 8002130:	4293      	cmp	r3, r2
 8002132:	d01e      	beq.n	8002172 <HAL_DMA_Abort_IT+0x6e>
 8002134:	3214      	adds	r2, #20
 8002136:	4293      	cmp	r3, r2
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_Abort_IT+0x72>
 800213a:	3214      	adds	r2, #20
 800213c:	4293      	cmp	r3, r2
 800213e:	d01d      	beq.n	800217c <HAL_DMA_Abort_IT+0x78>
 8002140:	3214      	adds	r2, #20
 8002142:	4293      	cmp	r3, r2
 8002144:	d01d      	beq.n	8002182 <HAL_DMA_Abort_IT+0x7e>
 8002146:	3214      	adds	r2, #20
 8002148:	4293      	cmp	r3, r2
 800214a:	bf0c      	ite	eq
 800214c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002150:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002154:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002156:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002158:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800215a:	2301      	movs	r3, #1
 800215c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002160:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002162:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002166:	b17b      	cbz	r3, 8002188 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002168:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800216a:	4620      	mov	r0, r4
 800216c:	e7d2      	b.n	8002114 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800216e:	2301      	movs	r3, #1
 8002170:	e7f0      	b.n	8002154 <HAL_DMA_Abort_IT+0x50>
 8002172:	2310      	movs	r3, #16
 8002174:	e7ee      	b.n	8002154 <HAL_DMA_Abort_IT+0x50>
 8002176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800217a:	e7eb      	b.n	8002154 <HAL_DMA_Abort_IT+0x50>
 800217c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002180:	e7e8      	b.n	8002154 <HAL_DMA_Abort_IT+0x50>
 8002182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002186:	e7e5      	b.n	8002154 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002188:	4618      	mov	r0, r3
 800218a:	e7c3      	b.n	8002114 <HAL_DMA_Abort_IT+0x10>
 800218c:	40020008 	.word	0x40020008
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_DMA_IRQHandler>:
{
 8002194:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002196:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002198:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800219a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800219c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800219e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021a0:	4095      	lsls	r5, r2
 80021a2:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80021a4:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021a6:	d032      	beq.n	800220e <HAL_DMA_IRQHandler+0x7a>
 80021a8:	074d      	lsls	r5, r1, #29
 80021aa:	d530      	bpl.n	800220e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021b0:	bf5e      	ittt	pl
 80021b2:	681a      	ldrpl	r2, [r3, #0]
 80021b4:	f022 0204 	bicpl.w	r2, r2, #4
 80021b8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021ba:	4a3e      	ldr	r2, [pc, #248]	; (80022b4 <HAL_DMA_IRQHandler+0x120>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d019      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x60>
 80021c0:	3214      	adds	r2, #20
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d018      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x64>
 80021c6:	3214      	adds	r2, #20
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d017      	beq.n	80021fc <HAL_DMA_IRQHandler+0x68>
 80021cc:	3214      	adds	r2, #20
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d017      	beq.n	8002202 <HAL_DMA_IRQHandler+0x6e>
 80021d2:	3214      	adds	r2, #20
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d017      	beq.n	8002208 <HAL_DMA_IRQHandler+0x74>
 80021d8:	3214      	adds	r2, #20
 80021da:	4293      	cmp	r3, r2
 80021dc:	bf0c      	ite	eq
 80021de:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80021e2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80021e6:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <HAL_DMA_IRQHandler+0x124>)
 80021e8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80021ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d05e      	beq.n	80022ae <HAL_DMA_IRQHandler+0x11a>
}
 80021f0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80021f2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021f4:	2304      	movs	r3, #4
 80021f6:	e7f6      	b.n	80021e6 <HAL_DMA_IRQHandler+0x52>
 80021f8:	2340      	movs	r3, #64	; 0x40
 80021fa:	e7f4      	b.n	80021e6 <HAL_DMA_IRQHandler+0x52>
 80021fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002200:	e7f1      	b.n	80021e6 <HAL_DMA_IRQHandler+0x52>
 8002202:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002206:	e7ee      	b.n	80021e6 <HAL_DMA_IRQHandler+0x52>
 8002208:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800220c:	e7eb      	b.n	80021e6 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800220e:	2502      	movs	r5, #2
 8002210:	4095      	lsls	r5, r2
 8002212:	4225      	tst	r5, r4
 8002214:	d035      	beq.n	8002282 <HAL_DMA_IRQHandler+0xee>
 8002216:	078d      	lsls	r5, r1, #30
 8002218:	d533      	bpl.n	8002282 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	0694      	lsls	r4, r2, #26
 800221e:	d406      	bmi.n	800222e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	f022 020a 	bic.w	r2, r2, #10
 8002226:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002228:	2201      	movs	r2, #1
 800222a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800222e:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <HAL_DMA_IRQHandler+0x120>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d019      	beq.n	8002268 <HAL_DMA_IRQHandler+0xd4>
 8002234:	3214      	adds	r2, #20
 8002236:	4293      	cmp	r3, r2
 8002238:	d018      	beq.n	800226c <HAL_DMA_IRQHandler+0xd8>
 800223a:	3214      	adds	r2, #20
 800223c:	4293      	cmp	r3, r2
 800223e:	d017      	beq.n	8002270 <HAL_DMA_IRQHandler+0xdc>
 8002240:	3214      	adds	r2, #20
 8002242:	4293      	cmp	r3, r2
 8002244:	d017      	beq.n	8002276 <HAL_DMA_IRQHandler+0xe2>
 8002246:	3214      	adds	r2, #20
 8002248:	4293      	cmp	r3, r2
 800224a:	d017      	beq.n	800227c <HAL_DMA_IRQHandler+0xe8>
 800224c:	3214      	adds	r2, #20
 800224e:	4293      	cmp	r3, r2
 8002250:	bf0c      	ite	eq
 8002252:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002256:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800225a:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_DMA_IRQHandler+0x124>)
 800225c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800225e:	2300      	movs	r3, #0
 8002260:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002264:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002266:	e7c1      	b.n	80021ec <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002268:	2302      	movs	r3, #2
 800226a:	e7f6      	b.n	800225a <HAL_DMA_IRQHandler+0xc6>
 800226c:	2320      	movs	r3, #32
 800226e:	e7f4      	b.n	800225a <HAL_DMA_IRQHandler+0xc6>
 8002270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002274:	e7f1      	b.n	800225a <HAL_DMA_IRQHandler+0xc6>
 8002276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227a:	e7ee      	b.n	800225a <HAL_DMA_IRQHandler+0xc6>
 800227c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002280:	e7eb      	b.n	800225a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002282:	2508      	movs	r5, #8
 8002284:	4095      	lsls	r5, r2
 8002286:	4225      	tst	r5, r4
 8002288:	d011      	beq.n	80022ae <HAL_DMA_IRQHandler+0x11a>
 800228a:	0709      	lsls	r1, r1, #28
 800228c:	d50f      	bpl.n	80022ae <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	f021 010e 	bic.w	r1, r1, #14
 8002294:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002296:	2301      	movs	r3, #1
 8002298:	fa03 f202 	lsl.w	r2, r3, r2
 800229c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800229e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80022a0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80022a4:	2300      	movs	r3, #0
 80022a6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80022aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80022ac:	e79e      	b.n	80021ec <HAL_DMA_IRQHandler+0x58>
}
 80022ae:	bc70      	pop	{r4, r5, r6}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40020008 	.word	0x40020008
 80022b8:	40020000 	.word	0x40020000

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022c0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80022c2:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c4:	4f64      	ldr	r7, [pc, #400]	; (8002458 <HAL_GPIO_Init+0x19c>)
 80022c6:	4b65      	ldr	r3, [pc, #404]	; (800245c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80022c8:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002460 <HAL_GPIO_Init+0x1a4>
 80022cc:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002464 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d0:	680d      	ldr	r5, [r1, #0]
 80022d2:	fa35 f406 	lsrs.w	r4, r5, r6
 80022d6:	d102      	bne.n	80022de <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80022d8:	b003      	add	sp, #12
 80022da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80022de:	f04f 0801 	mov.w	r8, #1
 80022e2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e6:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80022ea:	ea38 0505 	bics.w	r5, r8, r5
 80022ee:	d17b      	bne.n	80023e8 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80022f0:	684d      	ldr	r5, [r1, #4]
 80022f2:	2d03      	cmp	r5, #3
 80022f4:	d807      	bhi.n	8002306 <HAL_GPIO_Init+0x4a>
 80022f6:	3d01      	subs	r5, #1
 80022f8:	2d02      	cmp	r5, #2
 80022fa:	f200 8088 	bhi.w	800240e <HAL_GPIO_Init+0x152>
 80022fe:	e8df f005 	tbb	[pc, r5]
 8002302:	9b96      	.short	0x9b96
 8002304:	a1          	.byte	0xa1
 8002305:	00          	.byte	0x00
 8002306:	2d12      	cmp	r5, #18
 8002308:	f000 8099 	beq.w	800243e <HAL_GPIO_Init+0x182>
 800230c:	d86e      	bhi.n	80023ec <HAL_GPIO_Init+0x130>
 800230e:	2d11      	cmp	r5, #17
 8002310:	f000 808f 	beq.w	8002432 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002314:	2cff      	cmp	r4, #255	; 0xff
 8002316:	bf98      	it	ls
 8002318:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800231a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800231e:	bf88      	it	hi
 8002320:	f100 0a04 	addhi.w	sl, r0, #4
 8002324:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002328:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800232c:	bf88      	it	hi
 800232e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002330:	fa09 fb05 	lsl.w	fp, r9, r5
 8002334:	ea28 080b 	bic.w	r8, r8, fp
 8002338:	fa02 f505 	lsl.w	r5, r2, r5
 800233c:	ea48 0505 	orr.w	r5, r8, r5
 8002340:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002344:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002348:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800234c:	d04c      	beq.n	80023e8 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800234e:	69bd      	ldr	r5, [r7, #24]
 8002350:	f026 0803 	bic.w	r8, r6, #3
 8002354:	f045 0501 	orr.w	r5, r5, #1
 8002358:	61bd      	str	r5, [r7, #24]
 800235a:	69bd      	ldr	r5, [r7, #24]
 800235c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002360:	f005 0501 	and.w	r5, r5, #1
 8002364:	9501      	str	r5, [sp, #4]
 8002366:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800236a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800236e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002370:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002374:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002378:	fa09 f90b 	lsl.w	r9, r9, fp
 800237c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002380:	4d39      	ldr	r5, [pc, #228]	; (8002468 <HAL_GPIO_Init+0x1ac>)
 8002382:	42a8      	cmp	r0, r5
 8002384:	d062      	beq.n	800244c <HAL_GPIO_Init+0x190>
 8002386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800238a:	42a8      	cmp	r0, r5
 800238c:	d060      	beq.n	8002450 <HAL_GPIO_Init+0x194>
 800238e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002392:	42a8      	cmp	r0, r5
 8002394:	d05e      	beq.n	8002454 <HAL_GPIO_Init+0x198>
 8002396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800239a:	42a8      	cmp	r0, r5
 800239c:	bf0c      	ite	eq
 800239e:	2503      	moveq	r5, #3
 80023a0:	2504      	movne	r5, #4
 80023a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80023a6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80023aa:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80023ae:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b4:	bf14      	ite	ne
 80023b6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023b8:	43a5      	biceq	r5, r4
 80023ba:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80023bc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023be:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80023c2:	bf14      	ite	ne
 80023c4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023c6:	43a5      	biceq	r5, r4
 80023c8:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80023ca:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023cc:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80023d0:	bf14      	ite	ne
 80023d2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023d4:	43a5      	biceq	r5, r4
 80023d6:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80023d8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023da:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80023de:	bf14      	ite	ne
 80023e0:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023e2:	ea25 0404 	biceq.w	r4, r5, r4
 80023e6:	601c      	str	r4, [r3, #0]
	position++;
 80023e8:	3601      	adds	r6, #1
 80023ea:	e771      	b.n	80022d0 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80023ec:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800246c <HAL_GPIO_Init+0x1b0>
 80023f0:	454d      	cmp	r5, r9
 80023f2:	d00c      	beq.n	800240e <HAL_GPIO_Init+0x152>
 80023f4:	d817      	bhi.n	8002426 <HAL_GPIO_Init+0x16a>
 80023f6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80023fa:	454d      	cmp	r5, r9
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x152>
 80023fe:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002402:	454d      	cmp	r5, r9
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x152>
 8002406:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800240a:	454d      	cmp	r5, r9
 800240c:	d182      	bne.n	8002314 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800240e:	688a      	ldr	r2, [r1, #8]
 8002410:	b1d2      	cbz	r2, 8002448 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002412:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002414:	bf08      	it	eq
 8002416:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800241a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800241e:	bf18      	it	ne
 8002420:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002424:	e776      	b.n	8002314 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002426:	4565      	cmp	r5, ip
 8002428:	d0f1      	beq.n	800240e <HAL_GPIO_Init+0x152>
 800242a:	4575      	cmp	r5, lr
 800242c:	e7ee      	b.n	800240c <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800242e:	68ca      	ldr	r2, [r1, #12]
          break;
 8002430:	e770      	b.n	8002314 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002432:	68ca      	ldr	r2, [r1, #12]
 8002434:	3204      	adds	r2, #4
          break;
 8002436:	e76d      	b.n	8002314 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002438:	68ca      	ldr	r2, [r1, #12]
 800243a:	3208      	adds	r2, #8
          break;
 800243c:	e76a      	b.n	8002314 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800243e:	68ca      	ldr	r2, [r1, #12]
 8002440:	320c      	adds	r2, #12
          break;
 8002442:	e767      	b.n	8002314 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002444:	2200      	movs	r2, #0
 8002446:	e765      	b.n	8002314 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002448:	2204      	movs	r2, #4
 800244a:	e763      	b.n	8002314 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800244c:	2500      	movs	r5, #0
 800244e:	e7a8      	b.n	80023a2 <HAL_GPIO_Init+0xe6>
 8002450:	2501      	movs	r5, #1
 8002452:	e7a6      	b.n	80023a2 <HAL_GPIO_Init+0xe6>
 8002454:	2502      	movs	r5, #2
 8002456:	e7a4      	b.n	80023a2 <HAL_GPIO_Init+0xe6>
 8002458:	40021000 	.word	0x40021000
 800245c:	40010400 	.word	0x40010400
 8002460:	10310000 	.word	0x10310000
 8002464:	10320000 	.word	0x10320000
 8002468:	40010800 	.word	0x40010800
 800246c:	10220000 	.word	0x10220000

08002470 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002470:	6883      	ldr	r3, [r0, #8]
 8002472:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002474:	bf14      	ite	ne
 8002476:	2001      	movne	r0, #1
 8002478:	2000      	moveq	r0, #0
 800247a:	4770      	bx	lr

0800247c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800247c:	b10a      	cbz	r2, 8002482 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800247e:	6101      	str	r1, [r0, #16]
  }
}
 8002480:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002482:	0409      	lsls	r1, r1, #16
 8002484:	e7fb      	b.n	800247e <HAL_GPIO_WritePin+0x2>

08002486 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002486:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002488:	ea01 0203 	and.w	r2, r1, r3
 800248c:	ea21 0103 	bic.w	r1, r1, r3
 8002490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002494:	6101      	str	r1, [r0, #16]
}
 8002496:	4770      	bx	lr

08002498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002498:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800249a:	4604      	mov	r4, r0
 800249c:	b908      	cbnz	r0, 80024a2 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 800249e:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024aa:	b91b      	cbnz	r3, 80024b4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80024ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80024b0:	f7fe fe18 	bl	80010e4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	2324      	movs	r3, #36	; 0x24
 80024b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d4:	f000 fae6 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024d8:	4a3f      	ldr	r2, [pc, #252]	; (80025d8 <HAL_I2C_Init+0x140>)
 80024da:	6863      	ldr	r3, [r4, #4]
 80024dc:	4293      	cmp	r3, r2
 80024de:	bf94      	ite	ls
 80024e0:	4a3e      	ldrls	r2, [pc, #248]	; (80025dc <HAL_I2C_Init+0x144>)
 80024e2:	4a3f      	ldrhi	r2, [pc, #252]	; (80025e0 <HAL_I2C_Init+0x148>)
 80024e4:	4290      	cmp	r0, r2
 80024e6:	bf8c      	ite	hi
 80024e8:	2200      	movhi	r2, #0
 80024ea:	2201      	movls	r2, #1
 80024ec:	2a00      	cmp	r2, #0
 80024ee:	d1d6      	bne.n	800249e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024f0:	4e39      	ldr	r6, [pc, #228]	; (80025d8 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80024f2:	493c      	ldr	r1, [pc, #240]	; (80025e4 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024f4:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80024f6:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fa:	bf88      	it	hi
 80024fc:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002500:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002502:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002506:	6855      	ldr	r5, [r2, #4]
 8002508:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800250c:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002510:	bf82      	ittt	hi
 8002512:	4371      	mulhi	r1, r6
 8002514:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002518:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800251c:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800251e:	6a15      	ldr	r5, [r2, #32]
 8002520:	3101      	adds	r1, #1
 8002522:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002526:	4329      	orrs	r1, r5
 8002528:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800252a:	69d1      	ldr	r1, [r2, #28]
 800252c:	4d2a      	ldr	r5, [pc, #168]	; (80025d8 <HAL_I2C_Init+0x140>)
 800252e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002532:	42ab      	cmp	r3, r5
 8002534:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002538:	d832      	bhi.n	80025a0 <HAL_I2C_Init+0x108>
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002540:	1c43      	adds	r3, r0, #1
 8002542:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002546:	4203      	tst	r3, r0
 8002548:	d042      	beq.n	80025d0 <HAL_I2C_Init+0x138>
 800254a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254e:	430b      	orrs	r3, r1
 8002550:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002552:	6811      	ldr	r1, [r2, #0]
 8002554:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002558:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800255c:	4303      	orrs	r3, r0
 800255e:	430b      	orrs	r3, r1
 8002560:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002562:	6891      	ldr	r1, [r2, #8]
 8002564:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002568:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800256c:	4303      	orrs	r3, r0
 800256e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002572:	430b      	orrs	r3, r1
 8002574:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002576:	68d1      	ldr	r1, [r2, #12]
 8002578:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800257c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002580:	4303      	orrs	r3, r0
 8002582:	430b      	orrs	r3, r1
 8002584:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002586:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002588:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002590:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002592:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002594:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002598:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800259e:	e77f      	b.n	80024a0 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025a0:	68a5      	ldr	r5, [r4, #8]
 80025a2:	b955      	cbnz	r5, 80025ba <HAL_I2C_Init+0x122>
 80025a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b2:	b17b      	cbz	r3, 80025d4 <HAL_I2C_Init+0x13c>
 80025b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b8:	e7c9      	b.n	800254e <HAL_I2C_Init+0xb6>
 80025ba:	2519      	movs	r5, #25
 80025bc:	436b      	muls	r3, r5
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	b123      	cbz	r3, 80025d4 <HAL_I2C_Init+0x13c>
 80025ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ce:	e7be      	b.n	800254e <HAL_I2C_Init+0xb6>
 80025d0:	2304      	movs	r3, #4
 80025d2:	e7bc      	b.n	800254e <HAL_I2C_Init+0xb6>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e7ba      	b.n	800254e <HAL_I2C_Init+0xb6>
 80025d8:	000186a0 	.word	0x000186a0
 80025dc:	001e847f 	.word	0x001e847f
 80025e0:	003d08ff 	.word	0x003d08ff
 80025e4:	000f4240 	.word	0x000f4240

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025ec:	4605      	mov	r5, r0
 80025ee:	b338      	cbz	r0, 8002640 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f0:	6803      	ldr	r3, [r0, #0]
 80025f2:	07db      	lsls	r3, r3, #31
 80025f4:	d410      	bmi.n	8002618 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	682b      	ldr	r3, [r5, #0]
 80025f8:	079f      	lsls	r7, r3, #30
 80025fa:	d45e      	bmi.n	80026ba <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	0719      	lsls	r1, r3, #28
 8002600:	f100 8095 	bmi.w	800272e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002604:	682b      	ldr	r3, [r5, #0]
 8002606:	075a      	lsls	r2, r3, #29
 8002608:	f100 80c1 	bmi.w	800278e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260c:	69e8      	ldr	r0, [r5, #28]
 800260e:	2800      	cmp	r0, #0
 8002610:	f040 812c 	bne.w	800286c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002614:	2000      	movs	r0, #0
 8002616:	e029      	b.n	800266c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002618:	4c90      	ldr	r4, [pc, #576]	; (800285c <HAL_RCC_OscConfig+0x274>)
 800261a:	6863      	ldr	r3, [r4, #4]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b04      	cmp	r3, #4
 8002622:	d007      	beq.n	8002634 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002624:	6863      	ldr	r3, [r4, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d10a      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
 800262e:	6863      	ldr	r3, [r4, #4]
 8002630:	03de      	lsls	r6, r3, #15
 8002632:	d507      	bpl.n	8002644 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	039c      	lsls	r4, r3, #14
 8002638:	d5dd      	bpl.n	80025f6 <HAL_RCC_OscConfig+0xe>
 800263a:	686b      	ldr	r3, [r5, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1da      	bne.n	80025f6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
 8002642:	e013      	b.n	800266c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	686b      	ldr	r3, [r5, #4]
 8002646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264a:	d112      	bne.n	8002672 <HAL_RCC_OscConfig+0x8a>
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002654:	f7ff f944 	bl	80018e0 <HAL_GetTick>
 8002658:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	0398      	lsls	r0, r3, #14
 800265e:	d4ca      	bmi.n	80025f6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff f93e 	bl	80018e0 <HAL_GetTick>
 8002664:	1b80      	subs	r0, r0, r6
 8002666:	2864      	cmp	r0, #100	; 0x64
 8002668:	d9f7      	bls.n	800265a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800266a:	2003      	movs	r0, #3
}
 800266c:	b002      	add	sp, #8
 800266e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002672:	b99b      	cbnz	r3, 800269c <HAL_RCC_OscConfig+0xb4>
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267a:	6023      	str	r3, [r4, #0]
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002682:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002684:	f7ff f92c 	bl	80018e0 <HAL_GetTick>
 8002688:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	0399      	lsls	r1, r3, #14
 800268e:	d5b2      	bpl.n	80025f6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff f926 	bl	80018e0 <HAL_GetTick>
 8002694:	1b80      	subs	r0, r0, r6
 8002696:	2864      	cmp	r0, #100	; 0x64
 8002698:	d9f7      	bls.n	800268a <HAL_RCC_OscConfig+0xa2>
 800269a:	e7e6      	b.n	800266a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	d103      	bne.n	80026ac <HAL_RCC_OscConfig+0xc4>
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a8:	6023      	str	r3, [r4, #0]
 80026aa:	e7cf      	b.n	800264c <HAL_RCC_OscConfig+0x64>
 80026ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b0:	6023      	str	r3, [r4, #0]
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b8:	e7cb      	b.n	8002652 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ba:	4c68      	ldr	r4, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x274>)
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	f013 0f0c 	tst.w	r3, #12
 80026c2:	d007      	beq.n	80026d4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026c4:	6863      	ldr	r3, [r4, #4]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d110      	bne.n	80026f0 <HAL_RCC_OscConfig+0x108>
 80026ce:	6863      	ldr	r3, [r4, #4]
 80026d0:	03da      	lsls	r2, r3, #15
 80026d2:	d40d      	bmi.n	80026f0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	079b      	lsls	r3, r3, #30
 80026d8:	d502      	bpl.n	80026e0 <HAL_RCC_OscConfig+0xf8>
 80026da:	692b      	ldr	r3, [r5, #16]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d1af      	bne.n	8002640 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	696a      	ldr	r2, [r5, #20]
 80026e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80026ec:	6023      	str	r3, [r4, #0]
 80026ee:	e785      	b.n	80025fc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026f0:	692a      	ldr	r2, [r5, #16]
 80026f2:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <HAL_RCC_OscConfig+0x278>)
 80026f4:	b16a      	cbz	r2, 8002712 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026fa:	f7ff f8f1 	bl	80018e0 <HAL_GetTick>
 80026fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	079f      	lsls	r7, r3, #30
 8002704:	d4ec      	bmi.n	80026e0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002706:	f7ff f8eb 	bl	80018e0 <HAL_GetTick>
 800270a:	1b80      	subs	r0, r0, r6
 800270c:	2802      	cmp	r0, #2
 800270e:	d9f7      	bls.n	8002700 <HAL_RCC_OscConfig+0x118>
 8002710:	e7ab      	b.n	800266a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002712:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002714:	f7ff f8e4 	bl	80018e0 <HAL_GetTick>
 8002718:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	0798      	lsls	r0, r3, #30
 800271e:	f57f af6d 	bpl.w	80025fc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002722:	f7ff f8dd 	bl	80018e0 <HAL_GetTick>
 8002726:	1b80      	subs	r0, r0, r6
 8002728:	2802      	cmp	r0, #2
 800272a:	d9f6      	bls.n	800271a <HAL_RCC_OscConfig+0x132>
 800272c:	e79d      	b.n	800266a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800272e:	69aa      	ldr	r2, [r5, #24]
 8002730:	4e4a      	ldr	r6, [pc, #296]	; (800285c <HAL_RCC_OscConfig+0x274>)
 8002732:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <HAL_RCC_OscConfig+0x278>)
 8002734:	b1e2      	cbz	r2, 8002770 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002736:	2201      	movs	r2, #1
 8002738:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800273c:	f7ff f8d0 	bl	80018e0 <HAL_GetTick>
 8002740:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002744:	079b      	lsls	r3, r3, #30
 8002746:	d50d      	bpl.n	8002764 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002748:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800274c:	4b45      	ldr	r3, [pc, #276]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	fbb3 f3f2 	udiv	r3, r3, r2
 8002754:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002756:	bf00      	nop
  }
  while (Delay --);
 8002758:	9b01      	ldr	r3, [sp, #4]
 800275a:	1e5a      	subs	r2, r3, #1
 800275c:	9201      	str	r2, [sp, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f9      	bne.n	8002756 <HAL_RCC_OscConfig+0x16e>
 8002762:	e74f      	b.n	8002604 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7ff f8bc 	bl	80018e0 <HAL_GetTick>
 8002768:	1b00      	subs	r0, r0, r4
 800276a:	2802      	cmp	r0, #2
 800276c:	d9e9      	bls.n	8002742 <HAL_RCC_OscConfig+0x15a>
 800276e:	e77c      	b.n	800266a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002770:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002774:	f7ff f8b4 	bl	80018e0 <HAL_GetTick>
 8002778:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800277c:	079f      	lsls	r7, r3, #30
 800277e:	f57f af41 	bpl.w	8002604 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002782:	f7ff f8ad 	bl	80018e0 <HAL_GetTick>
 8002786:	1b00      	subs	r0, r0, r4
 8002788:	2802      	cmp	r0, #2
 800278a:	d9f6      	bls.n	800277a <HAL_RCC_OscConfig+0x192>
 800278c:	e76d      	b.n	800266a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4c33      	ldr	r4, [pc, #204]	; (800285c <HAL_RCC_OscConfig+0x274>)
 8002790:	69e3      	ldr	r3, [r4, #28]
 8002792:	00d8      	lsls	r0, r3, #3
 8002794:	d424      	bmi.n	80027e0 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8002796:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	69e3      	ldr	r3, [r4, #28]
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279e:	61e3      	str	r3, [r4, #28]
 80027a0:	69e3      	ldr	r3, [r4, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4e2f      	ldr	r6, [pc, #188]	; (8002868 <HAL_RCC_OscConfig+0x280>)
 80027ac:	6833      	ldr	r3, [r6, #0]
 80027ae:	05d9      	lsls	r1, r3, #23
 80027b0:	d518      	bpl.n	80027e4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b2:	68eb      	ldr	r3, [r5, #12]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d126      	bne.n	8002806 <HAL_RCC_OscConfig+0x21e>
 80027b8:	6a23      	ldr	r3, [r4, #32]
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80027c0:	f7ff f88e 	bl	80018e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80027c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	6a23      	ldr	r3, [r4, #32]
 80027cc:	079b      	lsls	r3, r3, #30
 80027ce:	d53f      	bpl.n	8002850 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80027d0:	2f00      	cmp	r7, #0
 80027d2:	f43f af1b 	beq.w	800260c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d6:	69e3      	ldr	r3, [r4, #28]
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	61e3      	str	r3, [r4, #28]
 80027de:	e715      	b.n	800260c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80027e0:	2700      	movs	r7, #0
 80027e2:	e7e2      	b.n	80027aa <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e4:	6833      	ldr	r3, [r6, #0]
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80027ec:	f7ff f878 	bl	80018e0 <HAL_GetTick>
 80027f0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	6833      	ldr	r3, [r6, #0]
 80027f4:	05da      	lsls	r2, r3, #23
 80027f6:	d4dc      	bmi.n	80027b2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7ff f872 	bl	80018e0 <HAL_GetTick>
 80027fc:	eba0 0008 	sub.w	r0, r0, r8
 8002800:	2864      	cmp	r0, #100	; 0x64
 8002802:	d9f6      	bls.n	80027f2 <HAL_RCC_OscConfig+0x20a>
 8002804:	e731      	b.n	800266a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002806:	b9ab      	cbnz	r3, 8002834 <HAL_RCC_OscConfig+0x24c>
 8002808:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	6223      	str	r3, [r4, #32]
 8002814:	6a23      	ldr	r3, [r4, #32]
 8002816:	f023 0304 	bic.w	r3, r3, #4
 800281a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800281c:	f7ff f860 	bl	80018e0 <HAL_GetTick>
 8002820:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002822:	6a23      	ldr	r3, [r4, #32]
 8002824:	0798      	lsls	r0, r3, #30
 8002826:	d5d3      	bpl.n	80027d0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7ff f85a 	bl	80018e0 <HAL_GetTick>
 800282c:	1b80      	subs	r0, r0, r6
 800282e:	4540      	cmp	r0, r8
 8002830:	d9f7      	bls.n	8002822 <HAL_RCC_OscConfig+0x23a>
 8002832:	e71a      	b.n	800266a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002834:	2b05      	cmp	r3, #5
 8002836:	6a23      	ldr	r3, [r4, #32]
 8002838:	d103      	bne.n	8002842 <HAL_RCC_OscConfig+0x25a>
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6223      	str	r3, [r4, #32]
 8002840:	e7ba      	b.n	80027b8 <HAL_RCC_OscConfig+0x1d0>
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6223      	str	r3, [r4, #32]
 8002848:	6a23      	ldr	r3, [r4, #32]
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	e7b6      	b.n	80027be <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7ff f846 	bl	80018e0 <HAL_GetTick>
 8002854:	1b80      	subs	r0, r0, r6
 8002856:	4540      	cmp	r0, r8
 8002858:	d9b7      	bls.n	80027ca <HAL_RCC_OscConfig+0x1e2>
 800285a:	e706      	b.n	800266a <HAL_RCC_OscConfig+0x82>
 800285c:	40021000 	.word	0x40021000
 8002860:	42420000 	.word	0x42420000
 8002864:	20000000 	.word	0x20000000
 8002868:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4c2a      	ldr	r4, [pc, #168]	; (8002918 <HAL_RCC_OscConfig+0x330>)
 800286e:	6863      	ldr	r3, [r4, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d03e      	beq.n	80028f6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	2200      	movs	r2, #0
 800287a:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_RCC_OscConfig+0x334>)
 800287c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800287e:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	d12c      	bne.n	80028dc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002882:	f7ff f82d 	bl	80018e0 <HAL_GetTick>
 8002886:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	0199      	lsls	r1, r3, #6
 800288c:	d420      	bmi.n	80028d0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800288e:	6a2b      	ldr	r3, [r5, #32]
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002894:	d105      	bne.n	80028a2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002896:	6862      	ldr	r2, [r4, #4]
 8002898:	68a9      	ldr	r1, [r5, #8]
 800289a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800289e:	430a      	orrs	r2, r1
 80028a0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80028a4:	6862      	ldr	r2, [r4, #4]
 80028a6:	430b      	orrs	r3, r1
 80028a8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80028ac:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80028ae:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80028b2:	4b1a      	ldr	r3, [pc, #104]	; (800291c <HAL_RCC_OscConfig+0x334>)
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80028b6:	f7ff f813 	bl	80018e0 <HAL_GetTick>
 80028ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	019a      	lsls	r2, r3, #6
 80028c0:	f53f aea8 	bmi.w	8002614 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff f80c 	bl	80018e0 <HAL_GetTick>
 80028c8:	1b40      	subs	r0, r0, r5
 80028ca:	2802      	cmp	r0, #2
 80028cc:	d9f6      	bls.n	80028bc <HAL_RCC_OscConfig+0x2d4>
 80028ce:	e6cc      	b.n	800266a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d0:	f7ff f806 	bl	80018e0 <HAL_GetTick>
 80028d4:	1b80      	subs	r0, r0, r6
 80028d6:	2802      	cmp	r0, #2
 80028d8:	d9d6      	bls.n	8002888 <HAL_RCC_OscConfig+0x2a0>
 80028da:	e6c6      	b.n	800266a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80028dc:	f7ff f800 	bl	80018e0 <HAL_GetTick>
 80028e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	019b      	lsls	r3, r3, #6
 80028e6:	f57f ae95 	bpl.w	8002614 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fff9 	bl	80018e0 <HAL_GetTick>
 80028ee:	1b40      	subs	r0, r0, r5
 80028f0:	2802      	cmp	r0, #2
 80028f2:	d9f6      	bls.n	80028e2 <HAL_RCC_OscConfig+0x2fa>
 80028f4:	e6b9      	b.n	800266a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f6:	2801      	cmp	r0, #1
 80028f8:	f43f aeb8 	beq.w	800266c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80028fc:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	6a2a      	ldr	r2, [r5, #32]
 8002900:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002904:	4291      	cmp	r1, r2
 8002906:	f47f ae9b 	bne.w	8002640 <HAL_RCC_OscConfig+0x58>
 800290a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800290c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002910:	4293      	cmp	r3, r2
 8002912:	f43f ae7f 	beq.w	8002614 <HAL_RCC_OscConfig+0x2c>
 8002916:	e693      	b.n	8002640 <HAL_RCC_OscConfig+0x58>
 8002918:	40021000 	.word	0x40021000
 800291c:	42420000 	.word	0x42420000

08002920 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002920:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <HAL_RCC_GetSysClockFreq+0x38>)
 8002922:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002924:	f003 010c 	and.w	r1, r3, #12
 8002928:	2908      	cmp	r1, #8
 800292a:	d112      	bne.n	8002952 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800292c:	480b      	ldr	r0, [pc, #44]	; (800295c <HAL_RCC_GetSysClockFreq+0x3c>)
 800292e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002932:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002934:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002936:	d509      	bpl.n	800294c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002938:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800293c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002940:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <HAL_RCC_GetSysClockFreq+0x44>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002946:	fbb0 f0f3 	udiv	r0, r0, r3
 800294a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_RCC_GetSysClockFreq+0x48>)
 800294e:	4358      	muls	r0, r3
 8002950:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002952:	4803      	ldr	r0, [pc, #12]	; (8002960 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	08008060 	.word	0x08008060
 8002960:	007a1200 	.word	0x007a1200
 8002964:	08008070 	.word	0x08008070
 8002968:	003d0900 	.word	0x003d0900

0800296c <HAL_RCC_ClockConfig>:
{
 800296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002970:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002972:	4604      	mov	r4, r0
 8002974:	b910      	cbnz	r0, 800297c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002976:	2001      	movs	r0, #1
}
 8002978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800297c:	4a44      	ldr	r2, [pc, #272]	; (8002a90 <HAL_RCC_ClockConfig+0x124>)
 800297e:	6813      	ldr	r3, [r2, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	428b      	cmp	r3, r1
 8002986:	d328      	bcc.n	80029da <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	6821      	ldr	r1, [r4, #0]
 800298a:	078e      	lsls	r6, r1, #30
 800298c:	d430      	bmi.n	80029f0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	07ca      	lsls	r2, r1, #31
 8002990:	d443      	bmi.n	8002a1a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002992:	4a3f      	ldr	r2, [pc, #252]	; (8002a90 <HAL_RCC_ClockConfig+0x124>)
 8002994:	6813      	ldr	r3, [r2, #0]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	42ab      	cmp	r3, r5
 800299c:	d865      	bhi.n	8002a6a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299e:	6822      	ldr	r2, [r4, #0]
 80029a0:	4d3c      	ldr	r5, [pc, #240]	; (8002a94 <HAL_RCC_ClockConfig+0x128>)
 80029a2:	f012 0f04 	tst.w	r2, #4
 80029a6:	d16c      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a8:	0713      	lsls	r3, r2, #28
 80029aa:	d506      	bpl.n	80029ba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ac:	686b      	ldr	r3, [r5, #4]
 80029ae:	6922      	ldr	r2, [r4, #16]
 80029b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80029b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80029b8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ba:	f7ff ffb1 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80029be:	686b      	ldr	r3, [r5, #4]
 80029c0:	4a35      	ldr	r2, [pc, #212]	; (8002a98 <HAL_RCC_ClockConfig+0x12c>)
 80029c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029c6:	5cd3      	ldrb	r3, [r2, r3]
 80029c8:	40d8      	lsrs	r0, r3
 80029ca:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_RCC_ClockConfig+0x130>)
 80029cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80029ce:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <HAL_RCC_ClockConfig+0x134>)
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	f7fe ff43 	bl	800185c <HAL_InitTick>
  return HAL_OK;
 80029d6:	2000      	movs	r0, #0
 80029d8:	e7ce      	b.n	8002978 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	6813      	ldr	r3, [r2, #0]
 80029dc:	f023 0307 	bic.w	r3, r3, #7
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e4:	6813      	ldr	r3, [r2, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	428b      	cmp	r3, r1
 80029ec:	d1c3      	bne.n	8002976 <HAL_RCC_ClockConfig+0xa>
 80029ee:	e7cb      	b.n	8002988 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <HAL_RCC_ClockConfig+0x128>)
 80029f2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f6:	bf1e      	ittt	ne
 80029f8:	685a      	ldrne	r2, [r3, #4]
 80029fa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80029fe:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a02:	bf42      	ittt	mi
 8002a04:	685a      	ldrmi	r2, [r3, #4]
 8002a06:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002a0a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	68a0      	ldr	r0, [r4, #8]
 8002a10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a14:	4302      	orrs	r2, r0
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	e7b9      	b.n	800298e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	6862      	ldr	r2, [r4, #4]
 8002a1c:	4e1d      	ldr	r6, [pc, #116]	; (8002a94 <HAL_RCC_ClockConfig+0x128>)
 8002a1e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a20:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	d11a      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	d0a5      	beq.n	8002976 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a30:	f023 0303 	bic.w	r3, r3, #3
 8002a34:	4313      	orrs	r3, r2
 8002a36:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002a38:	f7fe ff52 	bl	80018e0 <HAL_GetTick>
 8002a3c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	6873      	ldr	r3, [r6, #4]
 8002a40:	6862      	ldr	r2, [r4, #4]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a4a:	d0a2      	beq.n	8002992 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7fe ff48 	bl	80018e0 <HAL_GetTick>
 8002a50:	1bc0      	subs	r0, r0, r7
 8002a52:	4540      	cmp	r0, r8
 8002a54:	d9f3      	bls.n	8002a3e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002a56:	2003      	movs	r0, #3
 8002a58:	e78e      	b.n	8002978 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5a:	2a02      	cmp	r2, #2
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a62:	e7e1      	b.n	8002a28 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	f013 0f02 	tst.w	r3, #2
 8002a68:	e7de      	b.n	8002a28 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	6813      	ldr	r3, [r2, #0]
 8002a6c:	f023 0307 	bic.w	r3, r3, #7
 8002a70:	432b      	orrs	r3, r5
 8002a72:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	42ab      	cmp	r3, r5
 8002a7c:	f47f af7b 	bne.w	8002976 <HAL_RCC_ClockConfig+0xa>
 8002a80:	e78d      	b.n	800299e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a82:	686b      	ldr	r3, [r5, #4]
 8002a84:	68e1      	ldr	r1, [r4, #12]
 8002a86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	606b      	str	r3, [r5, #4]
 8002a8e:	e78b      	b.n	80029a8 <HAL_RCC_ClockConfig+0x3c>
 8002a90:	40022000 	.word	0x40022000
 8002a94:	40021000 	.word	0x40021000
 8002a98:	08008048 	.word	0x08008048
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	20000008 	.word	0x20000008

08002aa4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x18>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	4a03      	ldr	r2, [pc, #12]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ab2:	6810      	ldr	r0, [r2, #0]
}
 8002ab4:	40d8      	lsrs	r0, r3
 8002ab6:	4770      	bx	lr
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08008058 	.word	0x08008058
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002ace:	5cd3      	ldrb	r3, [r2, r3]
 8002ad0:	4a03      	ldr	r2, [pc, #12]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ad2:	6810      	ldr	r0, [r2, #0]
}
 8002ad4:	40d8      	lsrs	r0, r3
 8002ad6:	4770      	bx	lr
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08008058 	.word	0x08008058
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ae4:	6803      	ldr	r3, [r0, #0]
{
 8002ae6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002aea:	07d9      	lsls	r1, r3, #31
{
 8002aec:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002aee:	d520      	bpl.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af0:	4c36      	ldr	r4, [pc, #216]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002af2:	69e3      	ldr	r3, [r4, #28]
 8002af4:	00da      	lsls	r2, r3, #3
 8002af6:	d432      	bmi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002af8:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	69e3      	ldr	r3, [r4, #28]
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	61e3      	str	r3, [r4, #28]
 8002b02:	69e3      	ldr	r3, [r4, #28]
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4f30      	ldr	r7, [pc, #192]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	05db      	lsls	r3, r3, #23
 8002b12:	d526      	bpl.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b14:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b16:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002b1a:	d136      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b1c:	6a23      	ldr	r3, [r4, #32]
 8002b1e:	686a      	ldr	r2, [r5, #4]
 8002b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b24:	4313      	orrs	r3, r2
 8002b26:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b28:	b11e      	cbz	r6, 8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2a:	69e3      	ldr	r3, [r4, #28]
 8002b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b30:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b32:	6828      	ldr	r0, [r5, #0]
 8002b34:	0783      	lsls	r3, r0, #30
 8002b36:	d506      	bpl.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b38:	4924      	ldr	r1, [pc, #144]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002b3a:	68ab      	ldr	r3, [r5, #8]
 8002b3c:	684a      	ldr	r2, [r1, #4]
 8002b3e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b42:	431a      	orrs	r2, r3
 8002b44:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b46:	f010 0010 	ands.w	r0, r0, #16
 8002b4a:	d01b      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002b4e:	68e9      	ldr	r1, [r5, #12]
 8002b50:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b52:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b54:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6053      	str	r3, [r2, #4]
 8002b5c:	e012      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8002b5e:	2600      	movs	r6, #0
 8002b60:	e7d4      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002b6a:	f7fe feb9 	bl	80018e0 <HAL_GetTick>
 8002b6e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	05d8      	lsls	r0, r3, #23
 8002b74:	d4ce      	bmi.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fe feb3 	bl	80018e0 <HAL_GetTick>
 8002b7a:	eba0 0008 	sub.w	r0, r0, r8
 8002b7e:	2864      	cmp	r0, #100	; 0x64
 8002b80:	d9f6      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002b82:	2003      	movs	r0, #3
}
 8002b84:	b002      	add	sp, #8
 8002b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b8a:	686a      	ldr	r2, [r5, #4]
 8002b8c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d0c3      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b94:	2001      	movs	r0, #1
 8002b96:	4a0f      	ldr	r2, [pc, #60]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b98:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b9a:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b9e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba4:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8002ba8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002baa:	07d9      	lsls	r1, r3, #31
 8002bac:	d5b6      	bpl.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002bae:	f7fe fe97 	bl	80018e0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002bb6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	6a23      	ldr	r3, [r4, #32]
 8002bba:	079a      	lsls	r2, r3, #30
 8002bbc:	d4ae      	bmi.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe fe8f 	bl	80018e0 <HAL_GetTick>
 8002bc2:	1bc0      	subs	r0, r0, r7
 8002bc4:	4540      	cmp	r0, r8
 8002bc6:	d9f7      	bls.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bc8:	e7db      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	42420000 	.word	0x42420000

08002bd8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bda:	6a02      	ldr	r2, [r0, #32]
{
 8002bdc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002bee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bf0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002bf2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002bf6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bf8:	4d0a      	ldr	r5, [pc, #40]	; (8002c24 <TIM_OC1_SetConfig+0x4c>)
 8002bfa:	42a8      	cmp	r0, r5
 8002bfc:	d10b      	bne.n	8002c16 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bfe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c00:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002c04:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c06:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c0a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002c0e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c10:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c14:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c16:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c18:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c1a:	684a      	ldr	r2, [r1, #4]
 8002c1c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1e:	6203      	str	r3, [r0, #32]
}
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
 8002c22:	bf00      	nop
 8002c24:	40012c00 	.word	0x40012c00

08002c28 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c28:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c2a:	6a02      	ldr	r2, [r0, #32]
{
 8002c2c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c32:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c36:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c3a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002c3e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c40:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002c42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c4a:	4d0b      	ldr	r5, [pc, #44]	; (8002c78 <TIM_OC3_SetConfig+0x50>)
 8002c4c:	42a8      	cmp	r0, r5
 8002c4e:	d10d      	bne.n	8002c6c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c50:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c5a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c5e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002c62:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c68:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c6e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c70:	684a      	ldr	r2, [r1, #4]
 8002c72:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c74:	6203      	str	r3, [r0, #32]
}
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	40012c00 	.word	0x40012c00

08002c7c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c7e:	6a02      	ldr	r2, [r0, #32]
{
 8002c80:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c86:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c8e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c92:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c96:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c9c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca0:	4d06      	ldr	r5, [pc, #24]	; (8002cbc <TIM_OC4_SetConfig+0x40>)
 8002ca2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca4:	bf02      	ittt	eq
 8002ca6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cac:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cb2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cb4:	684a      	ldr	r2, [r1, #4]
 8002cb6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb8:	6203      	str	r3, [r0, #32]
}
 8002cba:	bd30      	pop	{r4, r5, pc}
 8002cbc:	40012c00 	.word	0x40012c00

08002cc0 <HAL_TIM_PWM_MspInit>:
 8002cc0:	4770      	bx	lr
	...

08002cc4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc4:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002cc6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc8:	4290      	cmp	r0, r2
 8002cca:	d00a      	beq.n	8002ce2 <TIM_Base_SetConfig+0x1e>
 8002ccc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cd0:	d007      	beq.n	8002ce2 <TIM_Base_SetConfig+0x1e>
 8002cd2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cd6:	4290      	cmp	r0, r2
 8002cd8:	d003      	beq.n	8002ce2 <TIM_Base_SetConfig+0x1e>
 8002cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cde:	4290      	cmp	r0, r2
 8002ce0:	d115      	bne.n	8002d0e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002ce2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ce8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cea:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <TIM_Base_SetConfig+0x6c>)
 8002cec:	4290      	cmp	r0, r2
 8002cee:	d00a      	beq.n	8002d06 <TIM_Base_SetConfig+0x42>
 8002cf0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cf4:	d007      	beq.n	8002d06 <TIM_Base_SetConfig+0x42>
 8002cf6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cfa:	4290      	cmp	r0, r2
 8002cfc:	d003      	beq.n	8002d06 <TIM_Base_SetConfig+0x42>
 8002cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d02:	4290      	cmp	r0, r2
 8002d04:	d103      	bne.n	8002d0e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d06:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d0e:	694a      	ldr	r2, [r1, #20]
 8002d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d14:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002d16:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d18:	688b      	ldr	r3, [r1, #8]
 8002d1a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d1c:	680b      	ldr	r3, [r1, #0]
 8002d1e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <TIM_Base_SetConfig+0x6c>)
 8002d22:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002d24:	bf04      	itt	eq
 8002d26:	690b      	ldreq	r3, [r1, #16]
 8002d28:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	6143      	str	r3, [r0, #20]
}
 8002d2e:	4770      	bx	lr
 8002d30:	40012c00 	.word	0x40012c00

08002d34 <HAL_TIM_Base_Init>:
{
 8002d34:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002d36:	4604      	mov	r4, r0
 8002d38:	b330      	cbz	r0, 8002d88 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d42:	b91b      	cbnz	r3, 8002d4c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002d48:	f7fe fb3c 	bl	80013c4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d54:	1d21      	adds	r1, r4, #4
 8002d56:	f7ff ffb5 	bl	8002cc4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5a:	2301      	movs	r3, #1
  return HAL_OK;
 8002d5c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002d66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002d6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002d6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002d82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002d86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d88:	2001      	movs	r0, #1
 8002d8a:	e7fc      	b.n	8002d86 <HAL_TIM_Base_Init+0x52>

08002d8c <HAL_TIM_PWM_Init>:
{
 8002d8c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002d8e:	4604      	mov	r4, r0
 8002d90:	b330      	cbz	r0, 8002de0 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d9a:	b91b      	cbnz	r3, 8002da4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d9c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002da0:	f7ff ff8e 	bl	8002cc0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dac:	1d21      	adds	r1, r4, #4
 8002dae:	f7ff ff89 	bl	8002cc4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db2:	2301      	movs	r3, #1
  return HAL_OK;
 8002db4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002dbe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002dc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002dc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002dda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002dde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002de0:	2001      	movs	r0, #1
 8002de2:	e7fc      	b.n	8002dde <HAL_TIM_PWM_Init+0x52>

08002de4 <HAL_TIM_Encoder_Init>:
{
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	460d      	mov	r5, r1
  if (htim == NULL)
 8002de8:	4604      	mov	r4, r0
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d04d      	beq.n	8002e8a <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002df2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002df6:	b91b      	cbnz	r3, 8002e00 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002df8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002dfc:	f7fe fb24 	bl	8001448 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e02:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e08:	f851 0b04 	ldr.w	r0, [r1], #4
 8002e0c:	6883      	ldr	r3, [r0, #8]
 8002e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e12:	f023 0307 	bic.w	r3, r3, #7
 8002e16:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e18:	f7ff ff54 	bl	8002cc4 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002e1e:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002e20:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002e22:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e24:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8002e26:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e28:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e2e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e32:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e36:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e38:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e3c:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002e3e:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e46:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8002e48:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e4e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e52:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002e56:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e58:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e5a:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e5e:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002e60:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e62:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8002e66:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e68:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6a:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8002e6c:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8002e6e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e70:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e78:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8002e84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	e7fc      	b.n	8002e88 <HAL_TIM_Encoder_Init+0xa4>
	...

08002e90 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8002e90:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e92:	6a02      	ldr	r2, [r0, #32]
{
 8002e94:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e96:	f022 0210 	bic.w	r2, r2, #16
 8002e9a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002e9c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002e9e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ea2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002eaa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002eac:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002eb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eb4:	4d0b      	ldr	r5, [pc, #44]	; (8002ee4 <TIM_OC2_SetConfig+0x54>)
 8002eb6:	42a8      	cmp	r0, r5
 8002eb8:	d10d      	bne.n	8002ed6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ec0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ec4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ec8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002ecc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ed2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002ed6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002ed8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002eda:	684a      	ldr	r2, [r1, #4]
 8002edc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002ede:	6203      	str	r3, [r0, #32]
}
 8002ee0:	bd70      	pop	{r4, r5, r6, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40012c00 	.word	0x40012c00

08002ee8 <HAL_TIM_PWM_ConfigChannel>:
{
 8002ee8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002eea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002eee:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d053      	beq.n	8002f9c <HAL_TIM_PWM_ConfigChannel+0xb4>
 8002ef4:	2001      	movs	r0, #1
  switch (Channel)
 8002ef6:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002ef8:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8002efc:	d03d      	beq.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x92>
 8002efe:	d806      	bhi.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x26>
 8002f00:	b1c2      	cbz	r2, 8002f34 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8002f02:	2a04      	cmp	r2, #4
 8002f04:	d028      	beq.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_UNLOCK(htim);
 8002f06:	2300      	movs	r3, #0
 8002f08:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8002f0e:	2a0c      	cmp	r2, #12
 8002f10:	d1f9      	bne.n	8002f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f12:	6828      	ldr	r0, [r5, #0]
 8002f14:	f7ff feb2 	bl	8002c7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f18:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f1a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f32:	e031      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f34:	6828      	ldr	r0, [r5, #0]
 8002f36:	f7ff fe4f 	bl	8002bd8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f3a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f3c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	f042 0208 	orr.w	r2, r2, #8
 8002f44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f46:	699a      	ldr	r2, [r3, #24]
 8002f48:	f022 0204 	bic.w	r2, r2, #4
 8002f4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f52:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002f54:	2000      	movs	r0, #0
      break;
 8002f56:	e7d6      	b.n	8002f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f58:	6828      	ldr	r0, [r5, #0]
 8002f5a:	f7ff ff99 	bl	8002e90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f5e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f60:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f78:	e7eb      	b.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f7a:	6828      	ldr	r0, [r5, #0]
 8002f7c:	f7ff fe54 	bl	8002c28 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f80:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f82:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	f042 0208 	orr.w	r2, r2, #8
 8002f8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	f022 0204 	bic.w	r2, r2, #4
 8002f92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f98:	61da      	str	r2, [r3, #28]
 8002f9a:	e7db      	b.n	8002f54 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_LOCK(htim);
 8002f9c:	2002      	movs	r0, #2
 8002f9e:	e7b5      	b.n	8002f0c <HAL_TIM_PWM_ConfigChannel+0x24>

08002fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fa0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fa2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fa4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002faa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002fae:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fb0:	6082      	str	r2, [r0, #8]
}
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <HAL_TIM_ConfigClockSource>:
{
 8002fb4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002fb6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002fba:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f04f 0302 	mov.w	r3, #2
 8002fc2:	f000 8091 	beq.w	80030e8 <HAL_TIM_ConfigClockSource+0x134>
 8002fc6:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002fcc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	6800      	ldr	r0, [r0, #0]
 8002fd2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002fdc:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002fde:	680b      	ldr	r3, [r1, #0]
 8002fe0:	2b60      	cmp	r3, #96	; 0x60
 8002fe2:	d052      	beq.n	800308a <HAL_TIM_ConfigClockSource+0xd6>
 8002fe4:	d833      	bhi.n	800304e <HAL_TIM_ConfigClockSource+0x9a>
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d067      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x106>
 8002fea:	d816      	bhi.n	800301a <HAL_TIM_ConfigClockSource+0x66>
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d00d      	beq.n	800300c <HAL_TIM_ConfigClockSource+0x58>
 8002ff0:	d80a      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x54>
 8002ff2:	f033 0110 	bics.w	r1, r3, #16
 8002ff6:	d009      	beq.n	800300c <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ffe:	2300      	movs	r3, #0
 8003000:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003004:	4610      	mov	r0, r2
 8003006:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003008:	2b30      	cmp	r3, #48	; 0x30
 800300a:	d1f5      	bne.n	8002ff8 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 800300c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800300e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003012:	4313      	orrs	r3, r2
 8003014:	f043 0307 	orr.w	r3, r3, #7
 8003018:	e017      	b.n	800304a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 800301a:	2b50      	cmp	r3, #80	; 0x50
 800301c:	d1ec      	bne.n	8002ff8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800301e:	684a      	ldr	r2, [r1, #4]
 8003020:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003022:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003024:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003026:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800302a:	f025 0501 	bic.w	r5, r5, #1
 800302e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003030:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003032:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003038:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800303c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800303e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003040:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003046:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800304a:	6083      	str	r3, [r0, #8]
 800304c:	e011      	b.n	8003072 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003052:	d00e      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0xbe>
 8003054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003058:	d00d      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xc2>
 800305a:	2b70      	cmp	r3, #112	; 0x70
 800305c:	d1cc      	bne.n	8002ff8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800305e:	68cb      	ldr	r3, [r1, #12]
 8003060:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003064:	f7ff ff9c 	bl	8002fa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003068:	6822      	ldr	r2, [r4, #0]
 800306a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003070:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2200      	movs	r2, #0
 8003074:	e7c0      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003076:	68cb      	ldr	r3, [r1, #12]
 8003078:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800307c:	f7ff ff90 	bl	8002fa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003080:	6822      	ldr	r2, [r4, #0]
 8003082:	6893      	ldr	r3, [r2, #8]
 8003084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003088:	e7f2      	b.n	8003070 <HAL_TIM_ConfigClockSource+0xbc>
  tmpccer = TIMx->CCER;
 800308a:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800308c:	684d      	ldr	r5, [r1, #4]
 800308e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003090:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003096:	f021 0110 	bic.w	r1, r1, #16
 800309a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309c:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 800309e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030a2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030a6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80030aa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80030ac:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80030ae:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030b4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80030b8:	e7c7      	b.n	800304a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ba:	684a      	ldr	r2, [r1, #4]
 80030bc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80030be:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c6:	f025 0501 	bic.w	r5, r5, #1
 80030ca:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030cc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80030ce:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030d4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80030d8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80030da:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80030dc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030e2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80030e6:	e7b0      	b.n	800304a <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80030e8:	461a      	mov	r2, r3
 80030ea:	e78b      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x50>

080030ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030ec:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80030f2:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f04f 0002 	mov.w	r0, #2
 80030fa:	d022      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030fc:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80030fe:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003102:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003104:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003106:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800310a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800310c:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800310e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003110:	4c0c      	ldr	r4, [pc, #48]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003112:	42a3      	cmp	r3, r4
 8003114:	d00a      	beq.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d007      	beq.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800311c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003120:	42a3      	cmp	r3, r4
 8003122:	d003      	beq.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003124:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003128:	42a3      	cmp	r3, r4
 800312a:	d104      	bne.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800312c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800312e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003132:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003134:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003136:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003138:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800313a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800313e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8003142:	bd30      	pop	{r4, r5, pc}
 8003144:	40012c00 	.word	0x40012c00

08003148 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003148:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d01f      	beq.n	8003190 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003150:	68cb      	ldr	r3, [r1, #12]
 8003152:	688a      	ldr	r2, [r1, #8]
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800315a:	684a      	ldr	r2, [r1, #4]
 800315c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003160:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003162:	680a      	ldr	r2, [r1, #0]
 8003164:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003168:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800316a:	690a      	ldr	r2, [r1, #16]
 800316c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003170:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003172:	694a      	ldr	r2, [r1, #20]
 8003174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003178:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800317a:	69ca      	ldr	r2, [r1, #28]
 800317c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003180:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003182:	6802      	ldr	r2, [r0, #0]
 8003184:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003186:	2300      	movs	r3, #0
 8003188:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800318c:	4618      	mov	r0, r3
 800318e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003190:	2002      	movs	r0, #2
}
 8003192:	4770      	bx	lr

08003194 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003194:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	f102 030c 	add.w	r3, r2, #12
 800319a:	e853 3f00 	ldrex	r3, [r3]
 800319e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a2:	320c      	adds	r2, #12
 80031a4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80031a8:	6802      	ldr	r2, [r0, #0]
 80031aa:	2900      	cmp	r1, #0
 80031ac:	d1f2      	bne.n	8003194 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	f102 0314 	add.w	r3, r2, #20
 80031b2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	f102 0c14 	add.w	ip, r2, #20
 80031be:	e84c 3100 	strex	r1, r3, [ip]
 80031c2:	2900      	cmp	r1, #0
 80031c4:	d1f3      	bne.n	80031ae <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d10b      	bne.n	80031e4 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	f102 030c 	add.w	r3, r2, #12
 80031d0:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	f102 0c0c 	add.w	ip, r2, #12
 80031dc:	e84c 3100 	strex	r1, r3, [ip]
 80031e0:	2900      	cmp	r1, #0
 80031e2:	d1f3      	bne.n	80031cc <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031e4:	2320      	movs	r3, #32
 80031e6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ea:	2300      	movs	r3, #0
 80031ec:	6303      	str	r3, [r0, #48]	; 0x30
}
 80031ee:	4770      	bx	lr

080031f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f0:	b510      	push	{r4, lr}
 80031f2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f4:	6803      	ldr	r3, [r0, #0]
 80031f6:	68c1      	ldr	r1, [r0, #12]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80031fe:	430a      	orrs	r2, r1
 8003200:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003202:	6882      	ldr	r2, [r0, #8]
 8003204:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003206:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003208:	4302      	orrs	r2, r0
 800320a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800320c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003210:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003214:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003216:	430a      	orrs	r2, r1
 8003218:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	69a1      	ldr	r1, [r4, #24]
 800321e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003222:	430a      	orrs	r2, r1
 8003224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <UART_SetConfig+0x70>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d115      	bne.n	8003258 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800322c:	f7ff fc4a 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003230:	2319      	movs	r3, #25
 8003232:	4343      	muls	r3, r0
 8003234:	6862      	ldr	r2, [r4, #4]
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	0092      	lsls	r2, r2, #2
 800323a:	fbb3 f3f2 	udiv	r3, r3, r2
 800323e:	2264      	movs	r2, #100	; 0x64
 8003240:	fbb3 f1f2 	udiv	r1, r3, r2
 8003244:	fb02 3311 	mls	r3, r2, r1, r3
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	3332      	adds	r3, #50	; 0x32
 800324c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003250:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003254:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003256:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7ff fc24 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 800325c:	e7e8      	b.n	8003230 <UART_SetConfig+0x40>
 800325e:	bf00      	nop
 8003260:	40013800 	.word	0x40013800

08003264 <HAL_UART_Init>:
{
 8003264:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003266:	4604      	mov	r4, r0
 8003268:	b348      	cbz	r0, 80032be <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800326a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800326e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003272:	b91b      	cbnz	r3, 800327c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003274:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003278:	f7fe fa52 	bl	8001720 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800327c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800327e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003280:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003284:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003286:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003288:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800328c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800328e:	f7ff ffaf 	bl	80031f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003292:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800329c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032ac:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80032ae:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032ba:	6360      	str	r0, [r4, #52]	; 0x34
}
 80032bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80032be:	2001      	movs	r0, #1
 80032c0:	e7fc      	b.n	80032bc <HAL_UART_Init+0x58>

080032c2 <HAL_UART_TxCpltCallback>:
 80032c2:	4770      	bx	lr

080032c4 <HAL_UART_ErrorCallback>:
 80032c4:	4770      	bx	lr

080032c6 <UART_DMAAbortOnError>:
{
 80032c6:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80032c8:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80032cc:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032ce:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80032d0:	f7ff fff8 	bl	80032c4 <HAL_UART_ErrorCallback>
}
 80032d4:	bd08      	pop	{r3, pc}

080032d6 <HAL_UARTEx_RxEventCallback>:
}
 80032d6:	4770      	bx	lr

080032d8 <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80032d8:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032da:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032de:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032e2:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e4:	d13f      	bne.n	8003366 <UART_Receive_IT.part.0.isra.0+0x8e>
 80032e6:	6901      	ldr	r1, [r0, #16]
 80032e8:	2900      	cmp	r1, #0
 80032ea:	d13f      	bne.n	800336c <UART_Receive_IT.part.0.isra.0+0x94>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032ec:	6852      	ldr	r2, [r2, #4]
 80032ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f2:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 80032f6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80032f8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003300:	2b00      	cmp	r3, #0
 8003302:	d12d      	bne.n	8003360 <UART_Receive_IT.part.0.isra.0+0x88>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003304:	6802      	ldr	r2, [r0, #0]
 8003306:	68d1      	ldr	r1, [r2, #12]
 8003308:	f021 0120 	bic.w	r1, r1, #32
 800330c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800330e:	68d1      	ldr	r1, [r2, #12]
 8003310:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003314:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003316:	6951      	ldr	r1, [r2, #20]
 8003318:	f021 0101 	bic.w	r1, r1, #1
 800331c:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800331e:	2220      	movs	r2, #32
 8003320:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003324:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003326:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003328:	2a01      	cmp	r2, #1
 800332a:	6802      	ldr	r2, [r0, #0]
 800332c:	d128      	bne.n	8003380 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332e:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	f102 030c 	add.w	r3, r2, #12
 8003334:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003338:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	f102 0c0c 	add.w	ip, r2, #12
 8003340:	e84c 3100 	strex	r1, r3, [ip]
 8003344:	2900      	cmp	r1, #0
 8003346:	d1f3      	bne.n	8003330 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003348:	6813      	ldr	r3, [r2, #0]
 800334a:	06db      	lsls	r3, r3, #27
 800334c:	d505      	bpl.n	800335a <UART_Receive_IT.part.0.isra.0+0x82>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800334e:	9101      	str	r1, [sp, #4]
 8003350:	6813      	ldr	r3, [r2, #0]
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	6853      	ldr	r3, [r2, #4]
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800335a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800335c:	f7ff ffbb 	bl	80032d6 <HAL_UARTEx_RxEventCallback>
}
 8003360:	b003      	add	sp, #12
 8003362:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003366:	b939      	cbnz	r1, 8003378 <UART_Receive_IT.part.0.isra.0+0xa0>
 8003368:	6901      	ldr	r1, [r0, #16]
 800336a:	b929      	cbnz	r1, 8003378 <UART_Receive_IT.part.0.isra.0+0xa0>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800336c:	6852      	ldr	r2, [r2, #4]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8003372:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003374:	3301      	adds	r3, #1
 8003376:	e7be      	b.n	80032f6 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003378:	6852      	ldr	r2, [r2, #4]
 800337a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800337e:	e7f7      	b.n	8003370 <UART_Receive_IT.part.0.isra.0+0x98>
        HAL_UART_RxCpltCallback(huart);
 8003380:	f7fd ff4a 	bl	8001218 <HAL_UART_RxCpltCallback>
 8003384:	e7ec      	b.n	8003360 <UART_Receive_IT.part.0.isra.0+0x88>
	...

08003388 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003388:	6803      	ldr	r3, [r0, #0]
{
 800338a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800338c:	681a      	ldr	r2, [r3, #0]
{
 800338e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003390:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003394:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003396:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003398:	d10c      	bne.n	80033b4 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800339a:	0695      	lsls	r5, r2, #26
 800339c:	d570      	bpl.n	8003480 <HAL_UART_IRQHandler+0xf8>
 800339e:	068d      	lsls	r5, r1, #26
 80033a0:	d56e      	bpl.n	8003480 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033a2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80033a6:	2b22      	cmp	r3, #34	; 0x22
 80033a8:	d164      	bne.n	8003474 <HAL_UART_IRQHandler+0xec>
}
 80033aa:	b003      	add	sp, #12
 80033ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033b0:	f7ff bf92 	b.w	80032d8 <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033b4:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b8:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80033bc:	4305      	orrs	r5, r0
 80033be:	d05f      	beq.n	8003480 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033c0:	07d5      	lsls	r5, r2, #31
 80033c2:	d505      	bpl.n	80033d0 <HAL_UART_IRQHandler+0x48>
 80033c4:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033c6:	bf42      	ittt	mi
 80033c8:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 80033ca:	f043 0301 	orrmi.w	r3, r3, #1
 80033ce:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033d0:	0755      	lsls	r5, r2, #29
 80033d2:	d504      	bpl.n	80033de <HAL_UART_IRQHandler+0x56>
 80033d4:	b118      	cbz	r0, 80033de <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033de:	0793      	lsls	r3, r2, #30
 80033e0:	d504      	bpl.n	80033ec <HAL_UART_IRQHandler+0x64>
 80033e2:	b118      	cbz	r0, 80033ec <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033e6:	f043 0304 	orr.w	r3, r3, #4
 80033ea:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033ec:	0715      	lsls	r5, r2, #28
 80033ee:	d507      	bpl.n	8003400 <HAL_UART_IRQHandler+0x78>
 80033f0:	f001 0320 	and.w	r3, r1, #32
 80033f4:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033f6:	bf1e      	ittt	ne
 80033f8:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 80033fa:	f043 0308 	orrne.w	r3, r3, #8
 80033fe:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003400:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003402:	2b00      	cmp	r3, #0
 8003404:	d036      	beq.n	8003474 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003406:	0690      	lsls	r0, r2, #26
 8003408:	d508      	bpl.n	800341c <HAL_UART_IRQHandler+0x94>
 800340a:	068a      	lsls	r2, r1, #26
 800340c:	d506      	bpl.n	800341c <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800340e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003412:	2b22      	cmp	r3, #34	; 0x22
 8003414:	d102      	bne.n	800341c <HAL_UART_IRQHandler+0x94>
 8003416:	4620      	mov	r0, r4
 8003418:	f7ff ff5e 	bl	80032d8 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800341c:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800341e:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003420:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003422:	6c65      	ldr	r5, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003428:	f005 0508 	and.w	r5, r5, #8
 800342c:	431d      	orrs	r5, r3
 800342e:	d023      	beq.n	8003478 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8003430:	f7ff feb0 	bl	8003194 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003434:	6822      	ldr	r2, [r4, #0]
 8003436:	6953      	ldr	r3, [r2, #20]
 8003438:	065b      	lsls	r3, r3, #25
 800343a:	d518      	bpl.n	800346e <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	f102 0314 	add.w	r3, r2, #20
 8003440:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	f102 0014 	add.w	r0, r2, #20
 800344c:	e840 3100 	strex	r1, r3, [r0]
 8003450:	2900      	cmp	r1, #0
 8003452:	d1f3      	bne.n	800343c <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8003454:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003456:	b150      	cbz	r0, 800346e <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003458:	4b73      	ldr	r3, [pc, #460]	; (8003628 <HAL_UART_IRQHandler+0x2a0>)
 800345a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800345c:	f7fe fe52 	bl	8002104 <HAL_DMA_Abort_IT>
 8003460:	b140      	cbz	r0, 8003474 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003462:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003464:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8003466:	b003      	add	sp, #12
 8003468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800346c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800346e:	4620      	mov	r0, r4
 8003470:	f7ff ff28 	bl	80032c4 <HAL_UART_ErrorCallback>
}
 8003474:	b003      	add	sp, #12
 8003476:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003478:	f7ff ff24 	bl	80032c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347c:	6465      	str	r5, [r4, #68]	; 0x44
 800347e:	e7f9      	b.n	8003474 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003480:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003482:	2801      	cmp	r0, #1
 8003484:	f040 8094 	bne.w	80035b0 <HAL_UART_IRQHandler+0x228>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003488:	06d5      	lsls	r5, r2, #27
 800348a:	f140 8091 	bpl.w	80035b0 <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800348e:	06c8      	lsls	r0, r1, #27
 8003490:	f140 808e 	bpl.w	80035b0 <HAL_UART_IRQHandler+0x228>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003494:	2200      	movs	r2, #0
 8003496:	9201      	str	r2, [sp, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	9201      	str	r2, [sp, #4]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	9201      	str	r2, [sp, #4]
 80034a0:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	0655      	lsls	r5, r2, #25
 80034a6:	d54d      	bpl.n	8003544 <HAL_UART_IRQHandler+0x1bc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80034aa:	680a      	ldr	r2, [r1, #0]
 80034ac:	6852      	ldr	r2, [r2, #4]
 80034ae:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80034b0:	2a00      	cmp	r2, #0
 80034b2:	d0df      	beq.n	8003474 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034b4:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80034b6:	4290      	cmp	r0, r2
 80034b8:	d9dc      	bls.n	8003474 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 80034ba:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034bc:	698a      	ldr	r2, [r1, #24]
 80034be:	2a20      	cmp	r2, #32
 80034c0:	d036      	beq.n	8003530 <HAL_UART_IRQHandler+0x1a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	f103 020c 	add.w	r2, r3, #12
 80034c6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	f103 000c 	add.w	r0, r3, #12
 80034d2:	e840 2100 	strex	r1, r2, [r0]
 80034d6:	2900      	cmp	r1, #0
 80034d8:	d1f3      	bne.n	80034c2 <HAL_UART_IRQHandler+0x13a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	f103 0214 	add.w	r2, r3, #20
 80034de:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	f103 0014 	add.w	r0, r3, #20
 80034ea:	e840 2100 	strex	r1, r2, [r0]
 80034ee:	2900      	cmp	r1, #0
 80034f0:	d1f3      	bne.n	80034da <HAL_UART_IRQHandler+0x152>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f2:	f103 0214 	add.w	r2, r3, #20
 80034f6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	f103 0014 	add.w	r0, r3, #20
 8003502:	e840 2100 	strex	r1, r2, [r0]
 8003506:	2900      	cmp	r1, #0
 8003508:	d1f3      	bne.n	80034f2 <HAL_UART_IRQHandler+0x16a>
          huart->RxState = HAL_UART_STATE_READY;
 800350a:	2220      	movs	r2, #32
 800350c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003510:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	f103 020c 	add.w	r2, r3, #12
 8003516:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	f103 000c 	add.w	r0, r3, #12
 8003522:	e840 2100 	strex	r1, r2, [r0]
 8003526:	2900      	cmp	r1, #0
 8003528:	d1f3      	bne.n	8003512 <HAL_UART_IRQHandler+0x18a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800352a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800352c:	f7fe fdc8 	bl	80020c0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003530:	2302      	movs	r3, #2
 8003532:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003534:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003536:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003538:	1ac9      	subs	r1, r1, r3
 800353a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800353c:	4620      	mov	r0, r4
 800353e:	f7ff feca 	bl	80032d6 <HAL_UARTEx_RxEventCallback>
 8003542:	e797      	b.n	8003474 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003544:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003546:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8003548:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800354a:	b289      	uxth	r1, r1
 800354c:	2900      	cmp	r1, #0
 800354e:	d091      	beq.n	8003474 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003550:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003552:	1a89      	subs	r1, r1, r2
 8003554:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003556:	2900      	cmp	r1, #0
 8003558:	d08c      	beq.n	8003474 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	f103 020c 	add.w	r2, r3, #12
 800355e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003562:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	f103 050c 	add.w	r5, r3, #12
 800356a:	e845 2000 	strex	r0, r2, [r5]
 800356e:	2800      	cmp	r0, #0
 8003570:	d1f3      	bne.n	800355a <HAL_UART_IRQHandler+0x1d2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	f103 0214 	add.w	r2, r3, #20
 8003576:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	f103 0514 	add.w	r5, r3, #20
 8003582:	e845 2000 	strex	r0, r2, [r5]
 8003586:	2800      	cmp	r0, #0
 8003588:	d1f3      	bne.n	8003572 <HAL_UART_IRQHandler+0x1ea>
        huart->RxState = HAL_UART_STATE_READY;
 800358a:	2220      	movs	r2, #32
 800358c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003590:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	f103 020c 	add.w	r2, r3, #12
 8003596:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800359a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359e:	f103 050c 	add.w	r5, r3, #12
 80035a2:	e845 2000 	strex	r0, r2, [r5]
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d1f3      	bne.n	8003592 <HAL_UART_IRQHandler+0x20a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035aa:	2302      	movs	r3, #2
 80035ac:	6363      	str	r3, [r4, #52]	; 0x34
 80035ae:	e7c5      	b.n	800353c <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035b0:	0610      	lsls	r0, r2, #24
 80035b2:	d528      	bpl.n	8003606 <HAL_UART_IRQHandler+0x27e>
 80035b4:	060d      	lsls	r5, r1, #24
 80035b6:	d526      	bpl.n	8003606 <HAL_UART_IRQHandler+0x27e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035b8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80035bc:	2a21      	cmp	r2, #33	; 0x21
 80035be:	f47f af59 	bne.w	8003474 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c2:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035c4:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80035ca:	d117      	bne.n	80035fc <HAL_UART_IRQHandler+0x274>
 80035cc:	6921      	ldr	r1, [r4, #16]
 80035ce:	b9a9      	cbnz	r1, 80035fc <HAL_UART_IRQHandler+0x274>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035d0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80035d4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80035d8:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035da:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80035dc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80035de:	3a01      	subs	r2, #1
 80035e0:	b292      	uxth	r2, r2
 80035e2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80035e4:	2a00      	cmp	r2, #0
 80035e6:	f47f af45 	bne.w	8003474 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	e73b      	b.n	8003474 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035fc:	1c51      	adds	r1, r2, #1
 80035fe:	6221      	str	r1, [r4, #32]
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	e7ea      	b.n	80035dc <HAL_UART_IRQHandler+0x254>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003606:	0650      	lsls	r0, r2, #25
 8003608:	f57f af34 	bpl.w	8003474 <HAL_UART_IRQHandler+0xec>
 800360c:	064a      	lsls	r2, r1, #25
 800360e:	f57f af31 	bpl.w	8003474 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003612:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003614:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800361c:	2320      	movs	r3, #32
 800361e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8003622:	f7ff fe4e 	bl	80032c2 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003626:	e725      	b.n	8003474 <HAL_UART_IRQHandler+0xec>
 8003628:	080032c7 	.word	0x080032c7

0800362c <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 800362e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003630:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003632:	2322      	movs	r3, #34	; 0x22
  huart->RxXferSize = Size;
 8003634:	8582      	strh	r2, [r0, #44]	; 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003636:	6902      	ldr	r2, [r0, #16]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003638:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->pRxBuffPtr = pData;
 800363c:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800363e:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003640:	b11a      	cbz	r2, 800364a <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003648:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800364a:	695a      	ldr	r2, [r3, #20]
}
 800364c:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	f042 0220 	orr.w	r2, r2, #32
 800365a:	60da      	str	r2, [r3, #12]
}
 800365c:	4770      	bx	lr

0800365e <HAL_UART_Receive_IT>:
{
 800365e:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003660:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8003664:	2e20      	cmp	r6, #32
 8003666:	d106      	bne.n	8003676 <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 8003668:	b141      	cbz	r1, 800367c <HAL_UART_Receive_IT+0x1e>
 800366a:	b13a      	cbz	r2, 800367c <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366c:	2400      	movs	r4, #0
 800366e:	6304      	str	r4, [r0, #48]	; 0x30
}
 8003670:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003672:	f7ff bfdb 	b.w	800362c <UART_Start_Receive_IT>
    return HAL_BUSY;
 8003676:	2002      	movs	r0, #2
}
 8003678:	bc70      	pop	{r4, r5, r6}
 800367a:	4770      	bx	lr
      return HAL_ERROR;
 800367c:	2001      	movs	r0, #1
 800367e:	e7fb      	b.n	8003678 <HAL_UART_Receive_IT+0x1a>

08003680 <__errno>:
 8003680:	4b01      	ldr	r3, [pc, #4]	; (8003688 <__errno+0x8>)
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	2000000c 	.word	0x2000000c

0800368c <__libc_init_array>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	2600      	movs	r6, #0
 8003690:	4d0c      	ldr	r5, [pc, #48]	; (80036c4 <__libc_init_array+0x38>)
 8003692:	4c0d      	ldr	r4, [pc, #52]	; (80036c8 <__libc_init_array+0x3c>)
 8003694:	1b64      	subs	r4, r4, r5
 8003696:	10a4      	asrs	r4, r4, #2
 8003698:	42a6      	cmp	r6, r4
 800369a:	d109      	bne.n	80036b0 <__libc_init_array+0x24>
 800369c:	f004 fcc2 	bl	8008024 <_init>
 80036a0:	2600      	movs	r6, #0
 80036a2:	4d0a      	ldr	r5, [pc, #40]	; (80036cc <__libc_init_array+0x40>)
 80036a4:	4c0a      	ldr	r4, [pc, #40]	; (80036d0 <__libc_init_array+0x44>)
 80036a6:	1b64      	subs	r4, r4, r5
 80036a8:	10a4      	asrs	r4, r4, #2
 80036aa:	42a6      	cmp	r6, r4
 80036ac:	d105      	bne.n	80036ba <__libc_init_array+0x2e>
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b4:	4798      	blx	r3
 80036b6:	3601      	adds	r6, #1
 80036b8:	e7ee      	b.n	8003698 <__libc_init_array+0xc>
 80036ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80036be:	4798      	blx	r3
 80036c0:	3601      	adds	r6, #1
 80036c2:	e7f2      	b.n	80036aa <__libc_init_array+0x1e>
 80036c4:	08008578 	.word	0x08008578
 80036c8:	08008578 	.word	0x08008578
 80036cc:	08008578 	.word	0x08008578
 80036d0:	0800857c 	.word	0x0800857c

080036d4 <memset>:
 80036d4:	4603      	mov	r3, r0
 80036d6:	4402      	add	r2, r0
 80036d8:	4293      	cmp	r3, r2
 80036da:	d100      	bne.n	80036de <memset+0xa>
 80036dc:	4770      	bx	lr
 80036de:	f803 1b01 	strb.w	r1, [r3], #1
 80036e2:	e7f9      	b.n	80036d8 <memset+0x4>

080036e4 <__cvt>:
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036ea:	461f      	mov	r7, r3
 80036ec:	bfbb      	ittet	lt
 80036ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80036f2:	461f      	movlt	r7, r3
 80036f4:	2300      	movge	r3, #0
 80036f6:	232d      	movlt	r3, #45	; 0x2d
 80036f8:	b088      	sub	sp, #32
 80036fa:	4614      	mov	r4, r2
 80036fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80036fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003700:	7013      	strb	r3, [r2, #0]
 8003702:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003704:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003708:	f023 0820 	bic.w	r8, r3, #32
 800370c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003710:	d005      	beq.n	800371e <__cvt+0x3a>
 8003712:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003716:	d100      	bne.n	800371a <__cvt+0x36>
 8003718:	3501      	adds	r5, #1
 800371a:	2302      	movs	r3, #2
 800371c:	e000      	b.n	8003720 <__cvt+0x3c>
 800371e:	2303      	movs	r3, #3
 8003720:	aa07      	add	r2, sp, #28
 8003722:	9204      	str	r2, [sp, #16]
 8003724:	aa06      	add	r2, sp, #24
 8003726:	e9cd a202 	strd	sl, r2, [sp, #8]
 800372a:	e9cd 3500 	strd	r3, r5, [sp]
 800372e:	4622      	mov	r2, r4
 8003730:	463b      	mov	r3, r7
 8003732:	f001 fe11 	bl	8005358 <_dtoa_r>
 8003736:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800373a:	4606      	mov	r6, r0
 800373c:	d102      	bne.n	8003744 <__cvt+0x60>
 800373e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003740:	07db      	lsls	r3, r3, #31
 8003742:	d522      	bpl.n	800378a <__cvt+0xa6>
 8003744:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003748:	eb06 0905 	add.w	r9, r6, r5
 800374c:	d110      	bne.n	8003770 <__cvt+0x8c>
 800374e:	7833      	ldrb	r3, [r6, #0]
 8003750:	2b30      	cmp	r3, #48	; 0x30
 8003752:	d10a      	bne.n	800376a <__cvt+0x86>
 8003754:	2200      	movs	r2, #0
 8003756:	2300      	movs	r3, #0
 8003758:	4620      	mov	r0, r4
 800375a:	4639      	mov	r1, r7
 800375c:	f7fd f92e 	bl	80009bc <__aeabi_dcmpeq>
 8003760:	b918      	cbnz	r0, 800376a <__cvt+0x86>
 8003762:	f1c5 0501 	rsb	r5, r5, #1
 8003766:	f8ca 5000 	str.w	r5, [sl]
 800376a:	f8da 3000 	ldr.w	r3, [sl]
 800376e:	4499      	add	r9, r3
 8003770:	2200      	movs	r2, #0
 8003772:	2300      	movs	r3, #0
 8003774:	4620      	mov	r0, r4
 8003776:	4639      	mov	r1, r7
 8003778:	f7fd f920 	bl	80009bc <__aeabi_dcmpeq>
 800377c:	b108      	cbz	r0, 8003782 <__cvt+0x9e>
 800377e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003782:	2230      	movs	r2, #48	; 0x30
 8003784:	9b07      	ldr	r3, [sp, #28]
 8003786:	454b      	cmp	r3, r9
 8003788:	d307      	bcc.n	800379a <__cvt+0xb6>
 800378a:	4630      	mov	r0, r6
 800378c:	9b07      	ldr	r3, [sp, #28]
 800378e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003790:	1b9b      	subs	r3, r3, r6
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	b008      	add	sp, #32
 8003796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	9107      	str	r1, [sp, #28]
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e7f0      	b.n	8003784 <__cvt+0xa0>

080037a2 <__exponent>:
 80037a2:	4603      	mov	r3, r0
 80037a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037a6:	2900      	cmp	r1, #0
 80037a8:	f803 2b02 	strb.w	r2, [r3], #2
 80037ac:	bfb6      	itet	lt
 80037ae:	222d      	movlt	r2, #45	; 0x2d
 80037b0:	222b      	movge	r2, #43	; 0x2b
 80037b2:	4249      	neglt	r1, r1
 80037b4:	2909      	cmp	r1, #9
 80037b6:	7042      	strb	r2, [r0, #1]
 80037b8:	dd2b      	ble.n	8003812 <__exponent+0x70>
 80037ba:	f10d 0407 	add.w	r4, sp, #7
 80037be:	46a4      	mov	ip, r4
 80037c0:	270a      	movs	r7, #10
 80037c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80037c6:	460a      	mov	r2, r1
 80037c8:	46a6      	mov	lr, r4
 80037ca:	fb07 1516 	mls	r5, r7, r6, r1
 80037ce:	2a63      	cmp	r2, #99	; 0x63
 80037d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80037d4:	4631      	mov	r1, r6
 80037d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80037da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80037de:	dcf0      	bgt.n	80037c2 <__exponent+0x20>
 80037e0:	3130      	adds	r1, #48	; 0x30
 80037e2:	f1ae 0502 	sub.w	r5, lr, #2
 80037e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80037ea:	4629      	mov	r1, r5
 80037ec:	1c44      	adds	r4, r0, #1
 80037ee:	4561      	cmp	r1, ip
 80037f0:	d30a      	bcc.n	8003808 <__exponent+0x66>
 80037f2:	f10d 0209 	add.w	r2, sp, #9
 80037f6:	eba2 020e 	sub.w	r2, r2, lr
 80037fa:	4565      	cmp	r5, ip
 80037fc:	bf88      	it	hi
 80037fe:	2200      	movhi	r2, #0
 8003800:	4413      	add	r3, r2
 8003802:	1a18      	subs	r0, r3, r0
 8003804:	b003      	add	sp, #12
 8003806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003808:	f811 2b01 	ldrb.w	r2, [r1], #1
 800380c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003810:	e7ed      	b.n	80037ee <__exponent+0x4c>
 8003812:	2330      	movs	r3, #48	; 0x30
 8003814:	3130      	adds	r1, #48	; 0x30
 8003816:	7083      	strb	r3, [r0, #2]
 8003818:	70c1      	strb	r1, [r0, #3]
 800381a:	1d03      	adds	r3, r0, #4
 800381c:	e7f1      	b.n	8003802 <__exponent+0x60>
	...

08003820 <_printf_float>:
 8003820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	b091      	sub	sp, #68	; 0x44
 8003826:	460c      	mov	r4, r1
 8003828:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800382c:	4616      	mov	r6, r2
 800382e:	461f      	mov	r7, r3
 8003830:	4605      	mov	r5, r0
 8003832:	f002 fef7 	bl	8006624 <_localeconv_r>
 8003836:	6803      	ldr	r3, [r0, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	9309      	str	r3, [sp, #36]	; 0x24
 800383c:	f7fc fc92 	bl	8000164 <strlen>
 8003840:	2300      	movs	r3, #0
 8003842:	930e      	str	r3, [sp, #56]	; 0x38
 8003844:	f8d8 3000 	ldr.w	r3, [r8]
 8003848:	900a      	str	r0, [sp, #40]	; 0x28
 800384a:	3307      	adds	r3, #7
 800384c:	f023 0307 	bic.w	r3, r3, #7
 8003850:	f103 0208 	add.w	r2, r3, #8
 8003854:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003858:	f8d4 b000 	ldr.w	fp, [r4]
 800385c:	f8c8 2000 	str.w	r2, [r8]
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003868:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800386c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003870:	930b      	str	r3, [sp, #44]	; 0x2c
 8003872:	f04f 32ff 	mov.w	r2, #4294967295
 8003876:	4640      	mov	r0, r8
 8003878:	4b9c      	ldr	r3, [pc, #624]	; (8003aec <_printf_float+0x2cc>)
 800387a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800387c:	f7fd f8d0 	bl	8000a20 <__aeabi_dcmpun>
 8003880:	bb70      	cbnz	r0, 80038e0 <_printf_float+0xc0>
 8003882:	f04f 32ff 	mov.w	r2, #4294967295
 8003886:	4640      	mov	r0, r8
 8003888:	4b98      	ldr	r3, [pc, #608]	; (8003aec <_printf_float+0x2cc>)
 800388a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800388c:	f7fd f8aa 	bl	80009e4 <__aeabi_dcmple>
 8003890:	bb30      	cbnz	r0, 80038e0 <_printf_float+0xc0>
 8003892:	2200      	movs	r2, #0
 8003894:	2300      	movs	r3, #0
 8003896:	4640      	mov	r0, r8
 8003898:	4651      	mov	r1, sl
 800389a:	f7fd f899 	bl	80009d0 <__aeabi_dcmplt>
 800389e:	b110      	cbz	r0, 80038a6 <_printf_float+0x86>
 80038a0:	232d      	movs	r3, #45	; 0x2d
 80038a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a6:	4b92      	ldr	r3, [pc, #584]	; (8003af0 <_printf_float+0x2d0>)
 80038a8:	4892      	ldr	r0, [pc, #584]	; (8003af4 <_printf_float+0x2d4>)
 80038aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80038ae:	bf94      	ite	ls
 80038b0:	4698      	movls	r8, r3
 80038b2:	4680      	movhi	r8, r0
 80038b4:	2303      	movs	r3, #3
 80038b6:	f04f 0a00 	mov.w	sl, #0
 80038ba:	6123      	str	r3, [r4, #16]
 80038bc:	f02b 0304 	bic.w	r3, fp, #4
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	4633      	mov	r3, r6
 80038c4:	4621      	mov	r1, r4
 80038c6:	4628      	mov	r0, r5
 80038c8:	9700      	str	r7, [sp, #0]
 80038ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80038cc:	f000 f9d4 	bl	8003c78 <_printf_common>
 80038d0:	3001      	adds	r0, #1
 80038d2:	f040 8090 	bne.w	80039f6 <_printf_float+0x1d6>
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295
 80038da:	b011      	add	sp, #68	; 0x44
 80038dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038e0:	4642      	mov	r2, r8
 80038e2:	4653      	mov	r3, sl
 80038e4:	4640      	mov	r0, r8
 80038e6:	4651      	mov	r1, sl
 80038e8:	f7fd f89a 	bl	8000a20 <__aeabi_dcmpun>
 80038ec:	b148      	cbz	r0, 8003902 <_printf_float+0xe2>
 80038ee:	f1ba 0f00 	cmp.w	sl, #0
 80038f2:	bfb8      	it	lt
 80038f4:	232d      	movlt	r3, #45	; 0x2d
 80038f6:	4880      	ldr	r0, [pc, #512]	; (8003af8 <_printf_float+0x2d8>)
 80038f8:	bfb8      	it	lt
 80038fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80038fe:	4b7f      	ldr	r3, [pc, #508]	; (8003afc <_printf_float+0x2dc>)
 8003900:	e7d3      	b.n	80038aa <_printf_float+0x8a>
 8003902:	6863      	ldr	r3, [r4, #4]
 8003904:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	d142      	bne.n	8003992 <_printf_float+0x172>
 800390c:	2306      	movs	r3, #6
 800390e:	6063      	str	r3, [r4, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	9206      	str	r2, [sp, #24]
 8003914:	aa0e      	add	r2, sp, #56	; 0x38
 8003916:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800391a:	aa0d      	add	r2, sp, #52	; 0x34
 800391c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003920:	9203      	str	r2, [sp, #12]
 8003922:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003926:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	6863      	ldr	r3, [r4, #4]
 800392e:	4642      	mov	r2, r8
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	4628      	mov	r0, r5
 8003934:	4653      	mov	r3, sl
 8003936:	910b      	str	r1, [sp, #44]	; 0x2c
 8003938:	f7ff fed4 	bl	80036e4 <__cvt>
 800393c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800393e:	4680      	mov	r8, r0
 8003940:	2947      	cmp	r1, #71	; 0x47
 8003942:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003944:	d108      	bne.n	8003958 <_printf_float+0x138>
 8003946:	1cc8      	adds	r0, r1, #3
 8003948:	db02      	blt.n	8003950 <_printf_float+0x130>
 800394a:	6863      	ldr	r3, [r4, #4]
 800394c:	4299      	cmp	r1, r3
 800394e:	dd40      	ble.n	80039d2 <_printf_float+0x1b2>
 8003950:	f1a9 0902 	sub.w	r9, r9, #2
 8003954:	fa5f f989 	uxtb.w	r9, r9
 8003958:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800395c:	d81f      	bhi.n	800399e <_printf_float+0x17e>
 800395e:	464a      	mov	r2, r9
 8003960:	3901      	subs	r1, #1
 8003962:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003966:	910d      	str	r1, [sp, #52]	; 0x34
 8003968:	f7ff ff1b 	bl	80037a2 <__exponent>
 800396c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800396e:	4682      	mov	sl, r0
 8003970:	1813      	adds	r3, r2, r0
 8003972:	2a01      	cmp	r2, #1
 8003974:	6123      	str	r3, [r4, #16]
 8003976:	dc02      	bgt.n	800397e <_printf_float+0x15e>
 8003978:	6822      	ldr	r2, [r4, #0]
 800397a:	07d2      	lsls	r2, r2, #31
 800397c:	d501      	bpl.n	8003982 <_printf_float+0x162>
 800397e:	3301      	adds	r3, #1
 8003980:	6123      	str	r3, [r4, #16]
 8003982:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003986:	2b00      	cmp	r3, #0
 8003988:	d09b      	beq.n	80038c2 <_printf_float+0xa2>
 800398a:	232d      	movs	r3, #45	; 0x2d
 800398c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003990:	e797      	b.n	80038c2 <_printf_float+0xa2>
 8003992:	2947      	cmp	r1, #71	; 0x47
 8003994:	d1bc      	bne.n	8003910 <_printf_float+0xf0>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1ba      	bne.n	8003910 <_printf_float+0xf0>
 800399a:	2301      	movs	r3, #1
 800399c:	e7b7      	b.n	800390e <_printf_float+0xee>
 800399e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80039a2:	d118      	bne.n	80039d6 <_printf_float+0x1b6>
 80039a4:	2900      	cmp	r1, #0
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	dd0b      	ble.n	80039c2 <_printf_float+0x1a2>
 80039aa:	6121      	str	r1, [r4, #16]
 80039ac:	b913      	cbnz	r3, 80039b4 <_printf_float+0x194>
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	07d0      	lsls	r0, r2, #31
 80039b2:	d502      	bpl.n	80039ba <_printf_float+0x19a>
 80039b4:	3301      	adds	r3, #1
 80039b6:	440b      	add	r3, r1
 80039b8:	6123      	str	r3, [r4, #16]
 80039ba:	f04f 0a00 	mov.w	sl, #0
 80039be:	65a1      	str	r1, [r4, #88]	; 0x58
 80039c0:	e7df      	b.n	8003982 <_printf_float+0x162>
 80039c2:	b913      	cbnz	r3, 80039ca <_printf_float+0x1aa>
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	07d2      	lsls	r2, r2, #31
 80039c8:	d501      	bpl.n	80039ce <_printf_float+0x1ae>
 80039ca:	3302      	adds	r3, #2
 80039cc:	e7f4      	b.n	80039b8 <_printf_float+0x198>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e7f2      	b.n	80039b8 <_printf_float+0x198>
 80039d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80039d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039d8:	4299      	cmp	r1, r3
 80039da:	db05      	blt.n	80039e8 <_printf_float+0x1c8>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	6121      	str	r1, [r4, #16]
 80039e0:	07d8      	lsls	r0, r3, #31
 80039e2:	d5ea      	bpl.n	80039ba <_printf_float+0x19a>
 80039e4:	1c4b      	adds	r3, r1, #1
 80039e6:	e7e7      	b.n	80039b8 <_printf_float+0x198>
 80039e8:	2900      	cmp	r1, #0
 80039ea:	bfcc      	ite	gt
 80039ec:	2201      	movgt	r2, #1
 80039ee:	f1c1 0202 	rsble	r2, r1, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	e7e0      	b.n	80039b8 <_printf_float+0x198>
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	055a      	lsls	r2, r3, #21
 80039fa:	d407      	bmi.n	8003a0c <_printf_float+0x1ec>
 80039fc:	6923      	ldr	r3, [r4, #16]
 80039fe:	4642      	mov	r2, r8
 8003a00:	4631      	mov	r1, r6
 8003a02:	4628      	mov	r0, r5
 8003a04:	47b8      	blx	r7
 8003a06:	3001      	adds	r0, #1
 8003a08:	d12b      	bne.n	8003a62 <_printf_float+0x242>
 8003a0a:	e764      	b.n	80038d6 <_printf_float+0xb6>
 8003a0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a10:	f240 80dd 	bls.w	8003bce <_printf_float+0x3ae>
 8003a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f7fc ffce 	bl	80009bc <__aeabi_dcmpeq>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d033      	beq.n	8003a8c <_printf_float+0x26c>
 8003a24:	2301      	movs	r3, #1
 8003a26:	4631      	mov	r1, r6
 8003a28:	4628      	mov	r0, r5
 8003a2a:	4a35      	ldr	r2, [pc, #212]	; (8003b00 <_printf_float+0x2e0>)
 8003a2c:	47b8      	blx	r7
 8003a2e:	3001      	adds	r0, #1
 8003a30:	f43f af51 	beq.w	80038d6 <_printf_float+0xb6>
 8003a34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	db02      	blt.n	8003a42 <_printf_float+0x222>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	07d8      	lsls	r0, r3, #31
 8003a40:	d50f      	bpl.n	8003a62 <_printf_float+0x242>
 8003a42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a46:	4631      	mov	r1, r6
 8003a48:	4628      	mov	r0, r5
 8003a4a:	47b8      	blx	r7
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	f43f af42 	beq.w	80038d6 <_printf_float+0xb6>
 8003a52:	f04f 0800 	mov.w	r8, #0
 8003a56:	f104 091a 	add.w	r9, r4, #26
 8003a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	4543      	cmp	r3, r8
 8003a60:	dc09      	bgt.n	8003a76 <_printf_float+0x256>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	079b      	lsls	r3, r3, #30
 8003a66:	f100 8102 	bmi.w	8003c6e <_printf_float+0x44e>
 8003a6a:	68e0      	ldr	r0, [r4, #12]
 8003a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a6e:	4298      	cmp	r0, r3
 8003a70:	bfb8      	it	lt
 8003a72:	4618      	movlt	r0, r3
 8003a74:	e731      	b.n	80038da <_printf_float+0xba>
 8003a76:	2301      	movs	r3, #1
 8003a78:	464a      	mov	r2, r9
 8003a7a:	4631      	mov	r1, r6
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	47b8      	blx	r7
 8003a80:	3001      	adds	r0, #1
 8003a82:	f43f af28 	beq.w	80038d6 <_printf_float+0xb6>
 8003a86:	f108 0801 	add.w	r8, r8, #1
 8003a8a:	e7e6      	b.n	8003a5a <_printf_float+0x23a>
 8003a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	dc38      	bgt.n	8003b04 <_printf_float+0x2e4>
 8003a92:	2301      	movs	r3, #1
 8003a94:	4631      	mov	r1, r6
 8003a96:	4628      	mov	r0, r5
 8003a98:	4a19      	ldr	r2, [pc, #100]	; (8003b00 <_printf_float+0x2e0>)
 8003a9a:	47b8      	blx	r7
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	f43f af1a 	beq.w	80038d6 <_printf_float+0xb6>
 8003aa2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	d102      	bne.n	8003ab0 <_printf_float+0x290>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	07d9      	lsls	r1, r3, #31
 8003aae:	d5d8      	bpl.n	8003a62 <_printf_float+0x242>
 8003ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ab4:	4631      	mov	r1, r6
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	47b8      	blx	r7
 8003aba:	3001      	adds	r0, #1
 8003abc:	f43f af0b 	beq.w	80038d6 <_printf_float+0xb6>
 8003ac0:	f04f 0900 	mov.w	r9, #0
 8003ac4:	f104 0a1a 	add.w	sl, r4, #26
 8003ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003aca:	425b      	negs	r3, r3
 8003acc:	454b      	cmp	r3, r9
 8003ace:	dc01      	bgt.n	8003ad4 <_printf_float+0x2b4>
 8003ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ad2:	e794      	b.n	80039fe <_printf_float+0x1de>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	4652      	mov	r2, sl
 8003ad8:	4631      	mov	r1, r6
 8003ada:	4628      	mov	r0, r5
 8003adc:	47b8      	blx	r7
 8003ade:	3001      	adds	r0, #1
 8003ae0:	f43f aef9 	beq.w	80038d6 <_printf_float+0xb6>
 8003ae4:	f109 0901 	add.w	r9, r9, #1
 8003ae8:	e7ee      	b.n	8003ac8 <_printf_float+0x2a8>
 8003aea:	bf00      	nop
 8003aec:	7fefffff 	.word	0x7fefffff
 8003af0:	08008078 	.word	0x08008078
 8003af4:	0800807c 	.word	0x0800807c
 8003af8:	08008084 	.word	0x08008084
 8003afc:	08008080 	.word	0x08008080
 8003b00:	08008088 	.word	0x08008088
 8003b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	bfa8      	it	ge
 8003b0c:	461a      	movge	r2, r3
 8003b0e:	2a00      	cmp	r2, #0
 8003b10:	4691      	mov	r9, r2
 8003b12:	dc37      	bgt.n	8003b84 <_printf_float+0x364>
 8003b14:	f04f 0b00 	mov.w	fp, #0
 8003b18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b1c:	f104 021a 	add.w	r2, r4, #26
 8003b20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003b24:	ebaa 0309 	sub.w	r3, sl, r9
 8003b28:	455b      	cmp	r3, fp
 8003b2a:	dc33      	bgt.n	8003b94 <_printf_float+0x374>
 8003b2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b30:	429a      	cmp	r2, r3
 8003b32:	db3b      	blt.n	8003bac <_printf_float+0x38c>
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	07da      	lsls	r2, r3, #31
 8003b38:	d438      	bmi.n	8003bac <_printf_float+0x38c>
 8003b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b3e:	eba3 020a 	sub.w	r2, r3, sl
 8003b42:	eba3 0901 	sub.w	r9, r3, r1
 8003b46:	4591      	cmp	r9, r2
 8003b48:	bfa8      	it	ge
 8003b4a:	4691      	movge	r9, r2
 8003b4c:	f1b9 0f00 	cmp.w	r9, #0
 8003b50:	dc34      	bgt.n	8003bbc <_printf_float+0x39c>
 8003b52:	f04f 0800 	mov.w	r8, #0
 8003b56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b5a:	f104 0a1a 	add.w	sl, r4, #26
 8003b5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	eba3 0309 	sub.w	r3, r3, r9
 8003b68:	4543      	cmp	r3, r8
 8003b6a:	f77f af7a 	ble.w	8003a62 <_printf_float+0x242>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4652      	mov	r2, sl
 8003b72:	4631      	mov	r1, r6
 8003b74:	4628      	mov	r0, r5
 8003b76:	47b8      	blx	r7
 8003b78:	3001      	adds	r0, #1
 8003b7a:	f43f aeac 	beq.w	80038d6 <_printf_float+0xb6>
 8003b7e:	f108 0801 	add.w	r8, r8, #1
 8003b82:	e7ec      	b.n	8003b5e <_printf_float+0x33e>
 8003b84:	4613      	mov	r3, r2
 8003b86:	4631      	mov	r1, r6
 8003b88:	4642      	mov	r2, r8
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	47b8      	blx	r7
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d1c0      	bne.n	8003b14 <_printf_float+0x2f4>
 8003b92:	e6a0      	b.n	80038d6 <_printf_float+0xb6>
 8003b94:	2301      	movs	r3, #1
 8003b96:	4631      	mov	r1, r6
 8003b98:	4628      	mov	r0, r5
 8003b9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8003b9c:	47b8      	blx	r7
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	f43f ae99 	beq.w	80038d6 <_printf_float+0xb6>
 8003ba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ba6:	f10b 0b01 	add.w	fp, fp, #1
 8003baa:	e7b9      	b.n	8003b20 <_printf_float+0x300>
 8003bac:	4631      	mov	r1, r6
 8003bae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	47b8      	blx	r7
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d1bf      	bne.n	8003b3a <_printf_float+0x31a>
 8003bba:	e68c      	b.n	80038d6 <_printf_float+0xb6>
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	eb08 020a 	add.w	r2, r8, sl
 8003bc6:	47b8      	blx	r7
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d1c2      	bne.n	8003b52 <_printf_float+0x332>
 8003bcc:	e683      	b.n	80038d6 <_printf_float+0xb6>
 8003bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bd0:	2a01      	cmp	r2, #1
 8003bd2:	dc01      	bgt.n	8003bd8 <_printf_float+0x3b8>
 8003bd4:	07db      	lsls	r3, r3, #31
 8003bd6:	d537      	bpl.n	8003c48 <_printf_float+0x428>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4642      	mov	r2, r8
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4628      	mov	r0, r5
 8003be0:	47b8      	blx	r7
 8003be2:	3001      	adds	r0, #1
 8003be4:	f43f ae77 	beq.w	80038d6 <_printf_float+0xb6>
 8003be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bec:	4631      	mov	r1, r6
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b8      	blx	r7
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	f43f ae6f 	beq.w	80038d6 <_printf_float+0xb6>
 8003bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f7fc fedc 	bl	80009bc <__aeabi_dcmpeq>
 8003c04:	b9d8      	cbnz	r0, 8003c3e <_printf_float+0x41e>
 8003c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c08:	f108 0201 	add.w	r2, r8, #1
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	4631      	mov	r1, r6
 8003c10:	4628      	mov	r0, r5
 8003c12:	47b8      	blx	r7
 8003c14:	3001      	adds	r0, #1
 8003c16:	d10e      	bne.n	8003c36 <_printf_float+0x416>
 8003c18:	e65d      	b.n	80038d6 <_printf_float+0xb6>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	464a      	mov	r2, r9
 8003c1e:	4631      	mov	r1, r6
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b8      	blx	r7
 8003c24:	3001      	adds	r0, #1
 8003c26:	f43f ae56 	beq.w	80038d6 <_printf_float+0xb6>
 8003c2a:	f108 0801 	add.w	r8, r8, #1
 8003c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c30:	3b01      	subs	r3, #1
 8003c32:	4543      	cmp	r3, r8
 8003c34:	dcf1      	bgt.n	8003c1a <_printf_float+0x3fa>
 8003c36:	4653      	mov	r3, sl
 8003c38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c3c:	e6e0      	b.n	8003a00 <_printf_float+0x1e0>
 8003c3e:	f04f 0800 	mov.w	r8, #0
 8003c42:	f104 091a 	add.w	r9, r4, #26
 8003c46:	e7f2      	b.n	8003c2e <_printf_float+0x40e>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	e7df      	b.n	8003c0e <_printf_float+0x3ee>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	464a      	mov	r2, r9
 8003c52:	4631      	mov	r1, r6
 8003c54:	4628      	mov	r0, r5
 8003c56:	47b8      	blx	r7
 8003c58:	3001      	adds	r0, #1
 8003c5a:	f43f ae3c 	beq.w	80038d6 <_printf_float+0xb6>
 8003c5e:	f108 0801 	add.w	r8, r8, #1
 8003c62:	68e3      	ldr	r3, [r4, #12]
 8003c64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003c66:	1a5b      	subs	r3, r3, r1
 8003c68:	4543      	cmp	r3, r8
 8003c6a:	dcf0      	bgt.n	8003c4e <_printf_float+0x42e>
 8003c6c:	e6fd      	b.n	8003a6a <_printf_float+0x24a>
 8003c6e:	f04f 0800 	mov.w	r8, #0
 8003c72:	f104 0919 	add.w	r9, r4, #25
 8003c76:	e7f4      	b.n	8003c62 <_printf_float+0x442>

08003c78 <_printf_common>:
 8003c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c7c:	4616      	mov	r6, r2
 8003c7e:	4699      	mov	r9, r3
 8003c80:	688a      	ldr	r2, [r1, #8]
 8003c82:	690b      	ldr	r3, [r1, #16]
 8003c84:	4607      	mov	r7, r0
 8003c86:	4293      	cmp	r3, r2
 8003c88:	bfb8      	it	lt
 8003c8a:	4613      	movlt	r3, r2
 8003c8c:	6033      	str	r3, [r6, #0]
 8003c8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c92:	460c      	mov	r4, r1
 8003c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c98:	b10a      	cbz	r2, 8003c9e <_printf_common+0x26>
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	6033      	str	r3, [r6, #0]
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	0699      	lsls	r1, r3, #26
 8003ca2:	bf42      	ittt	mi
 8003ca4:	6833      	ldrmi	r3, [r6, #0]
 8003ca6:	3302      	addmi	r3, #2
 8003ca8:	6033      	strmi	r3, [r6, #0]
 8003caa:	6825      	ldr	r5, [r4, #0]
 8003cac:	f015 0506 	ands.w	r5, r5, #6
 8003cb0:	d106      	bne.n	8003cc0 <_printf_common+0x48>
 8003cb2:	f104 0a19 	add.w	sl, r4, #25
 8003cb6:	68e3      	ldr	r3, [r4, #12]
 8003cb8:	6832      	ldr	r2, [r6, #0]
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	42ab      	cmp	r3, r5
 8003cbe:	dc28      	bgt.n	8003d12 <_printf_common+0x9a>
 8003cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cc4:	1e13      	subs	r3, r2, #0
 8003cc6:	6822      	ldr	r2, [r4, #0]
 8003cc8:	bf18      	it	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	0692      	lsls	r2, r2, #26
 8003cce:	d42d      	bmi.n	8003d2c <_printf_common+0xb4>
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cd8:	47c0      	blx	r8
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d020      	beq.n	8003d20 <_printf_common+0xa8>
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	68e5      	ldr	r5, [r4, #12]
 8003ce2:	f003 0306 	and.w	r3, r3, #6
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	bf18      	it	ne
 8003cea:	2500      	movne	r5, #0
 8003cec:	6832      	ldr	r2, [r6, #0]
 8003cee:	f04f 0600 	mov.w	r6, #0
 8003cf2:	68a3      	ldr	r3, [r4, #8]
 8003cf4:	bf08      	it	eq
 8003cf6:	1aad      	subeq	r5, r5, r2
 8003cf8:	6922      	ldr	r2, [r4, #16]
 8003cfa:	bf08      	it	eq
 8003cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d00:	4293      	cmp	r3, r2
 8003d02:	bfc4      	itt	gt
 8003d04:	1a9b      	subgt	r3, r3, r2
 8003d06:	18ed      	addgt	r5, r5, r3
 8003d08:	341a      	adds	r4, #26
 8003d0a:	42b5      	cmp	r5, r6
 8003d0c:	d11a      	bne.n	8003d44 <_printf_common+0xcc>
 8003d0e:	2000      	movs	r0, #0
 8003d10:	e008      	b.n	8003d24 <_printf_common+0xac>
 8003d12:	2301      	movs	r3, #1
 8003d14:	4652      	mov	r2, sl
 8003d16:	4649      	mov	r1, r9
 8003d18:	4638      	mov	r0, r7
 8003d1a:	47c0      	blx	r8
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d103      	bne.n	8003d28 <_printf_common+0xb0>
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d28:	3501      	adds	r5, #1
 8003d2a:	e7c4      	b.n	8003cb6 <_printf_common+0x3e>
 8003d2c:	2030      	movs	r0, #48	; 0x30
 8003d2e:	18e1      	adds	r1, r4, r3
 8003d30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d3a:	4422      	add	r2, r4
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d42:	e7c5      	b.n	8003cd0 <_printf_common+0x58>
 8003d44:	2301      	movs	r3, #1
 8003d46:	4622      	mov	r2, r4
 8003d48:	4649      	mov	r1, r9
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	47c0      	blx	r8
 8003d4e:	3001      	adds	r0, #1
 8003d50:	d0e6      	beq.n	8003d20 <_printf_common+0xa8>
 8003d52:	3601      	adds	r6, #1
 8003d54:	e7d9      	b.n	8003d0a <_printf_common+0x92>
	...

08003d58 <_printf_i>:
 8003d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d5c:	7e0f      	ldrb	r7, [r1, #24]
 8003d5e:	4691      	mov	r9, r2
 8003d60:	2f78      	cmp	r7, #120	; 0x78
 8003d62:	4680      	mov	r8, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	469a      	mov	sl, r3
 8003d68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d6e:	d807      	bhi.n	8003d80 <_printf_i+0x28>
 8003d70:	2f62      	cmp	r7, #98	; 0x62
 8003d72:	d80a      	bhi.n	8003d8a <_printf_i+0x32>
 8003d74:	2f00      	cmp	r7, #0
 8003d76:	f000 80d9 	beq.w	8003f2c <_printf_i+0x1d4>
 8003d7a:	2f58      	cmp	r7, #88	; 0x58
 8003d7c:	f000 80a4 	beq.w	8003ec8 <_printf_i+0x170>
 8003d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d88:	e03a      	b.n	8003e00 <_printf_i+0xa8>
 8003d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d8e:	2b15      	cmp	r3, #21
 8003d90:	d8f6      	bhi.n	8003d80 <_printf_i+0x28>
 8003d92:	a101      	add	r1, pc, #4	; (adr r1, 8003d98 <_printf_i+0x40>)
 8003d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d98:	08003df1 	.word	0x08003df1
 8003d9c:	08003e05 	.word	0x08003e05
 8003da0:	08003d81 	.word	0x08003d81
 8003da4:	08003d81 	.word	0x08003d81
 8003da8:	08003d81 	.word	0x08003d81
 8003dac:	08003d81 	.word	0x08003d81
 8003db0:	08003e05 	.word	0x08003e05
 8003db4:	08003d81 	.word	0x08003d81
 8003db8:	08003d81 	.word	0x08003d81
 8003dbc:	08003d81 	.word	0x08003d81
 8003dc0:	08003d81 	.word	0x08003d81
 8003dc4:	08003f13 	.word	0x08003f13
 8003dc8:	08003e35 	.word	0x08003e35
 8003dcc:	08003ef5 	.word	0x08003ef5
 8003dd0:	08003d81 	.word	0x08003d81
 8003dd4:	08003d81 	.word	0x08003d81
 8003dd8:	08003f35 	.word	0x08003f35
 8003ddc:	08003d81 	.word	0x08003d81
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003d81 	.word	0x08003d81
 8003de8:	08003d81 	.word	0x08003d81
 8003dec:	08003efd 	.word	0x08003efd
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	1d1a      	adds	r2, r3, #4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	602a      	str	r2, [r5, #0]
 8003df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0a4      	b.n	8003f4e <_printf_i+0x1f6>
 8003e04:	6820      	ldr	r0, [r4, #0]
 8003e06:	6829      	ldr	r1, [r5, #0]
 8003e08:	0606      	lsls	r6, r0, #24
 8003e0a:	f101 0304 	add.w	r3, r1, #4
 8003e0e:	d50a      	bpl.n	8003e26 <_printf_i+0xce>
 8003e10:	680e      	ldr	r6, [r1, #0]
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	2e00      	cmp	r6, #0
 8003e16:	da03      	bge.n	8003e20 <_printf_i+0xc8>
 8003e18:	232d      	movs	r3, #45	; 0x2d
 8003e1a:	4276      	negs	r6, r6
 8003e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e20:	230a      	movs	r3, #10
 8003e22:	485e      	ldr	r0, [pc, #376]	; (8003f9c <_printf_i+0x244>)
 8003e24:	e019      	b.n	8003e5a <_printf_i+0x102>
 8003e26:	680e      	ldr	r6, [r1, #0]
 8003e28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e2c:	602b      	str	r3, [r5, #0]
 8003e2e:	bf18      	it	ne
 8003e30:	b236      	sxthne	r6, r6
 8003e32:	e7ef      	b.n	8003e14 <_printf_i+0xbc>
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	6820      	ldr	r0, [r4, #0]
 8003e38:	1d19      	adds	r1, r3, #4
 8003e3a:	6029      	str	r1, [r5, #0]
 8003e3c:	0601      	lsls	r1, r0, #24
 8003e3e:	d501      	bpl.n	8003e44 <_printf_i+0xec>
 8003e40:	681e      	ldr	r6, [r3, #0]
 8003e42:	e002      	b.n	8003e4a <_printf_i+0xf2>
 8003e44:	0646      	lsls	r6, r0, #25
 8003e46:	d5fb      	bpl.n	8003e40 <_printf_i+0xe8>
 8003e48:	881e      	ldrh	r6, [r3, #0]
 8003e4a:	2f6f      	cmp	r7, #111	; 0x6f
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2308      	moveq	r3, #8
 8003e50:	230a      	movne	r3, #10
 8003e52:	4852      	ldr	r0, [pc, #328]	; (8003f9c <_printf_i+0x244>)
 8003e54:	2100      	movs	r1, #0
 8003e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e5a:	6865      	ldr	r5, [r4, #4]
 8003e5c:	2d00      	cmp	r5, #0
 8003e5e:	bfa8      	it	ge
 8003e60:	6821      	ldrge	r1, [r4, #0]
 8003e62:	60a5      	str	r5, [r4, #8]
 8003e64:	bfa4      	itt	ge
 8003e66:	f021 0104 	bicge.w	r1, r1, #4
 8003e6a:	6021      	strge	r1, [r4, #0]
 8003e6c:	b90e      	cbnz	r6, 8003e72 <_printf_i+0x11a>
 8003e6e:	2d00      	cmp	r5, #0
 8003e70:	d04d      	beq.n	8003f0e <_printf_i+0x1b6>
 8003e72:	4615      	mov	r5, r2
 8003e74:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e78:	fb03 6711 	mls	r7, r3, r1, r6
 8003e7c:	5dc7      	ldrb	r7, [r0, r7]
 8003e7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e82:	4637      	mov	r7, r6
 8003e84:	42bb      	cmp	r3, r7
 8003e86:	460e      	mov	r6, r1
 8003e88:	d9f4      	bls.n	8003e74 <_printf_i+0x11c>
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d10b      	bne.n	8003ea6 <_printf_i+0x14e>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	07de      	lsls	r6, r3, #31
 8003e92:	d508      	bpl.n	8003ea6 <_printf_i+0x14e>
 8003e94:	6923      	ldr	r3, [r4, #16]
 8003e96:	6861      	ldr	r1, [r4, #4]
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	bfde      	ittt	le
 8003e9c:	2330      	movle	r3, #48	; 0x30
 8003e9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ea2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ea6:	1b52      	subs	r2, r2, r5
 8003ea8:	6122      	str	r2, [r4, #16]
 8003eaa:	464b      	mov	r3, r9
 8003eac:	4621      	mov	r1, r4
 8003eae:	4640      	mov	r0, r8
 8003eb0:	f8cd a000 	str.w	sl, [sp]
 8003eb4:	aa03      	add	r2, sp, #12
 8003eb6:	f7ff fedf 	bl	8003c78 <_printf_common>
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d14c      	bne.n	8003f58 <_printf_i+0x200>
 8003ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec2:	b004      	add	sp, #16
 8003ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec8:	4834      	ldr	r0, [pc, #208]	; (8003f9c <_printf_i+0x244>)
 8003eca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ece:	6829      	ldr	r1, [r5, #0]
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ed6:	6029      	str	r1, [r5, #0]
 8003ed8:	061d      	lsls	r5, r3, #24
 8003eda:	d514      	bpl.n	8003f06 <_printf_i+0x1ae>
 8003edc:	07df      	lsls	r7, r3, #31
 8003ede:	bf44      	itt	mi
 8003ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ee4:	6023      	strmi	r3, [r4, #0]
 8003ee6:	b91e      	cbnz	r6, 8003ef0 <_printf_i+0x198>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	f023 0320 	bic.w	r3, r3, #32
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	e7af      	b.n	8003e54 <_printf_i+0xfc>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	f043 0320 	orr.w	r3, r3, #32
 8003efa:	6023      	str	r3, [r4, #0]
 8003efc:	2378      	movs	r3, #120	; 0x78
 8003efe:	4828      	ldr	r0, [pc, #160]	; (8003fa0 <_printf_i+0x248>)
 8003f00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f04:	e7e3      	b.n	8003ece <_printf_i+0x176>
 8003f06:	0659      	lsls	r1, r3, #25
 8003f08:	bf48      	it	mi
 8003f0a:	b2b6      	uxthmi	r6, r6
 8003f0c:	e7e6      	b.n	8003edc <_printf_i+0x184>
 8003f0e:	4615      	mov	r5, r2
 8003f10:	e7bb      	b.n	8003e8a <_printf_i+0x132>
 8003f12:	682b      	ldr	r3, [r5, #0]
 8003f14:	6826      	ldr	r6, [r4, #0]
 8003f16:	1d18      	adds	r0, r3, #4
 8003f18:	6961      	ldr	r1, [r4, #20]
 8003f1a:	6028      	str	r0, [r5, #0]
 8003f1c:	0635      	lsls	r5, r6, #24
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	d501      	bpl.n	8003f26 <_printf_i+0x1ce>
 8003f22:	6019      	str	r1, [r3, #0]
 8003f24:	e002      	b.n	8003f2c <_printf_i+0x1d4>
 8003f26:	0670      	lsls	r0, r6, #25
 8003f28:	d5fb      	bpl.n	8003f22 <_printf_i+0x1ca>
 8003f2a:	8019      	strh	r1, [r3, #0]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	4615      	mov	r5, r2
 8003f30:	6123      	str	r3, [r4, #16]
 8003f32:	e7ba      	b.n	8003eaa <_printf_i+0x152>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	2100      	movs	r1, #0
 8003f38:	1d1a      	adds	r2, r3, #4
 8003f3a:	602a      	str	r2, [r5, #0]
 8003f3c:	681d      	ldr	r5, [r3, #0]
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	4628      	mov	r0, r5
 8003f42:	f002 fb8d 	bl	8006660 <memchr>
 8003f46:	b108      	cbz	r0, 8003f4c <_printf_i+0x1f4>
 8003f48:	1b40      	subs	r0, r0, r5
 8003f4a:	6060      	str	r0, [r4, #4]
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	6123      	str	r3, [r4, #16]
 8003f50:	2300      	movs	r3, #0
 8003f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f56:	e7a8      	b.n	8003eaa <_printf_i+0x152>
 8003f58:	462a      	mov	r2, r5
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	4640      	mov	r0, r8
 8003f5e:	6923      	ldr	r3, [r4, #16]
 8003f60:	47d0      	blx	sl
 8003f62:	3001      	adds	r0, #1
 8003f64:	d0ab      	beq.n	8003ebe <_printf_i+0x166>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	079b      	lsls	r3, r3, #30
 8003f6a:	d413      	bmi.n	8003f94 <_printf_i+0x23c>
 8003f6c:	68e0      	ldr	r0, [r4, #12]
 8003f6e:	9b03      	ldr	r3, [sp, #12]
 8003f70:	4298      	cmp	r0, r3
 8003f72:	bfb8      	it	lt
 8003f74:	4618      	movlt	r0, r3
 8003f76:	e7a4      	b.n	8003ec2 <_printf_i+0x16a>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	4632      	mov	r2, r6
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	4640      	mov	r0, r8
 8003f80:	47d0      	blx	sl
 8003f82:	3001      	adds	r0, #1
 8003f84:	d09b      	beq.n	8003ebe <_printf_i+0x166>
 8003f86:	3501      	adds	r5, #1
 8003f88:	68e3      	ldr	r3, [r4, #12]
 8003f8a:	9903      	ldr	r1, [sp, #12]
 8003f8c:	1a5b      	subs	r3, r3, r1
 8003f8e:	42ab      	cmp	r3, r5
 8003f90:	dcf2      	bgt.n	8003f78 <_printf_i+0x220>
 8003f92:	e7eb      	b.n	8003f6c <_printf_i+0x214>
 8003f94:	2500      	movs	r5, #0
 8003f96:	f104 0619 	add.w	r6, r4, #25
 8003f9a:	e7f5      	b.n	8003f88 <_printf_i+0x230>
 8003f9c:	0800808a 	.word	0x0800808a
 8003fa0:	0800809b 	.word	0x0800809b

08003fa4 <_scanf_float>:
 8003fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa8:	b087      	sub	sp, #28
 8003faa:	9303      	str	r3, [sp, #12]
 8003fac:	688b      	ldr	r3, [r1, #8]
 8003fae:	4617      	mov	r7, r2
 8003fb0:	1e5a      	subs	r2, r3, #1
 8003fb2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003fb6:	bf85      	ittet	hi
 8003fb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003fbc:	195b      	addhi	r3, r3, r5
 8003fbe:	2300      	movls	r3, #0
 8003fc0:	9302      	strhi	r3, [sp, #8]
 8003fc2:	bf88      	it	hi
 8003fc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003fc8:	468b      	mov	fp, r1
 8003fca:	f04f 0500 	mov.w	r5, #0
 8003fce:	bf8c      	ite	hi
 8003fd0:	608b      	strhi	r3, [r1, #8]
 8003fd2:	9302      	strls	r3, [sp, #8]
 8003fd4:	680b      	ldr	r3, [r1, #0]
 8003fd6:	4680      	mov	r8, r0
 8003fd8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003fdc:	f84b 3b1c 	str.w	r3, [fp], #28
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	465e      	mov	r6, fp
 8003fe4:	46aa      	mov	sl, r5
 8003fe6:	46a9      	mov	r9, r5
 8003fe8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003fec:	9501      	str	r5, [sp, #4]
 8003fee:	68a2      	ldr	r2, [r4, #8]
 8003ff0:	b152      	cbz	r2, 8004008 <_scanf_float+0x64>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b4e      	cmp	r3, #78	; 0x4e
 8003ff8:	d864      	bhi.n	80040c4 <_scanf_float+0x120>
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d83c      	bhi.n	8004078 <_scanf_float+0xd4>
 8003ffe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004002:	b2c8      	uxtb	r0, r1
 8004004:	280e      	cmp	r0, #14
 8004006:	d93a      	bls.n	800407e <_scanf_float+0xda>
 8004008:	f1b9 0f00 	cmp.w	r9, #0
 800400c:	d003      	beq.n	8004016 <_scanf_float+0x72>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800401a:	f1ba 0f01 	cmp.w	sl, #1
 800401e:	f200 8113 	bhi.w	8004248 <_scanf_float+0x2a4>
 8004022:	455e      	cmp	r6, fp
 8004024:	f200 8105 	bhi.w	8004232 <_scanf_float+0x28e>
 8004028:	2501      	movs	r5, #1
 800402a:	4628      	mov	r0, r5
 800402c:	b007      	add	sp, #28
 800402e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004032:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004036:	2a0d      	cmp	r2, #13
 8004038:	d8e6      	bhi.n	8004008 <_scanf_float+0x64>
 800403a:	a101      	add	r1, pc, #4	; (adr r1, 8004040 <_scanf_float+0x9c>)
 800403c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004040:	0800417f 	.word	0x0800417f
 8004044:	08004009 	.word	0x08004009
 8004048:	08004009 	.word	0x08004009
 800404c:	08004009 	.word	0x08004009
 8004050:	080041df 	.word	0x080041df
 8004054:	080041b7 	.word	0x080041b7
 8004058:	08004009 	.word	0x08004009
 800405c:	08004009 	.word	0x08004009
 8004060:	0800418d 	.word	0x0800418d
 8004064:	08004009 	.word	0x08004009
 8004068:	08004009 	.word	0x08004009
 800406c:	08004009 	.word	0x08004009
 8004070:	08004009 	.word	0x08004009
 8004074:	08004145 	.word	0x08004145
 8004078:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800407c:	e7db      	b.n	8004036 <_scanf_float+0x92>
 800407e:	290e      	cmp	r1, #14
 8004080:	d8c2      	bhi.n	8004008 <_scanf_float+0x64>
 8004082:	a001      	add	r0, pc, #4	; (adr r0, 8004088 <_scanf_float+0xe4>)
 8004084:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004088:	08004137 	.word	0x08004137
 800408c:	08004009 	.word	0x08004009
 8004090:	08004137 	.word	0x08004137
 8004094:	080041cb 	.word	0x080041cb
 8004098:	08004009 	.word	0x08004009
 800409c:	080040e5 	.word	0x080040e5
 80040a0:	08004121 	.word	0x08004121
 80040a4:	08004121 	.word	0x08004121
 80040a8:	08004121 	.word	0x08004121
 80040ac:	08004121 	.word	0x08004121
 80040b0:	08004121 	.word	0x08004121
 80040b4:	08004121 	.word	0x08004121
 80040b8:	08004121 	.word	0x08004121
 80040bc:	08004121 	.word	0x08004121
 80040c0:	08004121 	.word	0x08004121
 80040c4:	2b6e      	cmp	r3, #110	; 0x6e
 80040c6:	d809      	bhi.n	80040dc <_scanf_float+0x138>
 80040c8:	2b60      	cmp	r3, #96	; 0x60
 80040ca:	d8b2      	bhi.n	8004032 <_scanf_float+0x8e>
 80040cc:	2b54      	cmp	r3, #84	; 0x54
 80040ce:	d077      	beq.n	80041c0 <_scanf_float+0x21c>
 80040d0:	2b59      	cmp	r3, #89	; 0x59
 80040d2:	d199      	bne.n	8004008 <_scanf_float+0x64>
 80040d4:	2d07      	cmp	r5, #7
 80040d6:	d197      	bne.n	8004008 <_scanf_float+0x64>
 80040d8:	2508      	movs	r5, #8
 80040da:	e029      	b.n	8004130 <_scanf_float+0x18c>
 80040dc:	2b74      	cmp	r3, #116	; 0x74
 80040de:	d06f      	beq.n	80041c0 <_scanf_float+0x21c>
 80040e0:	2b79      	cmp	r3, #121	; 0x79
 80040e2:	e7f6      	b.n	80040d2 <_scanf_float+0x12e>
 80040e4:	6821      	ldr	r1, [r4, #0]
 80040e6:	05c8      	lsls	r0, r1, #23
 80040e8:	d51a      	bpl.n	8004120 <_scanf_float+0x17c>
 80040ea:	9b02      	ldr	r3, [sp, #8]
 80040ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80040f0:	6021      	str	r1, [r4, #0]
 80040f2:	f109 0901 	add.w	r9, r9, #1
 80040f6:	b11b      	cbz	r3, 8004100 <_scanf_float+0x15c>
 80040f8:	3b01      	subs	r3, #1
 80040fa:	3201      	adds	r2, #1
 80040fc:	9302      	str	r3, [sp, #8]
 80040fe:	60a2      	str	r2, [r4, #8]
 8004100:	68a3      	ldr	r3, [r4, #8]
 8004102:	3b01      	subs	r3, #1
 8004104:	60a3      	str	r3, [r4, #8]
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	3301      	adds	r3, #1
 800410a:	6123      	str	r3, [r4, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3b01      	subs	r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	f340 8084 	ble.w	8004220 <_scanf_float+0x27c>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	3301      	adds	r3, #1
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	e766      	b.n	8003fee <_scanf_float+0x4a>
 8004120:	eb1a 0f05 	cmn.w	sl, r5
 8004124:	f47f af70 	bne.w	8004008 <_scanf_float+0x64>
 8004128:	6822      	ldr	r2, [r4, #0]
 800412a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800412e:	6022      	str	r2, [r4, #0]
 8004130:	f806 3b01 	strb.w	r3, [r6], #1
 8004134:	e7e4      	b.n	8004100 <_scanf_float+0x15c>
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	0610      	lsls	r0, r2, #24
 800413a:	f57f af65 	bpl.w	8004008 <_scanf_float+0x64>
 800413e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004142:	e7f4      	b.n	800412e <_scanf_float+0x18a>
 8004144:	f1ba 0f00 	cmp.w	sl, #0
 8004148:	d10e      	bne.n	8004168 <_scanf_float+0x1c4>
 800414a:	f1b9 0f00 	cmp.w	r9, #0
 800414e:	d10e      	bne.n	800416e <_scanf_float+0x1ca>
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004156:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800415a:	d108      	bne.n	800416e <_scanf_float+0x1ca>
 800415c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004160:	f04f 0a01 	mov.w	sl, #1
 8004164:	6022      	str	r2, [r4, #0]
 8004166:	e7e3      	b.n	8004130 <_scanf_float+0x18c>
 8004168:	f1ba 0f02 	cmp.w	sl, #2
 800416c:	d055      	beq.n	800421a <_scanf_float+0x276>
 800416e:	2d01      	cmp	r5, #1
 8004170:	d002      	beq.n	8004178 <_scanf_float+0x1d4>
 8004172:	2d04      	cmp	r5, #4
 8004174:	f47f af48 	bne.w	8004008 <_scanf_float+0x64>
 8004178:	3501      	adds	r5, #1
 800417a:	b2ed      	uxtb	r5, r5
 800417c:	e7d8      	b.n	8004130 <_scanf_float+0x18c>
 800417e:	f1ba 0f01 	cmp.w	sl, #1
 8004182:	f47f af41 	bne.w	8004008 <_scanf_float+0x64>
 8004186:	f04f 0a02 	mov.w	sl, #2
 800418a:	e7d1      	b.n	8004130 <_scanf_float+0x18c>
 800418c:	b97d      	cbnz	r5, 80041ae <_scanf_float+0x20a>
 800418e:	f1b9 0f00 	cmp.w	r9, #0
 8004192:	f47f af3c 	bne.w	800400e <_scanf_float+0x6a>
 8004196:	6822      	ldr	r2, [r4, #0]
 8004198:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800419c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80041a0:	f47f af39 	bne.w	8004016 <_scanf_float+0x72>
 80041a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80041a8:	2501      	movs	r5, #1
 80041aa:	6022      	str	r2, [r4, #0]
 80041ac:	e7c0      	b.n	8004130 <_scanf_float+0x18c>
 80041ae:	2d03      	cmp	r5, #3
 80041b0:	d0e2      	beq.n	8004178 <_scanf_float+0x1d4>
 80041b2:	2d05      	cmp	r5, #5
 80041b4:	e7de      	b.n	8004174 <_scanf_float+0x1d0>
 80041b6:	2d02      	cmp	r5, #2
 80041b8:	f47f af26 	bne.w	8004008 <_scanf_float+0x64>
 80041bc:	2503      	movs	r5, #3
 80041be:	e7b7      	b.n	8004130 <_scanf_float+0x18c>
 80041c0:	2d06      	cmp	r5, #6
 80041c2:	f47f af21 	bne.w	8004008 <_scanf_float+0x64>
 80041c6:	2507      	movs	r5, #7
 80041c8:	e7b2      	b.n	8004130 <_scanf_float+0x18c>
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	0591      	lsls	r1, r2, #22
 80041ce:	f57f af1b 	bpl.w	8004008 <_scanf_float+0x64>
 80041d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80041d6:	6022      	str	r2, [r4, #0]
 80041d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80041dc:	e7a8      	b.n	8004130 <_scanf_float+0x18c>
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80041e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80041e8:	d006      	beq.n	80041f8 <_scanf_float+0x254>
 80041ea:	0550      	lsls	r0, r2, #21
 80041ec:	f57f af0c 	bpl.w	8004008 <_scanf_float+0x64>
 80041f0:	f1b9 0f00 	cmp.w	r9, #0
 80041f4:	f43f af0f 	beq.w	8004016 <_scanf_float+0x72>
 80041f8:	0591      	lsls	r1, r2, #22
 80041fa:	bf58      	it	pl
 80041fc:	9901      	ldrpl	r1, [sp, #4]
 80041fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004202:	bf58      	it	pl
 8004204:	eba9 0101 	subpl.w	r1, r9, r1
 8004208:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800420c:	f04f 0900 	mov.w	r9, #0
 8004210:	bf58      	it	pl
 8004212:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004216:	6022      	str	r2, [r4, #0]
 8004218:	e78a      	b.n	8004130 <_scanf_float+0x18c>
 800421a:	f04f 0a03 	mov.w	sl, #3
 800421e:	e787      	b.n	8004130 <_scanf_float+0x18c>
 8004220:	4639      	mov	r1, r7
 8004222:	4640      	mov	r0, r8
 8004224:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004228:	4798      	blx	r3
 800422a:	2800      	cmp	r0, #0
 800422c:	f43f aedf 	beq.w	8003fee <_scanf_float+0x4a>
 8004230:	e6ea      	b.n	8004008 <_scanf_float+0x64>
 8004232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004236:	463a      	mov	r2, r7
 8004238:	4640      	mov	r0, r8
 800423a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800423e:	4798      	blx	r3
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	3b01      	subs	r3, #1
 8004244:	6123      	str	r3, [r4, #16]
 8004246:	e6ec      	b.n	8004022 <_scanf_float+0x7e>
 8004248:	1e6b      	subs	r3, r5, #1
 800424a:	2b06      	cmp	r3, #6
 800424c:	d825      	bhi.n	800429a <_scanf_float+0x2f6>
 800424e:	2d02      	cmp	r5, #2
 8004250:	d836      	bhi.n	80042c0 <_scanf_float+0x31c>
 8004252:	455e      	cmp	r6, fp
 8004254:	f67f aee8 	bls.w	8004028 <_scanf_float+0x84>
 8004258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800425c:	463a      	mov	r2, r7
 800425e:	4640      	mov	r0, r8
 8004260:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004264:	4798      	blx	r3
 8004266:	6923      	ldr	r3, [r4, #16]
 8004268:	3b01      	subs	r3, #1
 800426a:	6123      	str	r3, [r4, #16]
 800426c:	e7f1      	b.n	8004252 <_scanf_float+0x2ae>
 800426e:	9802      	ldr	r0, [sp, #8]
 8004270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004274:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004278:	463a      	mov	r2, r7
 800427a:	9002      	str	r0, [sp, #8]
 800427c:	4640      	mov	r0, r8
 800427e:	4798      	blx	r3
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	3b01      	subs	r3, #1
 8004284:	6123      	str	r3, [r4, #16]
 8004286:	f10a 3aff 	add.w	sl, sl, #4294967295
 800428a:	fa5f fa8a 	uxtb.w	sl, sl
 800428e:	f1ba 0f02 	cmp.w	sl, #2
 8004292:	d1ec      	bne.n	800426e <_scanf_float+0x2ca>
 8004294:	3d03      	subs	r5, #3
 8004296:	b2ed      	uxtb	r5, r5
 8004298:	1b76      	subs	r6, r6, r5
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	05da      	lsls	r2, r3, #23
 800429e:	d52f      	bpl.n	8004300 <_scanf_float+0x35c>
 80042a0:	055b      	lsls	r3, r3, #21
 80042a2:	d510      	bpl.n	80042c6 <_scanf_float+0x322>
 80042a4:	455e      	cmp	r6, fp
 80042a6:	f67f aebf 	bls.w	8004028 <_scanf_float+0x84>
 80042aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042ae:	463a      	mov	r2, r7
 80042b0:	4640      	mov	r0, r8
 80042b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80042b6:	4798      	blx	r3
 80042b8:	6923      	ldr	r3, [r4, #16]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	6123      	str	r3, [r4, #16]
 80042be:	e7f1      	b.n	80042a4 <_scanf_float+0x300>
 80042c0:	46aa      	mov	sl, r5
 80042c2:	9602      	str	r6, [sp, #8]
 80042c4:	e7df      	b.n	8004286 <_scanf_float+0x2e2>
 80042c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80042ca:	6923      	ldr	r3, [r4, #16]
 80042cc:	2965      	cmp	r1, #101	; 0x65
 80042ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80042d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80042d6:	6123      	str	r3, [r4, #16]
 80042d8:	d00c      	beq.n	80042f4 <_scanf_float+0x350>
 80042da:	2945      	cmp	r1, #69	; 0x45
 80042dc:	d00a      	beq.n	80042f4 <_scanf_float+0x350>
 80042de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042e2:	463a      	mov	r2, r7
 80042e4:	4640      	mov	r0, r8
 80042e6:	4798      	blx	r3
 80042e8:	6923      	ldr	r3, [r4, #16]
 80042ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	1eb5      	subs	r5, r6, #2
 80042f2:	6123      	str	r3, [r4, #16]
 80042f4:	463a      	mov	r2, r7
 80042f6:	4640      	mov	r0, r8
 80042f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042fc:	4798      	blx	r3
 80042fe:	462e      	mov	r6, r5
 8004300:	6825      	ldr	r5, [r4, #0]
 8004302:	f015 0510 	ands.w	r5, r5, #16
 8004306:	d155      	bne.n	80043b4 <_scanf_float+0x410>
 8004308:	7035      	strb	r5, [r6, #0]
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004314:	d11b      	bne.n	800434e <_scanf_float+0x3aa>
 8004316:	9b01      	ldr	r3, [sp, #4]
 8004318:	454b      	cmp	r3, r9
 800431a:	eba3 0209 	sub.w	r2, r3, r9
 800431e:	d123      	bne.n	8004368 <_scanf_float+0x3c4>
 8004320:	2200      	movs	r2, #0
 8004322:	4659      	mov	r1, fp
 8004324:	4640      	mov	r0, r8
 8004326:	f000 fe8b 	bl	8005040 <_strtod_r>
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	9b03      	ldr	r3, [sp, #12]
 800432e:	f012 0f02 	tst.w	r2, #2
 8004332:	4606      	mov	r6, r0
 8004334:	460f      	mov	r7, r1
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	d021      	beq.n	800437e <_scanf_float+0x3da>
 800433a:	1d1a      	adds	r2, r3, #4
 800433c:	9903      	ldr	r1, [sp, #12]
 800433e:	600a      	str	r2, [r1, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	e9c3 6700 	strd	r6, r7, [r3]
 8004346:	68e3      	ldr	r3, [r4, #12]
 8004348:	3301      	adds	r3, #1
 800434a:	60e3      	str	r3, [r4, #12]
 800434c:	e66d      	b.n	800402a <_scanf_float+0x86>
 800434e:	9b04      	ldr	r3, [sp, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0e5      	beq.n	8004320 <_scanf_float+0x37c>
 8004354:	9905      	ldr	r1, [sp, #20]
 8004356:	230a      	movs	r3, #10
 8004358:	462a      	mov	r2, r5
 800435a:	4640      	mov	r0, r8
 800435c:	3101      	adds	r1, #1
 800435e:	f000 ff4d 	bl	80051fc <_strtol_r>
 8004362:	9b04      	ldr	r3, [sp, #16]
 8004364:	9e05      	ldr	r6, [sp, #20]
 8004366:	1ac2      	subs	r2, r0, r3
 8004368:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800436c:	429e      	cmp	r6, r3
 800436e:	bf28      	it	cs
 8004370:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004374:	4630      	mov	r0, r6
 8004376:	4910      	ldr	r1, [pc, #64]	; (80043b8 <_scanf_float+0x414>)
 8004378:	f000 f826 	bl	80043c8 <siprintf>
 800437c:	e7d0      	b.n	8004320 <_scanf_float+0x37c>
 800437e:	f012 0f04 	tst.w	r2, #4
 8004382:	f103 0204 	add.w	r2, r3, #4
 8004386:	d1d9      	bne.n	800433c <_scanf_float+0x398>
 8004388:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800438c:	f8cc 2000 	str.w	r2, [ip]
 8004390:	f8d3 8000 	ldr.w	r8, [r3]
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	f7fc fb42 	bl	8000a20 <__aeabi_dcmpun>
 800439c:	b128      	cbz	r0, 80043aa <_scanf_float+0x406>
 800439e:	4807      	ldr	r0, [pc, #28]	; (80043bc <_scanf_float+0x418>)
 80043a0:	f000 f80e 	bl	80043c0 <nanf>
 80043a4:	f8c8 0000 	str.w	r0, [r8]
 80043a8:	e7cd      	b.n	8004346 <_scanf_float+0x3a2>
 80043aa:	4630      	mov	r0, r6
 80043ac:	4639      	mov	r1, r7
 80043ae:	f7fc fb95 	bl	8000adc <__aeabi_d2f>
 80043b2:	e7f7      	b.n	80043a4 <_scanf_float+0x400>
 80043b4:	2500      	movs	r5, #0
 80043b6:	e638      	b.n	800402a <_scanf_float+0x86>
 80043b8:	080080ac 	.word	0x080080ac
 80043bc:	080081b7 	.word	0x080081b7

080043c0 <nanf>:
 80043c0:	4800      	ldr	r0, [pc, #0]	; (80043c4 <nanf+0x4>)
 80043c2:	4770      	bx	lr
 80043c4:	7fc00000 	.word	0x7fc00000

080043c8 <siprintf>:
 80043c8:	b40e      	push	{r1, r2, r3}
 80043ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043ce:	b500      	push	{lr}
 80043d0:	b09c      	sub	sp, #112	; 0x70
 80043d2:	ab1d      	add	r3, sp, #116	; 0x74
 80043d4:	9002      	str	r0, [sp, #8]
 80043d6:	9006      	str	r0, [sp, #24]
 80043d8:	9107      	str	r1, [sp, #28]
 80043da:	9104      	str	r1, [sp, #16]
 80043dc:	4808      	ldr	r0, [pc, #32]	; (8004400 <siprintf+0x38>)
 80043de:	4909      	ldr	r1, [pc, #36]	; (8004404 <siprintf+0x3c>)
 80043e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e4:	9105      	str	r1, [sp, #20]
 80043e6:	6800      	ldr	r0, [r0, #0]
 80043e8:	a902      	add	r1, sp, #8
 80043ea:	9301      	str	r3, [sp, #4]
 80043ec:	f002 ff58 	bl	80072a0 <_svfiprintf_r>
 80043f0:	2200      	movs	r2, #0
 80043f2:	9b02      	ldr	r3, [sp, #8]
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	b01c      	add	sp, #112	; 0x70
 80043f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043fc:	b003      	add	sp, #12
 80043fe:	4770      	bx	lr
 8004400:	2000000c 	.word	0x2000000c
 8004404:	ffff0208 	.word	0xffff0208

08004408 <strncpy>:
 8004408:	4603      	mov	r3, r0
 800440a:	b510      	push	{r4, lr}
 800440c:	3901      	subs	r1, #1
 800440e:	b132      	cbz	r2, 800441e <strncpy+0x16>
 8004410:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004414:	3a01      	subs	r2, #1
 8004416:	f803 4b01 	strb.w	r4, [r3], #1
 800441a:	2c00      	cmp	r4, #0
 800441c:	d1f7      	bne.n	800440e <strncpy+0x6>
 800441e:	2100      	movs	r1, #0
 8004420:	441a      	add	r2, r3
 8004422:	4293      	cmp	r3, r2
 8004424:	d100      	bne.n	8004428 <strncpy+0x20>
 8004426:	bd10      	pop	{r4, pc}
 8004428:	f803 1b01 	strb.w	r1, [r3], #1
 800442c:	e7f9      	b.n	8004422 <strncpy+0x1a>

0800442e <sulp>:
 800442e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004432:	460f      	mov	r7, r1
 8004434:	4690      	mov	r8, r2
 8004436:	f002 fc9f 	bl	8006d78 <__ulp>
 800443a:	4604      	mov	r4, r0
 800443c:	460d      	mov	r5, r1
 800443e:	f1b8 0f00 	cmp.w	r8, #0
 8004442:	d011      	beq.n	8004468 <sulp+0x3a>
 8004444:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004448:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800444c:	2b00      	cmp	r3, #0
 800444e:	dd0b      	ble.n	8004468 <sulp+0x3a>
 8004450:	2400      	movs	r4, #0
 8004452:	051b      	lsls	r3, r3, #20
 8004454:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004458:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800445c:	4622      	mov	r2, r4
 800445e:	462b      	mov	r3, r5
 8004460:	f7fc f844 	bl	80004ec <__aeabi_dmul>
 8004464:	4604      	mov	r4, r0
 8004466:	460d      	mov	r5, r1
 8004468:	4620      	mov	r0, r4
 800446a:	4629      	mov	r1, r5
 800446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004470 <_strtod_l>:
 8004470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	469b      	mov	fp, r3
 8004476:	2300      	movs	r3, #0
 8004478:	b09f      	sub	sp, #124	; 0x7c
 800447a:	931a      	str	r3, [sp, #104]	; 0x68
 800447c:	4b9e      	ldr	r3, [pc, #632]	; (80046f8 <_strtod_l+0x288>)
 800447e:	4682      	mov	sl, r0
 8004480:	681f      	ldr	r7, [r3, #0]
 8004482:	460e      	mov	r6, r1
 8004484:	4638      	mov	r0, r7
 8004486:	9215      	str	r2, [sp, #84]	; 0x54
 8004488:	f7fb fe6c 	bl	8000164 <strlen>
 800448c:	f04f 0800 	mov.w	r8, #0
 8004490:	4604      	mov	r4, r0
 8004492:	f04f 0900 	mov.w	r9, #0
 8004496:	9619      	str	r6, [sp, #100]	; 0x64
 8004498:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800449a:	781a      	ldrb	r2, [r3, #0]
 800449c:	2a2b      	cmp	r2, #43	; 0x2b
 800449e:	d04c      	beq.n	800453a <_strtod_l+0xca>
 80044a0:	d83a      	bhi.n	8004518 <_strtod_l+0xa8>
 80044a2:	2a0d      	cmp	r2, #13
 80044a4:	d833      	bhi.n	800450e <_strtod_l+0x9e>
 80044a6:	2a08      	cmp	r2, #8
 80044a8:	d833      	bhi.n	8004512 <_strtod_l+0xa2>
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	d03d      	beq.n	800452a <_strtod_l+0xba>
 80044ae:	2300      	movs	r3, #0
 80044b0:	930a      	str	r3, [sp, #40]	; 0x28
 80044b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80044b4:	782b      	ldrb	r3, [r5, #0]
 80044b6:	2b30      	cmp	r3, #48	; 0x30
 80044b8:	f040 80aa 	bne.w	8004610 <_strtod_l+0x1a0>
 80044bc:	786b      	ldrb	r3, [r5, #1]
 80044be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80044c2:	2b58      	cmp	r3, #88	; 0x58
 80044c4:	d166      	bne.n	8004594 <_strtod_l+0x124>
 80044c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c8:	4650      	mov	r0, sl
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	ab1a      	add	r3, sp, #104	; 0x68
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4a8a      	ldr	r2, [pc, #552]	; (80046fc <_strtod_l+0x28c>)
 80044d2:	f8cd b008 	str.w	fp, [sp, #8]
 80044d6:	ab1b      	add	r3, sp, #108	; 0x6c
 80044d8:	a919      	add	r1, sp, #100	; 0x64
 80044da:	f001 fda5 	bl	8006028 <__gethex>
 80044de:	f010 0607 	ands.w	r6, r0, #7
 80044e2:	4604      	mov	r4, r0
 80044e4:	d005      	beq.n	80044f2 <_strtod_l+0x82>
 80044e6:	2e06      	cmp	r6, #6
 80044e8:	d129      	bne.n	800453e <_strtod_l+0xce>
 80044ea:	2300      	movs	r3, #0
 80044ec:	3501      	adds	r5, #1
 80044ee:	9519      	str	r5, [sp, #100]	; 0x64
 80044f0:	930a      	str	r3, [sp, #40]	; 0x28
 80044f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 858a 	bne.w	800500e <_strtod_l+0xb9e>
 80044fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044fc:	b1d3      	cbz	r3, 8004534 <_strtod_l+0xc4>
 80044fe:	4642      	mov	r2, r8
 8004500:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	b01f      	add	sp, #124	; 0x7c
 800450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450e:	2a20      	cmp	r2, #32
 8004510:	d1cd      	bne.n	80044ae <_strtod_l+0x3e>
 8004512:	3301      	adds	r3, #1
 8004514:	9319      	str	r3, [sp, #100]	; 0x64
 8004516:	e7bf      	b.n	8004498 <_strtod_l+0x28>
 8004518:	2a2d      	cmp	r2, #45	; 0x2d
 800451a:	d1c8      	bne.n	80044ae <_strtod_l+0x3e>
 800451c:	2201      	movs	r2, #1
 800451e:	920a      	str	r2, [sp, #40]	; 0x28
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	9219      	str	r2, [sp, #100]	; 0x64
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1c3      	bne.n	80044b2 <_strtod_l+0x42>
 800452a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800452c:	9619      	str	r6, [sp, #100]	; 0x64
 800452e:	2b00      	cmp	r3, #0
 8004530:	f040 856b 	bne.w	800500a <_strtod_l+0xb9a>
 8004534:	4642      	mov	r2, r8
 8004536:	464b      	mov	r3, r9
 8004538:	e7e4      	b.n	8004504 <_strtod_l+0x94>
 800453a:	2200      	movs	r2, #0
 800453c:	e7ef      	b.n	800451e <_strtod_l+0xae>
 800453e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004540:	b13a      	cbz	r2, 8004552 <_strtod_l+0xe2>
 8004542:	2135      	movs	r1, #53	; 0x35
 8004544:	a81c      	add	r0, sp, #112	; 0x70
 8004546:	f002 fd1b 	bl	8006f80 <__copybits>
 800454a:	4650      	mov	r0, sl
 800454c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800454e:	f002 f8e3 	bl	8006718 <_Bfree>
 8004552:	3e01      	subs	r6, #1
 8004554:	2e04      	cmp	r6, #4
 8004556:	d806      	bhi.n	8004566 <_strtod_l+0xf6>
 8004558:	e8df f006 	tbb	[pc, r6]
 800455c:	1714030a 	.word	0x1714030a
 8004560:	0a          	.byte	0x0a
 8004561:	00          	.byte	0x00
 8004562:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004566:	0721      	lsls	r1, r4, #28
 8004568:	d5c3      	bpl.n	80044f2 <_strtod_l+0x82>
 800456a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800456e:	e7c0      	b.n	80044f2 <_strtod_l+0x82>
 8004570:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004572:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004576:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800457a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800457e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004582:	e7f0      	b.n	8004566 <_strtod_l+0xf6>
 8004584:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004700 <_strtod_l+0x290>
 8004588:	e7ed      	b.n	8004566 <_strtod_l+0xf6>
 800458a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800458e:	f04f 38ff 	mov.w	r8, #4294967295
 8004592:	e7e8      	b.n	8004566 <_strtod_l+0xf6>
 8004594:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	9219      	str	r2, [sp, #100]	; 0x64
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	2b30      	cmp	r3, #48	; 0x30
 800459e:	d0f9      	beq.n	8004594 <_strtod_l+0x124>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0a6      	beq.n	80044f2 <_strtod_l+0x82>
 80045a4:	2301      	movs	r3, #1
 80045a6:	9307      	str	r3, [sp, #28]
 80045a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045aa:	220a      	movs	r2, #10
 80045ac:	9308      	str	r3, [sp, #32]
 80045ae:	2300      	movs	r3, #0
 80045b0:	469b      	mov	fp, r3
 80045b2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80045b6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80045b8:	7805      	ldrb	r5, [r0, #0]
 80045ba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80045be:	b2d9      	uxtb	r1, r3
 80045c0:	2909      	cmp	r1, #9
 80045c2:	d927      	bls.n	8004614 <_strtod_l+0x1a4>
 80045c4:	4622      	mov	r2, r4
 80045c6:	4639      	mov	r1, r7
 80045c8:	f003 f8d8 	bl	800777c <strncmp>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d033      	beq.n	8004638 <_strtod_l+0x1c8>
 80045d0:	2000      	movs	r0, #0
 80045d2:	462a      	mov	r2, r5
 80045d4:	465c      	mov	r4, fp
 80045d6:	4603      	mov	r3, r0
 80045d8:	9004      	str	r0, [sp, #16]
 80045da:	2a65      	cmp	r2, #101	; 0x65
 80045dc:	d001      	beq.n	80045e2 <_strtod_l+0x172>
 80045de:	2a45      	cmp	r2, #69	; 0x45
 80045e0:	d114      	bne.n	800460c <_strtod_l+0x19c>
 80045e2:	b91c      	cbnz	r4, 80045ec <_strtod_l+0x17c>
 80045e4:	9a07      	ldr	r2, [sp, #28]
 80045e6:	4302      	orrs	r2, r0
 80045e8:	d09f      	beq.n	800452a <_strtod_l+0xba>
 80045ea:	2400      	movs	r4, #0
 80045ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80045ee:	1c72      	adds	r2, r6, #1
 80045f0:	9219      	str	r2, [sp, #100]	; 0x64
 80045f2:	7872      	ldrb	r2, [r6, #1]
 80045f4:	2a2b      	cmp	r2, #43	; 0x2b
 80045f6:	d079      	beq.n	80046ec <_strtod_l+0x27c>
 80045f8:	2a2d      	cmp	r2, #45	; 0x2d
 80045fa:	f000 8083 	beq.w	8004704 <_strtod_l+0x294>
 80045fe:	2700      	movs	r7, #0
 8004600:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004604:	2909      	cmp	r1, #9
 8004606:	f240 8083 	bls.w	8004710 <_strtod_l+0x2a0>
 800460a:	9619      	str	r6, [sp, #100]	; 0x64
 800460c:	2500      	movs	r5, #0
 800460e:	e09f      	b.n	8004750 <_strtod_l+0x2e0>
 8004610:	2300      	movs	r3, #0
 8004612:	e7c8      	b.n	80045a6 <_strtod_l+0x136>
 8004614:	f1bb 0f08 	cmp.w	fp, #8
 8004618:	bfd5      	itete	le
 800461a:	9906      	ldrle	r1, [sp, #24]
 800461c:	9905      	ldrgt	r1, [sp, #20]
 800461e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004622:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004626:	f100 0001 	add.w	r0, r0, #1
 800462a:	bfd4      	ite	le
 800462c:	9306      	strle	r3, [sp, #24]
 800462e:	9305      	strgt	r3, [sp, #20]
 8004630:	f10b 0b01 	add.w	fp, fp, #1
 8004634:	9019      	str	r0, [sp, #100]	; 0x64
 8004636:	e7be      	b.n	80045b6 <_strtod_l+0x146>
 8004638:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800463a:	191a      	adds	r2, r3, r4
 800463c:	9219      	str	r2, [sp, #100]	; 0x64
 800463e:	5d1a      	ldrb	r2, [r3, r4]
 8004640:	f1bb 0f00 	cmp.w	fp, #0
 8004644:	d036      	beq.n	80046b4 <_strtod_l+0x244>
 8004646:	465c      	mov	r4, fp
 8004648:	9004      	str	r0, [sp, #16]
 800464a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800464e:	2b09      	cmp	r3, #9
 8004650:	d912      	bls.n	8004678 <_strtod_l+0x208>
 8004652:	2301      	movs	r3, #1
 8004654:	e7c1      	b.n	80045da <_strtod_l+0x16a>
 8004656:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004658:	3001      	adds	r0, #1
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	9219      	str	r2, [sp, #100]	; 0x64
 800465e:	785a      	ldrb	r2, [r3, #1]
 8004660:	2a30      	cmp	r2, #48	; 0x30
 8004662:	d0f8      	beq.n	8004656 <_strtod_l+0x1e6>
 8004664:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004668:	2b08      	cmp	r3, #8
 800466a:	f200 84d5 	bhi.w	8005018 <_strtod_l+0xba8>
 800466e:	9004      	str	r0, [sp, #16]
 8004670:	2000      	movs	r0, #0
 8004672:	4604      	mov	r4, r0
 8004674:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004676:	9308      	str	r3, [sp, #32]
 8004678:	3a30      	subs	r2, #48	; 0x30
 800467a:	f100 0301 	add.w	r3, r0, #1
 800467e:	d013      	beq.n	80046a8 <_strtod_l+0x238>
 8004680:	9904      	ldr	r1, [sp, #16]
 8004682:	1905      	adds	r5, r0, r4
 8004684:	4419      	add	r1, r3
 8004686:	9104      	str	r1, [sp, #16]
 8004688:	4623      	mov	r3, r4
 800468a:	210a      	movs	r1, #10
 800468c:	42ab      	cmp	r3, r5
 800468e:	d113      	bne.n	80046b8 <_strtod_l+0x248>
 8004690:	1823      	adds	r3, r4, r0
 8004692:	2b08      	cmp	r3, #8
 8004694:	f104 0401 	add.w	r4, r4, #1
 8004698:	4404      	add	r4, r0
 800469a:	dc1b      	bgt.n	80046d4 <_strtod_l+0x264>
 800469c:	230a      	movs	r3, #10
 800469e:	9906      	ldr	r1, [sp, #24]
 80046a0:	fb03 2301 	mla	r3, r3, r1, r2
 80046a4:	9306      	str	r3, [sp, #24]
 80046a6:	2300      	movs	r3, #0
 80046a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80046aa:	4618      	mov	r0, r3
 80046ac:	1c51      	adds	r1, r2, #1
 80046ae:	9119      	str	r1, [sp, #100]	; 0x64
 80046b0:	7852      	ldrb	r2, [r2, #1]
 80046b2:	e7ca      	b.n	800464a <_strtod_l+0x1da>
 80046b4:	4658      	mov	r0, fp
 80046b6:	e7d3      	b.n	8004660 <_strtod_l+0x1f0>
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	dc04      	bgt.n	80046c6 <_strtod_l+0x256>
 80046bc:	9f06      	ldr	r7, [sp, #24]
 80046be:	434f      	muls	r7, r1
 80046c0:	9706      	str	r7, [sp, #24]
 80046c2:	3301      	adds	r3, #1
 80046c4:	e7e2      	b.n	800468c <_strtod_l+0x21c>
 80046c6:	1c5f      	adds	r7, r3, #1
 80046c8:	2f10      	cmp	r7, #16
 80046ca:	bfde      	ittt	le
 80046cc:	9f05      	ldrle	r7, [sp, #20]
 80046ce:	434f      	mulle	r7, r1
 80046d0:	9705      	strle	r7, [sp, #20]
 80046d2:	e7f6      	b.n	80046c2 <_strtod_l+0x252>
 80046d4:	2c10      	cmp	r4, #16
 80046d6:	bfdf      	itttt	le
 80046d8:	230a      	movle	r3, #10
 80046da:	9905      	ldrle	r1, [sp, #20]
 80046dc:	fb03 2301 	mlale	r3, r3, r1, r2
 80046e0:	9305      	strle	r3, [sp, #20]
 80046e2:	e7e0      	b.n	80046a6 <_strtod_l+0x236>
 80046e4:	2300      	movs	r3, #0
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	2301      	movs	r3, #1
 80046ea:	e77b      	b.n	80045e4 <_strtod_l+0x174>
 80046ec:	2700      	movs	r7, #0
 80046ee:	1cb2      	adds	r2, r6, #2
 80046f0:	9219      	str	r2, [sp, #100]	; 0x64
 80046f2:	78b2      	ldrb	r2, [r6, #2]
 80046f4:	e784      	b.n	8004600 <_strtod_l+0x190>
 80046f6:	bf00      	nop
 80046f8:	08008398 	.word	0x08008398
 80046fc:	080080b4 	.word	0x080080b4
 8004700:	7ff00000 	.word	0x7ff00000
 8004704:	2701      	movs	r7, #1
 8004706:	e7f2      	b.n	80046ee <_strtod_l+0x27e>
 8004708:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800470a:	1c51      	adds	r1, r2, #1
 800470c:	9119      	str	r1, [sp, #100]	; 0x64
 800470e:	7852      	ldrb	r2, [r2, #1]
 8004710:	2a30      	cmp	r2, #48	; 0x30
 8004712:	d0f9      	beq.n	8004708 <_strtod_l+0x298>
 8004714:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004718:	2908      	cmp	r1, #8
 800471a:	f63f af77 	bhi.w	800460c <_strtod_l+0x19c>
 800471e:	f04f 0e0a 	mov.w	lr, #10
 8004722:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004726:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004728:	9209      	str	r2, [sp, #36]	; 0x24
 800472a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800472c:	1c51      	adds	r1, r2, #1
 800472e:	9119      	str	r1, [sp, #100]	; 0x64
 8004730:	7852      	ldrb	r2, [r2, #1]
 8004732:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004736:	2d09      	cmp	r5, #9
 8004738:	d935      	bls.n	80047a6 <_strtod_l+0x336>
 800473a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800473c:	1b49      	subs	r1, r1, r5
 800473e:	2908      	cmp	r1, #8
 8004740:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004744:	dc02      	bgt.n	800474c <_strtod_l+0x2dc>
 8004746:	4565      	cmp	r5, ip
 8004748:	bfa8      	it	ge
 800474a:	4665      	movge	r5, ip
 800474c:	b107      	cbz	r7, 8004750 <_strtod_l+0x2e0>
 800474e:	426d      	negs	r5, r5
 8004750:	2c00      	cmp	r4, #0
 8004752:	d14c      	bne.n	80047ee <_strtod_l+0x37e>
 8004754:	9907      	ldr	r1, [sp, #28]
 8004756:	4301      	orrs	r1, r0
 8004758:	f47f aecb 	bne.w	80044f2 <_strtod_l+0x82>
 800475c:	2b00      	cmp	r3, #0
 800475e:	f47f aee4 	bne.w	800452a <_strtod_l+0xba>
 8004762:	2a69      	cmp	r2, #105	; 0x69
 8004764:	d026      	beq.n	80047b4 <_strtod_l+0x344>
 8004766:	dc23      	bgt.n	80047b0 <_strtod_l+0x340>
 8004768:	2a49      	cmp	r2, #73	; 0x49
 800476a:	d023      	beq.n	80047b4 <_strtod_l+0x344>
 800476c:	2a4e      	cmp	r2, #78	; 0x4e
 800476e:	f47f aedc 	bne.w	800452a <_strtod_l+0xba>
 8004772:	499d      	ldr	r1, [pc, #628]	; (80049e8 <_strtod_l+0x578>)
 8004774:	a819      	add	r0, sp, #100	; 0x64
 8004776:	f001 fea5 	bl	80064c4 <__match>
 800477a:	2800      	cmp	r0, #0
 800477c:	f43f aed5 	beq.w	800452a <_strtod_l+0xba>
 8004780:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b28      	cmp	r3, #40	; 0x28
 8004786:	d12c      	bne.n	80047e2 <_strtod_l+0x372>
 8004788:	4998      	ldr	r1, [pc, #608]	; (80049ec <_strtod_l+0x57c>)
 800478a:	aa1c      	add	r2, sp, #112	; 0x70
 800478c:	a819      	add	r0, sp, #100	; 0x64
 800478e:	f001 fead 	bl	80064ec <__hexnan>
 8004792:	2805      	cmp	r0, #5
 8004794:	d125      	bne.n	80047e2 <_strtod_l+0x372>
 8004796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004798:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800479c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80047a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80047a4:	e6a5      	b.n	80044f2 <_strtod_l+0x82>
 80047a6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80047aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80047ae:	e7bc      	b.n	800472a <_strtod_l+0x2ba>
 80047b0:	2a6e      	cmp	r2, #110	; 0x6e
 80047b2:	e7dc      	b.n	800476e <_strtod_l+0x2fe>
 80047b4:	498e      	ldr	r1, [pc, #568]	; (80049f0 <_strtod_l+0x580>)
 80047b6:	a819      	add	r0, sp, #100	; 0x64
 80047b8:	f001 fe84 	bl	80064c4 <__match>
 80047bc:	2800      	cmp	r0, #0
 80047be:	f43f aeb4 	beq.w	800452a <_strtod_l+0xba>
 80047c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047c4:	498b      	ldr	r1, [pc, #556]	; (80049f4 <_strtod_l+0x584>)
 80047c6:	3b01      	subs	r3, #1
 80047c8:	a819      	add	r0, sp, #100	; 0x64
 80047ca:	9319      	str	r3, [sp, #100]	; 0x64
 80047cc:	f001 fe7a 	bl	80064c4 <__match>
 80047d0:	b910      	cbnz	r0, 80047d8 <_strtod_l+0x368>
 80047d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047d4:	3301      	adds	r3, #1
 80047d6:	9319      	str	r3, [sp, #100]	; 0x64
 80047d8:	f04f 0800 	mov.w	r8, #0
 80047dc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80049f8 <_strtod_l+0x588>
 80047e0:	e687      	b.n	80044f2 <_strtod_l+0x82>
 80047e2:	4886      	ldr	r0, [pc, #536]	; (80049fc <_strtod_l+0x58c>)
 80047e4:	f002 ffb4 	bl	8007750 <nan>
 80047e8:	4680      	mov	r8, r0
 80047ea:	4689      	mov	r9, r1
 80047ec:	e681      	b.n	80044f2 <_strtod_l+0x82>
 80047ee:	9b04      	ldr	r3, [sp, #16]
 80047f0:	f1bb 0f00 	cmp.w	fp, #0
 80047f4:	bf08      	it	eq
 80047f6:	46a3      	moveq	fp, r4
 80047f8:	1aeb      	subs	r3, r5, r3
 80047fa:	2c10      	cmp	r4, #16
 80047fc:	9806      	ldr	r0, [sp, #24]
 80047fe:	4626      	mov	r6, r4
 8004800:	9307      	str	r3, [sp, #28]
 8004802:	bfa8      	it	ge
 8004804:	2610      	movge	r6, #16
 8004806:	f7fb fdf7 	bl	80003f8 <__aeabi_ui2d>
 800480a:	2c09      	cmp	r4, #9
 800480c:	4680      	mov	r8, r0
 800480e:	4689      	mov	r9, r1
 8004810:	dd13      	ble.n	800483a <_strtod_l+0x3ca>
 8004812:	4b7b      	ldr	r3, [pc, #492]	; (8004a00 <_strtod_l+0x590>)
 8004814:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004818:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800481c:	f7fb fe66 	bl	80004ec <__aeabi_dmul>
 8004820:	4680      	mov	r8, r0
 8004822:	9805      	ldr	r0, [sp, #20]
 8004824:	4689      	mov	r9, r1
 8004826:	f7fb fde7 	bl	80003f8 <__aeabi_ui2d>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4640      	mov	r0, r8
 8004830:	4649      	mov	r1, r9
 8004832:	f7fb fca5 	bl	8000180 <__adddf3>
 8004836:	4680      	mov	r8, r0
 8004838:	4689      	mov	r9, r1
 800483a:	2c0f      	cmp	r4, #15
 800483c:	dc36      	bgt.n	80048ac <_strtod_l+0x43c>
 800483e:	9b07      	ldr	r3, [sp, #28]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f43f ae56 	beq.w	80044f2 <_strtod_l+0x82>
 8004846:	dd22      	ble.n	800488e <_strtod_l+0x41e>
 8004848:	2b16      	cmp	r3, #22
 800484a:	dc09      	bgt.n	8004860 <_strtod_l+0x3f0>
 800484c:	496c      	ldr	r1, [pc, #432]	; (8004a00 <_strtod_l+0x590>)
 800484e:	4642      	mov	r2, r8
 8004850:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004854:	464b      	mov	r3, r9
 8004856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800485a:	f7fb fe47 	bl	80004ec <__aeabi_dmul>
 800485e:	e7c3      	b.n	80047e8 <_strtod_l+0x378>
 8004860:	9a07      	ldr	r2, [sp, #28]
 8004862:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004866:	4293      	cmp	r3, r2
 8004868:	db20      	blt.n	80048ac <_strtod_l+0x43c>
 800486a:	4d65      	ldr	r5, [pc, #404]	; (8004a00 <_strtod_l+0x590>)
 800486c:	f1c4 040f 	rsb	r4, r4, #15
 8004870:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004874:	4642      	mov	r2, r8
 8004876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800487a:	464b      	mov	r3, r9
 800487c:	f7fb fe36 	bl	80004ec <__aeabi_dmul>
 8004880:	9b07      	ldr	r3, [sp, #28]
 8004882:	1b1c      	subs	r4, r3, r4
 8004884:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004888:	e9d5 2300 	ldrd	r2, r3, [r5]
 800488c:	e7e5      	b.n	800485a <_strtod_l+0x3ea>
 800488e:	9b07      	ldr	r3, [sp, #28]
 8004890:	3316      	adds	r3, #22
 8004892:	db0b      	blt.n	80048ac <_strtod_l+0x43c>
 8004894:	9b04      	ldr	r3, [sp, #16]
 8004896:	4640      	mov	r0, r8
 8004898:	1b5d      	subs	r5, r3, r5
 800489a:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <_strtod_l+0x590>)
 800489c:	4649      	mov	r1, r9
 800489e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80048a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048a6:	f7fb ff4b 	bl	8000740 <__aeabi_ddiv>
 80048aa:	e79d      	b.n	80047e8 <_strtod_l+0x378>
 80048ac:	9b07      	ldr	r3, [sp, #28]
 80048ae:	1ba6      	subs	r6, r4, r6
 80048b0:	441e      	add	r6, r3
 80048b2:	2e00      	cmp	r6, #0
 80048b4:	dd74      	ble.n	80049a0 <_strtod_l+0x530>
 80048b6:	f016 030f 	ands.w	r3, r6, #15
 80048ba:	d00a      	beq.n	80048d2 <_strtod_l+0x462>
 80048bc:	4950      	ldr	r1, [pc, #320]	; (8004a00 <_strtod_l+0x590>)
 80048be:	4642      	mov	r2, r8
 80048c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80048c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048c8:	464b      	mov	r3, r9
 80048ca:	f7fb fe0f 	bl	80004ec <__aeabi_dmul>
 80048ce:	4680      	mov	r8, r0
 80048d0:	4689      	mov	r9, r1
 80048d2:	f036 060f 	bics.w	r6, r6, #15
 80048d6:	d052      	beq.n	800497e <_strtod_l+0x50e>
 80048d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80048dc:	dd27      	ble.n	800492e <_strtod_l+0x4be>
 80048de:	f04f 0b00 	mov.w	fp, #0
 80048e2:	f8cd b010 	str.w	fp, [sp, #16]
 80048e6:	f8cd b020 	str.w	fp, [sp, #32]
 80048ea:	f8cd b018 	str.w	fp, [sp, #24]
 80048ee:	2322      	movs	r3, #34	; 0x22
 80048f0:	f04f 0800 	mov.w	r8, #0
 80048f4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80049f8 <_strtod_l+0x588>
 80048f8:	f8ca 3000 	str.w	r3, [sl]
 80048fc:	9b08      	ldr	r3, [sp, #32]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f43f adf7 	beq.w	80044f2 <_strtod_l+0x82>
 8004904:	4650      	mov	r0, sl
 8004906:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004908:	f001 ff06 	bl	8006718 <_Bfree>
 800490c:	4650      	mov	r0, sl
 800490e:	9906      	ldr	r1, [sp, #24]
 8004910:	f001 ff02 	bl	8006718 <_Bfree>
 8004914:	4650      	mov	r0, sl
 8004916:	9904      	ldr	r1, [sp, #16]
 8004918:	f001 fefe 	bl	8006718 <_Bfree>
 800491c:	4650      	mov	r0, sl
 800491e:	9908      	ldr	r1, [sp, #32]
 8004920:	f001 fefa 	bl	8006718 <_Bfree>
 8004924:	4659      	mov	r1, fp
 8004926:	4650      	mov	r0, sl
 8004928:	f001 fef6 	bl	8006718 <_Bfree>
 800492c:	e5e1      	b.n	80044f2 <_strtod_l+0x82>
 800492e:	4b35      	ldr	r3, [pc, #212]	; (8004a04 <_strtod_l+0x594>)
 8004930:	4640      	mov	r0, r8
 8004932:	9305      	str	r3, [sp, #20]
 8004934:	2300      	movs	r3, #0
 8004936:	4649      	mov	r1, r9
 8004938:	461f      	mov	r7, r3
 800493a:	1136      	asrs	r6, r6, #4
 800493c:	2e01      	cmp	r6, #1
 800493e:	dc21      	bgt.n	8004984 <_strtod_l+0x514>
 8004940:	b10b      	cbz	r3, 8004946 <_strtod_l+0x4d6>
 8004942:	4680      	mov	r8, r0
 8004944:	4689      	mov	r9, r1
 8004946:	4b2f      	ldr	r3, [pc, #188]	; (8004a04 <_strtod_l+0x594>)
 8004948:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800494c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004950:	4642      	mov	r2, r8
 8004952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004956:	464b      	mov	r3, r9
 8004958:	f7fb fdc8 	bl	80004ec <__aeabi_dmul>
 800495c:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <_strtod_l+0x588>)
 800495e:	460a      	mov	r2, r1
 8004960:	400b      	ands	r3, r1
 8004962:	4929      	ldr	r1, [pc, #164]	; (8004a08 <_strtod_l+0x598>)
 8004964:	4680      	mov	r8, r0
 8004966:	428b      	cmp	r3, r1
 8004968:	d8b9      	bhi.n	80048de <_strtod_l+0x46e>
 800496a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800496e:	428b      	cmp	r3, r1
 8004970:	bf86      	itte	hi
 8004972:	f04f 38ff 	movhi.w	r8, #4294967295
 8004976:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004a0c <_strtod_l+0x59c>
 800497a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800497e:	2300      	movs	r3, #0
 8004980:	9305      	str	r3, [sp, #20]
 8004982:	e07f      	b.n	8004a84 <_strtod_l+0x614>
 8004984:	07f2      	lsls	r2, r6, #31
 8004986:	d505      	bpl.n	8004994 <_strtod_l+0x524>
 8004988:	9b05      	ldr	r3, [sp, #20]
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f7fb fdad 	bl	80004ec <__aeabi_dmul>
 8004992:	2301      	movs	r3, #1
 8004994:	9a05      	ldr	r2, [sp, #20]
 8004996:	3701      	adds	r7, #1
 8004998:	3208      	adds	r2, #8
 800499a:	1076      	asrs	r6, r6, #1
 800499c:	9205      	str	r2, [sp, #20]
 800499e:	e7cd      	b.n	800493c <_strtod_l+0x4cc>
 80049a0:	d0ed      	beq.n	800497e <_strtod_l+0x50e>
 80049a2:	4276      	negs	r6, r6
 80049a4:	f016 020f 	ands.w	r2, r6, #15
 80049a8:	d00a      	beq.n	80049c0 <_strtod_l+0x550>
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <_strtod_l+0x590>)
 80049ac:	4640      	mov	r0, r8
 80049ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049b2:	4649      	mov	r1, r9
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f7fb fec2 	bl	8000740 <__aeabi_ddiv>
 80049bc:	4680      	mov	r8, r0
 80049be:	4689      	mov	r9, r1
 80049c0:	1136      	asrs	r6, r6, #4
 80049c2:	d0dc      	beq.n	800497e <_strtod_l+0x50e>
 80049c4:	2e1f      	cmp	r6, #31
 80049c6:	dd23      	ble.n	8004a10 <_strtod_l+0x5a0>
 80049c8:	f04f 0b00 	mov.w	fp, #0
 80049cc:	f8cd b010 	str.w	fp, [sp, #16]
 80049d0:	f8cd b020 	str.w	fp, [sp, #32]
 80049d4:	f8cd b018 	str.w	fp, [sp, #24]
 80049d8:	2322      	movs	r3, #34	; 0x22
 80049da:	f04f 0800 	mov.w	r8, #0
 80049de:	f04f 0900 	mov.w	r9, #0
 80049e2:	f8ca 3000 	str.w	r3, [sl]
 80049e6:	e789      	b.n	80048fc <_strtod_l+0x48c>
 80049e8:	08008085 	.word	0x08008085
 80049ec:	080080c8 	.word	0x080080c8
 80049f0:	0800807d 	.word	0x0800807d
 80049f4:	080082bc 	.word	0x080082bc
 80049f8:	7ff00000 	.word	0x7ff00000
 80049fc:	080081b7 	.word	0x080081b7
 8004a00:	08008430 	.word	0x08008430
 8004a04:	08008408 	.word	0x08008408
 8004a08:	7ca00000 	.word	0x7ca00000
 8004a0c:	7fefffff 	.word	0x7fefffff
 8004a10:	f016 0310 	ands.w	r3, r6, #16
 8004a14:	bf18      	it	ne
 8004a16:	236a      	movne	r3, #106	; 0x6a
 8004a18:	4640      	mov	r0, r8
 8004a1a:	9305      	str	r3, [sp, #20]
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	2300      	movs	r3, #0
 8004a20:	4fb0      	ldr	r7, [pc, #704]	; (8004ce4 <_strtod_l+0x874>)
 8004a22:	07f2      	lsls	r2, r6, #31
 8004a24:	d504      	bpl.n	8004a30 <_strtod_l+0x5c0>
 8004a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a2a:	f7fb fd5f 	bl	80004ec <__aeabi_dmul>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	1076      	asrs	r6, r6, #1
 8004a32:	f107 0708 	add.w	r7, r7, #8
 8004a36:	d1f4      	bne.n	8004a22 <_strtod_l+0x5b2>
 8004a38:	b10b      	cbz	r3, 8004a3e <_strtod_l+0x5ce>
 8004a3a:	4680      	mov	r8, r0
 8004a3c:	4689      	mov	r9, r1
 8004a3e:	9b05      	ldr	r3, [sp, #20]
 8004a40:	b1c3      	cbz	r3, 8004a74 <_strtod_l+0x604>
 8004a42:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004a46:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	dd11      	ble.n	8004a74 <_strtod_l+0x604>
 8004a50:	2b1f      	cmp	r3, #31
 8004a52:	f340 8127 	ble.w	8004ca4 <_strtod_l+0x834>
 8004a56:	2b34      	cmp	r3, #52	; 0x34
 8004a58:	bfd8      	it	le
 8004a5a:	f04f 33ff 	movle.w	r3, #4294967295
 8004a5e:	f04f 0800 	mov.w	r8, #0
 8004a62:	bfcf      	iteee	gt
 8004a64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004a68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004a6c:	fa03 f202 	lslle.w	r2, r3, r2
 8004a70:	ea02 0901 	andle.w	r9, r2, r1
 8004a74:	2200      	movs	r2, #0
 8004a76:	2300      	movs	r3, #0
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fb ff9e 	bl	80009bc <__aeabi_dcmpeq>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d1a1      	bne.n	80049c8 <_strtod_l+0x558>
 8004a84:	9b06      	ldr	r3, [sp, #24]
 8004a86:	465a      	mov	r2, fp
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	4650      	mov	r0, sl
 8004a8c:	4623      	mov	r3, r4
 8004a8e:	9908      	ldr	r1, [sp, #32]
 8004a90:	f001 feaa 	bl	80067e8 <__s2b>
 8004a94:	9008      	str	r0, [sp, #32]
 8004a96:	2800      	cmp	r0, #0
 8004a98:	f43f af21 	beq.w	80048de <_strtod_l+0x46e>
 8004a9c:	9b04      	ldr	r3, [sp, #16]
 8004a9e:	f04f 0b00 	mov.w	fp, #0
 8004aa2:	1b5d      	subs	r5, r3, r5
 8004aa4:	9b07      	ldr	r3, [sp, #28]
 8004aa6:	f8cd b010 	str.w	fp, [sp, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	bfb4      	ite	lt
 8004aae:	462b      	movlt	r3, r5
 8004ab0:	2300      	movge	r3, #0
 8004ab2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ab4:	9b07      	ldr	r3, [sp, #28]
 8004ab6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004aba:	9314      	str	r3, [sp, #80]	; 0x50
 8004abc:	9b08      	ldr	r3, [sp, #32]
 8004abe:	4650      	mov	r0, sl
 8004ac0:	6859      	ldr	r1, [r3, #4]
 8004ac2:	f001 fde9 	bl	8006698 <_Balloc>
 8004ac6:	9006      	str	r0, [sp, #24]
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	f43f af10 	beq.w	80048ee <_strtod_l+0x47e>
 8004ace:	9b08      	ldr	r3, [sp, #32]
 8004ad0:	300c      	adds	r0, #12
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	f103 010c 	add.w	r1, r3, #12
 8004ad8:	3202      	adds	r2, #2
 8004ada:	0092      	lsls	r2, r2, #2
 8004adc:	f001 fdce 	bl	800667c <memcpy>
 8004ae0:	ab1c      	add	r3, sp, #112	; 0x70
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	ab1b      	add	r3, sp, #108	; 0x6c
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	4650      	mov	r0, sl
 8004aee:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004af2:	f002 f9bb 	bl	8006e6c <__d2b>
 8004af6:	901a      	str	r0, [sp, #104]	; 0x68
 8004af8:	2800      	cmp	r0, #0
 8004afa:	f43f aef8 	beq.w	80048ee <_strtod_l+0x47e>
 8004afe:	2101      	movs	r1, #1
 8004b00:	4650      	mov	r0, sl
 8004b02:	f001 ff09 	bl	8006918 <__i2b>
 8004b06:	4603      	mov	r3, r0
 8004b08:	9004      	str	r0, [sp, #16]
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	f43f aeef 	beq.w	80048ee <_strtod_l+0x47e>
 8004b10:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004b12:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004b14:	2d00      	cmp	r5, #0
 8004b16:	bfab      	itete	ge
 8004b18:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004b1a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004b1c:	18ee      	addge	r6, r5, r3
 8004b1e:	1b5c      	sublt	r4, r3, r5
 8004b20:	9b05      	ldr	r3, [sp, #20]
 8004b22:	bfa8      	it	ge
 8004b24:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004b26:	eba5 0503 	sub.w	r5, r5, r3
 8004b2a:	4415      	add	r5, r2
 8004b2c:	4b6e      	ldr	r3, [pc, #440]	; (8004ce8 <_strtod_l+0x878>)
 8004b2e:	f105 35ff 	add.w	r5, r5, #4294967295
 8004b32:	bfb8      	it	lt
 8004b34:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004b36:	429d      	cmp	r5, r3
 8004b38:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004b3c:	f280 80c4 	bge.w	8004cc8 <_strtod_l+0x858>
 8004b40:	1b5b      	subs	r3, r3, r5
 8004b42:	2b1f      	cmp	r3, #31
 8004b44:	f04f 0701 	mov.w	r7, #1
 8004b48:	eba2 0203 	sub.w	r2, r2, r3
 8004b4c:	f300 80b1 	bgt.w	8004cb2 <_strtod_l+0x842>
 8004b50:	2500      	movs	r5, #0
 8004b52:	fa07 f303 	lsl.w	r3, r7, r3
 8004b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b58:	18b7      	adds	r7, r6, r2
 8004b5a:	9b05      	ldr	r3, [sp, #20]
 8004b5c:	42be      	cmp	r6, r7
 8004b5e:	4414      	add	r4, r2
 8004b60:	441c      	add	r4, r3
 8004b62:	4633      	mov	r3, r6
 8004b64:	bfa8      	it	ge
 8004b66:	463b      	movge	r3, r7
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	bfa8      	it	ge
 8004b6c:	4623      	movge	r3, r4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bfc2      	ittt	gt
 8004b72:	1aff      	subgt	r7, r7, r3
 8004b74:	1ae4      	subgt	r4, r4, r3
 8004b76:	1af6      	subgt	r6, r6, r3
 8004b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	dd17      	ble.n	8004bae <_strtod_l+0x73e>
 8004b7e:	461a      	mov	r2, r3
 8004b80:	4650      	mov	r0, sl
 8004b82:	9904      	ldr	r1, [sp, #16]
 8004b84:	f001 ff86 	bl	8006a94 <__pow5mult>
 8004b88:	9004      	str	r0, [sp, #16]
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	f43f aeaf 	beq.w	80048ee <_strtod_l+0x47e>
 8004b90:	4601      	mov	r1, r0
 8004b92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004b94:	4650      	mov	r0, sl
 8004b96:	f001 fed5 	bl	8006944 <__multiply>
 8004b9a:	9009      	str	r0, [sp, #36]	; 0x24
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	f43f aea6 	beq.w	80048ee <_strtod_l+0x47e>
 8004ba2:	4650      	mov	r0, sl
 8004ba4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ba6:	f001 fdb7 	bl	8006718 <_Bfree>
 8004baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bac:	931a      	str	r3, [sp, #104]	; 0x68
 8004bae:	2f00      	cmp	r7, #0
 8004bb0:	f300 808e 	bgt.w	8004cd0 <_strtod_l+0x860>
 8004bb4:	9b07      	ldr	r3, [sp, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	dd08      	ble.n	8004bcc <_strtod_l+0x75c>
 8004bba:	4650      	mov	r0, sl
 8004bbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004bbe:	9906      	ldr	r1, [sp, #24]
 8004bc0:	f001 ff68 	bl	8006a94 <__pow5mult>
 8004bc4:	9006      	str	r0, [sp, #24]
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	f43f ae91 	beq.w	80048ee <_strtod_l+0x47e>
 8004bcc:	2c00      	cmp	r4, #0
 8004bce:	dd08      	ble.n	8004be2 <_strtod_l+0x772>
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	4650      	mov	r0, sl
 8004bd4:	9906      	ldr	r1, [sp, #24]
 8004bd6:	f001 ffb7 	bl	8006b48 <__lshift>
 8004bda:	9006      	str	r0, [sp, #24]
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	f43f ae86 	beq.w	80048ee <_strtod_l+0x47e>
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	dd08      	ble.n	8004bf8 <_strtod_l+0x788>
 8004be6:	4632      	mov	r2, r6
 8004be8:	4650      	mov	r0, sl
 8004bea:	9904      	ldr	r1, [sp, #16]
 8004bec:	f001 ffac 	bl	8006b48 <__lshift>
 8004bf0:	9004      	str	r0, [sp, #16]
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	f43f ae7b 	beq.w	80048ee <_strtod_l+0x47e>
 8004bf8:	4650      	mov	r0, sl
 8004bfa:	9a06      	ldr	r2, [sp, #24]
 8004bfc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bfe:	f002 f82f 	bl	8006c60 <__mdiff>
 8004c02:	4683      	mov	fp, r0
 8004c04:	2800      	cmp	r0, #0
 8004c06:	f43f ae72 	beq.w	80048ee <_strtod_l+0x47e>
 8004c0a:	2400      	movs	r4, #0
 8004c0c:	68c3      	ldr	r3, [r0, #12]
 8004c0e:	9904      	ldr	r1, [sp, #16]
 8004c10:	60c4      	str	r4, [r0, #12]
 8004c12:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c14:	f002 f808 	bl	8006c28 <__mcmp>
 8004c18:	42a0      	cmp	r0, r4
 8004c1a:	da6b      	bge.n	8004cf4 <_strtod_l+0x884>
 8004c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c1e:	ea53 0308 	orrs.w	r3, r3, r8
 8004c22:	f040 8091 	bne.w	8004d48 <_strtod_l+0x8d8>
 8004c26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 808c 	bne.w	8004d48 <_strtod_l+0x8d8>
 8004c30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c34:	0d1b      	lsrs	r3, r3, #20
 8004c36:	051b      	lsls	r3, r3, #20
 8004c38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004c3c:	f240 8084 	bls.w	8004d48 <_strtod_l+0x8d8>
 8004c40:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004c44:	b91b      	cbnz	r3, 8004c4e <_strtod_l+0x7de>
 8004c46:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	dd7c      	ble.n	8004d48 <_strtod_l+0x8d8>
 8004c4e:	4659      	mov	r1, fp
 8004c50:	2201      	movs	r2, #1
 8004c52:	4650      	mov	r0, sl
 8004c54:	f001 ff78 	bl	8006b48 <__lshift>
 8004c58:	9904      	ldr	r1, [sp, #16]
 8004c5a:	4683      	mov	fp, r0
 8004c5c:	f001 ffe4 	bl	8006c28 <__mcmp>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	dd71      	ble.n	8004d48 <_strtod_l+0x8d8>
 8004c64:	9905      	ldr	r1, [sp, #20]
 8004c66:	464b      	mov	r3, r9
 8004c68:	4a20      	ldr	r2, [pc, #128]	; (8004cec <_strtod_l+0x87c>)
 8004c6a:	2900      	cmp	r1, #0
 8004c6c:	f000 808c 	beq.w	8004d88 <_strtod_l+0x918>
 8004c70:	ea02 0109 	and.w	r1, r2, r9
 8004c74:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004c78:	f300 8086 	bgt.w	8004d88 <_strtod_l+0x918>
 8004c7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004c80:	f77f aeaa 	ble.w	80049d8 <_strtod_l+0x568>
 8004c84:	4640      	mov	r0, r8
 8004c86:	4649      	mov	r1, r9
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <_strtod_l+0x880>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f7fb fc2e 	bl	80004ec <__aeabi_dmul>
 8004c90:	460b      	mov	r3, r1
 8004c92:	4303      	orrs	r3, r0
 8004c94:	bf08      	it	eq
 8004c96:	2322      	moveq	r3, #34	; 0x22
 8004c98:	4680      	mov	r8, r0
 8004c9a:	4689      	mov	r9, r1
 8004c9c:	bf08      	it	eq
 8004c9e:	f8ca 3000 	streq.w	r3, [sl]
 8004ca2:	e62f      	b.n	8004904 <_strtod_l+0x494>
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	ea03 0808 	and.w	r8, r3, r8
 8004cb0:	e6e0      	b.n	8004a74 <_strtod_l+0x604>
 8004cb2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004cb6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004cba:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004cbe:	35e2      	adds	r5, #226	; 0xe2
 8004cc0:	fa07 f505 	lsl.w	r5, r7, r5
 8004cc4:	970f      	str	r7, [sp, #60]	; 0x3c
 8004cc6:	e747      	b.n	8004b58 <_strtod_l+0x6e8>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	2500      	movs	r5, #0
 8004ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cce:	e743      	b.n	8004b58 <_strtod_l+0x6e8>
 8004cd0:	463a      	mov	r2, r7
 8004cd2:	4650      	mov	r0, sl
 8004cd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004cd6:	f001 ff37 	bl	8006b48 <__lshift>
 8004cda:	901a      	str	r0, [sp, #104]	; 0x68
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	f47f af69 	bne.w	8004bb4 <_strtod_l+0x744>
 8004ce2:	e604      	b.n	80048ee <_strtod_l+0x47e>
 8004ce4:	080080e0 	.word	0x080080e0
 8004ce8:	fffffc02 	.word	0xfffffc02
 8004cec:	7ff00000 	.word	0x7ff00000
 8004cf0:	39500000 	.word	0x39500000
 8004cf4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004cf8:	d165      	bne.n	8004dc6 <_strtod_l+0x956>
 8004cfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d00:	b35a      	cbz	r2, 8004d5a <_strtod_l+0x8ea>
 8004d02:	4a99      	ldr	r2, [pc, #612]	; (8004f68 <_strtod_l+0xaf8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d12b      	bne.n	8004d60 <_strtod_l+0x8f0>
 8004d08:	9b05      	ldr	r3, [sp, #20]
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	b303      	cbz	r3, 8004d50 <_strtod_l+0x8e0>
 8004d0e:	464a      	mov	r2, r9
 8004d10:	4b96      	ldr	r3, [pc, #600]	; (8004f6c <_strtod_l+0xafc>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d18:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1c:	d81b      	bhi.n	8004d56 <_strtod_l+0x8e6>
 8004d1e:	0d1b      	lsrs	r3, r3, #20
 8004d20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	4299      	cmp	r1, r3
 8004d2a:	d119      	bne.n	8004d60 <_strtod_l+0x8f0>
 8004d2c:	4b90      	ldr	r3, [pc, #576]	; (8004f70 <_strtod_l+0xb00>)
 8004d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d102      	bne.n	8004d3a <_strtod_l+0x8ca>
 8004d34:	3101      	adds	r1, #1
 8004d36:	f43f adda 	beq.w	80048ee <_strtod_l+0x47e>
 8004d3a:	f04f 0800 	mov.w	r8, #0
 8004d3e:	4b8b      	ldr	r3, [pc, #556]	; (8004f6c <_strtod_l+0xafc>)
 8004d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d42:	401a      	ands	r2, r3
 8004d44:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004d48:	9b05      	ldr	r3, [sp, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d19a      	bne.n	8004c84 <_strtod_l+0x814>
 8004d4e:	e5d9      	b.n	8004904 <_strtod_l+0x494>
 8004d50:	f04f 33ff 	mov.w	r3, #4294967295
 8004d54:	e7e8      	b.n	8004d28 <_strtod_l+0x8b8>
 8004d56:	4613      	mov	r3, r2
 8004d58:	e7e6      	b.n	8004d28 <_strtod_l+0x8b8>
 8004d5a:	ea53 0308 	orrs.w	r3, r3, r8
 8004d5e:	d081      	beq.n	8004c64 <_strtod_l+0x7f4>
 8004d60:	b1e5      	cbz	r5, 8004d9c <_strtod_l+0x92c>
 8004d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d64:	421d      	tst	r5, r3
 8004d66:	d0ef      	beq.n	8004d48 <_strtod_l+0x8d8>
 8004d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	9a05      	ldr	r2, [sp, #20]
 8004d70:	b1c3      	cbz	r3, 8004da4 <_strtod_l+0x934>
 8004d72:	f7ff fb5c 	bl	800442e <sulp>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d7e:	f7fb f9ff 	bl	8000180 <__adddf3>
 8004d82:	4680      	mov	r8, r0
 8004d84:	4689      	mov	r9, r1
 8004d86:	e7df      	b.n	8004d48 <_strtod_l+0x8d8>
 8004d88:	4013      	ands	r3, r2
 8004d8a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004d8e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004d92:	f04f 38ff 	mov.w	r8, #4294967295
 8004d96:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004d9a:	e7d5      	b.n	8004d48 <_strtod_l+0x8d8>
 8004d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d9e:	ea13 0f08 	tst.w	r3, r8
 8004da2:	e7e0      	b.n	8004d66 <_strtod_l+0x8f6>
 8004da4:	f7ff fb43 	bl	800442e <sulp>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004db0:	f7fb f9e4 	bl	800017c <__aeabi_dsub>
 8004db4:	2200      	movs	r2, #0
 8004db6:	2300      	movs	r3, #0
 8004db8:	4680      	mov	r8, r0
 8004dba:	4689      	mov	r9, r1
 8004dbc:	f7fb fdfe 	bl	80009bc <__aeabi_dcmpeq>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d0c1      	beq.n	8004d48 <_strtod_l+0x8d8>
 8004dc4:	e608      	b.n	80049d8 <_strtod_l+0x568>
 8004dc6:	4658      	mov	r0, fp
 8004dc8:	9904      	ldr	r1, [sp, #16]
 8004dca:	f002 f8ab 	bl	8006f24 <__ratio>
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	460f      	mov	r7, r1
 8004dd8:	f7fb fe04 	bl	80009e4 <__aeabi_dcmple>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d070      	beq.n	8004ec2 <_strtod_l+0xa52>
 8004de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d042      	beq.n	8004e6c <_strtod_l+0x9fc>
 8004de6:	2600      	movs	r6, #0
 8004de8:	4f62      	ldr	r7, [pc, #392]	; (8004f74 <_strtod_l+0xb04>)
 8004dea:	4d62      	ldr	r5, [pc, #392]	; (8004f74 <_strtod_l+0xb04>)
 8004dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004df2:	0d1b      	lsrs	r3, r3, #20
 8004df4:	051b      	lsls	r3, r3, #20
 8004df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dfa:	4b5f      	ldr	r3, [pc, #380]	; (8004f78 <_strtod_l+0xb08>)
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	f040 80c3 	bne.w	8004f88 <_strtod_l+0xb18>
 8004e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e04:	4640      	mov	r0, r8
 8004e06:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	f001 ffb4 	bl	8006d78 <__ulp>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4630      	mov	r0, r6
 8004e16:	4639      	mov	r1, r7
 8004e18:	f7fb fb68 	bl	80004ec <__aeabi_dmul>
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	f7fb f9ae 	bl	8000180 <__adddf3>
 8004e24:	460b      	mov	r3, r1
 8004e26:	4951      	ldr	r1, [pc, #324]	; (8004f6c <_strtod_l+0xafc>)
 8004e28:	4a54      	ldr	r2, [pc, #336]	; (8004f7c <_strtod_l+0xb0c>)
 8004e2a:	4019      	ands	r1, r3
 8004e2c:	4291      	cmp	r1, r2
 8004e2e:	4680      	mov	r8, r0
 8004e30:	d95d      	bls.n	8004eee <_strtod_l+0xa7e>
 8004e32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e34:	4b4e      	ldr	r3, [pc, #312]	; (8004f70 <_strtod_l+0xb00>)
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d103      	bne.n	8004e42 <_strtod_l+0x9d2>
 8004e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	f43f ad56 	beq.w	80048ee <_strtod_l+0x47e>
 8004e42:	f04f 38ff 	mov.w	r8, #4294967295
 8004e46:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004f70 <_strtod_l+0xb00>
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e4e:	f001 fc63 	bl	8006718 <_Bfree>
 8004e52:	4650      	mov	r0, sl
 8004e54:	9906      	ldr	r1, [sp, #24]
 8004e56:	f001 fc5f 	bl	8006718 <_Bfree>
 8004e5a:	4650      	mov	r0, sl
 8004e5c:	9904      	ldr	r1, [sp, #16]
 8004e5e:	f001 fc5b 	bl	8006718 <_Bfree>
 8004e62:	4659      	mov	r1, fp
 8004e64:	4650      	mov	r0, sl
 8004e66:	f001 fc57 	bl	8006718 <_Bfree>
 8004e6a:	e627      	b.n	8004abc <_strtod_l+0x64c>
 8004e6c:	f1b8 0f00 	cmp.w	r8, #0
 8004e70:	d119      	bne.n	8004ea6 <_strtod_l+0xa36>
 8004e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e78:	b9e3      	cbnz	r3, 8004eb4 <_strtod_l+0xa44>
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	4639      	mov	r1, r7
 8004e80:	4b3c      	ldr	r3, [pc, #240]	; (8004f74 <_strtod_l+0xb04>)
 8004e82:	f7fb fda5 	bl	80009d0 <__aeabi_dcmplt>
 8004e86:	b9c8      	cbnz	r0, 8004ebc <_strtod_l+0xa4c>
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	4b3c      	ldr	r3, [pc, #240]	; (8004f80 <_strtod_l+0xb10>)
 8004e90:	f7fb fb2c 	bl	80004ec <__aeabi_dmul>
 8004e94:	4604      	mov	r4, r0
 8004e96:	460d      	mov	r5, r1
 8004e98:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004e9c:	9416      	str	r4, [sp, #88]	; 0x58
 8004e9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004ea0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004ea4:	e7a2      	b.n	8004dec <_strtod_l+0x97c>
 8004ea6:	f1b8 0f01 	cmp.w	r8, #1
 8004eaa:	d103      	bne.n	8004eb4 <_strtod_l+0xa44>
 8004eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f43f ad92 	beq.w	80049d8 <_strtod_l+0x568>
 8004eb4:	2600      	movs	r6, #0
 8004eb6:	2400      	movs	r4, #0
 8004eb8:	4f32      	ldr	r7, [pc, #200]	; (8004f84 <_strtod_l+0xb14>)
 8004eba:	e796      	b.n	8004dea <_strtod_l+0x97a>
 8004ebc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004ebe:	4d30      	ldr	r5, [pc, #192]	; (8004f80 <_strtod_l+0xb10>)
 8004ec0:	e7ea      	b.n	8004e98 <_strtod_l+0xa28>
 8004ec2:	4b2f      	ldr	r3, [pc, #188]	; (8004f80 <_strtod_l+0xb10>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	4639      	mov	r1, r7
 8004eca:	f7fb fb0f 	bl	80004ec <__aeabi_dmul>
 8004ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	460d      	mov	r5, r1
 8004ed4:	b933      	cbnz	r3, 8004ee4 <_strtod_l+0xa74>
 8004ed6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004eda:	9010      	str	r0, [sp, #64]	; 0x40
 8004edc:	9311      	str	r3, [sp, #68]	; 0x44
 8004ede:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004ee2:	e783      	b.n	8004dec <_strtod_l+0x97c>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004eec:	e7f7      	b.n	8004ede <_strtod_l+0xa6e>
 8004eee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004ef2:	9b05      	ldr	r3, [sp, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1a8      	bne.n	8004e4a <_strtod_l+0x9da>
 8004ef8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004efc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004efe:	0d1b      	lsrs	r3, r3, #20
 8004f00:	051b      	lsls	r3, r3, #20
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d1a1      	bne.n	8004e4a <_strtod_l+0x9da>
 8004f06:	4620      	mov	r0, r4
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f7fb fe37 	bl	8000b7c <__aeabi_d2lz>
 8004f0e:	f7fb fabf 	bl	8000490 <__aeabi_l2d>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4620      	mov	r0, r4
 8004f18:	4629      	mov	r1, r5
 8004f1a:	f7fb f92f 	bl	800017c <__aeabi_dsub>
 8004f1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f24:	ea43 0308 	orr.w	r3, r3, r8
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	460d      	mov	r5, r1
 8004f2e:	d066      	beq.n	8004ffe <_strtod_l+0xb8e>
 8004f30:	a309      	add	r3, pc, #36	; (adr r3, 8004f58 <_strtod_l+0xae8>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb fd4b 	bl	80009d0 <__aeabi_dcmplt>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	f47f ace2 	bne.w	8004904 <_strtod_l+0x494>
 8004f40:	a307      	add	r3, pc, #28	; (adr r3, 8004f60 <_strtod_l+0xaf0>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	4620      	mov	r0, r4
 8004f48:	4629      	mov	r1, r5
 8004f4a:	f7fb fd5f 	bl	8000a0c <__aeabi_dcmpgt>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	f43f af7b 	beq.w	8004e4a <_strtod_l+0x9da>
 8004f54:	e4d6      	b.n	8004904 <_strtod_l+0x494>
 8004f56:	bf00      	nop
 8004f58:	94a03595 	.word	0x94a03595
 8004f5c:	3fdfffff 	.word	0x3fdfffff
 8004f60:	35afe535 	.word	0x35afe535
 8004f64:	3fe00000 	.word	0x3fe00000
 8004f68:	000fffff 	.word	0x000fffff
 8004f6c:	7ff00000 	.word	0x7ff00000
 8004f70:	7fefffff 	.word	0x7fefffff
 8004f74:	3ff00000 	.word	0x3ff00000
 8004f78:	7fe00000 	.word	0x7fe00000
 8004f7c:	7c9fffff 	.word	0x7c9fffff
 8004f80:	3fe00000 	.word	0x3fe00000
 8004f84:	bff00000 	.word	0xbff00000
 8004f88:	9b05      	ldr	r3, [sp, #20]
 8004f8a:	b313      	cbz	r3, 8004fd2 <_strtod_l+0xb62>
 8004f8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004f92:	d81e      	bhi.n	8004fd2 <_strtod_l+0xb62>
 8004f94:	a326      	add	r3, pc, #152	; (adr r3, 8005030 <_strtod_l+0xbc0>)
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	f7fb fd21 	bl	80009e4 <__aeabi_dcmple>
 8004fa2:	b190      	cbz	r0, 8004fca <_strtod_l+0xb5a>
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f7fb fd78 	bl	8000a9c <__aeabi_d2uiz>
 8004fac:	2801      	cmp	r0, #1
 8004fae:	bf38      	it	cc
 8004fb0:	2001      	movcc	r0, #1
 8004fb2:	f7fb fa21 	bl	80003f8 <__aeabi_ui2d>
 8004fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fb8:	4604      	mov	r4, r0
 8004fba:	460d      	mov	r5, r1
 8004fbc:	b9d3      	cbnz	r3, 8004ff4 <_strtod_l+0xb84>
 8004fbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fc2:	9012      	str	r0, [sp, #72]	; 0x48
 8004fc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004fc6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004fca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fcc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004fd0:	1a9f      	subs	r7, r3, r2
 8004fd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fd6:	f001 fecf 	bl	8006d78 <__ulp>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4630      	mov	r0, r6
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	f7fb fa83 	bl	80004ec <__aeabi_dmul>
 8004fe6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004fea:	f7fb f8c9 	bl	8000180 <__adddf3>
 8004fee:	4680      	mov	r8, r0
 8004ff0:	4689      	mov	r9, r1
 8004ff2:	e77e      	b.n	8004ef2 <_strtod_l+0xa82>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004ffc:	e7e3      	b.n	8004fc6 <_strtod_l+0xb56>
 8004ffe:	a30e      	add	r3, pc, #56	; (adr r3, 8005038 <_strtod_l+0xbc8>)
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	f7fb fce4 	bl	80009d0 <__aeabi_dcmplt>
 8005008:	e7a1      	b.n	8004f4e <_strtod_l+0xade>
 800500a:	2300      	movs	r3, #0
 800500c:	930a      	str	r3, [sp, #40]	; 0x28
 800500e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005010:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	f7ff ba71 	b.w	80044fa <_strtod_l+0x8a>
 8005018:	2a65      	cmp	r2, #101	; 0x65
 800501a:	f43f ab63 	beq.w	80046e4 <_strtod_l+0x274>
 800501e:	2a45      	cmp	r2, #69	; 0x45
 8005020:	f43f ab60 	beq.w	80046e4 <_strtod_l+0x274>
 8005024:	2301      	movs	r3, #1
 8005026:	f7ff bb95 	b.w	8004754 <_strtod_l+0x2e4>
 800502a:	bf00      	nop
 800502c:	f3af 8000 	nop.w
 8005030:	ffc00000 	.word	0xffc00000
 8005034:	41dfffff 	.word	0x41dfffff
 8005038:	94a03595 	.word	0x94a03595
 800503c:	3fcfffff 	.word	0x3fcfffff

08005040 <_strtod_r>:
 8005040:	4b01      	ldr	r3, [pc, #4]	; (8005048 <_strtod_r+0x8>)
 8005042:	f7ff ba15 	b.w	8004470 <_strtod_l>
 8005046:	bf00      	nop
 8005048:	20000074 	.word	0x20000074

0800504c <strtok>:
 800504c:	4b16      	ldr	r3, [pc, #88]	; (80050a8 <strtok+0x5c>)
 800504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005052:	681f      	ldr	r7, [r3, #0]
 8005054:	4605      	mov	r5, r0
 8005056:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005058:	460e      	mov	r6, r1
 800505a:	b9ec      	cbnz	r4, 8005098 <strtok+0x4c>
 800505c:	2050      	movs	r0, #80	; 0x50
 800505e:	f001 fae5 	bl	800662c <malloc>
 8005062:	4602      	mov	r2, r0
 8005064:	65b8      	str	r0, [r7, #88]	; 0x58
 8005066:	b920      	cbnz	r0, 8005072 <strtok+0x26>
 8005068:	2157      	movs	r1, #87	; 0x57
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <strtok+0x60>)
 800506c:	4810      	ldr	r0, [pc, #64]	; (80050b0 <strtok+0x64>)
 800506e:	f000 f8c7 	bl	8005200 <__assert_func>
 8005072:	e9c0 4400 	strd	r4, r4, [r0]
 8005076:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800507a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800507e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005082:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005086:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800508a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800508e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005092:	6184      	str	r4, [r0, #24]
 8005094:	7704      	strb	r4, [r0, #28]
 8005096:	6244      	str	r4, [r0, #36]	; 0x24
 8005098:	4631      	mov	r1, r6
 800509a:	4628      	mov	r0, r5
 800509c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800509e:	2301      	movs	r3, #1
 80050a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050a4:	f000 b806 	b.w	80050b4 <__strtok_r>
 80050a8:	2000000c 	.word	0x2000000c
 80050ac:	08008108 	.word	0x08008108
 80050b0:	0800811f 	.word	0x0800811f

080050b4 <__strtok_r>:
 80050b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b6:	b908      	cbnz	r0, 80050bc <__strtok_r+0x8>
 80050b8:	6810      	ldr	r0, [r2, #0]
 80050ba:	b188      	cbz	r0, 80050e0 <__strtok_r+0x2c>
 80050bc:	4604      	mov	r4, r0
 80050be:	460f      	mov	r7, r1
 80050c0:	4620      	mov	r0, r4
 80050c2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80050c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80050ca:	b91e      	cbnz	r6, 80050d4 <__strtok_r+0x20>
 80050cc:	b965      	cbnz	r5, 80050e8 <__strtok_r+0x34>
 80050ce:	4628      	mov	r0, r5
 80050d0:	6015      	str	r5, [r2, #0]
 80050d2:	e005      	b.n	80050e0 <__strtok_r+0x2c>
 80050d4:	42b5      	cmp	r5, r6
 80050d6:	d1f6      	bne.n	80050c6 <__strtok_r+0x12>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f0      	bne.n	80050be <__strtok_r+0xa>
 80050dc:	6014      	str	r4, [r2, #0]
 80050de:	7003      	strb	r3, [r0, #0]
 80050e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e2:	461c      	mov	r4, r3
 80050e4:	e00c      	b.n	8005100 <__strtok_r+0x4c>
 80050e6:	b915      	cbnz	r5, 80050ee <__strtok_r+0x3a>
 80050e8:	460e      	mov	r6, r1
 80050ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 80050f2:	42ab      	cmp	r3, r5
 80050f4:	d1f7      	bne.n	80050e6 <__strtok_r+0x32>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f3      	beq.n	80050e2 <__strtok_r+0x2e>
 80050fa:	2300      	movs	r3, #0
 80050fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005100:	6014      	str	r4, [r2, #0]
 8005102:	e7ed      	b.n	80050e0 <__strtok_r+0x2c>

08005104 <_strtol_l.constprop.0>:
 8005104:	2b01      	cmp	r3, #1
 8005106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510a:	4680      	mov	r8, r0
 800510c:	d001      	beq.n	8005112 <_strtol_l.constprop.0+0xe>
 800510e:	2b24      	cmp	r3, #36	; 0x24
 8005110:	d906      	bls.n	8005120 <_strtol_l.constprop.0+0x1c>
 8005112:	f7fe fab5 	bl	8003680 <__errno>
 8005116:	2316      	movs	r3, #22
 8005118:	6003      	str	r3, [r0, #0]
 800511a:	2000      	movs	r0, #0
 800511c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005120:	460d      	mov	r5, r1
 8005122:	4f35      	ldr	r7, [pc, #212]	; (80051f8 <_strtol_l.constprop.0+0xf4>)
 8005124:	4628      	mov	r0, r5
 8005126:	f815 4b01 	ldrb.w	r4, [r5], #1
 800512a:	5de6      	ldrb	r6, [r4, r7]
 800512c:	f016 0608 	ands.w	r6, r6, #8
 8005130:	d1f8      	bne.n	8005124 <_strtol_l.constprop.0+0x20>
 8005132:	2c2d      	cmp	r4, #45	; 0x2d
 8005134:	d12f      	bne.n	8005196 <_strtol_l.constprop.0+0x92>
 8005136:	2601      	movs	r6, #1
 8005138:	782c      	ldrb	r4, [r5, #0]
 800513a:	1c85      	adds	r5, r0, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d057      	beq.n	80051f0 <_strtol_l.constprop.0+0xec>
 8005140:	2b10      	cmp	r3, #16
 8005142:	d109      	bne.n	8005158 <_strtol_l.constprop.0+0x54>
 8005144:	2c30      	cmp	r4, #48	; 0x30
 8005146:	d107      	bne.n	8005158 <_strtol_l.constprop.0+0x54>
 8005148:	7828      	ldrb	r0, [r5, #0]
 800514a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800514e:	2858      	cmp	r0, #88	; 0x58
 8005150:	d149      	bne.n	80051e6 <_strtol_l.constprop.0+0xe2>
 8005152:	2310      	movs	r3, #16
 8005154:	786c      	ldrb	r4, [r5, #1]
 8005156:	3502      	adds	r5, #2
 8005158:	2700      	movs	r7, #0
 800515a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800515e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005162:	fbbe f9f3 	udiv	r9, lr, r3
 8005166:	4638      	mov	r0, r7
 8005168:	fb03 ea19 	mls	sl, r3, r9, lr
 800516c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005170:	f1bc 0f09 	cmp.w	ip, #9
 8005174:	d814      	bhi.n	80051a0 <_strtol_l.constprop.0+0x9c>
 8005176:	4664      	mov	r4, ip
 8005178:	42a3      	cmp	r3, r4
 800517a:	dd22      	ble.n	80051c2 <_strtol_l.constprop.0+0xbe>
 800517c:	2f00      	cmp	r7, #0
 800517e:	db1d      	blt.n	80051bc <_strtol_l.constprop.0+0xb8>
 8005180:	4581      	cmp	r9, r0
 8005182:	d31b      	bcc.n	80051bc <_strtol_l.constprop.0+0xb8>
 8005184:	d101      	bne.n	800518a <_strtol_l.constprop.0+0x86>
 8005186:	45a2      	cmp	sl, r4
 8005188:	db18      	blt.n	80051bc <_strtol_l.constprop.0+0xb8>
 800518a:	2701      	movs	r7, #1
 800518c:	fb00 4003 	mla	r0, r0, r3, r4
 8005190:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005194:	e7ea      	b.n	800516c <_strtol_l.constprop.0+0x68>
 8005196:	2c2b      	cmp	r4, #43	; 0x2b
 8005198:	bf04      	itt	eq
 800519a:	782c      	ldrbeq	r4, [r5, #0]
 800519c:	1c85      	addeq	r5, r0, #2
 800519e:	e7cd      	b.n	800513c <_strtol_l.constprop.0+0x38>
 80051a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80051a4:	f1bc 0f19 	cmp.w	ip, #25
 80051a8:	d801      	bhi.n	80051ae <_strtol_l.constprop.0+0xaa>
 80051aa:	3c37      	subs	r4, #55	; 0x37
 80051ac:	e7e4      	b.n	8005178 <_strtol_l.constprop.0+0x74>
 80051ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80051b2:	f1bc 0f19 	cmp.w	ip, #25
 80051b6:	d804      	bhi.n	80051c2 <_strtol_l.constprop.0+0xbe>
 80051b8:	3c57      	subs	r4, #87	; 0x57
 80051ba:	e7dd      	b.n	8005178 <_strtol_l.constprop.0+0x74>
 80051bc:	f04f 37ff 	mov.w	r7, #4294967295
 80051c0:	e7e6      	b.n	8005190 <_strtol_l.constprop.0+0x8c>
 80051c2:	2f00      	cmp	r7, #0
 80051c4:	da07      	bge.n	80051d6 <_strtol_l.constprop.0+0xd2>
 80051c6:	2322      	movs	r3, #34	; 0x22
 80051c8:	4670      	mov	r0, lr
 80051ca:	f8c8 3000 	str.w	r3, [r8]
 80051ce:	2a00      	cmp	r2, #0
 80051d0:	d0a4      	beq.n	800511c <_strtol_l.constprop.0+0x18>
 80051d2:	1e69      	subs	r1, r5, #1
 80051d4:	e005      	b.n	80051e2 <_strtol_l.constprop.0+0xde>
 80051d6:	b106      	cbz	r6, 80051da <_strtol_l.constprop.0+0xd6>
 80051d8:	4240      	negs	r0, r0
 80051da:	2a00      	cmp	r2, #0
 80051dc:	d09e      	beq.n	800511c <_strtol_l.constprop.0+0x18>
 80051de:	2f00      	cmp	r7, #0
 80051e0:	d1f7      	bne.n	80051d2 <_strtol_l.constprop.0+0xce>
 80051e2:	6011      	str	r1, [r2, #0]
 80051e4:	e79a      	b.n	800511c <_strtol_l.constprop.0+0x18>
 80051e6:	2430      	movs	r4, #48	; 0x30
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1b5      	bne.n	8005158 <_strtol_l.constprop.0+0x54>
 80051ec:	2308      	movs	r3, #8
 80051ee:	e7b3      	b.n	8005158 <_strtol_l.constprop.0+0x54>
 80051f0:	2c30      	cmp	r4, #48	; 0x30
 80051f2:	d0a9      	beq.n	8005148 <_strtol_l.constprop.0+0x44>
 80051f4:	230a      	movs	r3, #10
 80051f6:	e7af      	b.n	8005158 <_strtol_l.constprop.0+0x54>
 80051f8:	080081b9 	.word	0x080081b9

080051fc <_strtol_r>:
 80051fc:	f7ff bf82 	b.w	8005104 <_strtol_l.constprop.0>

08005200 <__assert_func>:
 8005200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005202:	4614      	mov	r4, r2
 8005204:	461a      	mov	r2, r3
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <__assert_func+0x2c>)
 8005208:	4605      	mov	r5, r0
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68d8      	ldr	r0, [r3, #12]
 800520e:	b14c      	cbz	r4, 8005224 <__assert_func+0x24>
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <__assert_func+0x30>)
 8005212:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005216:	9100      	str	r1, [sp, #0]
 8005218:	462b      	mov	r3, r5
 800521a:	4906      	ldr	r1, [pc, #24]	; (8005234 <__assert_func+0x34>)
 800521c:	f000 fe8a 	bl	8005f34 <fiprintf>
 8005220:	f002 fb8e 	bl	8007940 <abort>
 8005224:	4b04      	ldr	r3, [pc, #16]	; (8005238 <__assert_func+0x38>)
 8005226:	461c      	mov	r4, r3
 8005228:	e7f3      	b.n	8005212 <__assert_func+0x12>
 800522a:	bf00      	nop
 800522c:	2000000c 	.word	0x2000000c
 8005230:	0800817c 	.word	0x0800817c
 8005234:	08008189 	.word	0x08008189
 8005238:	080081b7 	.word	0x080081b7

0800523c <quorem>:
 800523c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005240:	6903      	ldr	r3, [r0, #16]
 8005242:	690c      	ldr	r4, [r1, #16]
 8005244:	4607      	mov	r7, r0
 8005246:	42a3      	cmp	r3, r4
 8005248:	f2c0 8082 	blt.w	8005350 <quorem+0x114>
 800524c:	3c01      	subs	r4, #1
 800524e:	f100 0514 	add.w	r5, r0, #20
 8005252:	f101 0814 	add.w	r8, r1, #20
 8005256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005264:	3301      	adds	r3, #1
 8005266:	429a      	cmp	r2, r3
 8005268:	fbb2 f6f3 	udiv	r6, r2, r3
 800526c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005270:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005274:	d331      	bcc.n	80052da <quorem+0x9e>
 8005276:	f04f 0e00 	mov.w	lr, #0
 800527a:	4640      	mov	r0, r8
 800527c:	46ac      	mov	ip, r5
 800527e:	46f2      	mov	sl, lr
 8005280:	f850 2b04 	ldr.w	r2, [r0], #4
 8005284:	b293      	uxth	r3, r2
 8005286:	fb06 e303 	mla	r3, r6, r3, lr
 800528a:	0c12      	lsrs	r2, r2, #16
 800528c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005290:	b29b      	uxth	r3, r3
 8005292:	fb06 e202 	mla	r2, r6, r2, lr
 8005296:	ebaa 0303 	sub.w	r3, sl, r3
 800529a:	f8dc a000 	ldr.w	sl, [ip]
 800529e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052a2:	fa1f fa8a 	uxth.w	sl, sl
 80052a6:	4453      	add	r3, sl
 80052a8:	f8dc a000 	ldr.w	sl, [ip]
 80052ac:	b292      	uxth	r2, r2
 80052ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052bc:	4581      	cmp	r9, r0
 80052be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052c2:	f84c 3b04 	str.w	r3, [ip], #4
 80052c6:	d2db      	bcs.n	8005280 <quorem+0x44>
 80052c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80052cc:	b92b      	cbnz	r3, 80052da <quorem+0x9e>
 80052ce:	9b01      	ldr	r3, [sp, #4]
 80052d0:	3b04      	subs	r3, #4
 80052d2:	429d      	cmp	r5, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	d32f      	bcc.n	8005338 <quorem+0xfc>
 80052d8:	613c      	str	r4, [r7, #16]
 80052da:	4638      	mov	r0, r7
 80052dc:	f001 fca4 	bl	8006c28 <__mcmp>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	db25      	blt.n	8005330 <quorem+0xf4>
 80052e4:	4628      	mov	r0, r5
 80052e6:	f04f 0c00 	mov.w	ip, #0
 80052ea:	3601      	adds	r6, #1
 80052ec:	f858 1b04 	ldr.w	r1, [r8], #4
 80052f0:	f8d0 e000 	ldr.w	lr, [r0]
 80052f4:	b28b      	uxth	r3, r1
 80052f6:	ebac 0303 	sub.w	r3, ip, r3
 80052fa:	fa1f f28e 	uxth.w	r2, lr
 80052fe:	4413      	add	r3, r2
 8005300:	0c0a      	lsrs	r2, r1, #16
 8005302:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005306:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800530a:	b29b      	uxth	r3, r3
 800530c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005310:	45c1      	cmp	r9, r8
 8005312:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005316:	f840 3b04 	str.w	r3, [r0], #4
 800531a:	d2e7      	bcs.n	80052ec <quorem+0xb0>
 800531c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005320:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005324:	b922      	cbnz	r2, 8005330 <quorem+0xf4>
 8005326:	3b04      	subs	r3, #4
 8005328:	429d      	cmp	r5, r3
 800532a:	461a      	mov	r2, r3
 800532c:	d30a      	bcc.n	8005344 <quorem+0x108>
 800532e:	613c      	str	r4, [r7, #16]
 8005330:	4630      	mov	r0, r6
 8005332:	b003      	add	sp, #12
 8005334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	3b04      	subs	r3, #4
 800533c:	2a00      	cmp	r2, #0
 800533e:	d1cb      	bne.n	80052d8 <quorem+0x9c>
 8005340:	3c01      	subs	r4, #1
 8005342:	e7c6      	b.n	80052d2 <quorem+0x96>
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	3b04      	subs	r3, #4
 8005348:	2a00      	cmp	r2, #0
 800534a:	d1f0      	bne.n	800532e <quorem+0xf2>
 800534c:	3c01      	subs	r4, #1
 800534e:	e7eb      	b.n	8005328 <quorem+0xec>
 8005350:	2000      	movs	r0, #0
 8005352:	e7ee      	b.n	8005332 <quorem+0xf6>
 8005354:	0000      	movs	r0, r0
	...

08005358 <_dtoa_r>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	4616      	mov	r6, r2
 800535e:	461f      	mov	r7, r3
 8005360:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005362:	b099      	sub	sp, #100	; 0x64
 8005364:	4605      	mov	r5, r0
 8005366:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800536a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800536e:	b974      	cbnz	r4, 800538e <_dtoa_r+0x36>
 8005370:	2010      	movs	r0, #16
 8005372:	f001 f95b 	bl	800662c <malloc>
 8005376:	4602      	mov	r2, r0
 8005378:	6268      	str	r0, [r5, #36]	; 0x24
 800537a:	b920      	cbnz	r0, 8005386 <_dtoa_r+0x2e>
 800537c:	21ea      	movs	r1, #234	; 0xea
 800537e:	4ba8      	ldr	r3, [pc, #672]	; (8005620 <_dtoa_r+0x2c8>)
 8005380:	48a8      	ldr	r0, [pc, #672]	; (8005624 <_dtoa_r+0x2cc>)
 8005382:	f7ff ff3d 	bl	8005200 <__assert_func>
 8005386:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800538a:	6004      	str	r4, [r0, #0]
 800538c:	60c4      	str	r4, [r0, #12]
 800538e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	b151      	cbz	r1, 80053aa <_dtoa_r+0x52>
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	2301      	movs	r3, #1
 8005398:	4093      	lsls	r3, r2
 800539a:	604a      	str	r2, [r1, #4]
 800539c:	608b      	str	r3, [r1, #8]
 800539e:	4628      	mov	r0, r5
 80053a0:	f001 f9ba 	bl	8006718 <_Bfree>
 80053a4:	2200      	movs	r2, #0
 80053a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	1e3b      	subs	r3, r7, #0
 80053ac:	bfaf      	iteee	ge
 80053ae:	2300      	movge	r3, #0
 80053b0:	2201      	movlt	r2, #1
 80053b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053b6:	9305      	strlt	r3, [sp, #20]
 80053b8:	bfa8      	it	ge
 80053ba:	f8c8 3000 	strge.w	r3, [r8]
 80053be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80053c2:	4b99      	ldr	r3, [pc, #612]	; (8005628 <_dtoa_r+0x2d0>)
 80053c4:	bfb8      	it	lt
 80053c6:	f8c8 2000 	strlt.w	r2, [r8]
 80053ca:	ea33 0309 	bics.w	r3, r3, r9
 80053ce:	d119      	bne.n	8005404 <_dtoa_r+0xac>
 80053d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80053d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053dc:	4333      	orrs	r3, r6
 80053de:	f000 857f 	beq.w	8005ee0 <_dtoa_r+0xb88>
 80053e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053e4:	b953      	cbnz	r3, 80053fc <_dtoa_r+0xa4>
 80053e6:	4b91      	ldr	r3, [pc, #580]	; (800562c <_dtoa_r+0x2d4>)
 80053e8:	e022      	b.n	8005430 <_dtoa_r+0xd8>
 80053ea:	4b91      	ldr	r3, [pc, #580]	; (8005630 <_dtoa_r+0x2d8>)
 80053ec:	9303      	str	r3, [sp, #12]
 80053ee:	3308      	adds	r3, #8
 80053f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	9803      	ldr	r0, [sp, #12]
 80053f6:	b019      	add	sp, #100	; 0x64
 80053f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fc:	4b8b      	ldr	r3, [pc, #556]	; (800562c <_dtoa_r+0x2d4>)
 80053fe:	9303      	str	r3, [sp, #12]
 8005400:	3303      	adds	r3, #3
 8005402:	e7f5      	b.n	80053f0 <_dtoa_r+0x98>
 8005404:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005408:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800540c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005410:	2200      	movs	r2, #0
 8005412:	2300      	movs	r3, #0
 8005414:	f7fb fad2 	bl	80009bc <__aeabi_dcmpeq>
 8005418:	4680      	mov	r8, r0
 800541a:	b158      	cbz	r0, 8005434 <_dtoa_r+0xdc>
 800541c:	2301      	movs	r3, #1
 800541e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8558 	beq.w	8005eda <_dtoa_r+0xb82>
 800542a:	4882      	ldr	r0, [pc, #520]	; (8005634 <_dtoa_r+0x2dc>)
 800542c:	6018      	str	r0, [r3, #0]
 800542e:	1e43      	subs	r3, r0, #1
 8005430:	9303      	str	r3, [sp, #12]
 8005432:	e7df      	b.n	80053f4 <_dtoa_r+0x9c>
 8005434:	ab16      	add	r3, sp, #88	; 0x58
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	ab17      	add	r3, sp, #92	; 0x5c
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	4628      	mov	r0, r5
 800543e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005442:	f001 fd13 	bl	8006e6c <__d2b>
 8005446:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800544a:	4683      	mov	fp, r0
 800544c:	2c00      	cmp	r4, #0
 800544e:	d07f      	beq.n	8005550 <_dtoa_r+0x1f8>
 8005450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005456:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800545a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800545e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005462:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005466:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800546a:	2200      	movs	r2, #0
 800546c:	4b72      	ldr	r3, [pc, #456]	; (8005638 <_dtoa_r+0x2e0>)
 800546e:	f7fa fe85 	bl	800017c <__aeabi_dsub>
 8005472:	a365      	add	r3, pc, #404	; (adr r3, 8005608 <_dtoa_r+0x2b0>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f7fb f838 	bl	80004ec <__aeabi_dmul>
 800547c:	a364      	add	r3, pc, #400	; (adr r3, 8005610 <_dtoa_r+0x2b8>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f7fa fe7d 	bl	8000180 <__adddf3>
 8005486:	4606      	mov	r6, r0
 8005488:	4620      	mov	r0, r4
 800548a:	460f      	mov	r7, r1
 800548c:	f7fa ffc4 	bl	8000418 <__aeabi_i2d>
 8005490:	a361      	add	r3, pc, #388	; (adr r3, 8005618 <_dtoa_r+0x2c0>)
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f7fb f829 	bl	80004ec <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4630      	mov	r0, r6
 80054a0:	4639      	mov	r1, r7
 80054a2:	f7fa fe6d 	bl	8000180 <__adddf3>
 80054a6:	4606      	mov	r6, r0
 80054a8:	460f      	mov	r7, r1
 80054aa:	f7fb facf 	bl	8000a4c <__aeabi_d2iz>
 80054ae:	2200      	movs	r2, #0
 80054b0:	4682      	mov	sl, r0
 80054b2:	2300      	movs	r3, #0
 80054b4:	4630      	mov	r0, r6
 80054b6:	4639      	mov	r1, r7
 80054b8:	f7fb fa8a 	bl	80009d0 <__aeabi_dcmplt>
 80054bc:	b148      	cbz	r0, 80054d2 <_dtoa_r+0x17a>
 80054be:	4650      	mov	r0, sl
 80054c0:	f7fa ffaa 	bl	8000418 <__aeabi_i2d>
 80054c4:	4632      	mov	r2, r6
 80054c6:	463b      	mov	r3, r7
 80054c8:	f7fb fa78 	bl	80009bc <__aeabi_dcmpeq>
 80054cc:	b908      	cbnz	r0, 80054d2 <_dtoa_r+0x17a>
 80054ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054d2:	f1ba 0f16 	cmp.w	sl, #22
 80054d6:	d858      	bhi.n	800558a <_dtoa_r+0x232>
 80054d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054dc:	4b57      	ldr	r3, [pc, #348]	; (800563c <_dtoa_r+0x2e4>)
 80054de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fb fa73 	bl	80009d0 <__aeabi_dcmplt>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d04f      	beq.n	800558e <_dtoa_r+0x236>
 80054ee:	2300      	movs	r3, #0
 80054f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80054f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054f8:	1b1c      	subs	r4, r3, r4
 80054fa:	1e63      	subs	r3, r4, #1
 80054fc:	9309      	str	r3, [sp, #36]	; 0x24
 80054fe:	bf49      	itett	mi
 8005500:	f1c4 0301 	rsbmi	r3, r4, #1
 8005504:	2300      	movpl	r3, #0
 8005506:	9306      	strmi	r3, [sp, #24]
 8005508:	2300      	movmi	r3, #0
 800550a:	bf54      	ite	pl
 800550c:	9306      	strpl	r3, [sp, #24]
 800550e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005510:	f1ba 0f00 	cmp.w	sl, #0
 8005514:	db3d      	blt.n	8005592 <_dtoa_r+0x23a>
 8005516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005518:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800551c:	4453      	add	r3, sl
 800551e:	9309      	str	r3, [sp, #36]	; 0x24
 8005520:	2300      	movs	r3, #0
 8005522:	930a      	str	r3, [sp, #40]	; 0x28
 8005524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005526:	2b09      	cmp	r3, #9
 8005528:	f200 808c 	bhi.w	8005644 <_dtoa_r+0x2ec>
 800552c:	2b05      	cmp	r3, #5
 800552e:	bfc4      	itt	gt
 8005530:	3b04      	subgt	r3, #4
 8005532:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005536:	bfc8      	it	gt
 8005538:	2400      	movgt	r4, #0
 800553a:	f1a3 0302 	sub.w	r3, r3, #2
 800553e:	bfd8      	it	le
 8005540:	2401      	movle	r4, #1
 8005542:	2b03      	cmp	r3, #3
 8005544:	f200 808a 	bhi.w	800565c <_dtoa_r+0x304>
 8005548:	e8df f003 	tbb	[pc, r3]
 800554c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005550:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005554:	441c      	add	r4, r3
 8005556:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800555a:	2b20      	cmp	r3, #32
 800555c:	bfc3      	ittte	gt
 800555e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005562:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005566:	fa09 f303 	lslgt.w	r3, r9, r3
 800556a:	f1c3 0320 	rsble	r3, r3, #32
 800556e:	bfc6      	itte	gt
 8005570:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005574:	4318      	orrgt	r0, r3
 8005576:	fa06 f003 	lslle.w	r0, r6, r3
 800557a:	f7fa ff3d 	bl	80003f8 <__aeabi_ui2d>
 800557e:	2301      	movs	r3, #1
 8005580:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005584:	3c01      	subs	r4, #1
 8005586:	9313      	str	r3, [sp, #76]	; 0x4c
 8005588:	e76f      	b.n	800546a <_dtoa_r+0x112>
 800558a:	2301      	movs	r3, #1
 800558c:	e7b2      	b.n	80054f4 <_dtoa_r+0x19c>
 800558e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005590:	e7b1      	b.n	80054f6 <_dtoa_r+0x19e>
 8005592:	9b06      	ldr	r3, [sp, #24]
 8005594:	eba3 030a 	sub.w	r3, r3, sl
 8005598:	9306      	str	r3, [sp, #24]
 800559a:	f1ca 0300 	rsb	r3, sl, #0
 800559e:	930a      	str	r3, [sp, #40]	; 0x28
 80055a0:	2300      	movs	r3, #0
 80055a2:	930e      	str	r3, [sp, #56]	; 0x38
 80055a4:	e7be      	b.n	8005524 <_dtoa_r+0x1cc>
 80055a6:	2300      	movs	r3, #0
 80055a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80055aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dc58      	bgt.n	8005662 <_dtoa_r+0x30a>
 80055b0:	f04f 0901 	mov.w	r9, #1
 80055b4:	464b      	mov	r3, r9
 80055b6:	f8cd 9020 	str.w	r9, [sp, #32]
 80055ba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80055be:	2200      	movs	r2, #0
 80055c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80055c2:	6042      	str	r2, [r0, #4]
 80055c4:	2204      	movs	r2, #4
 80055c6:	f102 0614 	add.w	r6, r2, #20
 80055ca:	429e      	cmp	r6, r3
 80055cc:	6841      	ldr	r1, [r0, #4]
 80055ce:	d94e      	bls.n	800566e <_dtoa_r+0x316>
 80055d0:	4628      	mov	r0, r5
 80055d2:	f001 f861 	bl	8006698 <_Balloc>
 80055d6:	9003      	str	r0, [sp, #12]
 80055d8:	2800      	cmp	r0, #0
 80055da:	d14c      	bne.n	8005676 <_dtoa_r+0x31e>
 80055dc:	4602      	mov	r2, r0
 80055de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80055e2:	4b17      	ldr	r3, [pc, #92]	; (8005640 <_dtoa_r+0x2e8>)
 80055e4:	e6cc      	b.n	8005380 <_dtoa_r+0x28>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e7de      	b.n	80055a8 <_dtoa_r+0x250>
 80055ea:	2300      	movs	r3, #0
 80055ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80055ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055f0:	eb0a 0903 	add.w	r9, sl, r3
 80055f4:	f109 0301 	add.w	r3, r9, #1
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	9308      	str	r3, [sp, #32]
 80055fc:	bfb8      	it	lt
 80055fe:	2301      	movlt	r3, #1
 8005600:	e7dd      	b.n	80055be <_dtoa_r+0x266>
 8005602:	2301      	movs	r3, #1
 8005604:	e7f2      	b.n	80055ec <_dtoa_r+0x294>
 8005606:	bf00      	nop
 8005608:	636f4361 	.word	0x636f4361
 800560c:	3fd287a7 	.word	0x3fd287a7
 8005610:	8b60c8b3 	.word	0x8b60c8b3
 8005614:	3fc68a28 	.word	0x3fc68a28
 8005618:	509f79fb 	.word	0x509f79fb
 800561c:	3fd34413 	.word	0x3fd34413
 8005620:	08008108 	.word	0x08008108
 8005624:	080082c6 	.word	0x080082c6
 8005628:	7ff00000 	.word	0x7ff00000
 800562c:	080082c2 	.word	0x080082c2
 8005630:	080082b9 	.word	0x080082b9
 8005634:	08008089 	.word	0x08008089
 8005638:	3ff80000 	.word	0x3ff80000
 800563c:	08008430 	.word	0x08008430
 8005640:	08008321 	.word	0x08008321
 8005644:	2401      	movs	r4, #1
 8005646:	2300      	movs	r3, #0
 8005648:	940b      	str	r4, [sp, #44]	; 0x2c
 800564a:	9322      	str	r3, [sp, #136]	; 0x88
 800564c:	f04f 39ff 	mov.w	r9, #4294967295
 8005650:	2200      	movs	r2, #0
 8005652:	2312      	movs	r3, #18
 8005654:	f8cd 9020 	str.w	r9, [sp, #32]
 8005658:	9223      	str	r2, [sp, #140]	; 0x8c
 800565a:	e7b0      	b.n	80055be <_dtoa_r+0x266>
 800565c:	2301      	movs	r3, #1
 800565e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005660:	e7f4      	b.n	800564c <_dtoa_r+0x2f4>
 8005662:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005666:	464b      	mov	r3, r9
 8005668:	f8cd 9020 	str.w	r9, [sp, #32]
 800566c:	e7a7      	b.n	80055be <_dtoa_r+0x266>
 800566e:	3101      	adds	r1, #1
 8005670:	6041      	str	r1, [r0, #4]
 8005672:	0052      	lsls	r2, r2, #1
 8005674:	e7a7      	b.n	80055c6 <_dtoa_r+0x26e>
 8005676:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005678:	9a03      	ldr	r2, [sp, #12]
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	9b08      	ldr	r3, [sp, #32]
 800567e:	2b0e      	cmp	r3, #14
 8005680:	f200 80a8 	bhi.w	80057d4 <_dtoa_r+0x47c>
 8005684:	2c00      	cmp	r4, #0
 8005686:	f000 80a5 	beq.w	80057d4 <_dtoa_r+0x47c>
 800568a:	f1ba 0f00 	cmp.w	sl, #0
 800568e:	dd34      	ble.n	80056fa <_dtoa_r+0x3a2>
 8005690:	4a9a      	ldr	r2, [pc, #616]	; (80058fc <_dtoa_r+0x5a4>)
 8005692:	f00a 030f 	and.w	r3, sl, #15
 8005696:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800569a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800569e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056a6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80056aa:	d016      	beq.n	80056da <_dtoa_r+0x382>
 80056ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056b0:	4b93      	ldr	r3, [pc, #588]	; (8005900 <_dtoa_r+0x5a8>)
 80056b2:	2703      	movs	r7, #3
 80056b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056b8:	f7fb f842 	bl	8000740 <__aeabi_ddiv>
 80056bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056c0:	f004 040f 	and.w	r4, r4, #15
 80056c4:	4e8e      	ldr	r6, [pc, #568]	; (8005900 <_dtoa_r+0x5a8>)
 80056c6:	b954      	cbnz	r4, 80056de <_dtoa_r+0x386>
 80056c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056d0:	f7fb f836 	bl	8000740 <__aeabi_ddiv>
 80056d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056d8:	e029      	b.n	800572e <_dtoa_r+0x3d6>
 80056da:	2702      	movs	r7, #2
 80056dc:	e7f2      	b.n	80056c4 <_dtoa_r+0x36c>
 80056de:	07e1      	lsls	r1, r4, #31
 80056e0:	d508      	bpl.n	80056f4 <_dtoa_r+0x39c>
 80056e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056ea:	f7fa feff 	bl	80004ec <__aeabi_dmul>
 80056ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056f2:	3701      	adds	r7, #1
 80056f4:	1064      	asrs	r4, r4, #1
 80056f6:	3608      	adds	r6, #8
 80056f8:	e7e5      	b.n	80056c6 <_dtoa_r+0x36e>
 80056fa:	f000 80a5 	beq.w	8005848 <_dtoa_r+0x4f0>
 80056fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005702:	f1ca 0400 	rsb	r4, sl, #0
 8005706:	4b7d      	ldr	r3, [pc, #500]	; (80058fc <_dtoa_r+0x5a4>)
 8005708:	f004 020f 	and.w	r2, r4, #15
 800570c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f7fa feea 	bl	80004ec <__aeabi_dmul>
 8005718:	2702      	movs	r7, #2
 800571a:	2300      	movs	r3, #0
 800571c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005720:	4e77      	ldr	r6, [pc, #476]	; (8005900 <_dtoa_r+0x5a8>)
 8005722:	1124      	asrs	r4, r4, #4
 8005724:	2c00      	cmp	r4, #0
 8005726:	f040 8084 	bne.w	8005832 <_dtoa_r+0x4da>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1d2      	bne.n	80056d4 <_dtoa_r+0x37c>
 800572e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 808b 	beq.w	800584c <_dtoa_r+0x4f4>
 8005736:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800573a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800573e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005742:	2200      	movs	r2, #0
 8005744:	4b6f      	ldr	r3, [pc, #444]	; (8005904 <_dtoa_r+0x5ac>)
 8005746:	f7fb f943 	bl	80009d0 <__aeabi_dcmplt>
 800574a:	2800      	cmp	r0, #0
 800574c:	d07e      	beq.n	800584c <_dtoa_r+0x4f4>
 800574e:	9b08      	ldr	r3, [sp, #32]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d07b      	beq.n	800584c <_dtoa_r+0x4f4>
 8005754:	f1b9 0f00 	cmp.w	r9, #0
 8005758:	dd38      	ble.n	80057cc <_dtoa_r+0x474>
 800575a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800575e:	2200      	movs	r2, #0
 8005760:	4b69      	ldr	r3, [pc, #420]	; (8005908 <_dtoa_r+0x5b0>)
 8005762:	f7fa fec3 	bl	80004ec <__aeabi_dmul>
 8005766:	464c      	mov	r4, r9
 8005768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800576c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005770:	3701      	adds	r7, #1
 8005772:	4638      	mov	r0, r7
 8005774:	f7fa fe50 	bl	8000418 <__aeabi_i2d>
 8005778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800577c:	f7fa feb6 	bl	80004ec <__aeabi_dmul>
 8005780:	2200      	movs	r2, #0
 8005782:	4b62      	ldr	r3, [pc, #392]	; (800590c <_dtoa_r+0x5b4>)
 8005784:	f7fa fcfc 	bl	8000180 <__adddf3>
 8005788:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800578c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005790:	9611      	str	r6, [sp, #68]	; 0x44
 8005792:	2c00      	cmp	r4, #0
 8005794:	d15d      	bne.n	8005852 <_dtoa_r+0x4fa>
 8005796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800579a:	2200      	movs	r2, #0
 800579c:	4b5c      	ldr	r3, [pc, #368]	; (8005910 <_dtoa_r+0x5b8>)
 800579e:	f7fa fced 	bl	800017c <__aeabi_dsub>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057aa:	4633      	mov	r3, r6
 80057ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057ae:	f7fb f92d 	bl	8000a0c <__aeabi_dcmpgt>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	f040 829c 	bne.w	8005cf0 <_dtoa_r+0x998>
 80057b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057c2:	f7fb f905 	bl	80009d0 <__aeabi_dcmplt>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f040 8290 	bne.w	8005cec <_dtoa_r+0x994>
 80057cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80057d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80057d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f2c0 8152 	blt.w	8005a80 <_dtoa_r+0x728>
 80057dc:	f1ba 0f0e 	cmp.w	sl, #14
 80057e0:	f300 814e 	bgt.w	8005a80 <_dtoa_r+0x728>
 80057e4:	4b45      	ldr	r3, [pc, #276]	; (80058fc <_dtoa_r+0x5a4>)
 80057e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80057f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f280 80db 	bge.w	80059b0 <_dtoa_r+0x658>
 80057fa:	9b08      	ldr	r3, [sp, #32]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f300 80d7 	bgt.w	80059b0 <_dtoa_r+0x658>
 8005802:	f040 8272 	bne.w	8005cea <_dtoa_r+0x992>
 8005806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800580a:	2200      	movs	r2, #0
 800580c:	4b40      	ldr	r3, [pc, #256]	; (8005910 <_dtoa_r+0x5b8>)
 800580e:	f7fa fe6d 	bl	80004ec <__aeabi_dmul>
 8005812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005816:	f7fb f8ef 	bl	80009f8 <__aeabi_dcmpge>
 800581a:	9c08      	ldr	r4, [sp, #32]
 800581c:	4626      	mov	r6, r4
 800581e:	2800      	cmp	r0, #0
 8005820:	f040 8248 	bne.w	8005cb4 <_dtoa_r+0x95c>
 8005824:	2331      	movs	r3, #49	; 0x31
 8005826:	9f03      	ldr	r7, [sp, #12]
 8005828:	f10a 0a01 	add.w	sl, sl, #1
 800582c:	f807 3b01 	strb.w	r3, [r7], #1
 8005830:	e244      	b.n	8005cbc <_dtoa_r+0x964>
 8005832:	07e2      	lsls	r2, r4, #31
 8005834:	d505      	bpl.n	8005842 <_dtoa_r+0x4ea>
 8005836:	e9d6 2300 	ldrd	r2, r3, [r6]
 800583a:	f7fa fe57 	bl	80004ec <__aeabi_dmul>
 800583e:	2301      	movs	r3, #1
 8005840:	3701      	adds	r7, #1
 8005842:	1064      	asrs	r4, r4, #1
 8005844:	3608      	adds	r6, #8
 8005846:	e76d      	b.n	8005724 <_dtoa_r+0x3cc>
 8005848:	2702      	movs	r7, #2
 800584a:	e770      	b.n	800572e <_dtoa_r+0x3d6>
 800584c:	46d0      	mov	r8, sl
 800584e:	9c08      	ldr	r4, [sp, #32]
 8005850:	e78f      	b.n	8005772 <_dtoa_r+0x41a>
 8005852:	9903      	ldr	r1, [sp, #12]
 8005854:	4b29      	ldr	r3, [pc, #164]	; (80058fc <_dtoa_r+0x5a4>)
 8005856:	4421      	add	r1, r4
 8005858:	9112      	str	r1, [sp, #72]	; 0x48
 800585a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800585c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005860:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005864:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005868:	2900      	cmp	r1, #0
 800586a:	d055      	beq.n	8005918 <_dtoa_r+0x5c0>
 800586c:	2000      	movs	r0, #0
 800586e:	4929      	ldr	r1, [pc, #164]	; (8005914 <_dtoa_r+0x5bc>)
 8005870:	f7fa ff66 	bl	8000740 <__aeabi_ddiv>
 8005874:	463b      	mov	r3, r7
 8005876:	4632      	mov	r2, r6
 8005878:	f7fa fc80 	bl	800017c <__aeabi_dsub>
 800587c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005880:	9f03      	ldr	r7, [sp, #12]
 8005882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005886:	f7fb f8e1 	bl	8000a4c <__aeabi_d2iz>
 800588a:	4604      	mov	r4, r0
 800588c:	f7fa fdc4 	bl	8000418 <__aeabi_i2d>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005898:	f7fa fc70 	bl	800017c <__aeabi_dsub>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	3430      	adds	r4, #48	; 0x30
 80058a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058aa:	f807 4b01 	strb.w	r4, [r7], #1
 80058ae:	f7fb f88f 	bl	80009d0 <__aeabi_dcmplt>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d174      	bne.n	80059a0 <_dtoa_r+0x648>
 80058b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ba:	2000      	movs	r0, #0
 80058bc:	4911      	ldr	r1, [pc, #68]	; (8005904 <_dtoa_r+0x5ac>)
 80058be:	f7fa fc5d 	bl	800017c <__aeabi_dsub>
 80058c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058c6:	f7fb f883 	bl	80009d0 <__aeabi_dcmplt>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f040 80b7 	bne.w	8005a3e <_dtoa_r+0x6e6>
 80058d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058d2:	429f      	cmp	r7, r3
 80058d4:	f43f af7a 	beq.w	80057cc <_dtoa_r+0x474>
 80058d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058dc:	2200      	movs	r2, #0
 80058de:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <_dtoa_r+0x5b0>)
 80058e0:	f7fa fe04 	bl	80004ec <__aeabi_dmul>
 80058e4:	2200      	movs	r2, #0
 80058e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <_dtoa_r+0x5b0>)
 80058f0:	f7fa fdfc 	bl	80004ec <__aeabi_dmul>
 80058f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058f8:	e7c3      	b.n	8005882 <_dtoa_r+0x52a>
 80058fa:	bf00      	nop
 80058fc:	08008430 	.word	0x08008430
 8005900:	08008408 	.word	0x08008408
 8005904:	3ff00000 	.word	0x3ff00000
 8005908:	40240000 	.word	0x40240000
 800590c:	401c0000 	.word	0x401c0000
 8005910:	40140000 	.word	0x40140000
 8005914:	3fe00000 	.word	0x3fe00000
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fa fde6 	bl	80004ec <__aeabi_dmul>
 8005920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005922:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005926:	9c03      	ldr	r4, [sp, #12]
 8005928:	9314      	str	r3, [sp, #80]	; 0x50
 800592a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800592e:	f7fb f88d 	bl	8000a4c <__aeabi_d2iz>
 8005932:	9015      	str	r0, [sp, #84]	; 0x54
 8005934:	f7fa fd70 	bl	8000418 <__aeabi_i2d>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005940:	f7fa fc1c 	bl	800017c <__aeabi_dsub>
 8005944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005946:	4606      	mov	r6, r0
 8005948:	3330      	adds	r3, #48	; 0x30
 800594a:	f804 3b01 	strb.w	r3, [r4], #1
 800594e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005950:	460f      	mov	r7, r1
 8005952:	429c      	cmp	r4, r3
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	d124      	bne.n	80059a4 <_dtoa_r+0x64c>
 800595a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800595e:	4bb0      	ldr	r3, [pc, #704]	; (8005c20 <_dtoa_r+0x8c8>)
 8005960:	f7fa fc0e 	bl	8000180 <__adddf3>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4630      	mov	r0, r6
 800596a:	4639      	mov	r1, r7
 800596c:	f7fb f84e 	bl	8000a0c <__aeabi_dcmpgt>
 8005970:	2800      	cmp	r0, #0
 8005972:	d163      	bne.n	8005a3c <_dtoa_r+0x6e4>
 8005974:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005978:	2000      	movs	r0, #0
 800597a:	49a9      	ldr	r1, [pc, #676]	; (8005c20 <_dtoa_r+0x8c8>)
 800597c:	f7fa fbfe 	bl	800017c <__aeabi_dsub>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4630      	mov	r0, r6
 8005986:	4639      	mov	r1, r7
 8005988:	f7fb f822 	bl	80009d0 <__aeabi_dcmplt>
 800598c:	2800      	cmp	r0, #0
 800598e:	f43f af1d 	beq.w	80057cc <_dtoa_r+0x474>
 8005992:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005994:	1e7b      	subs	r3, r7, #1
 8005996:	9314      	str	r3, [sp, #80]	; 0x50
 8005998:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d0f8      	beq.n	8005992 <_dtoa_r+0x63a>
 80059a0:	46c2      	mov	sl, r8
 80059a2:	e03b      	b.n	8005a1c <_dtoa_r+0x6c4>
 80059a4:	4b9f      	ldr	r3, [pc, #636]	; (8005c24 <_dtoa_r+0x8cc>)
 80059a6:	f7fa fda1 	bl	80004ec <__aeabi_dmul>
 80059aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059ae:	e7bc      	b.n	800592a <_dtoa_r+0x5d2>
 80059b0:	9f03      	ldr	r7, [sp, #12]
 80059b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80059b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059ba:	4640      	mov	r0, r8
 80059bc:	4649      	mov	r1, r9
 80059be:	f7fa febf 	bl	8000740 <__aeabi_ddiv>
 80059c2:	f7fb f843 	bl	8000a4c <__aeabi_d2iz>
 80059c6:	4604      	mov	r4, r0
 80059c8:	f7fa fd26 	bl	8000418 <__aeabi_i2d>
 80059cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059d0:	f7fa fd8c 	bl	80004ec <__aeabi_dmul>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fa fbce 	bl	800017c <__aeabi_dsub>
 80059e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80059e4:	f807 6b01 	strb.w	r6, [r7], #1
 80059e8:	9e03      	ldr	r6, [sp, #12]
 80059ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80059ee:	1bbe      	subs	r6, r7, r6
 80059f0:	45b4      	cmp	ip, r6
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	d136      	bne.n	8005a66 <_dtoa_r+0x70e>
 80059f8:	f7fa fbc2 	bl	8000180 <__adddf3>
 80059fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a00:	4680      	mov	r8, r0
 8005a02:	4689      	mov	r9, r1
 8005a04:	f7fb f802 	bl	8000a0c <__aeabi_dcmpgt>
 8005a08:	bb58      	cbnz	r0, 8005a62 <_dtoa_r+0x70a>
 8005a0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4649      	mov	r1, r9
 8005a12:	f7fa ffd3 	bl	80009bc <__aeabi_dcmpeq>
 8005a16:	b108      	cbz	r0, 8005a1c <_dtoa_r+0x6c4>
 8005a18:	07e1      	lsls	r1, r4, #31
 8005a1a:	d422      	bmi.n	8005a62 <_dtoa_r+0x70a>
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	4659      	mov	r1, fp
 8005a20:	f000 fe7a 	bl	8006718 <_Bfree>
 8005a24:	2300      	movs	r3, #0
 8005a26:	703b      	strb	r3, [r7, #0]
 8005a28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005a2a:	f10a 0001 	add.w	r0, sl, #1
 8005a2e:	6018      	str	r0, [r3, #0]
 8005a30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f43f acde 	beq.w	80053f4 <_dtoa_r+0x9c>
 8005a38:	601f      	str	r7, [r3, #0]
 8005a3a:	e4db      	b.n	80053f4 <_dtoa_r+0x9c>
 8005a3c:	4627      	mov	r7, r4
 8005a3e:	463b      	mov	r3, r7
 8005a40:	461f      	mov	r7, r3
 8005a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a46:	2a39      	cmp	r2, #57	; 0x39
 8005a48:	d107      	bne.n	8005a5a <_dtoa_r+0x702>
 8005a4a:	9a03      	ldr	r2, [sp, #12]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d1f7      	bne.n	8005a40 <_dtoa_r+0x6e8>
 8005a50:	2230      	movs	r2, #48	; 0x30
 8005a52:	9903      	ldr	r1, [sp, #12]
 8005a54:	f108 0801 	add.w	r8, r8, #1
 8005a58:	700a      	strb	r2, [r1, #0]
 8005a5a:	781a      	ldrb	r2, [r3, #0]
 8005a5c:	3201      	adds	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e79e      	b.n	80059a0 <_dtoa_r+0x648>
 8005a62:	46d0      	mov	r8, sl
 8005a64:	e7eb      	b.n	8005a3e <_dtoa_r+0x6e6>
 8005a66:	2200      	movs	r2, #0
 8005a68:	4b6e      	ldr	r3, [pc, #440]	; (8005c24 <_dtoa_r+0x8cc>)
 8005a6a:	f7fa fd3f 	bl	80004ec <__aeabi_dmul>
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2300      	movs	r3, #0
 8005a72:	4680      	mov	r8, r0
 8005a74:	4689      	mov	r9, r1
 8005a76:	f7fa ffa1 	bl	80009bc <__aeabi_dcmpeq>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d09b      	beq.n	80059b6 <_dtoa_r+0x65e>
 8005a7e:	e7cd      	b.n	8005a1c <_dtoa_r+0x6c4>
 8005a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	f000 80d0 	beq.w	8005c28 <_dtoa_r+0x8d0>
 8005a88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a8a:	2a01      	cmp	r2, #1
 8005a8c:	f300 80ae 	bgt.w	8005bec <_dtoa_r+0x894>
 8005a90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	f000 80a6 	beq.w	8005be4 <_dtoa_r+0x88c>
 8005a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a9e:	9f06      	ldr	r7, [sp, #24]
 8005aa0:	9a06      	ldr	r2, [sp, #24]
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	441a      	add	r2, r3
 8005aa6:	9206      	str	r2, [sp, #24]
 8005aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aaa:	4628      	mov	r0, r5
 8005aac:	441a      	add	r2, r3
 8005aae:	9209      	str	r2, [sp, #36]	; 0x24
 8005ab0:	f000 ff32 	bl	8006918 <__i2b>
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	2f00      	cmp	r7, #0
 8005ab8:	dd0c      	ble.n	8005ad4 <_dtoa_r+0x77c>
 8005aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dd09      	ble.n	8005ad4 <_dtoa_r+0x77c>
 8005ac0:	42bb      	cmp	r3, r7
 8005ac2:	bfa8      	it	ge
 8005ac4:	463b      	movge	r3, r7
 8005ac6:	9a06      	ldr	r2, [sp, #24]
 8005ac8:	1aff      	subs	r7, r7, r3
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	9206      	str	r2, [sp, #24]
 8005ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad6:	b1f3      	cbz	r3, 8005b16 <_dtoa_r+0x7be>
 8005ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80a8 	beq.w	8005c30 <_dtoa_r+0x8d8>
 8005ae0:	2c00      	cmp	r4, #0
 8005ae2:	dd10      	ble.n	8005b06 <_dtoa_r+0x7ae>
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 ffd3 	bl	8006a94 <__pow5mult>
 8005aee:	465a      	mov	r2, fp
 8005af0:	4601      	mov	r1, r0
 8005af2:	4606      	mov	r6, r0
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 ff25 	bl	8006944 <__multiply>
 8005afa:	4680      	mov	r8, r0
 8005afc:	4659      	mov	r1, fp
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fe0a 	bl	8006718 <_Bfree>
 8005b04:	46c3      	mov	fp, r8
 8005b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b08:	1b1a      	subs	r2, r3, r4
 8005b0a:	d004      	beq.n	8005b16 <_dtoa_r+0x7be>
 8005b0c:	4659      	mov	r1, fp
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 ffc0 	bl	8006a94 <__pow5mult>
 8005b14:	4683      	mov	fp, r0
 8005b16:	2101      	movs	r1, #1
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f000 fefd 	bl	8006918 <__i2b>
 8005b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b20:	4604      	mov	r4, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f340 8086 	ble.w	8005c34 <_dtoa_r+0x8dc>
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f000 ffb1 	bl	8006a94 <__pow5mult>
 8005b32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b34:	4604      	mov	r4, r0
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	dd7f      	ble.n	8005c3a <_dtoa_r+0x8e2>
 8005b3a:	f04f 0800 	mov.w	r8, #0
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b44:	6918      	ldr	r0, [r3, #16]
 8005b46:	f000 fe99 	bl	800687c <__hi0bits>
 8005b4a:	f1c0 0020 	rsb	r0, r0, #32
 8005b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b50:	4418      	add	r0, r3
 8005b52:	f010 001f 	ands.w	r0, r0, #31
 8005b56:	f000 8092 	beq.w	8005c7e <_dtoa_r+0x926>
 8005b5a:	f1c0 0320 	rsb	r3, r0, #32
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	f340 808a 	ble.w	8005c78 <_dtoa_r+0x920>
 8005b64:	f1c0 001c 	rsb	r0, r0, #28
 8005b68:	9b06      	ldr	r3, [sp, #24]
 8005b6a:	4407      	add	r7, r0
 8005b6c:	4403      	add	r3, r0
 8005b6e:	9306      	str	r3, [sp, #24]
 8005b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b72:	4403      	add	r3, r0
 8005b74:	9309      	str	r3, [sp, #36]	; 0x24
 8005b76:	9b06      	ldr	r3, [sp, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dd05      	ble.n	8005b88 <_dtoa_r+0x830>
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 ffe1 	bl	8006b48 <__lshift>
 8005b86:	4683      	mov	fp, r0
 8005b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dd05      	ble.n	8005b9a <_dtoa_r+0x842>
 8005b8e:	4621      	mov	r1, r4
 8005b90:	461a      	mov	r2, r3
 8005b92:	4628      	mov	r0, r5
 8005b94:	f000 ffd8 	bl	8006b48 <__lshift>
 8005b98:	4604      	mov	r4, r0
 8005b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d070      	beq.n	8005c82 <_dtoa_r+0x92a>
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	4658      	mov	r0, fp
 8005ba4:	f001 f840 	bl	8006c28 <__mcmp>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	da6a      	bge.n	8005c82 <_dtoa_r+0x92a>
 8005bac:	2300      	movs	r3, #0
 8005bae:	4659      	mov	r1, fp
 8005bb0:	220a      	movs	r2, #10
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f000 fdd2 	bl	800675c <__multadd>
 8005bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bba:	4683      	mov	fp, r0
 8005bbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8194 	beq.w	8005eee <_dtoa_r+0xb96>
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	2300      	movs	r3, #0
 8005bca:	220a      	movs	r2, #10
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 fdc5 	bl	800675c <__multadd>
 8005bd2:	f1b9 0f00 	cmp.w	r9, #0
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	f300 8093 	bgt.w	8005d02 <_dtoa_r+0x9aa>
 8005bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	dc57      	bgt.n	8005c92 <_dtoa_r+0x93a>
 8005be2:	e08e      	b.n	8005d02 <_dtoa_r+0x9aa>
 8005be4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005be6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bea:	e757      	b.n	8005a9c <_dtoa_r+0x744>
 8005bec:	9b08      	ldr	r3, [sp, #32]
 8005bee:	1e5c      	subs	r4, r3, #1
 8005bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf2:	42a3      	cmp	r3, r4
 8005bf4:	bfb7      	itett	lt
 8005bf6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005bf8:	1b1c      	subge	r4, r3, r4
 8005bfa:	1ae2      	sublt	r2, r4, r3
 8005bfc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005bfe:	bfbe      	ittt	lt
 8005c00:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005c02:	189b      	addlt	r3, r3, r2
 8005c04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005c06:	9b08      	ldr	r3, [sp, #32]
 8005c08:	bfb8      	it	lt
 8005c0a:	2400      	movlt	r4, #0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bfbb      	ittet	lt
 8005c10:	9b06      	ldrlt	r3, [sp, #24]
 8005c12:	9a08      	ldrlt	r2, [sp, #32]
 8005c14:	9f06      	ldrge	r7, [sp, #24]
 8005c16:	1a9f      	sublt	r7, r3, r2
 8005c18:	bfac      	ite	ge
 8005c1a:	9b08      	ldrge	r3, [sp, #32]
 8005c1c:	2300      	movlt	r3, #0
 8005c1e:	e73f      	b.n	8005aa0 <_dtoa_r+0x748>
 8005c20:	3fe00000 	.word	0x3fe00000
 8005c24:	40240000 	.word	0x40240000
 8005c28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c2a:	9f06      	ldr	r7, [sp, #24]
 8005c2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005c2e:	e742      	b.n	8005ab6 <_dtoa_r+0x75e>
 8005c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c32:	e76b      	b.n	8005b0c <_dtoa_r+0x7b4>
 8005c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	dc19      	bgt.n	8005c6e <_dtoa_r+0x916>
 8005c3a:	9b04      	ldr	r3, [sp, #16]
 8005c3c:	b9bb      	cbnz	r3, 8005c6e <_dtoa_r+0x916>
 8005c3e:	9b05      	ldr	r3, [sp, #20]
 8005c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c44:	b99b      	cbnz	r3, 8005c6e <_dtoa_r+0x916>
 8005c46:	9b05      	ldr	r3, [sp, #20]
 8005c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c4c:	0d1b      	lsrs	r3, r3, #20
 8005c4e:	051b      	lsls	r3, r3, #20
 8005c50:	b183      	cbz	r3, 8005c74 <_dtoa_r+0x91c>
 8005c52:	f04f 0801 	mov.w	r8, #1
 8005c56:	9b06      	ldr	r3, [sp, #24]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	9306      	str	r3, [sp, #24]
 8005c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5e:	3301      	adds	r3, #1
 8005c60:	9309      	str	r3, [sp, #36]	; 0x24
 8005c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f47f af6a 	bne.w	8005b3e <_dtoa_r+0x7e6>
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	e76f      	b.n	8005b4e <_dtoa_r+0x7f6>
 8005c6e:	f04f 0800 	mov.w	r8, #0
 8005c72:	e7f6      	b.n	8005c62 <_dtoa_r+0x90a>
 8005c74:	4698      	mov	r8, r3
 8005c76:	e7f4      	b.n	8005c62 <_dtoa_r+0x90a>
 8005c78:	f43f af7d 	beq.w	8005b76 <_dtoa_r+0x81e>
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	301c      	adds	r0, #28
 8005c80:	e772      	b.n	8005b68 <_dtoa_r+0x810>
 8005c82:	9b08      	ldr	r3, [sp, #32]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dc36      	bgt.n	8005cf6 <_dtoa_r+0x99e>
 8005c88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	dd33      	ble.n	8005cf6 <_dtoa_r+0x99e>
 8005c8e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c92:	f1b9 0f00 	cmp.w	r9, #0
 8005c96:	d10d      	bne.n	8005cb4 <_dtoa_r+0x95c>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f000 fd5c 	bl	800675c <__multadd>
 8005ca4:	4601      	mov	r1, r0
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4658      	mov	r0, fp
 8005caa:	f000 ffbd 	bl	8006c28 <__mcmp>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f73f adb8 	bgt.w	8005824 <_dtoa_r+0x4cc>
 8005cb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cb6:	9f03      	ldr	r7, [sp, #12]
 8005cb8:	ea6f 0a03 	mvn.w	sl, r3
 8005cbc:	f04f 0800 	mov.w	r8, #0
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 fd28 	bl	8006718 <_Bfree>
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	f43f aea7 	beq.w	8005a1c <_dtoa_r+0x6c4>
 8005cce:	f1b8 0f00 	cmp.w	r8, #0
 8005cd2:	d005      	beq.n	8005ce0 <_dtoa_r+0x988>
 8005cd4:	45b0      	cmp	r8, r6
 8005cd6:	d003      	beq.n	8005ce0 <_dtoa_r+0x988>
 8005cd8:	4641      	mov	r1, r8
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 fd1c 	bl	8006718 <_Bfree>
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 fd18 	bl	8006718 <_Bfree>
 8005ce8:	e698      	b.n	8005a1c <_dtoa_r+0x6c4>
 8005cea:	2400      	movs	r4, #0
 8005cec:	4626      	mov	r6, r4
 8005cee:	e7e1      	b.n	8005cb4 <_dtoa_r+0x95c>
 8005cf0:	46c2      	mov	sl, r8
 8005cf2:	4626      	mov	r6, r4
 8005cf4:	e596      	b.n	8005824 <_dtoa_r+0x4cc>
 8005cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80fd 	beq.w	8005efc <_dtoa_r+0xba4>
 8005d02:	2f00      	cmp	r7, #0
 8005d04:	dd05      	ble.n	8005d12 <_dtoa_r+0x9ba>
 8005d06:	4631      	mov	r1, r6
 8005d08:	463a      	mov	r2, r7
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f000 ff1c 	bl	8006b48 <__lshift>
 8005d10:	4606      	mov	r6, r0
 8005d12:	f1b8 0f00 	cmp.w	r8, #0
 8005d16:	d05c      	beq.n	8005dd2 <_dtoa_r+0xa7a>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	6871      	ldr	r1, [r6, #4]
 8005d1c:	f000 fcbc 	bl	8006698 <_Balloc>
 8005d20:	4607      	mov	r7, r0
 8005d22:	b928      	cbnz	r0, 8005d30 <_dtoa_r+0x9d8>
 8005d24:	4602      	mov	r2, r0
 8005d26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d2a:	4b7f      	ldr	r3, [pc, #508]	; (8005f28 <_dtoa_r+0xbd0>)
 8005d2c:	f7ff bb28 	b.w	8005380 <_dtoa_r+0x28>
 8005d30:	6932      	ldr	r2, [r6, #16]
 8005d32:	f106 010c 	add.w	r1, r6, #12
 8005d36:	3202      	adds	r2, #2
 8005d38:	0092      	lsls	r2, r2, #2
 8005d3a:	300c      	adds	r0, #12
 8005d3c:	f000 fc9e 	bl	800667c <memcpy>
 8005d40:	2201      	movs	r2, #1
 8005d42:	4639      	mov	r1, r7
 8005d44:	4628      	mov	r0, r5
 8005d46:	f000 feff 	bl	8006b48 <__lshift>
 8005d4a:	46b0      	mov	r8, r6
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	9b03      	ldr	r3, [sp, #12]
 8005d50:	3301      	adds	r3, #1
 8005d52:	9308      	str	r3, [sp, #32]
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	444b      	add	r3, r9
 8005d58:	930a      	str	r3, [sp, #40]	; 0x28
 8005d5a:	9b04      	ldr	r3, [sp, #16]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	9309      	str	r3, [sp, #36]	; 0x24
 8005d62:	9b08      	ldr	r3, [sp, #32]
 8005d64:	4621      	mov	r1, r4
 8005d66:	3b01      	subs	r3, #1
 8005d68:	4658      	mov	r0, fp
 8005d6a:	9304      	str	r3, [sp, #16]
 8005d6c:	f7ff fa66 	bl	800523c <quorem>
 8005d70:	4603      	mov	r3, r0
 8005d72:	4641      	mov	r1, r8
 8005d74:	3330      	adds	r3, #48	; 0x30
 8005d76:	9006      	str	r0, [sp, #24]
 8005d78:	4658      	mov	r0, fp
 8005d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d7c:	f000 ff54 	bl	8006c28 <__mcmp>
 8005d80:	4632      	mov	r2, r6
 8005d82:	4681      	mov	r9, r0
 8005d84:	4621      	mov	r1, r4
 8005d86:	4628      	mov	r0, r5
 8005d88:	f000 ff6a 	bl	8006c60 <__mdiff>
 8005d8c:	68c2      	ldr	r2, [r0, #12]
 8005d8e:	4607      	mov	r7, r0
 8005d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d92:	bb02      	cbnz	r2, 8005dd6 <_dtoa_r+0xa7e>
 8005d94:	4601      	mov	r1, r0
 8005d96:	4658      	mov	r0, fp
 8005d98:	f000 ff46 	bl	8006c28 <__mcmp>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da0:	4639      	mov	r1, r7
 8005da2:	4628      	mov	r0, r5
 8005da4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005da8:	f000 fcb6 	bl	8006718 <_Bfree>
 8005dac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005db0:	9f08      	ldr	r7, [sp, #32]
 8005db2:	ea43 0102 	orr.w	r1, r3, r2
 8005db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db8:	430b      	orrs	r3, r1
 8005dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dbc:	d10d      	bne.n	8005dda <_dtoa_r+0xa82>
 8005dbe:	2b39      	cmp	r3, #57	; 0x39
 8005dc0:	d029      	beq.n	8005e16 <_dtoa_r+0xabe>
 8005dc2:	f1b9 0f00 	cmp.w	r9, #0
 8005dc6:	dd01      	ble.n	8005dcc <_dtoa_r+0xa74>
 8005dc8:	9b06      	ldr	r3, [sp, #24]
 8005dca:	3331      	adds	r3, #49	; 0x31
 8005dcc:	9a04      	ldr	r2, [sp, #16]
 8005dce:	7013      	strb	r3, [r2, #0]
 8005dd0:	e776      	b.n	8005cc0 <_dtoa_r+0x968>
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	e7b9      	b.n	8005d4a <_dtoa_r+0x9f2>
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	e7e2      	b.n	8005da0 <_dtoa_r+0xa48>
 8005dda:	f1b9 0f00 	cmp.w	r9, #0
 8005dde:	db06      	blt.n	8005dee <_dtoa_r+0xa96>
 8005de0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005de2:	ea41 0909 	orr.w	r9, r1, r9
 8005de6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005de8:	ea59 0101 	orrs.w	r1, r9, r1
 8005dec:	d120      	bne.n	8005e30 <_dtoa_r+0xad8>
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	ddec      	ble.n	8005dcc <_dtoa_r+0xa74>
 8005df2:	4659      	mov	r1, fp
 8005df4:	2201      	movs	r2, #1
 8005df6:	4628      	mov	r0, r5
 8005df8:	9308      	str	r3, [sp, #32]
 8005dfa:	f000 fea5 	bl	8006b48 <__lshift>
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4683      	mov	fp, r0
 8005e02:	f000 ff11 	bl	8006c28 <__mcmp>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	9b08      	ldr	r3, [sp, #32]
 8005e0a:	dc02      	bgt.n	8005e12 <_dtoa_r+0xaba>
 8005e0c:	d1de      	bne.n	8005dcc <_dtoa_r+0xa74>
 8005e0e:	07da      	lsls	r2, r3, #31
 8005e10:	d5dc      	bpl.n	8005dcc <_dtoa_r+0xa74>
 8005e12:	2b39      	cmp	r3, #57	; 0x39
 8005e14:	d1d8      	bne.n	8005dc8 <_dtoa_r+0xa70>
 8005e16:	2339      	movs	r3, #57	; 0x39
 8005e18:	9a04      	ldr	r2, [sp, #16]
 8005e1a:	7013      	strb	r3, [r2, #0]
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	461f      	mov	r7, r3
 8005e20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	2a39      	cmp	r2, #57	; 0x39
 8005e28:	d050      	beq.n	8005ecc <_dtoa_r+0xb74>
 8005e2a:	3201      	adds	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e747      	b.n	8005cc0 <_dtoa_r+0x968>
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	dd03      	ble.n	8005e3c <_dtoa_r+0xae4>
 8005e34:	2b39      	cmp	r3, #57	; 0x39
 8005e36:	d0ee      	beq.n	8005e16 <_dtoa_r+0xabe>
 8005e38:	3301      	adds	r3, #1
 8005e3a:	e7c7      	b.n	8005dcc <_dtoa_r+0xa74>
 8005e3c:	9a08      	ldr	r2, [sp, #32]
 8005e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e44:	428a      	cmp	r2, r1
 8005e46:	d02a      	beq.n	8005e9e <_dtoa_r+0xb46>
 8005e48:	4659      	mov	r1, fp
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	220a      	movs	r2, #10
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f000 fc84 	bl	800675c <__multadd>
 8005e54:	45b0      	cmp	r8, r6
 8005e56:	4683      	mov	fp, r0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	f04f 020a 	mov.w	r2, #10
 8005e60:	4641      	mov	r1, r8
 8005e62:	4628      	mov	r0, r5
 8005e64:	d107      	bne.n	8005e76 <_dtoa_r+0xb1e>
 8005e66:	f000 fc79 	bl	800675c <__multadd>
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	9b08      	ldr	r3, [sp, #32]
 8005e70:	3301      	adds	r3, #1
 8005e72:	9308      	str	r3, [sp, #32]
 8005e74:	e775      	b.n	8005d62 <_dtoa_r+0xa0a>
 8005e76:	f000 fc71 	bl	800675c <__multadd>
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	2300      	movs	r3, #0
 8005e80:	220a      	movs	r2, #10
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 fc6a 	bl	800675c <__multadd>
 8005e88:	4606      	mov	r6, r0
 8005e8a:	e7f0      	b.n	8005e6e <_dtoa_r+0xb16>
 8005e8c:	f1b9 0f00 	cmp.w	r9, #0
 8005e90:	bfcc      	ite	gt
 8005e92:	464f      	movgt	r7, r9
 8005e94:	2701      	movle	r7, #1
 8005e96:	f04f 0800 	mov.w	r8, #0
 8005e9a:	9a03      	ldr	r2, [sp, #12]
 8005e9c:	4417      	add	r7, r2
 8005e9e:	4659      	mov	r1, fp
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	9308      	str	r3, [sp, #32]
 8005ea6:	f000 fe4f 	bl	8006b48 <__lshift>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4683      	mov	fp, r0
 8005eae:	f000 febb 	bl	8006c28 <__mcmp>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	dcb2      	bgt.n	8005e1c <_dtoa_r+0xac4>
 8005eb6:	d102      	bne.n	8005ebe <_dtoa_r+0xb66>
 8005eb8:	9b08      	ldr	r3, [sp, #32]
 8005eba:	07db      	lsls	r3, r3, #31
 8005ebc:	d4ae      	bmi.n	8005e1c <_dtoa_r+0xac4>
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	461f      	mov	r7, r3
 8005ec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ec6:	2a30      	cmp	r2, #48	; 0x30
 8005ec8:	d0fa      	beq.n	8005ec0 <_dtoa_r+0xb68>
 8005eca:	e6f9      	b.n	8005cc0 <_dtoa_r+0x968>
 8005ecc:	9a03      	ldr	r2, [sp, #12]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d1a5      	bne.n	8005e1e <_dtoa_r+0xac6>
 8005ed2:	2331      	movs	r3, #49	; 0x31
 8005ed4:	f10a 0a01 	add.w	sl, sl, #1
 8005ed8:	e779      	b.n	8005dce <_dtoa_r+0xa76>
 8005eda:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <_dtoa_r+0xbd4>)
 8005edc:	f7ff baa8 	b.w	8005430 <_dtoa_r+0xd8>
 8005ee0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f47f aa81 	bne.w	80053ea <_dtoa_r+0x92>
 8005ee8:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <_dtoa_r+0xbd8>)
 8005eea:	f7ff baa1 	b.w	8005430 <_dtoa_r+0xd8>
 8005eee:	f1b9 0f00 	cmp.w	r9, #0
 8005ef2:	dc03      	bgt.n	8005efc <_dtoa_r+0xba4>
 8005ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	f73f aecb 	bgt.w	8005c92 <_dtoa_r+0x93a>
 8005efc:	9f03      	ldr	r7, [sp, #12]
 8005efe:	4621      	mov	r1, r4
 8005f00:	4658      	mov	r0, fp
 8005f02:	f7ff f99b 	bl	800523c <quorem>
 8005f06:	9a03      	ldr	r2, [sp, #12]
 8005f08:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f0c:	f807 3b01 	strb.w	r3, [r7], #1
 8005f10:	1aba      	subs	r2, r7, r2
 8005f12:	4591      	cmp	r9, r2
 8005f14:	ddba      	ble.n	8005e8c <_dtoa_r+0xb34>
 8005f16:	4659      	mov	r1, fp
 8005f18:	2300      	movs	r3, #0
 8005f1a:	220a      	movs	r2, #10
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 fc1d 	bl	800675c <__multadd>
 8005f22:	4683      	mov	fp, r0
 8005f24:	e7eb      	b.n	8005efe <_dtoa_r+0xba6>
 8005f26:	bf00      	nop
 8005f28:	08008321 	.word	0x08008321
 8005f2c:	08008088 	.word	0x08008088
 8005f30:	080082b9 	.word	0x080082b9

08005f34 <fiprintf>:
 8005f34:	b40e      	push	{r1, r2, r3}
 8005f36:	b503      	push	{r0, r1, lr}
 8005f38:	4601      	mov	r1, r0
 8005f3a:	ab03      	add	r3, sp, #12
 8005f3c:	4805      	ldr	r0, [pc, #20]	; (8005f54 <fiprintf+0x20>)
 8005f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f42:	6800      	ldr	r0, [r0, #0]
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	f001 fad3 	bl	80074f0 <_vfiprintf_r>
 8005f4a:	b002      	add	sp, #8
 8005f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f50:	b003      	add	sp, #12
 8005f52:	4770      	bx	lr
 8005f54:	2000000c 	.word	0x2000000c

08005f58 <rshift>:
 8005f58:	6903      	ldr	r3, [r0, #16]
 8005f5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005f62:	f100 0414 	add.w	r4, r0, #20
 8005f66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005f6a:	dd46      	ble.n	8005ffa <rshift+0xa2>
 8005f6c:	f011 011f 	ands.w	r1, r1, #31
 8005f70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005f74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005f78:	d10c      	bne.n	8005f94 <rshift+0x3c>
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	f100 0710 	add.w	r7, r0, #16
 8005f80:	42b1      	cmp	r1, r6
 8005f82:	d335      	bcc.n	8005ff0 <rshift+0x98>
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	1eea      	subs	r2, r5, #3
 8005f8a:	4296      	cmp	r6, r2
 8005f8c:	bf38      	it	cc
 8005f8e:	2300      	movcc	r3, #0
 8005f90:	4423      	add	r3, r4
 8005f92:	e015      	b.n	8005fc0 <rshift+0x68>
 8005f94:	46a1      	mov	r9, r4
 8005f96:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005f9a:	f1c1 0820 	rsb	r8, r1, #32
 8005f9e:	40cf      	lsrs	r7, r1
 8005fa0:	f105 0e04 	add.w	lr, r5, #4
 8005fa4:	4576      	cmp	r6, lr
 8005fa6:	46f4      	mov	ip, lr
 8005fa8:	d816      	bhi.n	8005fd8 <rshift+0x80>
 8005faa:	1a9a      	subs	r2, r3, r2
 8005fac:	0092      	lsls	r2, r2, #2
 8005fae:	3a04      	subs	r2, #4
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	42ae      	cmp	r6, r5
 8005fb4:	bf38      	it	cc
 8005fb6:	2200      	movcc	r2, #0
 8005fb8:	18a3      	adds	r3, r4, r2
 8005fba:	50a7      	str	r7, [r4, r2]
 8005fbc:	b107      	cbz	r7, 8005fc0 <rshift+0x68>
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	eba3 0204 	sub.w	r2, r3, r4
 8005fc6:	bf08      	it	eq
 8005fc8:	2300      	moveq	r3, #0
 8005fca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005fce:	6102      	str	r2, [r0, #16]
 8005fd0:	bf08      	it	eq
 8005fd2:	6143      	streq	r3, [r0, #20]
 8005fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fd8:	f8dc c000 	ldr.w	ip, [ip]
 8005fdc:	fa0c fc08 	lsl.w	ip, ip, r8
 8005fe0:	ea4c 0707 	orr.w	r7, ip, r7
 8005fe4:	f849 7b04 	str.w	r7, [r9], #4
 8005fe8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005fec:	40cf      	lsrs	r7, r1
 8005fee:	e7d9      	b.n	8005fa4 <rshift+0x4c>
 8005ff0:	f851 cb04 	ldr.w	ip, [r1], #4
 8005ff4:	f847 cf04 	str.w	ip, [r7, #4]!
 8005ff8:	e7c2      	b.n	8005f80 <rshift+0x28>
 8005ffa:	4623      	mov	r3, r4
 8005ffc:	e7e0      	b.n	8005fc0 <rshift+0x68>

08005ffe <__hexdig_fun>:
 8005ffe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006002:	2b09      	cmp	r3, #9
 8006004:	d802      	bhi.n	800600c <__hexdig_fun+0xe>
 8006006:	3820      	subs	r0, #32
 8006008:	b2c0      	uxtb	r0, r0
 800600a:	4770      	bx	lr
 800600c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006010:	2b05      	cmp	r3, #5
 8006012:	d801      	bhi.n	8006018 <__hexdig_fun+0x1a>
 8006014:	3847      	subs	r0, #71	; 0x47
 8006016:	e7f7      	b.n	8006008 <__hexdig_fun+0xa>
 8006018:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800601c:	2b05      	cmp	r3, #5
 800601e:	d801      	bhi.n	8006024 <__hexdig_fun+0x26>
 8006020:	3827      	subs	r0, #39	; 0x27
 8006022:	e7f1      	b.n	8006008 <__hexdig_fun+0xa>
 8006024:	2000      	movs	r0, #0
 8006026:	4770      	bx	lr

08006028 <__gethex>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	b08b      	sub	sp, #44	; 0x2c
 800602e:	9305      	str	r3, [sp, #20]
 8006030:	4bb2      	ldr	r3, [pc, #712]	; (80062fc <__gethex+0x2d4>)
 8006032:	9002      	str	r0, [sp, #8]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	468b      	mov	fp, r1
 8006038:	4618      	mov	r0, r3
 800603a:	4690      	mov	r8, r2
 800603c:	9303      	str	r3, [sp, #12]
 800603e:	f7fa f891 	bl	8000164 <strlen>
 8006042:	4682      	mov	sl, r0
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	f8db 2000 	ldr.w	r2, [fp]
 800604a:	4403      	add	r3, r0
 800604c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006050:	9306      	str	r3, [sp, #24]
 8006052:	1c93      	adds	r3, r2, #2
 8006054:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006058:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800605c:	32fe      	adds	r2, #254	; 0xfe
 800605e:	18d1      	adds	r1, r2, r3
 8006060:	461f      	mov	r7, r3
 8006062:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006066:	9101      	str	r1, [sp, #4]
 8006068:	2830      	cmp	r0, #48	; 0x30
 800606a:	d0f8      	beq.n	800605e <__gethex+0x36>
 800606c:	f7ff ffc7 	bl	8005ffe <__hexdig_fun>
 8006070:	4604      	mov	r4, r0
 8006072:	2800      	cmp	r0, #0
 8006074:	d13a      	bne.n	80060ec <__gethex+0xc4>
 8006076:	4652      	mov	r2, sl
 8006078:	4638      	mov	r0, r7
 800607a:	9903      	ldr	r1, [sp, #12]
 800607c:	f001 fb7e 	bl	800777c <strncmp>
 8006080:	4605      	mov	r5, r0
 8006082:	2800      	cmp	r0, #0
 8006084:	d166      	bne.n	8006154 <__gethex+0x12c>
 8006086:	f817 000a 	ldrb.w	r0, [r7, sl]
 800608a:	eb07 060a 	add.w	r6, r7, sl
 800608e:	f7ff ffb6 	bl	8005ffe <__hexdig_fun>
 8006092:	2800      	cmp	r0, #0
 8006094:	d060      	beq.n	8006158 <__gethex+0x130>
 8006096:	4633      	mov	r3, r6
 8006098:	7818      	ldrb	r0, [r3, #0]
 800609a:	461f      	mov	r7, r3
 800609c:	2830      	cmp	r0, #48	; 0x30
 800609e:	f103 0301 	add.w	r3, r3, #1
 80060a2:	d0f9      	beq.n	8006098 <__gethex+0x70>
 80060a4:	f7ff ffab 	bl	8005ffe <__hexdig_fun>
 80060a8:	2301      	movs	r3, #1
 80060aa:	fab0 f480 	clz	r4, r0
 80060ae:	4635      	mov	r5, r6
 80060b0:	0964      	lsrs	r4, r4, #5
 80060b2:	9301      	str	r3, [sp, #4]
 80060b4:	463a      	mov	r2, r7
 80060b6:	4616      	mov	r6, r2
 80060b8:	7830      	ldrb	r0, [r6, #0]
 80060ba:	3201      	adds	r2, #1
 80060bc:	f7ff ff9f 	bl	8005ffe <__hexdig_fun>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d1f8      	bne.n	80060b6 <__gethex+0x8e>
 80060c4:	4652      	mov	r2, sl
 80060c6:	4630      	mov	r0, r6
 80060c8:	9903      	ldr	r1, [sp, #12]
 80060ca:	f001 fb57 	bl	800777c <strncmp>
 80060ce:	b980      	cbnz	r0, 80060f2 <__gethex+0xca>
 80060d0:	b94d      	cbnz	r5, 80060e6 <__gethex+0xbe>
 80060d2:	eb06 050a 	add.w	r5, r6, sl
 80060d6:	462a      	mov	r2, r5
 80060d8:	4616      	mov	r6, r2
 80060da:	7830      	ldrb	r0, [r6, #0]
 80060dc:	3201      	adds	r2, #1
 80060de:	f7ff ff8e 	bl	8005ffe <__hexdig_fun>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d1f8      	bne.n	80060d8 <__gethex+0xb0>
 80060e6:	1bad      	subs	r5, r5, r6
 80060e8:	00ad      	lsls	r5, r5, #2
 80060ea:	e004      	b.n	80060f6 <__gethex+0xce>
 80060ec:	2400      	movs	r4, #0
 80060ee:	4625      	mov	r5, r4
 80060f0:	e7e0      	b.n	80060b4 <__gethex+0x8c>
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	d1f7      	bne.n	80060e6 <__gethex+0xbe>
 80060f6:	7833      	ldrb	r3, [r6, #0]
 80060f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80060fc:	2b50      	cmp	r3, #80	; 0x50
 80060fe:	d139      	bne.n	8006174 <__gethex+0x14c>
 8006100:	7873      	ldrb	r3, [r6, #1]
 8006102:	2b2b      	cmp	r3, #43	; 0x2b
 8006104:	d02a      	beq.n	800615c <__gethex+0x134>
 8006106:	2b2d      	cmp	r3, #45	; 0x2d
 8006108:	d02c      	beq.n	8006164 <__gethex+0x13c>
 800610a:	f04f 0900 	mov.w	r9, #0
 800610e:	1c71      	adds	r1, r6, #1
 8006110:	7808      	ldrb	r0, [r1, #0]
 8006112:	f7ff ff74 	bl	8005ffe <__hexdig_fun>
 8006116:	1e43      	subs	r3, r0, #1
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b18      	cmp	r3, #24
 800611c:	d82a      	bhi.n	8006174 <__gethex+0x14c>
 800611e:	f1a0 0210 	sub.w	r2, r0, #16
 8006122:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006126:	f7ff ff6a 	bl	8005ffe <__hexdig_fun>
 800612a:	1e43      	subs	r3, r0, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b18      	cmp	r3, #24
 8006130:	d91b      	bls.n	800616a <__gethex+0x142>
 8006132:	f1b9 0f00 	cmp.w	r9, #0
 8006136:	d000      	beq.n	800613a <__gethex+0x112>
 8006138:	4252      	negs	r2, r2
 800613a:	4415      	add	r5, r2
 800613c:	f8cb 1000 	str.w	r1, [fp]
 8006140:	b1d4      	cbz	r4, 8006178 <__gethex+0x150>
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	bf14      	ite	ne
 8006148:	2700      	movne	r7, #0
 800614a:	2706      	moveq	r7, #6
 800614c:	4638      	mov	r0, r7
 800614e:	b00b      	add	sp, #44	; 0x2c
 8006150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006154:	463e      	mov	r6, r7
 8006156:	4625      	mov	r5, r4
 8006158:	2401      	movs	r4, #1
 800615a:	e7cc      	b.n	80060f6 <__gethex+0xce>
 800615c:	f04f 0900 	mov.w	r9, #0
 8006160:	1cb1      	adds	r1, r6, #2
 8006162:	e7d5      	b.n	8006110 <__gethex+0xe8>
 8006164:	f04f 0901 	mov.w	r9, #1
 8006168:	e7fa      	b.n	8006160 <__gethex+0x138>
 800616a:	230a      	movs	r3, #10
 800616c:	fb03 0202 	mla	r2, r3, r2, r0
 8006170:	3a10      	subs	r2, #16
 8006172:	e7d6      	b.n	8006122 <__gethex+0xfa>
 8006174:	4631      	mov	r1, r6
 8006176:	e7e1      	b.n	800613c <__gethex+0x114>
 8006178:	4621      	mov	r1, r4
 800617a:	1bf3      	subs	r3, r6, r7
 800617c:	3b01      	subs	r3, #1
 800617e:	2b07      	cmp	r3, #7
 8006180:	dc0a      	bgt.n	8006198 <__gethex+0x170>
 8006182:	9802      	ldr	r0, [sp, #8]
 8006184:	f000 fa88 	bl	8006698 <_Balloc>
 8006188:	4604      	mov	r4, r0
 800618a:	b940      	cbnz	r0, 800619e <__gethex+0x176>
 800618c:	4602      	mov	r2, r0
 800618e:	21de      	movs	r1, #222	; 0xde
 8006190:	4b5b      	ldr	r3, [pc, #364]	; (8006300 <__gethex+0x2d8>)
 8006192:	485c      	ldr	r0, [pc, #368]	; (8006304 <__gethex+0x2dc>)
 8006194:	f7ff f834 	bl	8005200 <__assert_func>
 8006198:	3101      	adds	r1, #1
 800619a:	105b      	asrs	r3, r3, #1
 800619c:	e7ef      	b.n	800617e <__gethex+0x156>
 800619e:	f04f 0b00 	mov.w	fp, #0
 80061a2:	f100 0914 	add.w	r9, r0, #20
 80061a6:	f1ca 0301 	rsb	r3, sl, #1
 80061aa:	f8cd 9010 	str.w	r9, [sp, #16]
 80061ae:	f8cd b004 	str.w	fp, [sp, #4]
 80061b2:	9308      	str	r3, [sp, #32]
 80061b4:	42b7      	cmp	r7, r6
 80061b6:	d33f      	bcc.n	8006238 <__gethex+0x210>
 80061b8:	9f04      	ldr	r7, [sp, #16]
 80061ba:	9b01      	ldr	r3, [sp, #4]
 80061bc:	f847 3b04 	str.w	r3, [r7], #4
 80061c0:	eba7 0709 	sub.w	r7, r7, r9
 80061c4:	10bf      	asrs	r7, r7, #2
 80061c6:	6127      	str	r7, [r4, #16]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fb57 	bl	800687c <__hi0bits>
 80061ce:	017f      	lsls	r7, r7, #5
 80061d0:	f8d8 6000 	ldr.w	r6, [r8]
 80061d4:	1a3f      	subs	r7, r7, r0
 80061d6:	42b7      	cmp	r7, r6
 80061d8:	dd62      	ble.n	80062a0 <__gethex+0x278>
 80061da:	1bbf      	subs	r7, r7, r6
 80061dc:	4639      	mov	r1, r7
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 fef1 	bl	8006fc6 <__any_on>
 80061e4:	4682      	mov	sl, r0
 80061e6:	b1a8      	cbz	r0, 8006214 <__gethex+0x1ec>
 80061e8:	f04f 0a01 	mov.w	sl, #1
 80061ec:	1e7b      	subs	r3, r7, #1
 80061ee:	1159      	asrs	r1, r3, #5
 80061f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80061f4:	f003 021f 	and.w	r2, r3, #31
 80061f8:	fa0a f202 	lsl.w	r2, sl, r2
 80061fc:	420a      	tst	r2, r1
 80061fe:	d009      	beq.n	8006214 <__gethex+0x1ec>
 8006200:	4553      	cmp	r3, sl
 8006202:	dd05      	ble.n	8006210 <__gethex+0x1e8>
 8006204:	4620      	mov	r0, r4
 8006206:	1eb9      	subs	r1, r7, #2
 8006208:	f000 fedd 	bl	8006fc6 <__any_on>
 800620c:	2800      	cmp	r0, #0
 800620e:	d144      	bne.n	800629a <__gethex+0x272>
 8006210:	f04f 0a02 	mov.w	sl, #2
 8006214:	4639      	mov	r1, r7
 8006216:	4620      	mov	r0, r4
 8006218:	f7ff fe9e 	bl	8005f58 <rshift>
 800621c:	443d      	add	r5, r7
 800621e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006222:	42ab      	cmp	r3, r5
 8006224:	da4a      	bge.n	80062bc <__gethex+0x294>
 8006226:	4621      	mov	r1, r4
 8006228:	9802      	ldr	r0, [sp, #8]
 800622a:	f000 fa75 	bl	8006718 <_Bfree>
 800622e:	2300      	movs	r3, #0
 8006230:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006232:	27a3      	movs	r7, #163	; 0xa3
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	e789      	b.n	800614c <__gethex+0x124>
 8006238:	1e73      	subs	r3, r6, #1
 800623a:	9a06      	ldr	r2, [sp, #24]
 800623c:	9307      	str	r3, [sp, #28]
 800623e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006242:	4293      	cmp	r3, r2
 8006244:	d019      	beq.n	800627a <__gethex+0x252>
 8006246:	f1bb 0f20 	cmp.w	fp, #32
 800624a:	d107      	bne.n	800625c <__gethex+0x234>
 800624c:	9b04      	ldr	r3, [sp, #16]
 800624e:	9a01      	ldr	r2, [sp, #4]
 8006250:	f843 2b04 	str.w	r2, [r3], #4
 8006254:	9304      	str	r3, [sp, #16]
 8006256:	2300      	movs	r3, #0
 8006258:	469b      	mov	fp, r3
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006260:	f7ff fecd 	bl	8005ffe <__hexdig_fun>
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	f000 000f 	and.w	r0, r0, #15
 800626a:	fa00 f00b 	lsl.w	r0, r0, fp
 800626e:	4303      	orrs	r3, r0
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	f10b 0b04 	add.w	fp, fp, #4
 8006276:	9b07      	ldr	r3, [sp, #28]
 8006278:	e00d      	b.n	8006296 <__gethex+0x26e>
 800627a:	9a08      	ldr	r2, [sp, #32]
 800627c:	1e73      	subs	r3, r6, #1
 800627e:	4413      	add	r3, r2
 8006280:	42bb      	cmp	r3, r7
 8006282:	d3e0      	bcc.n	8006246 <__gethex+0x21e>
 8006284:	4618      	mov	r0, r3
 8006286:	4652      	mov	r2, sl
 8006288:	9903      	ldr	r1, [sp, #12]
 800628a:	9309      	str	r3, [sp, #36]	; 0x24
 800628c:	f001 fa76 	bl	800777c <strncmp>
 8006290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006292:	2800      	cmp	r0, #0
 8006294:	d1d7      	bne.n	8006246 <__gethex+0x21e>
 8006296:	461e      	mov	r6, r3
 8006298:	e78c      	b.n	80061b4 <__gethex+0x18c>
 800629a:	f04f 0a03 	mov.w	sl, #3
 800629e:	e7b9      	b.n	8006214 <__gethex+0x1ec>
 80062a0:	da09      	bge.n	80062b6 <__gethex+0x28e>
 80062a2:	1bf7      	subs	r7, r6, r7
 80062a4:	4621      	mov	r1, r4
 80062a6:	463a      	mov	r2, r7
 80062a8:	9802      	ldr	r0, [sp, #8]
 80062aa:	f000 fc4d 	bl	8006b48 <__lshift>
 80062ae:	4604      	mov	r4, r0
 80062b0:	1bed      	subs	r5, r5, r7
 80062b2:	f100 0914 	add.w	r9, r0, #20
 80062b6:	f04f 0a00 	mov.w	sl, #0
 80062ba:	e7b0      	b.n	800621e <__gethex+0x1f6>
 80062bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80062c0:	42a8      	cmp	r0, r5
 80062c2:	dd72      	ble.n	80063aa <__gethex+0x382>
 80062c4:	1b45      	subs	r5, r0, r5
 80062c6:	42ae      	cmp	r6, r5
 80062c8:	dc35      	bgt.n	8006336 <__gethex+0x30e>
 80062ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d029      	beq.n	8006326 <__gethex+0x2fe>
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d02b      	beq.n	800632e <__gethex+0x306>
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d11c      	bne.n	8006314 <__gethex+0x2ec>
 80062da:	42ae      	cmp	r6, r5
 80062dc:	d11a      	bne.n	8006314 <__gethex+0x2ec>
 80062de:	2e01      	cmp	r6, #1
 80062e0:	d112      	bne.n	8006308 <__gethex+0x2e0>
 80062e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80062e6:	9a05      	ldr	r2, [sp, #20]
 80062e8:	2762      	movs	r7, #98	; 0x62
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	2301      	movs	r3, #1
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	f8c9 3000 	str.w	r3, [r9]
 80062f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062f6:	601c      	str	r4, [r3, #0]
 80062f8:	e728      	b.n	800614c <__gethex+0x124>
 80062fa:	bf00      	nop
 80062fc:	08008398 	.word	0x08008398
 8006300:	08008321 	.word	0x08008321
 8006304:	08008332 	.word	0x08008332
 8006308:	4620      	mov	r0, r4
 800630a:	1e71      	subs	r1, r6, #1
 800630c:	f000 fe5b 	bl	8006fc6 <__any_on>
 8006310:	2800      	cmp	r0, #0
 8006312:	d1e6      	bne.n	80062e2 <__gethex+0x2ba>
 8006314:	4621      	mov	r1, r4
 8006316:	9802      	ldr	r0, [sp, #8]
 8006318:	f000 f9fe 	bl	8006718 <_Bfree>
 800631c:	2300      	movs	r3, #0
 800631e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006320:	2750      	movs	r7, #80	; 0x50
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e712      	b.n	800614c <__gethex+0x124>
 8006326:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f3      	bne.n	8006314 <__gethex+0x2ec>
 800632c:	e7d9      	b.n	80062e2 <__gethex+0x2ba>
 800632e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1d6      	bne.n	80062e2 <__gethex+0x2ba>
 8006334:	e7ee      	b.n	8006314 <__gethex+0x2ec>
 8006336:	1e6f      	subs	r7, r5, #1
 8006338:	f1ba 0f00 	cmp.w	sl, #0
 800633c:	d132      	bne.n	80063a4 <__gethex+0x37c>
 800633e:	b127      	cbz	r7, 800634a <__gethex+0x322>
 8006340:	4639      	mov	r1, r7
 8006342:	4620      	mov	r0, r4
 8006344:	f000 fe3f 	bl	8006fc6 <__any_on>
 8006348:	4682      	mov	sl, r0
 800634a:	2101      	movs	r1, #1
 800634c:	117b      	asrs	r3, r7, #5
 800634e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006352:	f007 071f 	and.w	r7, r7, #31
 8006356:	fa01 f707 	lsl.w	r7, r1, r7
 800635a:	421f      	tst	r7, r3
 800635c:	f04f 0702 	mov.w	r7, #2
 8006360:	4629      	mov	r1, r5
 8006362:	4620      	mov	r0, r4
 8006364:	bf18      	it	ne
 8006366:	f04a 0a02 	orrne.w	sl, sl, #2
 800636a:	1b76      	subs	r6, r6, r5
 800636c:	f7ff fdf4 	bl	8005f58 <rshift>
 8006370:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006374:	f1ba 0f00 	cmp.w	sl, #0
 8006378:	d048      	beq.n	800640c <__gethex+0x3e4>
 800637a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d015      	beq.n	80063ae <__gethex+0x386>
 8006382:	2b03      	cmp	r3, #3
 8006384:	d017      	beq.n	80063b6 <__gethex+0x38e>
 8006386:	2b01      	cmp	r3, #1
 8006388:	d109      	bne.n	800639e <__gethex+0x376>
 800638a:	f01a 0f02 	tst.w	sl, #2
 800638e:	d006      	beq.n	800639e <__gethex+0x376>
 8006390:	f8d9 0000 	ldr.w	r0, [r9]
 8006394:	ea4a 0a00 	orr.w	sl, sl, r0
 8006398:	f01a 0f01 	tst.w	sl, #1
 800639c:	d10e      	bne.n	80063bc <__gethex+0x394>
 800639e:	f047 0710 	orr.w	r7, r7, #16
 80063a2:	e033      	b.n	800640c <__gethex+0x3e4>
 80063a4:	f04f 0a01 	mov.w	sl, #1
 80063a8:	e7cf      	b.n	800634a <__gethex+0x322>
 80063aa:	2701      	movs	r7, #1
 80063ac:	e7e2      	b.n	8006374 <__gethex+0x34c>
 80063ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063b0:	f1c3 0301 	rsb	r3, r3, #1
 80063b4:	9315      	str	r3, [sp, #84]	; 0x54
 80063b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0f0      	beq.n	800639e <__gethex+0x376>
 80063bc:	f04f 0c00 	mov.w	ip, #0
 80063c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80063c4:	f104 0314 	add.w	r3, r4, #20
 80063c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80063cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063d6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80063da:	d01c      	beq.n	8006416 <__gethex+0x3ee>
 80063dc:	3201      	adds	r2, #1
 80063de:	6002      	str	r2, [r0, #0]
 80063e0:	2f02      	cmp	r7, #2
 80063e2:	f104 0314 	add.w	r3, r4, #20
 80063e6:	d13d      	bne.n	8006464 <__gethex+0x43c>
 80063e8:	f8d8 2000 	ldr.w	r2, [r8]
 80063ec:	3a01      	subs	r2, #1
 80063ee:	42b2      	cmp	r2, r6
 80063f0:	d10a      	bne.n	8006408 <__gethex+0x3e0>
 80063f2:	2201      	movs	r2, #1
 80063f4:	1171      	asrs	r1, r6, #5
 80063f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063fa:	f006 061f 	and.w	r6, r6, #31
 80063fe:	fa02 f606 	lsl.w	r6, r2, r6
 8006402:	421e      	tst	r6, r3
 8006404:	bf18      	it	ne
 8006406:	4617      	movne	r7, r2
 8006408:	f047 0720 	orr.w	r7, r7, #32
 800640c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800640e:	601c      	str	r4, [r3, #0]
 8006410:	9b05      	ldr	r3, [sp, #20]
 8006412:	601d      	str	r5, [r3, #0]
 8006414:	e69a      	b.n	800614c <__gethex+0x124>
 8006416:	4299      	cmp	r1, r3
 8006418:	f843 cc04 	str.w	ip, [r3, #-4]
 800641c:	d8d8      	bhi.n	80063d0 <__gethex+0x3a8>
 800641e:	68a3      	ldr	r3, [r4, #8]
 8006420:	459b      	cmp	fp, r3
 8006422:	db17      	blt.n	8006454 <__gethex+0x42c>
 8006424:	6861      	ldr	r1, [r4, #4]
 8006426:	9802      	ldr	r0, [sp, #8]
 8006428:	3101      	adds	r1, #1
 800642a:	f000 f935 	bl	8006698 <_Balloc>
 800642e:	4681      	mov	r9, r0
 8006430:	b918      	cbnz	r0, 800643a <__gethex+0x412>
 8006432:	4602      	mov	r2, r0
 8006434:	2184      	movs	r1, #132	; 0x84
 8006436:	4b19      	ldr	r3, [pc, #100]	; (800649c <__gethex+0x474>)
 8006438:	e6ab      	b.n	8006192 <__gethex+0x16a>
 800643a:	6922      	ldr	r2, [r4, #16]
 800643c:	f104 010c 	add.w	r1, r4, #12
 8006440:	3202      	adds	r2, #2
 8006442:	0092      	lsls	r2, r2, #2
 8006444:	300c      	adds	r0, #12
 8006446:	f000 f919 	bl	800667c <memcpy>
 800644a:	4621      	mov	r1, r4
 800644c:	9802      	ldr	r0, [sp, #8]
 800644e:	f000 f963 	bl	8006718 <_Bfree>
 8006452:	464c      	mov	r4, r9
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	6122      	str	r2, [r4, #16]
 800645a:	2201      	movs	r2, #1
 800645c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006460:	615a      	str	r2, [r3, #20]
 8006462:	e7bd      	b.n	80063e0 <__gethex+0x3b8>
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	455a      	cmp	r2, fp
 8006468:	dd0b      	ble.n	8006482 <__gethex+0x45a>
 800646a:	2101      	movs	r1, #1
 800646c:	4620      	mov	r0, r4
 800646e:	f7ff fd73 	bl	8005f58 <rshift>
 8006472:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006476:	3501      	adds	r5, #1
 8006478:	42ab      	cmp	r3, r5
 800647a:	f6ff aed4 	blt.w	8006226 <__gethex+0x1fe>
 800647e:	2701      	movs	r7, #1
 8006480:	e7c2      	b.n	8006408 <__gethex+0x3e0>
 8006482:	f016 061f 	ands.w	r6, r6, #31
 8006486:	d0fa      	beq.n	800647e <__gethex+0x456>
 8006488:	4453      	add	r3, sl
 800648a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800648e:	f000 f9f5 	bl	800687c <__hi0bits>
 8006492:	f1c6 0620 	rsb	r6, r6, #32
 8006496:	42b0      	cmp	r0, r6
 8006498:	dbe7      	blt.n	800646a <__gethex+0x442>
 800649a:	e7f0      	b.n	800647e <__gethex+0x456>
 800649c:	08008321 	.word	0x08008321

080064a0 <L_shift>:
 80064a0:	f1c2 0208 	rsb	r2, r2, #8
 80064a4:	0092      	lsls	r2, r2, #2
 80064a6:	b570      	push	{r4, r5, r6, lr}
 80064a8:	f1c2 0620 	rsb	r6, r2, #32
 80064ac:	6843      	ldr	r3, [r0, #4]
 80064ae:	6804      	ldr	r4, [r0, #0]
 80064b0:	fa03 f506 	lsl.w	r5, r3, r6
 80064b4:	432c      	orrs	r4, r5
 80064b6:	40d3      	lsrs	r3, r2
 80064b8:	6004      	str	r4, [r0, #0]
 80064ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80064be:	4288      	cmp	r0, r1
 80064c0:	d3f4      	bcc.n	80064ac <L_shift+0xc>
 80064c2:	bd70      	pop	{r4, r5, r6, pc}

080064c4 <__match>:
 80064c4:	b530      	push	{r4, r5, lr}
 80064c6:	6803      	ldr	r3, [r0, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ce:	b914      	cbnz	r4, 80064d6 <__match+0x12>
 80064d0:	6003      	str	r3, [r0, #0]
 80064d2:	2001      	movs	r0, #1
 80064d4:	bd30      	pop	{r4, r5, pc}
 80064d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80064de:	2d19      	cmp	r5, #25
 80064e0:	bf98      	it	ls
 80064e2:	3220      	addls	r2, #32
 80064e4:	42a2      	cmp	r2, r4
 80064e6:	d0f0      	beq.n	80064ca <__match+0x6>
 80064e8:	2000      	movs	r0, #0
 80064ea:	e7f3      	b.n	80064d4 <__match+0x10>

080064ec <__hexnan>:
 80064ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f0:	2500      	movs	r5, #0
 80064f2:	680b      	ldr	r3, [r1, #0]
 80064f4:	4682      	mov	sl, r0
 80064f6:	115e      	asrs	r6, r3, #5
 80064f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80064fc:	f013 031f 	ands.w	r3, r3, #31
 8006500:	bf18      	it	ne
 8006502:	3604      	addne	r6, #4
 8006504:	1f37      	subs	r7, r6, #4
 8006506:	46b9      	mov	r9, r7
 8006508:	463c      	mov	r4, r7
 800650a:	46ab      	mov	fp, r5
 800650c:	b087      	sub	sp, #28
 800650e:	4690      	mov	r8, r2
 8006510:	6802      	ldr	r2, [r0, #0]
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	f846 5c04 	str.w	r5, [r6, #-4]
 8006518:	9502      	str	r5, [sp, #8]
 800651a:	7851      	ldrb	r1, [r2, #1]
 800651c:	1c53      	adds	r3, r2, #1
 800651e:	9303      	str	r3, [sp, #12]
 8006520:	b341      	cbz	r1, 8006574 <__hexnan+0x88>
 8006522:	4608      	mov	r0, r1
 8006524:	9205      	str	r2, [sp, #20]
 8006526:	9104      	str	r1, [sp, #16]
 8006528:	f7ff fd69 	bl	8005ffe <__hexdig_fun>
 800652c:	2800      	cmp	r0, #0
 800652e:	d14f      	bne.n	80065d0 <__hexnan+0xe4>
 8006530:	9904      	ldr	r1, [sp, #16]
 8006532:	9a05      	ldr	r2, [sp, #20]
 8006534:	2920      	cmp	r1, #32
 8006536:	d818      	bhi.n	800656a <__hexnan+0x7e>
 8006538:	9b02      	ldr	r3, [sp, #8]
 800653a:	459b      	cmp	fp, r3
 800653c:	dd13      	ble.n	8006566 <__hexnan+0x7a>
 800653e:	454c      	cmp	r4, r9
 8006540:	d206      	bcs.n	8006550 <__hexnan+0x64>
 8006542:	2d07      	cmp	r5, #7
 8006544:	dc04      	bgt.n	8006550 <__hexnan+0x64>
 8006546:	462a      	mov	r2, r5
 8006548:	4649      	mov	r1, r9
 800654a:	4620      	mov	r0, r4
 800654c:	f7ff ffa8 	bl	80064a0 <L_shift>
 8006550:	4544      	cmp	r4, r8
 8006552:	d950      	bls.n	80065f6 <__hexnan+0x10a>
 8006554:	2300      	movs	r3, #0
 8006556:	f1a4 0904 	sub.w	r9, r4, #4
 800655a:	f844 3c04 	str.w	r3, [r4, #-4]
 800655e:	461d      	mov	r5, r3
 8006560:	464c      	mov	r4, r9
 8006562:	f8cd b008 	str.w	fp, [sp, #8]
 8006566:	9a03      	ldr	r2, [sp, #12]
 8006568:	e7d7      	b.n	800651a <__hexnan+0x2e>
 800656a:	2929      	cmp	r1, #41	; 0x29
 800656c:	d156      	bne.n	800661c <__hexnan+0x130>
 800656e:	3202      	adds	r2, #2
 8006570:	f8ca 2000 	str.w	r2, [sl]
 8006574:	f1bb 0f00 	cmp.w	fp, #0
 8006578:	d050      	beq.n	800661c <__hexnan+0x130>
 800657a:	454c      	cmp	r4, r9
 800657c:	d206      	bcs.n	800658c <__hexnan+0xa0>
 800657e:	2d07      	cmp	r5, #7
 8006580:	dc04      	bgt.n	800658c <__hexnan+0xa0>
 8006582:	462a      	mov	r2, r5
 8006584:	4649      	mov	r1, r9
 8006586:	4620      	mov	r0, r4
 8006588:	f7ff ff8a 	bl	80064a0 <L_shift>
 800658c:	4544      	cmp	r4, r8
 800658e:	d934      	bls.n	80065fa <__hexnan+0x10e>
 8006590:	4623      	mov	r3, r4
 8006592:	f1a8 0204 	sub.w	r2, r8, #4
 8006596:	f853 1b04 	ldr.w	r1, [r3], #4
 800659a:	429f      	cmp	r7, r3
 800659c:	f842 1f04 	str.w	r1, [r2, #4]!
 80065a0:	d2f9      	bcs.n	8006596 <__hexnan+0xaa>
 80065a2:	1b3b      	subs	r3, r7, r4
 80065a4:	f023 0303 	bic.w	r3, r3, #3
 80065a8:	3304      	adds	r3, #4
 80065aa:	3401      	adds	r4, #1
 80065ac:	3e03      	subs	r6, #3
 80065ae:	42b4      	cmp	r4, r6
 80065b0:	bf88      	it	hi
 80065b2:	2304      	movhi	r3, #4
 80065b4:	2200      	movs	r2, #0
 80065b6:	4443      	add	r3, r8
 80065b8:	f843 2b04 	str.w	r2, [r3], #4
 80065bc:	429f      	cmp	r7, r3
 80065be:	d2fb      	bcs.n	80065b8 <__hexnan+0xcc>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	b91b      	cbnz	r3, 80065cc <__hexnan+0xe0>
 80065c4:	4547      	cmp	r7, r8
 80065c6:	d127      	bne.n	8006618 <__hexnan+0x12c>
 80065c8:	2301      	movs	r3, #1
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	2005      	movs	r0, #5
 80065ce:	e026      	b.n	800661e <__hexnan+0x132>
 80065d0:	3501      	adds	r5, #1
 80065d2:	2d08      	cmp	r5, #8
 80065d4:	f10b 0b01 	add.w	fp, fp, #1
 80065d8:	dd06      	ble.n	80065e8 <__hexnan+0xfc>
 80065da:	4544      	cmp	r4, r8
 80065dc:	d9c3      	bls.n	8006566 <__hexnan+0x7a>
 80065de:	2300      	movs	r3, #0
 80065e0:	2501      	movs	r5, #1
 80065e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80065e6:	3c04      	subs	r4, #4
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	f000 000f 	and.w	r0, r0, #15
 80065ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80065f2:	6022      	str	r2, [r4, #0]
 80065f4:	e7b7      	b.n	8006566 <__hexnan+0x7a>
 80065f6:	2508      	movs	r5, #8
 80065f8:	e7b5      	b.n	8006566 <__hexnan+0x7a>
 80065fa:	9b01      	ldr	r3, [sp, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0df      	beq.n	80065c0 <__hexnan+0xd4>
 8006600:	f04f 32ff 	mov.w	r2, #4294967295
 8006604:	f1c3 0320 	rsb	r3, r3, #32
 8006608:	fa22 f303 	lsr.w	r3, r2, r3
 800660c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006610:	401a      	ands	r2, r3
 8006612:	f846 2c04 	str.w	r2, [r6, #-4]
 8006616:	e7d3      	b.n	80065c0 <__hexnan+0xd4>
 8006618:	3f04      	subs	r7, #4
 800661a:	e7d1      	b.n	80065c0 <__hexnan+0xd4>
 800661c:	2004      	movs	r0, #4
 800661e:	b007      	add	sp, #28
 8006620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006624 <_localeconv_r>:
 8006624:	4800      	ldr	r0, [pc, #0]	; (8006628 <_localeconv_r+0x4>)
 8006626:	4770      	bx	lr
 8006628:	20000164 	.word	0x20000164

0800662c <malloc>:
 800662c:	4b02      	ldr	r3, [pc, #8]	; (8006638 <malloc+0xc>)
 800662e:	4601      	mov	r1, r0
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	f000 bd65 	b.w	8007100 <_malloc_r>
 8006636:	bf00      	nop
 8006638:	2000000c 	.word	0x2000000c

0800663c <__ascii_mbtowc>:
 800663c:	b082      	sub	sp, #8
 800663e:	b901      	cbnz	r1, 8006642 <__ascii_mbtowc+0x6>
 8006640:	a901      	add	r1, sp, #4
 8006642:	b142      	cbz	r2, 8006656 <__ascii_mbtowc+0x1a>
 8006644:	b14b      	cbz	r3, 800665a <__ascii_mbtowc+0x1e>
 8006646:	7813      	ldrb	r3, [r2, #0]
 8006648:	600b      	str	r3, [r1, #0]
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	1e10      	subs	r0, r2, #0
 800664e:	bf18      	it	ne
 8006650:	2001      	movne	r0, #1
 8006652:	b002      	add	sp, #8
 8006654:	4770      	bx	lr
 8006656:	4610      	mov	r0, r2
 8006658:	e7fb      	b.n	8006652 <__ascii_mbtowc+0x16>
 800665a:	f06f 0001 	mvn.w	r0, #1
 800665e:	e7f8      	b.n	8006652 <__ascii_mbtowc+0x16>

08006660 <memchr>:
 8006660:	4603      	mov	r3, r0
 8006662:	b510      	push	{r4, lr}
 8006664:	b2c9      	uxtb	r1, r1
 8006666:	4402      	add	r2, r0
 8006668:	4293      	cmp	r3, r2
 800666a:	4618      	mov	r0, r3
 800666c:	d101      	bne.n	8006672 <memchr+0x12>
 800666e:	2000      	movs	r0, #0
 8006670:	e003      	b.n	800667a <memchr+0x1a>
 8006672:	7804      	ldrb	r4, [r0, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	428c      	cmp	r4, r1
 8006678:	d1f6      	bne.n	8006668 <memchr+0x8>
 800667a:	bd10      	pop	{r4, pc}

0800667c <memcpy>:
 800667c:	440a      	add	r2, r1
 800667e:	4291      	cmp	r1, r2
 8006680:	f100 33ff 	add.w	r3, r0, #4294967295
 8006684:	d100      	bne.n	8006688 <memcpy+0xc>
 8006686:	4770      	bx	lr
 8006688:	b510      	push	{r4, lr}
 800668a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668e:	4291      	cmp	r1, r2
 8006690:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006694:	d1f9      	bne.n	800668a <memcpy+0xe>
 8006696:	bd10      	pop	{r4, pc}

08006698 <_Balloc>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800669c:	4604      	mov	r4, r0
 800669e:	460d      	mov	r5, r1
 80066a0:	b976      	cbnz	r6, 80066c0 <_Balloc+0x28>
 80066a2:	2010      	movs	r0, #16
 80066a4:	f7ff ffc2 	bl	800662c <malloc>
 80066a8:	4602      	mov	r2, r0
 80066aa:	6260      	str	r0, [r4, #36]	; 0x24
 80066ac:	b920      	cbnz	r0, 80066b8 <_Balloc+0x20>
 80066ae:	2166      	movs	r1, #102	; 0x66
 80066b0:	4b17      	ldr	r3, [pc, #92]	; (8006710 <_Balloc+0x78>)
 80066b2:	4818      	ldr	r0, [pc, #96]	; (8006714 <_Balloc+0x7c>)
 80066b4:	f7fe fda4 	bl	8005200 <__assert_func>
 80066b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066bc:	6006      	str	r6, [r0, #0]
 80066be:	60c6      	str	r6, [r0, #12]
 80066c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066c2:	68f3      	ldr	r3, [r6, #12]
 80066c4:	b183      	cbz	r3, 80066e8 <_Balloc+0x50>
 80066c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066ce:	b9b8      	cbnz	r0, 8006700 <_Balloc+0x68>
 80066d0:	2101      	movs	r1, #1
 80066d2:	fa01 f605 	lsl.w	r6, r1, r5
 80066d6:	1d72      	adds	r2, r6, #5
 80066d8:	4620      	mov	r0, r4
 80066da:	0092      	lsls	r2, r2, #2
 80066dc:	f000 fc94 	bl	8007008 <_calloc_r>
 80066e0:	b160      	cbz	r0, 80066fc <_Balloc+0x64>
 80066e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066e6:	e00e      	b.n	8006706 <_Balloc+0x6e>
 80066e8:	2221      	movs	r2, #33	; 0x21
 80066ea:	2104      	movs	r1, #4
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fc8b 	bl	8007008 <_calloc_r>
 80066f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066f4:	60f0      	str	r0, [r6, #12]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e4      	bne.n	80066c6 <_Balloc+0x2e>
 80066fc:	2000      	movs	r0, #0
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
 8006700:	6802      	ldr	r2, [r0, #0]
 8006702:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006706:	2300      	movs	r3, #0
 8006708:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800670c:	e7f7      	b.n	80066fe <_Balloc+0x66>
 800670e:	bf00      	nop
 8006710:	08008108 	.word	0x08008108
 8006714:	080083ac 	.word	0x080083ac

08006718 <_Bfree>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800671c:	4605      	mov	r5, r0
 800671e:	460c      	mov	r4, r1
 8006720:	b976      	cbnz	r6, 8006740 <_Bfree+0x28>
 8006722:	2010      	movs	r0, #16
 8006724:	f7ff ff82 	bl	800662c <malloc>
 8006728:	4602      	mov	r2, r0
 800672a:	6268      	str	r0, [r5, #36]	; 0x24
 800672c:	b920      	cbnz	r0, 8006738 <_Bfree+0x20>
 800672e:	218a      	movs	r1, #138	; 0x8a
 8006730:	4b08      	ldr	r3, [pc, #32]	; (8006754 <_Bfree+0x3c>)
 8006732:	4809      	ldr	r0, [pc, #36]	; (8006758 <_Bfree+0x40>)
 8006734:	f7fe fd64 	bl	8005200 <__assert_func>
 8006738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800673c:	6006      	str	r6, [r0, #0]
 800673e:	60c6      	str	r6, [r0, #12]
 8006740:	b13c      	cbz	r4, 8006752 <_Bfree+0x3a>
 8006742:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006744:	6862      	ldr	r2, [r4, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800674c:	6021      	str	r1, [r4, #0]
 800674e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006752:	bd70      	pop	{r4, r5, r6, pc}
 8006754:	08008108 	.word	0x08008108
 8006758:	080083ac 	.word	0x080083ac

0800675c <__multadd>:
 800675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006760:	4607      	mov	r7, r0
 8006762:	460c      	mov	r4, r1
 8006764:	461e      	mov	r6, r3
 8006766:	2000      	movs	r0, #0
 8006768:	690d      	ldr	r5, [r1, #16]
 800676a:	f101 0c14 	add.w	ip, r1, #20
 800676e:	f8dc 3000 	ldr.w	r3, [ip]
 8006772:	3001      	adds	r0, #1
 8006774:	b299      	uxth	r1, r3
 8006776:	fb02 6101 	mla	r1, r2, r1, r6
 800677a:	0c1e      	lsrs	r6, r3, #16
 800677c:	0c0b      	lsrs	r3, r1, #16
 800677e:	fb02 3306 	mla	r3, r2, r6, r3
 8006782:	b289      	uxth	r1, r1
 8006784:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006788:	4285      	cmp	r5, r0
 800678a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800678e:	f84c 1b04 	str.w	r1, [ip], #4
 8006792:	dcec      	bgt.n	800676e <__multadd+0x12>
 8006794:	b30e      	cbz	r6, 80067da <__multadd+0x7e>
 8006796:	68a3      	ldr	r3, [r4, #8]
 8006798:	42ab      	cmp	r3, r5
 800679a:	dc19      	bgt.n	80067d0 <__multadd+0x74>
 800679c:	6861      	ldr	r1, [r4, #4]
 800679e:	4638      	mov	r0, r7
 80067a0:	3101      	adds	r1, #1
 80067a2:	f7ff ff79 	bl	8006698 <_Balloc>
 80067a6:	4680      	mov	r8, r0
 80067a8:	b928      	cbnz	r0, 80067b6 <__multadd+0x5a>
 80067aa:	4602      	mov	r2, r0
 80067ac:	21b5      	movs	r1, #181	; 0xb5
 80067ae:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <__multadd+0x84>)
 80067b0:	480c      	ldr	r0, [pc, #48]	; (80067e4 <__multadd+0x88>)
 80067b2:	f7fe fd25 	bl	8005200 <__assert_func>
 80067b6:	6922      	ldr	r2, [r4, #16]
 80067b8:	f104 010c 	add.w	r1, r4, #12
 80067bc:	3202      	adds	r2, #2
 80067be:	0092      	lsls	r2, r2, #2
 80067c0:	300c      	adds	r0, #12
 80067c2:	f7ff ff5b 	bl	800667c <memcpy>
 80067c6:	4621      	mov	r1, r4
 80067c8:	4638      	mov	r0, r7
 80067ca:	f7ff ffa5 	bl	8006718 <_Bfree>
 80067ce:	4644      	mov	r4, r8
 80067d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067d4:	3501      	adds	r5, #1
 80067d6:	615e      	str	r6, [r3, #20]
 80067d8:	6125      	str	r5, [r4, #16]
 80067da:	4620      	mov	r0, r4
 80067dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e0:	08008321 	.word	0x08008321
 80067e4:	080083ac 	.word	0x080083ac

080067e8 <__s2b>:
 80067e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067ec:	4615      	mov	r5, r2
 80067ee:	2209      	movs	r2, #9
 80067f0:	461f      	mov	r7, r3
 80067f2:	3308      	adds	r3, #8
 80067f4:	460c      	mov	r4, r1
 80067f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80067fa:	4606      	mov	r6, r0
 80067fc:	2201      	movs	r2, #1
 80067fe:	2100      	movs	r1, #0
 8006800:	429a      	cmp	r2, r3
 8006802:	db09      	blt.n	8006818 <__s2b+0x30>
 8006804:	4630      	mov	r0, r6
 8006806:	f7ff ff47 	bl	8006698 <_Balloc>
 800680a:	b940      	cbnz	r0, 800681e <__s2b+0x36>
 800680c:	4602      	mov	r2, r0
 800680e:	21ce      	movs	r1, #206	; 0xce
 8006810:	4b18      	ldr	r3, [pc, #96]	; (8006874 <__s2b+0x8c>)
 8006812:	4819      	ldr	r0, [pc, #100]	; (8006878 <__s2b+0x90>)
 8006814:	f7fe fcf4 	bl	8005200 <__assert_func>
 8006818:	0052      	lsls	r2, r2, #1
 800681a:	3101      	adds	r1, #1
 800681c:	e7f0      	b.n	8006800 <__s2b+0x18>
 800681e:	9b08      	ldr	r3, [sp, #32]
 8006820:	2d09      	cmp	r5, #9
 8006822:	6143      	str	r3, [r0, #20]
 8006824:	f04f 0301 	mov.w	r3, #1
 8006828:	6103      	str	r3, [r0, #16]
 800682a:	dd16      	ble.n	800685a <__s2b+0x72>
 800682c:	f104 0909 	add.w	r9, r4, #9
 8006830:	46c8      	mov	r8, r9
 8006832:	442c      	add	r4, r5
 8006834:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006838:	4601      	mov	r1, r0
 800683a:	220a      	movs	r2, #10
 800683c:	4630      	mov	r0, r6
 800683e:	3b30      	subs	r3, #48	; 0x30
 8006840:	f7ff ff8c 	bl	800675c <__multadd>
 8006844:	45a0      	cmp	r8, r4
 8006846:	d1f5      	bne.n	8006834 <__s2b+0x4c>
 8006848:	f1a5 0408 	sub.w	r4, r5, #8
 800684c:	444c      	add	r4, r9
 800684e:	1b2d      	subs	r5, r5, r4
 8006850:	1963      	adds	r3, r4, r5
 8006852:	42bb      	cmp	r3, r7
 8006854:	db04      	blt.n	8006860 <__s2b+0x78>
 8006856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685a:	2509      	movs	r5, #9
 800685c:	340a      	adds	r4, #10
 800685e:	e7f6      	b.n	800684e <__s2b+0x66>
 8006860:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006864:	4601      	mov	r1, r0
 8006866:	220a      	movs	r2, #10
 8006868:	4630      	mov	r0, r6
 800686a:	3b30      	subs	r3, #48	; 0x30
 800686c:	f7ff ff76 	bl	800675c <__multadd>
 8006870:	e7ee      	b.n	8006850 <__s2b+0x68>
 8006872:	bf00      	nop
 8006874:	08008321 	.word	0x08008321
 8006878:	080083ac 	.word	0x080083ac

0800687c <__hi0bits>:
 800687c:	0c02      	lsrs	r2, r0, #16
 800687e:	0412      	lsls	r2, r2, #16
 8006880:	4603      	mov	r3, r0
 8006882:	b9ca      	cbnz	r2, 80068b8 <__hi0bits+0x3c>
 8006884:	0403      	lsls	r3, r0, #16
 8006886:	2010      	movs	r0, #16
 8006888:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800688c:	bf04      	itt	eq
 800688e:	021b      	lsleq	r3, r3, #8
 8006890:	3008      	addeq	r0, #8
 8006892:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006896:	bf04      	itt	eq
 8006898:	011b      	lsleq	r3, r3, #4
 800689a:	3004      	addeq	r0, #4
 800689c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80068a0:	bf04      	itt	eq
 80068a2:	009b      	lsleq	r3, r3, #2
 80068a4:	3002      	addeq	r0, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	db05      	blt.n	80068b6 <__hi0bits+0x3a>
 80068aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80068ae:	f100 0001 	add.w	r0, r0, #1
 80068b2:	bf08      	it	eq
 80068b4:	2020      	moveq	r0, #32
 80068b6:	4770      	bx	lr
 80068b8:	2000      	movs	r0, #0
 80068ba:	e7e5      	b.n	8006888 <__hi0bits+0xc>

080068bc <__lo0bits>:
 80068bc:	6803      	ldr	r3, [r0, #0]
 80068be:	4602      	mov	r2, r0
 80068c0:	f013 0007 	ands.w	r0, r3, #7
 80068c4:	d00b      	beq.n	80068de <__lo0bits+0x22>
 80068c6:	07d9      	lsls	r1, r3, #31
 80068c8:	d421      	bmi.n	800690e <__lo0bits+0x52>
 80068ca:	0798      	lsls	r0, r3, #30
 80068cc:	bf49      	itett	mi
 80068ce:	085b      	lsrmi	r3, r3, #1
 80068d0:	089b      	lsrpl	r3, r3, #2
 80068d2:	2001      	movmi	r0, #1
 80068d4:	6013      	strmi	r3, [r2, #0]
 80068d6:	bf5c      	itt	pl
 80068d8:	2002      	movpl	r0, #2
 80068da:	6013      	strpl	r3, [r2, #0]
 80068dc:	4770      	bx	lr
 80068de:	b299      	uxth	r1, r3
 80068e0:	b909      	cbnz	r1, 80068e6 <__lo0bits+0x2a>
 80068e2:	2010      	movs	r0, #16
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	b2d9      	uxtb	r1, r3
 80068e8:	b909      	cbnz	r1, 80068ee <__lo0bits+0x32>
 80068ea:	3008      	adds	r0, #8
 80068ec:	0a1b      	lsrs	r3, r3, #8
 80068ee:	0719      	lsls	r1, r3, #28
 80068f0:	bf04      	itt	eq
 80068f2:	091b      	lsreq	r3, r3, #4
 80068f4:	3004      	addeq	r0, #4
 80068f6:	0799      	lsls	r1, r3, #30
 80068f8:	bf04      	itt	eq
 80068fa:	089b      	lsreq	r3, r3, #2
 80068fc:	3002      	addeq	r0, #2
 80068fe:	07d9      	lsls	r1, r3, #31
 8006900:	d403      	bmi.n	800690a <__lo0bits+0x4e>
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	f100 0001 	add.w	r0, r0, #1
 8006908:	d003      	beq.n	8006912 <__lo0bits+0x56>
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	4770      	bx	lr
 800690e:	2000      	movs	r0, #0
 8006910:	4770      	bx	lr
 8006912:	2020      	movs	r0, #32
 8006914:	4770      	bx	lr
	...

08006918 <__i2b>:
 8006918:	b510      	push	{r4, lr}
 800691a:	460c      	mov	r4, r1
 800691c:	2101      	movs	r1, #1
 800691e:	f7ff febb 	bl	8006698 <_Balloc>
 8006922:	4602      	mov	r2, r0
 8006924:	b928      	cbnz	r0, 8006932 <__i2b+0x1a>
 8006926:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800692a:	4b04      	ldr	r3, [pc, #16]	; (800693c <__i2b+0x24>)
 800692c:	4804      	ldr	r0, [pc, #16]	; (8006940 <__i2b+0x28>)
 800692e:	f7fe fc67 	bl	8005200 <__assert_func>
 8006932:	2301      	movs	r3, #1
 8006934:	6144      	str	r4, [r0, #20]
 8006936:	6103      	str	r3, [r0, #16]
 8006938:	bd10      	pop	{r4, pc}
 800693a:	bf00      	nop
 800693c:	08008321 	.word	0x08008321
 8006940:	080083ac 	.word	0x080083ac

08006944 <__multiply>:
 8006944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006948:	4691      	mov	r9, r2
 800694a:	690a      	ldr	r2, [r1, #16]
 800694c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006950:	460c      	mov	r4, r1
 8006952:	429a      	cmp	r2, r3
 8006954:	bfbe      	ittt	lt
 8006956:	460b      	movlt	r3, r1
 8006958:	464c      	movlt	r4, r9
 800695a:	4699      	movlt	r9, r3
 800695c:	6927      	ldr	r7, [r4, #16]
 800695e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006962:	68a3      	ldr	r3, [r4, #8]
 8006964:	6861      	ldr	r1, [r4, #4]
 8006966:	eb07 060a 	add.w	r6, r7, sl
 800696a:	42b3      	cmp	r3, r6
 800696c:	b085      	sub	sp, #20
 800696e:	bfb8      	it	lt
 8006970:	3101      	addlt	r1, #1
 8006972:	f7ff fe91 	bl	8006698 <_Balloc>
 8006976:	b930      	cbnz	r0, 8006986 <__multiply+0x42>
 8006978:	4602      	mov	r2, r0
 800697a:	f240 115d 	movw	r1, #349	; 0x15d
 800697e:	4b43      	ldr	r3, [pc, #268]	; (8006a8c <__multiply+0x148>)
 8006980:	4843      	ldr	r0, [pc, #268]	; (8006a90 <__multiply+0x14c>)
 8006982:	f7fe fc3d 	bl	8005200 <__assert_func>
 8006986:	f100 0514 	add.w	r5, r0, #20
 800698a:	462b      	mov	r3, r5
 800698c:	2200      	movs	r2, #0
 800698e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006992:	4543      	cmp	r3, r8
 8006994:	d321      	bcc.n	80069da <__multiply+0x96>
 8006996:	f104 0314 	add.w	r3, r4, #20
 800699a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800699e:	f109 0314 	add.w	r3, r9, #20
 80069a2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80069a6:	9202      	str	r2, [sp, #8]
 80069a8:	1b3a      	subs	r2, r7, r4
 80069aa:	3a15      	subs	r2, #21
 80069ac:	f022 0203 	bic.w	r2, r2, #3
 80069b0:	3204      	adds	r2, #4
 80069b2:	f104 0115 	add.w	r1, r4, #21
 80069b6:	428f      	cmp	r7, r1
 80069b8:	bf38      	it	cc
 80069ba:	2204      	movcc	r2, #4
 80069bc:	9201      	str	r2, [sp, #4]
 80069be:	9a02      	ldr	r2, [sp, #8]
 80069c0:	9303      	str	r3, [sp, #12]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d80c      	bhi.n	80069e0 <__multiply+0x9c>
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	dd03      	ble.n	80069d2 <__multiply+0x8e>
 80069ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d059      	beq.n	8006a86 <__multiply+0x142>
 80069d2:	6106      	str	r6, [r0, #16]
 80069d4:	b005      	add	sp, #20
 80069d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069da:	f843 2b04 	str.w	r2, [r3], #4
 80069de:	e7d8      	b.n	8006992 <__multiply+0x4e>
 80069e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80069e4:	f1ba 0f00 	cmp.w	sl, #0
 80069e8:	d023      	beq.n	8006a32 <__multiply+0xee>
 80069ea:	46a9      	mov	r9, r5
 80069ec:	f04f 0c00 	mov.w	ip, #0
 80069f0:	f104 0e14 	add.w	lr, r4, #20
 80069f4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80069f8:	f8d9 1000 	ldr.w	r1, [r9]
 80069fc:	fa1f fb82 	uxth.w	fp, r2
 8006a00:	b289      	uxth	r1, r1
 8006a02:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a06:	4461      	add	r1, ip
 8006a08:	f8d9 c000 	ldr.w	ip, [r9]
 8006a0c:	0c12      	lsrs	r2, r2, #16
 8006a0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006a12:	fb0a c202 	mla	r2, sl, r2, ip
 8006a16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a1a:	b289      	uxth	r1, r1
 8006a1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a20:	4577      	cmp	r7, lr
 8006a22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a26:	f849 1b04 	str.w	r1, [r9], #4
 8006a2a:	d8e3      	bhi.n	80069f4 <__multiply+0xb0>
 8006a2c:	9a01      	ldr	r2, [sp, #4]
 8006a2e:	f845 c002 	str.w	ip, [r5, r2]
 8006a32:	9a03      	ldr	r2, [sp, #12]
 8006a34:	3304      	adds	r3, #4
 8006a36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a3a:	f1b9 0f00 	cmp.w	r9, #0
 8006a3e:	d020      	beq.n	8006a82 <__multiply+0x13e>
 8006a40:	46ae      	mov	lr, r5
 8006a42:	f04f 0a00 	mov.w	sl, #0
 8006a46:	6829      	ldr	r1, [r5, #0]
 8006a48:	f104 0c14 	add.w	ip, r4, #20
 8006a4c:	f8bc b000 	ldrh.w	fp, [ip]
 8006a50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a54:	b289      	uxth	r1, r1
 8006a56:	fb09 220b 	mla	r2, r9, fp, r2
 8006a5a:	4492      	add	sl, r2
 8006a5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a60:	f84e 1b04 	str.w	r1, [lr], #4
 8006a64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a68:	f8be 1000 	ldrh.w	r1, [lr]
 8006a6c:	0c12      	lsrs	r2, r2, #16
 8006a6e:	fb09 1102 	mla	r1, r9, r2, r1
 8006a72:	4567      	cmp	r7, ip
 8006a74:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a7c:	d8e6      	bhi.n	8006a4c <__multiply+0x108>
 8006a7e:	9a01      	ldr	r2, [sp, #4]
 8006a80:	50a9      	str	r1, [r5, r2]
 8006a82:	3504      	adds	r5, #4
 8006a84:	e79b      	b.n	80069be <__multiply+0x7a>
 8006a86:	3e01      	subs	r6, #1
 8006a88:	e79d      	b.n	80069c6 <__multiply+0x82>
 8006a8a:	bf00      	nop
 8006a8c:	08008321 	.word	0x08008321
 8006a90:	080083ac 	.word	0x080083ac

08006a94 <__pow5mult>:
 8006a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a98:	4615      	mov	r5, r2
 8006a9a:	f012 0203 	ands.w	r2, r2, #3
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460f      	mov	r7, r1
 8006aa2:	d007      	beq.n	8006ab4 <__pow5mult+0x20>
 8006aa4:	4c25      	ldr	r4, [pc, #148]	; (8006b3c <__pow5mult+0xa8>)
 8006aa6:	3a01      	subs	r2, #1
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006aae:	f7ff fe55 	bl	800675c <__multadd>
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	10ad      	asrs	r5, r5, #2
 8006ab6:	d03d      	beq.n	8006b34 <__pow5mult+0xa0>
 8006ab8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006aba:	b97c      	cbnz	r4, 8006adc <__pow5mult+0x48>
 8006abc:	2010      	movs	r0, #16
 8006abe:	f7ff fdb5 	bl	800662c <malloc>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6270      	str	r0, [r6, #36]	; 0x24
 8006ac6:	b928      	cbnz	r0, 8006ad4 <__pow5mult+0x40>
 8006ac8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006acc:	4b1c      	ldr	r3, [pc, #112]	; (8006b40 <__pow5mult+0xac>)
 8006ace:	481d      	ldr	r0, [pc, #116]	; (8006b44 <__pow5mult+0xb0>)
 8006ad0:	f7fe fb96 	bl	8005200 <__assert_func>
 8006ad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ad8:	6004      	str	r4, [r0, #0]
 8006ada:	60c4      	str	r4, [r0, #12]
 8006adc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ae4:	b94c      	cbnz	r4, 8006afa <__pow5mult+0x66>
 8006ae6:	f240 2171 	movw	r1, #625	; 0x271
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7ff ff14 	bl	8006918 <__i2b>
 8006af0:	2300      	movs	r3, #0
 8006af2:	4604      	mov	r4, r0
 8006af4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006af8:	6003      	str	r3, [r0, #0]
 8006afa:	f04f 0900 	mov.w	r9, #0
 8006afe:	07eb      	lsls	r3, r5, #31
 8006b00:	d50a      	bpl.n	8006b18 <__pow5mult+0x84>
 8006b02:	4639      	mov	r1, r7
 8006b04:	4622      	mov	r2, r4
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7ff ff1c 	bl	8006944 <__multiply>
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	4639      	mov	r1, r7
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7ff fe01 	bl	8006718 <_Bfree>
 8006b16:	4647      	mov	r7, r8
 8006b18:	106d      	asrs	r5, r5, #1
 8006b1a:	d00b      	beq.n	8006b34 <__pow5mult+0xa0>
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	b938      	cbnz	r0, 8006b30 <__pow5mult+0x9c>
 8006b20:	4622      	mov	r2, r4
 8006b22:	4621      	mov	r1, r4
 8006b24:	4630      	mov	r0, r6
 8006b26:	f7ff ff0d 	bl	8006944 <__multiply>
 8006b2a:	6020      	str	r0, [r4, #0]
 8006b2c:	f8c0 9000 	str.w	r9, [r0]
 8006b30:	4604      	mov	r4, r0
 8006b32:	e7e4      	b.n	8006afe <__pow5mult+0x6a>
 8006b34:	4638      	mov	r0, r7
 8006b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3a:	bf00      	nop
 8006b3c:	080084f8 	.word	0x080084f8
 8006b40:	08008108 	.word	0x08008108
 8006b44:	080083ac 	.word	0x080083ac

08006b48 <__lshift>:
 8006b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	4607      	mov	r7, r0
 8006b50:	4691      	mov	r9, r2
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	6849      	ldr	r1, [r1, #4]
 8006b56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b5a:	68a3      	ldr	r3, [r4, #8]
 8006b5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b60:	f108 0601 	add.w	r6, r8, #1
 8006b64:	42b3      	cmp	r3, r6
 8006b66:	db0b      	blt.n	8006b80 <__lshift+0x38>
 8006b68:	4638      	mov	r0, r7
 8006b6a:	f7ff fd95 	bl	8006698 <_Balloc>
 8006b6e:	4605      	mov	r5, r0
 8006b70:	b948      	cbnz	r0, 8006b86 <__lshift+0x3e>
 8006b72:	4602      	mov	r2, r0
 8006b74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b78:	4b29      	ldr	r3, [pc, #164]	; (8006c20 <__lshift+0xd8>)
 8006b7a:	482a      	ldr	r0, [pc, #168]	; (8006c24 <__lshift+0xdc>)
 8006b7c:	f7fe fb40 	bl	8005200 <__assert_func>
 8006b80:	3101      	adds	r1, #1
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	e7ee      	b.n	8006b64 <__lshift+0x1c>
 8006b86:	2300      	movs	r3, #0
 8006b88:	f100 0114 	add.w	r1, r0, #20
 8006b8c:	f100 0210 	add.w	r2, r0, #16
 8006b90:	4618      	mov	r0, r3
 8006b92:	4553      	cmp	r3, sl
 8006b94:	db37      	blt.n	8006c06 <__lshift+0xbe>
 8006b96:	6920      	ldr	r0, [r4, #16]
 8006b98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b9c:	f104 0314 	add.w	r3, r4, #20
 8006ba0:	f019 091f 	ands.w	r9, r9, #31
 8006ba4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ba8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006bac:	d02f      	beq.n	8006c0e <__lshift+0xc6>
 8006bae:	468a      	mov	sl, r1
 8006bb0:	f04f 0c00 	mov.w	ip, #0
 8006bb4:	f1c9 0e20 	rsb	lr, r9, #32
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	fa02 f209 	lsl.w	r2, r2, r9
 8006bbe:	ea42 020c 	orr.w	r2, r2, ip
 8006bc2:	f84a 2b04 	str.w	r2, [sl], #4
 8006bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bca:	4298      	cmp	r0, r3
 8006bcc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006bd0:	d8f2      	bhi.n	8006bb8 <__lshift+0x70>
 8006bd2:	1b03      	subs	r3, r0, r4
 8006bd4:	3b15      	subs	r3, #21
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	3304      	adds	r3, #4
 8006bdc:	f104 0215 	add.w	r2, r4, #21
 8006be0:	4290      	cmp	r0, r2
 8006be2:	bf38      	it	cc
 8006be4:	2304      	movcc	r3, #4
 8006be6:	f841 c003 	str.w	ip, [r1, r3]
 8006bea:	f1bc 0f00 	cmp.w	ip, #0
 8006bee:	d001      	beq.n	8006bf4 <__lshift+0xac>
 8006bf0:	f108 0602 	add.w	r6, r8, #2
 8006bf4:	3e01      	subs	r6, #1
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	612e      	str	r6, [r5, #16]
 8006bfc:	f7ff fd8c 	bl	8006718 <_Bfree>
 8006c00:	4628      	mov	r0, r5
 8006c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c06:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	e7c1      	b.n	8006b92 <__lshift+0x4a>
 8006c0e:	3904      	subs	r1, #4
 8006c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c14:	4298      	cmp	r0, r3
 8006c16:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c1a:	d8f9      	bhi.n	8006c10 <__lshift+0xc8>
 8006c1c:	e7ea      	b.n	8006bf4 <__lshift+0xac>
 8006c1e:	bf00      	nop
 8006c20:	08008321 	.word	0x08008321
 8006c24:	080083ac 	.word	0x080083ac

08006c28 <__mcmp>:
 8006c28:	4603      	mov	r3, r0
 8006c2a:	690a      	ldr	r2, [r1, #16]
 8006c2c:	6900      	ldr	r0, [r0, #16]
 8006c2e:	b530      	push	{r4, r5, lr}
 8006c30:	1a80      	subs	r0, r0, r2
 8006c32:	d10d      	bne.n	8006c50 <__mcmp+0x28>
 8006c34:	3314      	adds	r3, #20
 8006c36:	3114      	adds	r1, #20
 8006c38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c48:	4295      	cmp	r5, r2
 8006c4a:	d002      	beq.n	8006c52 <__mcmp+0x2a>
 8006c4c:	d304      	bcc.n	8006c58 <__mcmp+0x30>
 8006c4e:	2001      	movs	r0, #1
 8006c50:	bd30      	pop	{r4, r5, pc}
 8006c52:	42a3      	cmp	r3, r4
 8006c54:	d3f4      	bcc.n	8006c40 <__mcmp+0x18>
 8006c56:	e7fb      	b.n	8006c50 <__mcmp+0x28>
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	e7f8      	b.n	8006c50 <__mcmp+0x28>
	...

08006c60 <__mdiff>:
 8006c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	460d      	mov	r5, r1
 8006c66:	4607      	mov	r7, r0
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	f7ff ffdb 	bl	8006c28 <__mcmp>
 8006c72:	1e06      	subs	r6, r0, #0
 8006c74:	d111      	bne.n	8006c9a <__mdiff+0x3a>
 8006c76:	4631      	mov	r1, r6
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f7ff fd0d 	bl	8006698 <_Balloc>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	b928      	cbnz	r0, 8006c8e <__mdiff+0x2e>
 8006c82:	f240 2132 	movw	r1, #562	; 0x232
 8006c86:	4b3a      	ldr	r3, [pc, #232]	; (8006d70 <__mdiff+0x110>)
 8006c88:	483a      	ldr	r0, [pc, #232]	; (8006d74 <__mdiff+0x114>)
 8006c8a:	f7fe fab9 	bl	8005200 <__assert_func>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006c94:	4610      	mov	r0, r2
 8006c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9a:	bfa4      	itt	ge
 8006c9c:	4623      	movge	r3, r4
 8006c9e:	462c      	movge	r4, r5
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	6861      	ldr	r1, [r4, #4]
 8006ca4:	bfa6      	itte	ge
 8006ca6:	461d      	movge	r5, r3
 8006ca8:	2600      	movge	r6, #0
 8006caa:	2601      	movlt	r6, #1
 8006cac:	f7ff fcf4 	bl	8006698 <_Balloc>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	b918      	cbnz	r0, 8006cbc <__mdiff+0x5c>
 8006cb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006cb8:	4b2d      	ldr	r3, [pc, #180]	; (8006d70 <__mdiff+0x110>)
 8006cba:	e7e5      	b.n	8006c88 <__mdiff+0x28>
 8006cbc:	f102 0814 	add.w	r8, r2, #20
 8006cc0:	46c2      	mov	sl, r8
 8006cc2:	f04f 0c00 	mov.w	ip, #0
 8006cc6:	6927      	ldr	r7, [r4, #16]
 8006cc8:	60c6      	str	r6, [r0, #12]
 8006cca:	692e      	ldr	r6, [r5, #16]
 8006ccc:	f104 0014 	add.w	r0, r4, #20
 8006cd0:	f105 0914 	add.w	r9, r5, #20
 8006cd4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006cd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006cdc:	3410      	adds	r4, #16
 8006cde:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006ce2:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ce6:	fa1f f18b 	uxth.w	r1, fp
 8006cea:	448c      	add	ip, r1
 8006cec:	b299      	uxth	r1, r3
 8006cee:	0c1b      	lsrs	r3, r3, #16
 8006cf0:	ebac 0101 	sub.w	r1, ip, r1
 8006cf4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006cf8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006cfc:	b289      	uxth	r1, r1
 8006cfe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006d02:	454e      	cmp	r6, r9
 8006d04:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d08:	f84a 3b04 	str.w	r3, [sl], #4
 8006d0c:	d8e7      	bhi.n	8006cde <__mdiff+0x7e>
 8006d0e:	1b73      	subs	r3, r6, r5
 8006d10:	3b15      	subs	r3, #21
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	3515      	adds	r5, #21
 8006d18:	3304      	adds	r3, #4
 8006d1a:	42ae      	cmp	r6, r5
 8006d1c:	bf38      	it	cc
 8006d1e:	2304      	movcc	r3, #4
 8006d20:	4418      	add	r0, r3
 8006d22:	4443      	add	r3, r8
 8006d24:	461e      	mov	r6, r3
 8006d26:	4605      	mov	r5, r0
 8006d28:	4575      	cmp	r5, lr
 8006d2a:	d30e      	bcc.n	8006d4a <__mdiff+0xea>
 8006d2c:	f10e 0103 	add.w	r1, lr, #3
 8006d30:	1a09      	subs	r1, r1, r0
 8006d32:	f021 0103 	bic.w	r1, r1, #3
 8006d36:	3803      	subs	r0, #3
 8006d38:	4586      	cmp	lr, r0
 8006d3a:	bf38      	it	cc
 8006d3c:	2100      	movcc	r1, #0
 8006d3e:	4419      	add	r1, r3
 8006d40:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006d44:	b18b      	cbz	r3, 8006d6a <__mdiff+0x10a>
 8006d46:	6117      	str	r7, [r2, #16]
 8006d48:	e7a4      	b.n	8006c94 <__mdiff+0x34>
 8006d4a:	f855 8b04 	ldr.w	r8, [r5], #4
 8006d4e:	fa1f f188 	uxth.w	r1, r8
 8006d52:	4461      	add	r1, ip
 8006d54:	140c      	asrs	r4, r1, #16
 8006d56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d5a:	b289      	uxth	r1, r1
 8006d5c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006d60:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006d64:	f846 1b04 	str.w	r1, [r6], #4
 8006d68:	e7de      	b.n	8006d28 <__mdiff+0xc8>
 8006d6a:	3f01      	subs	r7, #1
 8006d6c:	e7e8      	b.n	8006d40 <__mdiff+0xe0>
 8006d6e:	bf00      	nop
 8006d70:	08008321 	.word	0x08008321
 8006d74:	080083ac 	.word	0x080083ac

08006d78 <__ulp>:
 8006d78:	4b11      	ldr	r3, [pc, #68]	; (8006dc0 <__ulp+0x48>)
 8006d7a:	400b      	ands	r3, r1
 8006d7c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dd02      	ble.n	8006d8a <__ulp+0x12>
 8006d84:	2000      	movs	r0, #0
 8006d86:	4619      	mov	r1, r3
 8006d88:	4770      	bx	lr
 8006d8a:	425b      	negs	r3, r3
 8006d8c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006d90:	f04f 0000 	mov.w	r0, #0
 8006d94:	f04f 0100 	mov.w	r1, #0
 8006d98:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006d9c:	da04      	bge.n	8006da8 <__ulp+0x30>
 8006d9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006da2:	fa43 f102 	asr.w	r1, r3, r2
 8006da6:	4770      	bx	lr
 8006da8:	f1a2 0314 	sub.w	r3, r2, #20
 8006dac:	2b1e      	cmp	r3, #30
 8006dae:	bfd6      	itet	le
 8006db0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006db4:	2301      	movgt	r3, #1
 8006db6:	fa22 f303 	lsrle.w	r3, r2, r3
 8006dba:	4618      	mov	r0, r3
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	7ff00000 	.word	0x7ff00000

08006dc4 <__b2d>:
 8006dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc8:	6907      	ldr	r7, [r0, #16]
 8006dca:	f100 0914 	add.w	r9, r0, #20
 8006dce:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006dd2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006dd6:	f1a7 0804 	sub.w	r8, r7, #4
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7ff fd4e 	bl	800687c <__hi0bits>
 8006de0:	f1c0 0320 	rsb	r3, r0, #32
 8006de4:	280a      	cmp	r0, #10
 8006de6:	600b      	str	r3, [r1, #0]
 8006de8:	491f      	ldr	r1, [pc, #124]	; (8006e68 <__b2d+0xa4>)
 8006dea:	dc17      	bgt.n	8006e1c <__b2d+0x58>
 8006dec:	45c1      	cmp	r9, r8
 8006dee:	bf28      	it	cs
 8006df0:	2200      	movcs	r2, #0
 8006df2:	f1c0 0c0b 	rsb	ip, r0, #11
 8006df6:	fa26 f30c 	lsr.w	r3, r6, ip
 8006dfa:	bf38      	it	cc
 8006dfc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006e00:	ea43 0501 	orr.w	r5, r3, r1
 8006e04:	f100 0315 	add.w	r3, r0, #21
 8006e08:	fa06 f303 	lsl.w	r3, r6, r3
 8006e0c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006e10:	ea43 0402 	orr.w	r4, r3, r2
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1c:	45c1      	cmp	r9, r8
 8006e1e:	bf2e      	itee	cs
 8006e20:	2200      	movcs	r2, #0
 8006e22:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006e26:	f1a7 0808 	subcc.w	r8, r7, #8
 8006e2a:	f1b0 030b 	subs.w	r3, r0, #11
 8006e2e:	d016      	beq.n	8006e5e <__b2d+0x9a>
 8006e30:	f1c3 0720 	rsb	r7, r3, #32
 8006e34:	fa22 f107 	lsr.w	r1, r2, r7
 8006e38:	45c8      	cmp	r8, r9
 8006e3a:	fa06 f603 	lsl.w	r6, r6, r3
 8006e3e:	ea46 0601 	orr.w	r6, r6, r1
 8006e42:	bf94      	ite	ls
 8006e44:	2100      	movls	r1, #0
 8006e46:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006e4a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006e4e:	fa02 f003 	lsl.w	r0, r2, r3
 8006e52:	40f9      	lsrs	r1, r7
 8006e54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006e58:	ea40 0401 	orr.w	r4, r0, r1
 8006e5c:	e7da      	b.n	8006e14 <__b2d+0x50>
 8006e5e:	4614      	mov	r4, r2
 8006e60:	ea46 0501 	orr.w	r5, r6, r1
 8006e64:	e7d6      	b.n	8006e14 <__b2d+0x50>
 8006e66:	bf00      	nop
 8006e68:	3ff00000 	.word	0x3ff00000

08006e6c <__d2b>:
 8006e6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006e70:	2101      	movs	r1, #1
 8006e72:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006e76:	4690      	mov	r8, r2
 8006e78:	461d      	mov	r5, r3
 8006e7a:	f7ff fc0d 	bl	8006698 <_Balloc>
 8006e7e:	4604      	mov	r4, r0
 8006e80:	b930      	cbnz	r0, 8006e90 <__d2b+0x24>
 8006e82:	4602      	mov	r2, r0
 8006e84:	f240 310a 	movw	r1, #778	; 0x30a
 8006e88:	4b24      	ldr	r3, [pc, #144]	; (8006f1c <__d2b+0xb0>)
 8006e8a:	4825      	ldr	r0, [pc, #148]	; (8006f20 <__d2b+0xb4>)
 8006e8c:	f7fe f9b8 	bl	8005200 <__assert_func>
 8006e90:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006e94:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006e98:	bb2d      	cbnz	r5, 8006ee6 <__d2b+0x7a>
 8006e9a:	9301      	str	r3, [sp, #4]
 8006e9c:	f1b8 0300 	subs.w	r3, r8, #0
 8006ea0:	d026      	beq.n	8006ef0 <__d2b+0x84>
 8006ea2:	4668      	mov	r0, sp
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	f7ff fd09 	bl	80068bc <__lo0bits>
 8006eaa:	9900      	ldr	r1, [sp, #0]
 8006eac:	b1f0      	cbz	r0, 8006eec <__d2b+0x80>
 8006eae:	9a01      	ldr	r2, [sp, #4]
 8006eb0:	f1c0 0320 	rsb	r3, r0, #32
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	40c2      	lsrs	r2, r0
 8006ebc:	6163      	str	r3, [r4, #20]
 8006ebe:	9201      	str	r2, [sp, #4]
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bf14      	ite	ne
 8006ec6:	2102      	movne	r1, #2
 8006ec8:	2101      	moveq	r1, #1
 8006eca:	61a3      	str	r3, [r4, #24]
 8006ecc:	6121      	str	r1, [r4, #16]
 8006ece:	b1c5      	cbz	r5, 8006f02 <__d2b+0x96>
 8006ed0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ed4:	4405      	add	r5, r0
 8006ed6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006eda:	603d      	str	r5, [r7, #0]
 8006edc:	6030      	str	r0, [r6, #0]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	b002      	add	sp, #8
 8006ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eea:	e7d6      	b.n	8006e9a <__d2b+0x2e>
 8006eec:	6161      	str	r1, [r4, #20]
 8006eee:	e7e7      	b.n	8006ec0 <__d2b+0x54>
 8006ef0:	a801      	add	r0, sp, #4
 8006ef2:	f7ff fce3 	bl	80068bc <__lo0bits>
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	9b01      	ldr	r3, [sp, #4]
 8006efa:	6121      	str	r1, [r4, #16]
 8006efc:	6163      	str	r3, [r4, #20]
 8006efe:	3020      	adds	r0, #32
 8006f00:	e7e5      	b.n	8006ece <__d2b+0x62>
 8006f02:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006f06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f0a:	6038      	str	r0, [r7, #0]
 8006f0c:	6918      	ldr	r0, [r3, #16]
 8006f0e:	f7ff fcb5 	bl	800687c <__hi0bits>
 8006f12:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006f16:	6031      	str	r1, [r6, #0]
 8006f18:	e7e1      	b.n	8006ede <__d2b+0x72>
 8006f1a:	bf00      	nop
 8006f1c:	08008321 	.word	0x08008321
 8006f20:	080083ac 	.word	0x080083ac

08006f24 <__ratio>:
 8006f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	4688      	mov	r8, r1
 8006f2a:	4669      	mov	r1, sp
 8006f2c:	4681      	mov	r9, r0
 8006f2e:	f7ff ff49 	bl	8006dc4 <__b2d>
 8006f32:	460f      	mov	r7, r1
 8006f34:	4604      	mov	r4, r0
 8006f36:	460d      	mov	r5, r1
 8006f38:	4640      	mov	r0, r8
 8006f3a:	a901      	add	r1, sp, #4
 8006f3c:	f7ff ff42 	bl	8006dc4 <__b2d>
 8006f40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006f48:	468b      	mov	fp, r1
 8006f4a:	eba3 0c02 	sub.w	ip, r3, r2
 8006f4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bfd5      	itete	le
 8006f5c:	460a      	movle	r2, r1
 8006f5e:	462a      	movgt	r2, r5
 8006f60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f64:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006f68:	bfd8      	it	le
 8006f6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006f6e:	465b      	mov	r3, fp
 8006f70:	4602      	mov	r2, r0
 8006f72:	4639      	mov	r1, r7
 8006f74:	4620      	mov	r0, r4
 8006f76:	f7f9 fbe3 	bl	8000740 <__aeabi_ddiv>
 8006f7a:	b003      	add	sp, #12
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f80 <__copybits>:
 8006f80:	3901      	subs	r1, #1
 8006f82:	b570      	push	{r4, r5, r6, lr}
 8006f84:	1149      	asrs	r1, r1, #5
 8006f86:	6914      	ldr	r4, [r2, #16]
 8006f88:	3101      	adds	r1, #1
 8006f8a:	f102 0314 	add.w	r3, r2, #20
 8006f8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f96:	1f05      	subs	r5, r0, #4
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	d30c      	bcc.n	8006fb6 <__copybits+0x36>
 8006f9c:	1aa3      	subs	r3, r4, r2
 8006f9e:	3b11      	subs	r3, #17
 8006fa0:	f023 0303 	bic.w	r3, r3, #3
 8006fa4:	3211      	adds	r2, #17
 8006fa6:	42a2      	cmp	r2, r4
 8006fa8:	bf88      	it	hi
 8006faa:	2300      	movhi	r3, #0
 8006fac:	4418      	add	r0, r3
 8006fae:	2300      	movs	r3, #0
 8006fb0:	4288      	cmp	r0, r1
 8006fb2:	d305      	bcc.n	8006fc0 <__copybits+0x40>
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
 8006fb6:	f853 6b04 	ldr.w	r6, [r3], #4
 8006fba:	f845 6f04 	str.w	r6, [r5, #4]!
 8006fbe:	e7eb      	b.n	8006f98 <__copybits+0x18>
 8006fc0:	f840 3b04 	str.w	r3, [r0], #4
 8006fc4:	e7f4      	b.n	8006fb0 <__copybits+0x30>

08006fc6 <__any_on>:
 8006fc6:	f100 0214 	add.w	r2, r0, #20
 8006fca:	6900      	ldr	r0, [r0, #16]
 8006fcc:	114b      	asrs	r3, r1, #5
 8006fce:	4298      	cmp	r0, r3
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	db11      	blt.n	8006ff8 <__any_on+0x32>
 8006fd4:	dd0a      	ble.n	8006fec <__any_on+0x26>
 8006fd6:	f011 011f 	ands.w	r1, r1, #31
 8006fda:	d007      	beq.n	8006fec <__any_on+0x26>
 8006fdc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006fe0:	fa24 f001 	lsr.w	r0, r4, r1
 8006fe4:	fa00 f101 	lsl.w	r1, r0, r1
 8006fe8:	428c      	cmp	r4, r1
 8006fea:	d10b      	bne.n	8007004 <__any_on+0x3e>
 8006fec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d803      	bhi.n	8006ffc <__any_on+0x36>
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	bd10      	pop	{r4, pc}
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	e7f7      	b.n	8006fec <__any_on+0x26>
 8006ffc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007000:	2900      	cmp	r1, #0
 8007002:	d0f5      	beq.n	8006ff0 <__any_on+0x2a>
 8007004:	2001      	movs	r0, #1
 8007006:	e7f6      	b.n	8006ff6 <__any_on+0x30>

08007008 <_calloc_r>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	fba1 5402 	umull	r5, r4, r1, r2
 800700e:	b934      	cbnz	r4, 800701e <_calloc_r+0x16>
 8007010:	4629      	mov	r1, r5
 8007012:	f000 f875 	bl	8007100 <_malloc_r>
 8007016:	4606      	mov	r6, r0
 8007018:	b928      	cbnz	r0, 8007026 <_calloc_r+0x1e>
 800701a:	4630      	mov	r0, r6
 800701c:	bd70      	pop	{r4, r5, r6, pc}
 800701e:	220c      	movs	r2, #12
 8007020:	2600      	movs	r6, #0
 8007022:	6002      	str	r2, [r0, #0]
 8007024:	e7f9      	b.n	800701a <_calloc_r+0x12>
 8007026:	462a      	mov	r2, r5
 8007028:	4621      	mov	r1, r4
 800702a:	f7fc fb53 	bl	80036d4 <memset>
 800702e:	e7f4      	b.n	800701a <_calloc_r+0x12>

08007030 <_free_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4605      	mov	r5, r0
 8007034:	2900      	cmp	r1, #0
 8007036:	d040      	beq.n	80070ba <_free_r+0x8a>
 8007038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800703c:	1f0c      	subs	r4, r1, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	bfb8      	it	lt
 8007042:	18e4      	addlt	r4, r4, r3
 8007044:	f000 feba 	bl	8007dbc <__malloc_lock>
 8007048:	4a1c      	ldr	r2, [pc, #112]	; (80070bc <_free_r+0x8c>)
 800704a:	6813      	ldr	r3, [r2, #0]
 800704c:	b933      	cbnz	r3, 800705c <_free_r+0x2c>
 800704e:	6063      	str	r3, [r4, #4]
 8007050:	6014      	str	r4, [r2, #0]
 8007052:	4628      	mov	r0, r5
 8007054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007058:	f000 beb6 	b.w	8007dc8 <__malloc_unlock>
 800705c:	42a3      	cmp	r3, r4
 800705e:	d908      	bls.n	8007072 <_free_r+0x42>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	1821      	adds	r1, r4, r0
 8007064:	428b      	cmp	r3, r1
 8007066:	bf01      	itttt	eq
 8007068:	6819      	ldreq	r1, [r3, #0]
 800706a:	685b      	ldreq	r3, [r3, #4]
 800706c:	1809      	addeq	r1, r1, r0
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	e7ed      	b.n	800704e <_free_r+0x1e>
 8007072:	461a      	mov	r2, r3
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	b10b      	cbz	r3, 800707c <_free_r+0x4c>
 8007078:	42a3      	cmp	r3, r4
 800707a:	d9fa      	bls.n	8007072 <_free_r+0x42>
 800707c:	6811      	ldr	r1, [r2, #0]
 800707e:	1850      	adds	r0, r2, r1
 8007080:	42a0      	cmp	r0, r4
 8007082:	d10b      	bne.n	800709c <_free_r+0x6c>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	4401      	add	r1, r0
 8007088:	1850      	adds	r0, r2, r1
 800708a:	4283      	cmp	r3, r0
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	d1e0      	bne.n	8007052 <_free_r+0x22>
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	4401      	add	r1, r0
 8007096:	6011      	str	r1, [r2, #0]
 8007098:	6053      	str	r3, [r2, #4]
 800709a:	e7da      	b.n	8007052 <_free_r+0x22>
 800709c:	d902      	bls.n	80070a4 <_free_r+0x74>
 800709e:	230c      	movs	r3, #12
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	e7d6      	b.n	8007052 <_free_r+0x22>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	1821      	adds	r1, r4, r0
 80070a8:	428b      	cmp	r3, r1
 80070aa:	bf01      	itttt	eq
 80070ac:	6819      	ldreq	r1, [r3, #0]
 80070ae:	685b      	ldreq	r3, [r3, #4]
 80070b0:	1809      	addeq	r1, r1, r0
 80070b2:	6021      	streq	r1, [r4, #0]
 80070b4:	6063      	str	r3, [r4, #4]
 80070b6:	6054      	str	r4, [r2, #4]
 80070b8:	e7cb      	b.n	8007052 <_free_r+0x22>
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	2000054c 	.word	0x2000054c

080070c0 <sbrk_aligned>:
 80070c0:	b570      	push	{r4, r5, r6, lr}
 80070c2:	4e0e      	ldr	r6, [pc, #56]	; (80070fc <sbrk_aligned+0x3c>)
 80070c4:	460c      	mov	r4, r1
 80070c6:	6831      	ldr	r1, [r6, #0]
 80070c8:	4605      	mov	r5, r0
 80070ca:	b911      	cbnz	r1, 80070d2 <sbrk_aligned+0x12>
 80070cc:	f000 fb46 	bl	800775c <_sbrk_r>
 80070d0:	6030      	str	r0, [r6, #0]
 80070d2:	4621      	mov	r1, r4
 80070d4:	4628      	mov	r0, r5
 80070d6:	f000 fb41 	bl	800775c <_sbrk_r>
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	d00a      	beq.n	80070f4 <sbrk_aligned+0x34>
 80070de:	1cc4      	adds	r4, r0, #3
 80070e0:	f024 0403 	bic.w	r4, r4, #3
 80070e4:	42a0      	cmp	r0, r4
 80070e6:	d007      	beq.n	80070f8 <sbrk_aligned+0x38>
 80070e8:	1a21      	subs	r1, r4, r0
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 fb36 	bl	800775c <_sbrk_r>
 80070f0:	3001      	adds	r0, #1
 80070f2:	d101      	bne.n	80070f8 <sbrk_aligned+0x38>
 80070f4:	f04f 34ff 	mov.w	r4, #4294967295
 80070f8:	4620      	mov	r0, r4
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	20000550 	.word	0x20000550

08007100 <_malloc_r>:
 8007100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007104:	1ccd      	adds	r5, r1, #3
 8007106:	f025 0503 	bic.w	r5, r5, #3
 800710a:	3508      	adds	r5, #8
 800710c:	2d0c      	cmp	r5, #12
 800710e:	bf38      	it	cc
 8007110:	250c      	movcc	r5, #12
 8007112:	2d00      	cmp	r5, #0
 8007114:	4607      	mov	r7, r0
 8007116:	db01      	blt.n	800711c <_malloc_r+0x1c>
 8007118:	42a9      	cmp	r1, r5
 800711a:	d905      	bls.n	8007128 <_malloc_r+0x28>
 800711c:	230c      	movs	r3, #12
 800711e:	2600      	movs	r6, #0
 8007120:	603b      	str	r3, [r7, #0]
 8007122:	4630      	mov	r0, r6
 8007124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007128:	4e2e      	ldr	r6, [pc, #184]	; (80071e4 <_malloc_r+0xe4>)
 800712a:	f000 fe47 	bl	8007dbc <__malloc_lock>
 800712e:	6833      	ldr	r3, [r6, #0]
 8007130:	461c      	mov	r4, r3
 8007132:	bb34      	cbnz	r4, 8007182 <_malloc_r+0x82>
 8007134:	4629      	mov	r1, r5
 8007136:	4638      	mov	r0, r7
 8007138:	f7ff ffc2 	bl	80070c0 <sbrk_aligned>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	4604      	mov	r4, r0
 8007140:	d14d      	bne.n	80071de <_malloc_r+0xde>
 8007142:	6834      	ldr	r4, [r6, #0]
 8007144:	4626      	mov	r6, r4
 8007146:	2e00      	cmp	r6, #0
 8007148:	d140      	bne.n	80071cc <_malloc_r+0xcc>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	4631      	mov	r1, r6
 800714e:	4638      	mov	r0, r7
 8007150:	eb04 0803 	add.w	r8, r4, r3
 8007154:	f000 fb02 	bl	800775c <_sbrk_r>
 8007158:	4580      	cmp	r8, r0
 800715a:	d13a      	bne.n	80071d2 <_malloc_r+0xd2>
 800715c:	6821      	ldr	r1, [r4, #0]
 800715e:	3503      	adds	r5, #3
 8007160:	1a6d      	subs	r5, r5, r1
 8007162:	f025 0503 	bic.w	r5, r5, #3
 8007166:	3508      	adds	r5, #8
 8007168:	2d0c      	cmp	r5, #12
 800716a:	bf38      	it	cc
 800716c:	250c      	movcc	r5, #12
 800716e:	4638      	mov	r0, r7
 8007170:	4629      	mov	r1, r5
 8007172:	f7ff ffa5 	bl	80070c0 <sbrk_aligned>
 8007176:	3001      	adds	r0, #1
 8007178:	d02b      	beq.n	80071d2 <_malloc_r+0xd2>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	442b      	add	r3, r5
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	e00e      	b.n	80071a0 <_malloc_r+0xa0>
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	1b52      	subs	r2, r2, r5
 8007186:	d41e      	bmi.n	80071c6 <_malloc_r+0xc6>
 8007188:	2a0b      	cmp	r2, #11
 800718a:	d916      	bls.n	80071ba <_malloc_r+0xba>
 800718c:	1961      	adds	r1, r4, r5
 800718e:	42a3      	cmp	r3, r4
 8007190:	6025      	str	r5, [r4, #0]
 8007192:	bf18      	it	ne
 8007194:	6059      	strne	r1, [r3, #4]
 8007196:	6863      	ldr	r3, [r4, #4]
 8007198:	bf08      	it	eq
 800719a:	6031      	streq	r1, [r6, #0]
 800719c:	5162      	str	r2, [r4, r5]
 800719e:	604b      	str	r3, [r1, #4]
 80071a0:	4638      	mov	r0, r7
 80071a2:	f104 060b 	add.w	r6, r4, #11
 80071a6:	f000 fe0f 	bl	8007dc8 <__malloc_unlock>
 80071aa:	f026 0607 	bic.w	r6, r6, #7
 80071ae:	1d23      	adds	r3, r4, #4
 80071b0:	1af2      	subs	r2, r6, r3
 80071b2:	d0b6      	beq.n	8007122 <_malloc_r+0x22>
 80071b4:	1b9b      	subs	r3, r3, r6
 80071b6:	50a3      	str	r3, [r4, r2]
 80071b8:	e7b3      	b.n	8007122 <_malloc_r+0x22>
 80071ba:	6862      	ldr	r2, [r4, #4]
 80071bc:	42a3      	cmp	r3, r4
 80071be:	bf0c      	ite	eq
 80071c0:	6032      	streq	r2, [r6, #0]
 80071c2:	605a      	strne	r2, [r3, #4]
 80071c4:	e7ec      	b.n	80071a0 <_malloc_r+0xa0>
 80071c6:	4623      	mov	r3, r4
 80071c8:	6864      	ldr	r4, [r4, #4]
 80071ca:	e7b2      	b.n	8007132 <_malloc_r+0x32>
 80071cc:	4634      	mov	r4, r6
 80071ce:	6876      	ldr	r6, [r6, #4]
 80071d0:	e7b9      	b.n	8007146 <_malloc_r+0x46>
 80071d2:	230c      	movs	r3, #12
 80071d4:	4638      	mov	r0, r7
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	f000 fdf6 	bl	8007dc8 <__malloc_unlock>
 80071dc:	e7a1      	b.n	8007122 <_malloc_r+0x22>
 80071de:	6025      	str	r5, [r4, #0]
 80071e0:	e7de      	b.n	80071a0 <_malloc_r+0xa0>
 80071e2:	bf00      	nop
 80071e4:	2000054c 	.word	0x2000054c

080071e8 <__ssputs_r>:
 80071e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	688e      	ldr	r6, [r1, #8]
 80071ee:	4682      	mov	sl, r0
 80071f0:	429e      	cmp	r6, r3
 80071f2:	460c      	mov	r4, r1
 80071f4:	4690      	mov	r8, r2
 80071f6:	461f      	mov	r7, r3
 80071f8:	d838      	bhi.n	800726c <__ssputs_r+0x84>
 80071fa:	898a      	ldrh	r2, [r1, #12]
 80071fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007200:	d032      	beq.n	8007268 <__ssputs_r+0x80>
 8007202:	6825      	ldr	r5, [r4, #0]
 8007204:	6909      	ldr	r1, [r1, #16]
 8007206:	3301      	adds	r3, #1
 8007208:	eba5 0901 	sub.w	r9, r5, r1
 800720c:	6965      	ldr	r5, [r4, #20]
 800720e:	444b      	add	r3, r9
 8007210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007218:	106d      	asrs	r5, r5, #1
 800721a:	429d      	cmp	r5, r3
 800721c:	bf38      	it	cc
 800721e:	461d      	movcc	r5, r3
 8007220:	0553      	lsls	r3, r2, #21
 8007222:	d531      	bpl.n	8007288 <__ssputs_r+0xa0>
 8007224:	4629      	mov	r1, r5
 8007226:	f7ff ff6b 	bl	8007100 <_malloc_r>
 800722a:	4606      	mov	r6, r0
 800722c:	b950      	cbnz	r0, 8007244 <__ssputs_r+0x5c>
 800722e:	230c      	movs	r3, #12
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	f8ca 3000 	str.w	r3, [sl]
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007244:	464a      	mov	r2, r9
 8007246:	6921      	ldr	r1, [r4, #16]
 8007248:	f7ff fa18 	bl	800667c <memcpy>
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007256:	81a3      	strh	r3, [r4, #12]
 8007258:	6126      	str	r6, [r4, #16]
 800725a:	444e      	add	r6, r9
 800725c:	6026      	str	r6, [r4, #0]
 800725e:	463e      	mov	r6, r7
 8007260:	6165      	str	r5, [r4, #20]
 8007262:	eba5 0509 	sub.w	r5, r5, r9
 8007266:	60a5      	str	r5, [r4, #8]
 8007268:	42be      	cmp	r6, r7
 800726a:	d900      	bls.n	800726e <__ssputs_r+0x86>
 800726c:	463e      	mov	r6, r7
 800726e:	4632      	mov	r2, r6
 8007270:	4641      	mov	r1, r8
 8007272:	6820      	ldr	r0, [r4, #0]
 8007274:	f000 fd88 	bl	8007d88 <memmove>
 8007278:	68a3      	ldr	r3, [r4, #8]
 800727a:	2000      	movs	r0, #0
 800727c:	1b9b      	subs	r3, r3, r6
 800727e:	60a3      	str	r3, [r4, #8]
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	4433      	add	r3, r6
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	e7db      	b.n	8007240 <__ssputs_r+0x58>
 8007288:	462a      	mov	r2, r5
 800728a:	f000 fda3 	bl	8007dd4 <_realloc_r>
 800728e:	4606      	mov	r6, r0
 8007290:	2800      	cmp	r0, #0
 8007292:	d1e1      	bne.n	8007258 <__ssputs_r+0x70>
 8007294:	4650      	mov	r0, sl
 8007296:	6921      	ldr	r1, [r4, #16]
 8007298:	f7ff feca 	bl	8007030 <_free_r>
 800729c:	e7c7      	b.n	800722e <__ssputs_r+0x46>
	...

080072a0 <_svfiprintf_r>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	4698      	mov	r8, r3
 80072a6:	898b      	ldrh	r3, [r1, #12]
 80072a8:	4607      	mov	r7, r0
 80072aa:	061b      	lsls	r3, r3, #24
 80072ac:	460d      	mov	r5, r1
 80072ae:	4614      	mov	r4, r2
 80072b0:	b09d      	sub	sp, #116	; 0x74
 80072b2:	d50e      	bpl.n	80072d2 <_svfiprintf_r+0x32>
 80072b4:	690b      	ldr	r3, [r1, #16]
 80072b6:	b963      	cbnz	r3, 80072d2 <_svfiprintf_r+0x32>
 80072b8:	2140      	movs	r1, #64	; 0x40
 80072ba:	f7ff ff21 	bl	8007100 <_malloc_r>
 80072be:	6028      	str	r0, [r5, #0]
 80072c0:	6128      	str	r0, [r5, #16]
 80072c2:	b920      	cbnz	r0, 80072ce <_svfiprintf_r+0x2e>
 80072c4:	230c      	movs	r3, #12
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	e0d1      	b.n	8007472 <_svfiprintf_r+0x1d2>
 80072ce:	2340      	movs	r3, #64	; 0x40
 80072d0:	616b      	str	r3, [r5, #20]
 80072d2:	2300      	movs	r3, #0
 80072d4:	9309      	str	r3, [sp, #36]	; 0x24
 80072d6:	2320      	movs	r3, #32
 80072d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072dc:	2330      	movs	r3, #48	; 0x30
 80072de:	f04f 0901 	mov.w	r9, #1
 80072e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80072e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800748c <_svfiprintf_r+0x1ec>
 80072ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072ee:	4623      	mov	r3, r4
 80072f0:	469a      	mov	sl, r3
 80072f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072f6:	b10a      	cbz	r2, 80072fc <_svfiprintf_r+0x5c>
 80072f8:	2a25      	cmp	r2, #37	; 0x25
 80072fa:	d1f9      	bne.n	80072f0 <_svfiprintf_r+0x50>
 80072fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007300:	d00b      	beq.n	800731a <_svfiprintf_r+0x7a>
 8007302:	465b      	mov	r3, fp
 8007304:	4622      	mov	r2, r4
 8007306:	4629      	mov	r1, r5
 8007308:	4638      	mov	r0, r7
 800730a:	f7ff ff6d 	bl	80071e8 <__ssputs_r>
 800730e:	3001      	adds	r0, #1
 8007310:	f000 80aa 	beq.w	8007468 <_svfiprintf_r+0x1c8>
 8007314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007316:	445a      	add	r2, fp
 8007318:	9209      	str	r2, [sp, #36]	; 0x24
 800731a:	f89a 3000 	ldrb.w	r3, [sl]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 80a2 	beq.w	8007468 <_svfiprintf_r+0x1c8>
 8007324:	2300      	movs	r3, #0
 8007326:	f04f 32ff 	mov.w	r2, #4294967295
 800732a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800732e:	f10a 0a01 	add.w	sl, sl, #1
 8007332:	9304      	str	r3, [sp, #16]
 8007334:	9307      	str	r3, [sp, #28]
 8007336:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800733a:	931a      	str	r3, [sp, #104]	; 0x68
 800733c:	4654      	mov	r4, sl
 800733e:	2205      	movs	r2, #5
 8007340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007344:	4851      	ldr	r0, [pc, #324]	; (800748c <_svfiprintf_r+0x1ec>)
 8007346:	f7ff f98b 	bl	8006660 <memchr>
 800734a:	9a04      	ldr	r2, [sp, #16]
 800734c:	b9d8      	cbnz	r0, 8007386 <_svfiprintf_r+0xe6>
 800734e:	06d0      	lsls	r0, r2, #27
 8007350:	bf44      	itt	mi
 8007352:	2320      	movmi	r3, #32
 8007354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007358:	0711      	lsls	r1, r2, #28
 800735a:	bf44      	itt	mi
 800735c:	232b      	movmi	r3, #43	; 0x2b
 800735e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007362:	f89a 3000 	ldrb.w	r3, [sl]
 8007366:	2b2a      	cmp	r3, #42	; 0x2a
 8007368:	d015      	beq.n	8007396 <_svfiprintf_r+0xf6>
 800736a:	4654      	mov	r4, sl
 800736c:	2000      	movs	r0, #0
 800736e:	f04f 0c0a 	mov.w	ip, #10
 8007372:	9a07      	ldr	r2, [sp, #28]
 8007374:	4621      	mov	r1, r4
 8007376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800737a:	3b30      	subs	r3, #48	; 0x30
 800737c:	2b09      	cmp	r3, #9
 800737e:	d94e      	bls.n	800741e <_svfiprintf_r+0x17e>
 8007380:	b1b0      	cbz	r0, 80073b0 <_svfiprintf_r+0x110>
 8007382:	9207      	str	r2, [sp, #28]
 8007384:	e014      	b.n	80073b0 <_svfiprintf_r+0x110>
 8007386:	eba0 0308 	sub.w	r3, r0, r8
 800738a:	fa09 f303 	lsl.w	r3, r9, r3
 800738e:	4313      	orrs	r3, r2
 8007390:	46a2      	mov	sl, r4
 8007392:	9304      	str	r3, [sp, #16]
 8007394:	e7d2      	b.n	800733c <_svfiprintf_r+0x9c>
 8007396:	9b03      	ldr	r3, [sp, #12]
 8007398:	1d19      	adds	r1, r3, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	9103      	str	r1, [sp, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfbb      	ittet	lt
 80073a2:	425b      	neglt	r3, r3
 80073a4:	f042 0202 	orrlt.w	r2, r2, #2
 80073a8:	9307      	strge	r3, [sp, #28]
 80073aa:	9307      	strlt	r3, [sp, #28]
 80073ac:	bfb8      	it	lt
 80073ae:	9204      	strlt	r2, [sp, #16]
 80073b0:	7823      	ldrb	r3, [r4, #0]
 80073b2:	2b2e      	cmp	r3, #46	; 0x2e
 80073b4:	d10c      	bne.n	80073d0 <_svfiprintf_r+0x130>
 80073b6:	7863      	ldrb	r3, [r4, #1]
 80073b8:	2b2a      	cmp	r3, #42	; 0x2a
 80073ba:	d135      	bne.n	8007428 <_svfiprintf_r+0x188>
 80073bc:	9b03      	ldr	r3, [sp, #12]
 80073be:	3402      	adds	r4, #2
 80073c0:	1d1a      	adds	r2, r3, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	9203      	str	r2, [sp, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bfb8      	it	lt
 80073ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80073ce:	9305      	str	r3, [sp, #20]
 80073d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007490 <_svfiprintf_r+0x1f0>
 80073d4:	2203      	movs	r2, #3
 80073d6:	4650      	mov	r0, sl
 80073d8:	7821      	ldrb	r1, [r4, #0]
 80073da:	f7ff f941 	bl	8006660 <memchr>
 80073de:	b140      	cbz	r0, 80073f2 <_svfiprintf_r+0x152>
 80073e0:	2340      	movs	r3, #64	; 0x40
 80073e2:	eba0 000a 	sub.w	r0, r0, sl
 80073e6:	fa03 f000 	lsl.w	r0, r3, r0
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	3401      	adds	r4, #1
 80073ee:	4303      	orrs	r3, r0
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f6:	2206      	movs	r2, #6
 80073f8:	4826      	ldr	r0, [pc, #152]	; (8007494 <_svfiprintf_r+0x1f4>)
 80073fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073fe:	f7ff f92f 	bl	8006660 <memchr>
 8007402:	2800      	cmp	r0, #0
 8007404:	d038      	beq.n	8007478 <_svfiprintf_r+0x1d8>
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <_svfiprintf_r+0x1f8>)
 8007408:	bb1b      	cbnz	r3, 8007452 <_svfiprintf_r+0x1b2>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	3307      	adds	r3, #7
 800740e:	f023 0307 	bic.w	r3, r3, #7
 8007412:	3308      	adds	r3, #8
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007418:	4433      	add	r3, r6
 800741a:	9309      	str	r3, [sp, #36]	; 0x24
 800741c:	e767      	b.n	80072ee <_svfiprintf_r+0x4e>
 800741e:	460c      	mov	r4, r1
 8007420:	2001      	movs	r0, #1
 8007422:	fb0c 3202 	mla	r2, ip, r2, r3
 8007426:	e7a5      	b.n	8007374 <_svfiprintf_r+0xd4>
 8007428:	2300      	movs	r3, #0
 800742a:	f04f 0c0a 	mov.w	ip, #10
 800742e:	4619      	mov	r1, r3
 8007430:	3401      	adds	r4, #1
 8007432:	9305      	str	r3, [sp, #20]
 8007434:	4620      	mov	r0, r4
 8007436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800743a:	3a30      	subs	r2, #48	; 0x30
 800743c:	2a09      	cmp	r2, #9
 800743e:	d903      	bls.n	8007448 <_svfiprintf_r+0x1a8>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0c5      	beq.n	80073d0 <_svfiprintf_r+0x130>
 8007444:	9105      	str	r1, [sp, #20]
 8007446:	e7c3      	b.n	80073d0 <_svfiprintf_r+0x130>
 8007448:	4604      	mov	r4, r0
 800744a:	2301      	movs	r3, #1
 800744c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007450:	e7f0      	b.n	8007434 <_svfiprintf_r+0x194>
 8007452:	ab03      	add	r3, sp, #12
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	462a      	mov	r2, r5
 8007458:	4638      	mov	r0, r7
 800745a:	4b10      	ldr	r3, [pc, #64]	; (800749c <_svfiprintf_r+0x1fc>)
 800745c:	a904      	add	r1, sp, #16
 800745e:	f7fc f9df 	bl	8003820 <_printf_float>
 8007462:	1c42      	adds	r2, r0, #1
 8007464:	4606      	mov	r6, r0
 8007466:	d1d6      	bne.n	8007416 <_svfiprintf_r+0x176>
 8007468:	89ab      	ldrh	r3, [r5, #12]
 800746a:	065b      	lsls	r3, r3, #25
 800746c:	f53f af2c 	bmi.w	80072c8 <_svfiprintf_r+0x28>
 8007470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007472:	b01d      	add	sp, #116	; 0x74
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007478:	ab03      	add	r3, sp, #12
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	462a      	mov	r2, r5
 800747e:	4638      	mov	r0, r7
 8007480:	4b06      	ldr	r3, [pc, #24]	; (800749c <_svfiprintf_r+0x1fc>)
 8007482:	a904      	add	r1, sp, #16
 8007484:	f7fc fc68 	bl	8003d58 <_printf_i>
 8007488:	e7eb      	b.n	8007462 <_svfiprintf_r+0x1c2>
 800748a:	bf00      	nop
 800748c:	08008504 	.word	0x08008504
 8007490:	0800850a 	.word	0x0800850a
 8007494:	0800850e 	.word	0x0800850e
 8007498:	08003821 	.word	0x08003821
 800749c:	080071e9 	.word	0x080071e9

080074a0 <__sfputc_r>:
 80074a0:	6893      	ldr	r3, [r2, #8]
 80074a2:	b410      	push	{r4}
 80074a4:	3b01      	subs	r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	6093      	str	r3, [r2, #8]
 80074aa:	da07      	bge.n	80074bc <__sfputc_r+0x1c>
 80074ac:	6994      	ldr	r4, [r2, #24]
 80074ae:	42a3      	cmp	r3, r4
 80074b0:	db01      	blt.n	80074b6 <__sfputc_r+0x16>
 80074b2:	290a      	cmp	r1, #10
 80074b4:	d102      	bne.n	80074bc <__sfputc_r+0x1c>
 80074b6:	bc10      	pop	{r4}
 80074b8:	f000 b974 	b.w	80077a4 <__swbuf_r>
 80074bc:	6813      	ldr	r3, [r2, #0]
 80074be:	1c58      	adds	r0, r3, #1
 80074c0:	6010      	str	r0, [r2, #0]
 80074c2:	7019      	strb	r1, [r3, #0]
 80074c4:	4608      	mov	r0, r1
 80074c6:	bc10      	pop	{r4}
 80074c8:	4770      	bx	lr

080074ca <__sfputs_r>:
 80074ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074cc:	4606      	mov	r6, r0
 80074ce:	460f      	mov	r7, r1
 80074d0:	4614      	mov	r4, r2
 80074d2:	18d5      	adds	r5, r2, r3
 80074d4:	42ac      	cmp	r4, r5
 80074d6:	d101      	bne.n	80074dc <__sfputs_r+0x12>
 80074d8:	2000      	movs	r0, #0
 80074da:	e007      	b.n	80074ec <__sfputs_r+0x22>
 80074dc:	463a      	mov	r2, r7
 80074de:	4630      	mov	r0, r6
 80074e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e4:	f7ff ffdc 	bl	80074a0 <__sfputc_r>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d1f3      	bne.n	80074d4 <__sfputs_r+0xa>
 80074ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074f0 <_vfiprintf_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	460d      	mov	r5, r1
 80074f6:	4614      	mov	r4, r2
 80074f8:	4698      	mov	r8, r3
 80074fa:	4606      	mov	r6, r0
 80074fc:	b09d      	sub	sp, #116	; 0x74
 80074fe:	b118      	cbz	r0, 8007508 <_vfiprintf_r+0x18>
 8007500:	6983      	ldr	r3, [r0, #24]
 8007502:	b90b      	cbnz	r3, 8007508 <_vfiprintf_r+0x18>
 8007504:	f000 fb3a 	bl	8007b7c <__sinit>
 8007508:	4b89      	ldr	r3, [pc, #548]	; (8007730 <_vfiprintf_r+0x240>)
 800750a:	429d      	cmp	r5, r3
 800750c:	d11b      	bne.n	8007546 <_vfiprintf_r+0x56>
 800750e:	6875      	ldr	r5, [r6, #4]
 8007510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007512:	07d9      	lsls	r1, r3, #31
 8007514:	d405      	bmi.n	8007522 <_vfiprintf_r+0x32>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	059a      	lsls	r2, r3, #22
 800751a:	d402      	bmi.n	8007522 <_vfiprintf_r+0x32>
 800751c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800751e:	f000 fbcb 	bl	8007cb8 <__retarget_lock_acquire_recursive>
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	071b      	lsls	r3, r3, #28
 8007526:	d501      	bpl.n	800752c <_vfiprintf_r+0x3c>
 8007528:	692b      	ldr	r3, [r5, #16]
 800752a:	b9eb      	cbnz	r3, 8007568 <_vfiprintf_r+0x78>
 800752c:	4629      	mov	r1, r5
 800752e:	4630      	mov	r0, r6
 8007530:	f000 f998 	bl	8007864 <__swsetup_r>
 8007534:	b1c0      	cbz	r0, 8007568 <_vfiprintf_r+0x78>
 8007536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007538:	07dc      	lsls	r4, r3, #31
 800753a:	d50e      	bpl.n	800755a <_vfiprintf_r+0x6a>
 800753c:	f04f 30ff 	mov.w	r0, #4294967295
 8007540:	b01d      	add	sp, #116	; 0x74
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	4b7b      	ldr	r3, [pc, #492]	; (8007734 <_vfiprintf_r+0x244>)
 8007548:	429d      	cmp	r5, r3
 800754a:	d101      	bne.n	8007550 <_vfiprintf_r+0x60>
 800754c:	68b5      	ldr	r5, [r6, #8]
 800754e:	e7df      	b.n	8007510 <_vfiprintf_r+0x20>
 8007550:	4b79      	ldr	r3, [pc, #484]	; (8007738 <_vfiprintf_r+0x248>)
 8007552:	429d      	cmp	r5, r3
 8007554:	bf08      	it	eq
 8007556:	68f5      	ldreq	r5, [r6, #12]
 8007558:	e7da      	b.n	8007510 <_vfiprintf_r+0x20>
 800755a:	89ab      	ldrh	r3, [r5, #12]
 800755c:	0598      	lsls	r0, r3, #22
 800755e:	d4ed      	bmi.n	800753c <_vfiprintf_r+0x4c>
 8007560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007562:	f000 fbaa 	bl	8007cba <__retarget_lock_release_recursive>
 8007566:	e7e9      	b.n	800753c <_vfiprintf_r+0x4c>
 8007568:	2300      	movs	r3, #0
 800756a:	9309      	str	r3, [sp, #36]	; 0x24
 800756c:	2320      	movs	r3, #32
 800756e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007572:	2330      	movs	r3, #48	; 0x30
 8007574:	f04f 0901 	mov.w	r9, #1
 8007578:	f8cd 800c 	str.w	r8, [sp, #12]
 800757c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800773c <_vfiprintf_r+0x24c>
 8007580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007584:	4623      	mov	r3, r4
 8007586:	469a      	mov	sl, r3
 8007588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800758c:	b10a      	cbz	r2, 8007592 <_vfiprintf_r+0xa2>
 800758e:	2a25      	cmp	r2, #37	; 0x25
 8007590:	d1f9      	bne.n	8007586 <_vfiprintf_r+0x96>
 8007592:	ebba 0b04 	subs.w	fp, sl, r4
 8007596:	d00b      	beq.n	80075b0 <_vfiprintf_r+0xc0>
 8007598:	465b      	mov	r3, fp
 800759a:	4622      	mov	r2, r4
 800759c:	4629      	mov	r1, r5
 800759e:	4630      	mov	r0, r6
 80075a0:	f7ff ff93 	bl	80074ca <__sfputs_r>
 80075a4:	3001      	adds	r0, #1
 80075a6:	f000 80aa 	beq.w	80076fe <_vfiprintf_r+0x20e>
 80075aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ac:	445a      	add	r2, fp
 80075ae:	9209      	str	r2, [sp, #36]	; 0x24
 80075b0:	f89a 3000 	ldrb.w	r3, [sl]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80a2 	beq.w	80076fe <_vfiprintf_r+0x20e>
 80075ba:	2300      	movs	r3, #0
 80075bc:	f04f 32ff 	mov.w	r2, #4294967295
 80075c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075c4:	f10a 0a01 	add.w	sl, sl, #1
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	9307      	str	r3, [sp, #28]
 80075cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075d0:	931a      	str	r3, [sp, #104]	; 0x68
 80075d2:	4654      	mov	r4, sl
 80075d4:	2205      	movs	r2, #5
 80075d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075da:	4858      	ldr	r0, [pc, #352]	; (800773c <_vfiprintf_r+0x24c>)
 80075dc:	f7ff f840 	bl	8006660 <memchr>
 80075e0:	9a04      	ldr	r2, [sp, #16]
 80075e2:	b9d8      	cbnz	r0, 800761c <_vfiprintf_r+0x12c>
 80075e4:	06d1      	lsls	r1, r2, #27
 80075e6:	bf44      	itt	mi
 80075e8:	2320      	movmi	r3, #32
 80075ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ee:	0713      	lsls	r3, r2, #28
 80075f0:	bf44      	itt	mi
 80075f2:	232b      	movmi	r3, #43	; 0x2b
 80075f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075f8:	f89a 3000 	ldrb.w	r3, [sl]
 80075fc:	2b2a      	cmp	r3, #42	; 0x2a
 80075fe:	d015      	beq.n	800762c <_vfiprintf_r+0x13c>
 8007600:	4654      	mov	r4, sl
 8007602:	2000      	movs	r0, #0
 8007604:	f04f 0c0a 	mov.w	ip, #10
 8007608:	9a07      	ldr	r2, [sp, #28]
 800760a:	4621      	mov	r1, r4
 800760c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007610:	3b30      	subs	r3, #48	; 0x30
 8007612:	2b09      	cmp	r3, #9
 8007614:	d94e      	bls.n	80076b4 <_vfiprintf_r+0x1c4>
 8007616:	b1b0      	cbz	r0, 8007646 <_vfiprintf_r+0x156>
 8007618:	9207      	str	r2, [sp, #28]
 800761a:	e014      	b.n	8007646 <_vfiprintf_r+0x156>
 800761c:	eba0 0308 	sub.w	r3, r0, r8
 8007620:	fa09 f303 	lsl.w	r3, r9, r3
 8007624:	4313      	orrs	r3, r2
 8007626:	46a2      	mov	sl, r4
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	e7d2      	b.n	80075d2 <_vfiprintf_r+0xe2>
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	1d19      	adds	r1, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	9103      	str	r1, [sp, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfbb      	ittet	lt
 8007638:	425b      	neglt	r3, r3
 800763a:	f042 0202 	orrlt.w	r2, r2, #2
 800763e:	9307      	strge	r3, [sp, #28]
 8007640:	9307      	strlt	r3, [sp, #28]
 8007642:	bfb8      	it	lt
 8007644:	9204      	strlt	r2, [sp, #16]
 8007646:	7823      	ldrb	r3, [r4, #0]
 8007648:	2b2e      	cmp	r3, #46	; 0x2e
 800764a:	d10c      	bne.n	8007666 <_vfiprintf_r+0x176>
 800764c:	7863      	ldrb	r3, [r4, #1]
 800764e:	2b2a      	cmp	r3, #42	; 0x2a
 8007650:	d135      	bne.n	80076be <_vfiprintf_r+0x1ce>
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	3402      	adds	r4, #2
 8007656:	1d1a      	adds	r2, r3, #4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	9203      	str	r2, [sp, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	bfb8      	it	lt
 8007660:	f04f 33ff 	movlt.w	r3, #4294967295
 8007664:	9305      	str	r3, [sp, #20]
 8007666:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007740 <_vfiprintf_r+0x250>
 800766a:	2203      	movs	r2, #3
 800766c:	4650      	mov	r0, sl
 800766e:	7821      	ldrb	r1, [r4, #0]
 8007670:	f7fe fff6 	bl	8006660 <memchr>
 8007674:	b140      	cbz	r0, 8007688 <_vfiprintf_r+0x198>
 8007676:	2340      	movs	r3, #64	; 0x40
 8007678:	eba0 000a 	sub.w	r0, r0, sl
 800767c:	fa03 f000 	lsl.w	r0, r3, r0
 8007680:	9b04      	ldr	r3, [sp, #16]
 8007682:	3401      	adds	r4, #1
 8007684:	4303      	orrs	r3, r0
 8007686:	9304      	str	r3, [sp, #16]
 8007688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800768c:	2206      	movs	r2, #6
 800768e:	482d      	ldr	r0, [pc, #180]	; (8007744 <_vfiprintf_r+0x254>)
 8007690:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007694:	f7fe ffe4 	bl	8006660 <memchr>
 8007698:	2800      	cmp	r0, #0
 800769a:	d03f      	beq.n	800771c <_vfiprintf_r+0x22c>
 800769c:	4b2a      	ldr	r3, [pc, #168]	; (8007748 <_vfiprintf_r+0x258>)
 800769e:	bb1b      	cbnz	r3, 80076e8 <_vfiprintf_r+0x1f8>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	3307      	adds	r3, #7
 80076a4:	f023 0307 	bic.w	r3, r3, #7
 80076a8:	3308      	adds	r3, #8
 80076aa:	9303      	str	r3, [sp, #12]
 80076ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ae:	443b      	add	r3, r7
 80076b0:	9309      	str	r3, [sp, #36]	; 0x24
 80076b2:	e767      	b.n	8007584 <_vfiprintf_r+0x94>
 80076b4:	460c      	mov	r4, r1
 80076b6:	2001      	movs	r0, #1
 80076b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80076bc:	e7a5      	b.n	800760a <_vfiprintf_r+0x11a>
 80076be:	2300      	movs	r3, #0
 80076c0:	f04f 0c0a 	mov.w	ip, #10
 80076c4:	4619      	mov	r1, r3
 80076c6:	3401      	adds	r4, #1
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	4620      	mov	r0, r4
 80076cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076d0:	3a30      	subs	r2, #48	; 0x30
 80076d2:	2a09      	cmp	r2, #9
 80076d4:	d903      	bls.n	80076de <_vfiprintf_r+0x1ee>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d0c5      	beq.n	8007666 <_vfiprintf_r+0x176>
 80076da:	9105      	str	r1, [sp, #20]
 80076dc:	e7c3      	b.n	8007666 <_vfiprintf_r+0x176>
 80076de:	4604      	mov	r4, r0
 80076e0:	2301      	movs	r3, #1
 80076e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80076e6:	e7f0      	b.n	80076ca <_vfiprintf_r+0x1da>
 80076e8:	ab03      	add	r3, sp, #12
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	462a      	mov	r2, r5
 80076ee:	4630      	mov	r0, r6
 80076f0:	4b16      	ldr	r3, [pc, #88]	; (800774c <_vfiprintf_r+0x25c>)
 80076f2:	a904      	add	r1, sp, #16
 80076f4:	f7fc f894 	bl	8003820 <_printf_float>
 80076f8:	4607      	mov	r7, r0
 80076fa:	1c78      	adds	r0, r7, #1
 80076fc:	d1d6      	bne.n	80076ac <_vfiprintf_r+0x1bc>
 80076fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007700:	07d9      	lsls	r1, r3, #31
 8007702:	d405      	bmi.n	8007710 <_vfiprintf_r+0x220>
 8007704:	89ab      	ldrh	r3, [r5, #12]
 8007706:	059a      	lsls	r2, r3, #22
 8007708:	d402      	bmi.n	8007710 <_vfiprintf_r+0x220>
 800770a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800770c:	f000 fad5 	bl	8007cba <__retarget_lock_release_recursive>
 8007710:	89ab      	ldrh	r3, [r5, #12]
 8007712:	065b      	lsls	r3, r3, #25
 8007714:	f53f af12 	bmi.w	800753c <_vfiprintf_r+0x4c>
 8007718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800771a:	e711      	b.n	8007540 <_vfiprintf_r+0x50>
 800771c:	ab03      	add	r3, sp, #12
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	462a      	mov	r2, r5
 8007722:	4630      	mov	r0, r6
 8007724:	4b09      	ldr	r3, [pc, #36]	; (800774c <_vfiprintf_r+0x25c>)
 8007726:	a904      	add	r1, sp, #16
 8007728:	f7fc fb16 	bl	8003d58 <_printf_i>
 800772c:	e7e4      	b.n	80076f8 <_vfiprintf_r+0x208>
 800772e:	bf00      	nop
 8007730:	08008538 	.word	0x08008538
 8007734:	08008558 	.word	0x08008558
 8007738:	08008518 	.word	0x08008518
 800773c:	08008504 	.word	0x08008504
 8007740:	0800850a 	.word	0x0800850a
 8007744:	0800850e 	.word	0x0800850e
 8007748:	08003821 	.word	0x08003821
 800774c:	080074cb 	.word	0x080074cb

08007750 <nan>:
 8007750:	2000      	movs	r0, #0
 8007752:	4901      	ldr	r1, [pc, #4]	; (8007758 <nan+0x8>)
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	7ff80000 	.word	0x7ff80000

0800775c <_sbrk_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	2300      	movs	r3, #0
 8007760:	4d05      	ldr	r5, [pc, #20]	; (8007778 <_sbrk_r+0x1c>)
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	602b      	str	r3, [r5, #0]
 8007768:	f7f9 fddc 	bl	8001324 <_sbrk>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_sbrk_r+0x1a>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b103      	cbz	r3, 8007776 <_sbrk_r+0x1a>
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	20000558 	.word	0x20000558

0800777c <strncmp>:
 800777c:	4603      	mov	r3, r0
 800777e:	b510      	push	{r4, lr}
 8007780:	b172      	cbz	r2, 80077a0 <strncmp+0x24>
 8007782:	3901      	subs	r1, #1
 8007784:	1884      	adds	r4, r0, r2
 8007786:	f813 0b01 	ldrb.w	r0, [r3], #1
 800778a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800778e:	4290      	cmp	r0, r2
 8007790:	d101      	bne.n	8007796 <strncmp+0x1a>
 8007792:	42a3      	cmp	r3, r4
 8007794:	d101      	bne.n	800779a <strncmp+0x1e>
 8007796:	1a80      	subs	r0, r0, r2
 8007798:	bd10      	pop	{r4, pc}
 800779a:	2800      	cmp	r0, #0
 800779c:	d1f3      	bne.n	8007786 <strncmp+0xa>
 800779e:	e7fa      	b.n	8007796 <strncmp+0x1a>
 80077a0:	4610      	mov	r0, r2
 80077a2:	e7f9      	b.n	8007798 <strncmp+0x1c>

080077a4 <__swbuf_r>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	460e      	mov	r6, r1
 80077a8:	4614      	mov	r4, r2
 80077aa:	4605      	mov	r5, r0
 80077ac:	b118      	cbz	r0, 80077b6 <__swbuf_r+0x12>
 80077ae:	6983      	ldr	r3, [r0, #24]
 80077b0:	b90b      	cbnz	r3, 80077b6 <__swbuf_r+0x12>
 80077b2:	f000 f9e3 	bl	8007b7c <__sinit>
 80077b6:	4b21      	ldr	r3, [pc, #132]	; (800783c <__swbuf_r+0x98>)
 80077b8:	429c      	cmp	r4, r3
 80077ba:	d12b      	bne.n	8007814 <__swbuf_r+0x70>
 80077bc:	686c      	ldr	r4, [r5, #4]
 80077be:	69a3      	ldr	r3, [r4, #24]
 80077c0:	60a3      	str	r3, [r4, #8]
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	071a      	lsls	r2, r3, #28
 80077c6:	d52f      	bpl.n	8007828 <__swbuf_r+0x84>
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	b36b      	cbz	r3, 8007828 <__swbuf_r+0x84>
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	6820      	ldr	r0, [r4, #0]
 80077d0:	b2f6      	uxtb	r6, r6
 80077d2:	1ac0      	subs	r0, r0, r3
 80077d4:	6963      	ldr	r3, [r4, #20]
 80077d6:	4637      	mov	r7, r6
 80077d8:	4283      	cmp	r3, r0
 80077da:	dc04      	bgt.n	80077e6 <__swbuf_r+0x42>
 80077dc:	4621      	mov	r1, r4
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 f938 	bl	8007a54 <_fflush_r>
 80077e4:	bb30      	cbnz	r0, 8007834 <__swbuf_r+0x90>
 80077e6:	68a3      	ldr	r3, [r4, #8]
 80077e8:	3001      	adds	r0, #1
 80077ea:	3b01      	subs	r3, #1
 80077ec:	60a3      	str	r3, [r4, #8]
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	6022      	str	r2, [r4, #0]
 80077f4:	701e      	strb	r6, [r3, #0]
 80077f6:	6963      	ldr	r3, [r4, #20]
 80077f8:	4283      	cmp	r3, r0
 80077fa:	d004      	beq.n	8007806 <__swbuf_r+0x62>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	07db      	lsls	r3, r3, #31
 8007800:	d506      	bpl.n	8007810 <__swbuf_r+0x6c>
 8007802:	2e0a      	cmp	r6, #10
 8007804:	d104      	bne.n	8007810 <__swbuf_r+0x6c>
 8007806:	4621      	mov	r1, r4
 8007808:	4628      	mov	r0, r5
 800780a:	f000 f923 	bl	8007a54 <_fflush_r>
 800780e:	b988      	cbnz	r0, 8007834 <__swbuf_r+0x90>
 8007810:	4638      	mov	r0, r7
 8007812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007814:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <__swbuf_r+0x9c>)
 8007816:	429c      	cmp	r4, r3
 8007818:	d101      	bne.n	800781e <__swbuf_r+0x7a>
 800781a:	68ac      	ldr	r4, [r5, #8]
 800781c:	e7cf      	b.n	80077be <__swbuf_r+0x1a>
 800781e:	4b09      	ldr	r3, [pc, #36]	; (8007844 <__swbuf_r+0xa0>)
 8007820:	429c      	cmp	r4, r3
 8007822:	bf08      	it	eq
 8007824:	68ec      	ldreq	r4, [r5, #12]
 8007826:	e7ca      	b.n	80077be <__swbuf_r+0x1a>
 8007828:	4621      	mov	r1, r4
 800782a:	4628      	mov	r0, r5
 800782c:	f000 f81a 	bl	8007864 <__swsetup_r>
 8007830:	2800      	cmp	r0, #0
 8007832:	d0cb      	beq.n	80077cc <__swbuf_r+0x28>
 8007834:	f04f 37ff 	mov.w	r7, #4294967295
 8007838:	e7ea      	b.n	8007810 <__swbuf_r+0x6c>
 800783a:	bf00      	nop
 800783c:	08008538 	.word	0x08008538
 8007840:	08008558 	.word	0x08008558
 8007844:	08008518 	.word	0x08008518

08007848 <__ascii_wctomb>:
 8007848:	4603      	mov	r3, r0
 800784a:	4608      	mov	r0, r1
 800784c:	b141      	cbz	r1, 8007860 <__ascii_wctomb+0x18>
 800784e:	2aff      	cmp	r2, #255	; 0xff
 8007850:	d904      	bls.n	800785c <__ascii_wctomb+0x14>
 8007852:	228a      	movs	r2, #138	; 0x8a
 8007854:	f04f 30ff 	mov.w	r0, #4294967295
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	4770      	bx	lr
 800785c:	2001      	movs	r0, #1
 800785e:	700a      	strb	r2, [r1, #0]
 8007860:	4770      	bx	lr
	...

08007864 <__swsetup_r>:
 8007864:	4b32      	ldr	r3, [pc, #200]	; (8007930 <__swsetup_r+0xcc>)
 8007866:	b570      	push	{r4, r5, r6, lr}
 8007868:	681d      	ldr	r5, [r3, #0]
 800786a:	4606      	mov	r6, r0
 800786c:	460c      	mov	r4, r1
 800786e:	b125      	cbz	r5, 800787a <__swsetup_r+0x16>
 8007870:	69ab      	ldr	r3, [r5, #24]
 8007872:	b913      	cbnz	r3, 800787a <__swsetup_r+0x16>
 8007874:	4628      	mov	r0, r5
 8007876:	f000 f981 	bl	8007b7c <__sinit>
 800787a:	4b2e      	ldr	r3, [pc, #184]	; (8007934 <__swsetup_r+0xd0>)
 800787c:	429c      	cmp	r4, r3
 800787e:	d10f      	bne.n	80078a0 <__swsetup_r+0x3c>
 8007880:	686c      	ldr	r4, [r5, #4]
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007888:	0719      	lsls	r1, r3, #28
 800788a:	d42c      	bmi.n	80078e6 <__swsetup_r+0x82>
 800788c:	06dd      	lsls	r5, r3, #27
 800788e:	d411      	bmi.n	80078b4 <__swsetup_r+0x50>
 8007890:	2309      	movs	r3, #9
 8007892:	6033      	str	r3, [r6, #0]
 8007894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	e03e      	b.n	800791e <__swsetup_r+0xba>
 80078a0:	4b25      	ldr	r3, [pc, #148]	; (8007938 <__swsetup_r+0xd4>)
 80078a2:	429c      	cmp	r4, r3
 80078a4:	d101      	bne.n	80078aa <__swsetup_r+0x46>
 80078a6:	68ac      	ldr	r4, [r5, #8]
 80078a8:	e7eb      	b.n	8007882 <__swsetup_r+0x1e>
 80078aa:	4b24      	ldr	r3, [pc, #144]	; (800793c <__swsetup_r+0xd8>)
 80078ac:	429c      	cmp	r4, r3
 80078ae:	bf08      	it	eq
 80078b0:	68ec      	ldreq	r4, [r5, #12]
 80078b2:	e7e6      	b.n	8007882 <__swsetup_r+0x1e>
 80078b4:	0758      	lsls	r0, r3, #29
 80078b6:	d512      	bpl.n	80078de <__swsetup_r+0x7a>
 80078b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078ba:	b141      	cbz	r1, 80078ce <__swsetup_r+0x6a>
 80078bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078c0:	4299      	cmp	r1, r3
 80078c2:	d002      	beq.n	80078ca <__swsetup_r+0x66>
 80078c4:	4630      	mov	r0, r6
 80078c6:	f7ff fbb3 	bl	8007030 <_free_r>
 80078ca:	2300      	movs	r3, #0
 80078cc:	6363      	str	r3, [r4, #52]	; 0x34
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078d4:	81a3      	strh	r3, [r4, #12]
 80078d6:	2300      	movs	r3, #0
 80078d8:	6063      	str	r3, [r4, #4]
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	f043 0308 	orr.w	r3, r3, #8
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	b94b      	cbnz	r3, 80078fe <__swsetup_r+0x9a>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f4:	d003      	beq.n	80078fe <__swsetup_r+0x9a>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4630      	mov	r0, r6
 80078fa:	f000 fa05 	bl	8007d08 <__smakebuf_r>
 80078fe:	89a0      	ldrh	r0, [r4, #12]
 8007900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007904:	f010 0301 	ands.w	r3, r0, #1
 8007908:	d00a      	beq.n	8007920 <__swsetup_r+0xbc>
 800790a:	2300      	movs	r3, #0
 800790c:	60a3      	str	r3, [r4, #8]
 800790e:	6963      	ldr	r3, [r4, #20]
 8007910:	425b      	negs	r3, r3
 8007912:	61a3      	str	r3, [r4, #24]
 8007914:	6923      	ldr	r3, [r4, #16]
 8007916:	b943      	cbnz	r3, 800792a <__swsetup_r+0xc6>
 8007918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800791c:	d1ba      	bne.n	8007894 <__swsetup_r+0x30>
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	0781      	lsls	r1, r0, #30
 8007922:	bf58      	it	pl
 8007924:	6963      	ldrpl	r3, [r4, #20]
 8007926:	60a3      	str	r3, [r4, #8]
 8007928:	e7f4      	b.n	8007914 <__swsetup_r+0xb0>
 800792a:	2000      	movs	r0, #0
 800792c:	e7f7      	b.n	800791e <__swsetup_r+0xba>
 800792e:	bf00      	nop
 8007930:	2000000c 	.word	0x2000000c
 8007934:	08008538 	.word	0x08008538
 8007938:	08008558 	.word	0x08008558
 800793c:	08008518 	.word	0x08008518

08007940 <abort>:
 8007940:	2006      	movs	r0, #6
 8007942:	b508      	push	{r3, lr}
 8007944:	f000 fa9e 	bl	8007e84 <raise>
 8007948:	2001      	movs	r0, #1
 800794a:	f7f9 fcbd 	bl	80012c8 <_exit>
	...

08007950 <__sflush_r>:
 8007950:	898a      	ldrh	r2, [r1, #12]
 8007952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007954:	4605      	mov	r5, r0
 8007956:	0710      	lsls	r0, r2, #28
 8007958:	460c      	mov	r4, r1
 800795a:	d457      	bmi.n	8007a0c <__sflush_r+0xbc>
 800795c:	684b      	ldr	r3, [r1, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	dc04      	bgt.n	800796c <__sflush_r+0x1c>
 8007962:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	dc01      	bgt.n	800796c <__sflush_r+0x1c>
 8007968:	2000      	movs	r0, #0
 800796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800796e:	2e00      	cmp	r6, #0
 8007970:	d0fa      	beq.n	8007968 <__sflush_r+0x18>
 8007972:	2300      	movs	r3, #0
 8007974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007978:	682f      	ldr	r7, [r5, #0]
 800797a:	602b      	str	r3, [r5, #0]
 800797c:	d032      	beq.n	80079e4 <__sflush_r+0x94>
 800797e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	075a      	lsls	r2, r3, #29
 8007984:	d505      	bpl.n	8007992 <__sflush_r+0x42>
 8007986:	6863      	ldr	r3, [r4, #4]
 8007988:	1ac0      	subs	r0, r0, r3
 800798a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800798c:	b10b      	cbz	r3, 8007992 <__sflush_r+0x42>
 800798e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007990:	1ac0      	subs	r0, r0, r3
 8007992:	2300      	movs	r3, #0
 8007994:	4602      	mov	r2, r0
 8007996:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007998:	4628      	mov	r0, r5
 800799a:	6a21      	ldr	r1, [r4, #32]
 800799c:	47b0      	blx	r6
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	d106      	bne.n	80079b2 <__sflush_r+0x62>
 80079a4:	6829      	ldr	r1, [r5, #0]
 80079a6:	291d      	cmp	r1, #29
 80079a8:	d82c      	bhi.n	8007a04 <__sflush_r+0xb4>
 80079aa:	4a29      	ldr	r2, [pc, #164]	; (8007a50 <__sflush_r+0x100>)
 80079ac:	40ca      	lsrs	r2, r1
 80079ae:	07d6      	lsls	r6, r2, #31
 80079b0:	d528      	bpl.n	8007a04 <__sflush_r+0xb4>
 80079b2:	2200      	movs	r2, #0
 80079b4:	6062      	str	r2, [r4, #4]
 80079b6:	6922      	ldr	r2, [r4, #16]
 80079b8:	04d9      	lsls	r1, r3, #19
 80079ba:	6022      	str	r2, [r4, #0]
 80079bc:	d504      	bpl.n	80079c8 <__sflush_r+0x78>
 80079be:	1c42      	adds	r2, r0, #1
 80079c0:	d101      	bne.n	80079c6 <__sflush_r+0x76>
 80079c2:	682b      	ldr	r3, [r5, #0]
 80079c4:	b903      	cbnz	r3, 80079c8 <__sflush_r+0x78>
 80079c6:	6560      	str	r0, [r4, #84]	; 0x54
 80079c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ca:	602f      	str	r7, [r5, #0]
 80079cc:	2900      	cmp	r1, #0
 80079ce:	d0cb      	beq.n	8007968 <__sflush_r+0x18>
 80079d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079d4:	4299      	cmp	r1, r3
 80079d6:	d002      	beq.n	80079de <__sflush_r+0x8e>
 80079d8:	4628      	mov	r0, r5
 80079da:	f7ff fb29 	bl	8007030 <_free_r>
 80079de:	2000      	movs	r0, #0
 80079e0:	6360      	str	r0, [r4, #52]	; 0x34
 80079e2:	e7c2      	b.n	800796a <__sflush_r+0x1a>
 80079e4:	6a21      	ldr	r1, [r4, #32]
 80079e6:	2301      	movs	r3, #1
 80079e8:	4628      	mov	r0, r5
 80079ea:	47b0      	blx	r6
 80079ec:	1c41      	adds	r1, r0, #1
 80079ee:	d1c7      	bne.n	8007980 <__sflush_r+0x30>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0c4      	beq.n	8007980 <__sflush_r+0x30>
 80079f6:	2b1d      	cmp	r3, #29
 80079f8:	d001      	beq.n	80079fe <__sflush_r+0xae>
 80079fa:	2b16      	cmp	r3, #22
 80079fc:	d101      	bne.n	8007a02 <__sflush_r+0xb2>
 80079fe:	602f      	str	r7, [r5, #0]
 8007a00:	e7b2      	b.n	8007968 <__sflush_r+0x18>
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a08:	81a3      	strh	r3, [r4, #12]
 8007a0a:	e7ae      	b.n	800796a <__sflush_r+0x1a>
 8007a0c:	690f      	ldr	r7, [r1, #16]
 8007a0e:	2f00      	cmp	r7, #0
 8007a10:	d0aa      	beq.n	8007968 <__sflush_r+0x18>
 8007a12:	0793      	lsls	r3, r2, #30
 8007a14:	bf18      	it	ne
 8007a16:	2300      	movne	r3, #0
 8007a18:	680e      	ldr	r6, [r1, #0]
 8007a1a:	bf08      	it	eq
 8007a1c:	694b      	ldreq	r3, [r1, #20]
 8007a1e:	1bf6      	subs	r6, r6, r7
 8007a20:	600f      	str	r7, [r1, #0]
 8007a22:	608b      	str	r3, [r1, #8]
 8007a24:	2e00      	cmp	r6, #0
 8007a26:	dd9f      	ble.n	8007968 <__sflush_r+0x18>
 8007a28:	4633      	mov	r3, r6
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	6a21      	ldr	r1, [r4, #32]
 8007a30:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a34:	47e0      	blx	ip
 8007a36:	2800      	cmp	r0, #0
 8007a38:	dc06      	bgt.n	8007a48 <__sflush_r+0xf8>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	e790      	b.n	800796a <__sflush_r+0x1a>
 8007a48:	4407      	add	r7, r0
 8007a4a:	1a36      	subs	r6, r6, r0
 8007a4c:	e7ea      	b.n	8007a24 <__sflush_r+0xd4>
 8007a4e:	bf00      	nop
 8007a50:	20400001 	.word	0x20400001

08007a54 <_fflush_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	690b      	ldr	r3, [r1, #16]
 8007a58:	4605      	mov	r5, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	b913      	cbnz	r3, 8007a64 <_fflush_r+0x10>
 8007a5e:	2500      	movs	r5, #0
 8007a60:	4628      	mov	r0, r5
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	b118      	cbz	r0, 8007a6e <_fflush_r+0x1a>
 8007a66:	6983      	ldr	r3, [r0, #24]
 8007a68:	b90b      	cbnz	r3, 8007a6e <_fflush_r+0x1a>
 8007a6a:	f000 f887 	bl	8007b7c <__sinit>
 8007a6e:	4b14      	ldr	r3, [pc, #80]	; (8007ac0 <_fflush_r+0x6c>)
 8007a70:	429c      	cmp	r4, r3
 8007a72:	d11b      	bne.n	8007aac <_fflush_r+0x58>
 8007a74:	686c      	ldr	r4, [r5, #4]
 8007a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0ef      	beq.n	8007a5e <_fflush_r+0xa>
 8007a7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a80:	07d0      	lsls	r0, r2, #31
 8007a82:	d404      	bmi.n	8007a8e <_fflush_r+0x3a>
 8007a84:	0599      	lsls	r1, r3, #22
 8007a86:	d402      	bmi.n	8007a8e <_fflush_r+0x3a>
 8007a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a8a:	f000 f915 	bl	8007cb8 <__retarget_lock_acquire_recursive>
 8007a8e:	4628      	mov	r0, r5
 8007a90:	4621      	mov	r1, r4
 8007a92:	f7ff ff5d 	bl	8007950 <__sflush_r>
 8007a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a98:	4605      	mov	r5, r0
 8007a9a:	07da      	lsls	r2, r3, #31
 8007a9c:	d4e0      	bmi.n	8007a60 <_fflush_r+0xc>
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	059b      	lsls	r3, r3, #22
 8007aa2:	d4dd      	bmi.n	8007a60 <_fflush_r+0xc>
 8007aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aa6:	f000 f908 	bl	8007cba <__retarget_lock_release_recursive>
 8007aaa:	e7d9      	b.n	8007a60 <_fflush_r+0xc>
 8007aac:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <_fflush_r+0x70>)
 8007aae:	429c      	cmp	r4, r3
 8007ab0:	d101      	bne.n	8007ab6 <_fflush_r+0x62>
 8007ab2:	68ac      	ldr	r4, [r5, #8]
 8007ab4:	e7df      	b.n	8007a76 <_fflush_r+0x22>
 8007ab6:	4b04      	ldr	r3, [pc, #16]	; (8007ac8 <_fflush_r+0x74>)
 8007ab8:	429c      	cmp	r4, r3
 8007aba:	bf08      	it	eq
 8007abc:	68ec      	ldreq	r4, [r5, #12]
 8007abe:	e7da      	b.n	8007a76 <_fflush_r+0x22>
 8007ac0:	08008538 	.word	0x08008538
 8007ac4:	08008558 	.word	0x08008558
 8007ac8:	08008518 	.word	0x08008518

08007acc <std>:
 8007acc:	2300      	movs	r3, #0
 8007ace:	b510      	push	{r4, lr}
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ada:	6083      	str	r3, [r0, #8]
 8007adc:	8181      	strh	r1, [r0, #12]
 8007ade:	6643      	str	r3, [r0, #100]	; 0x64
 8007ae0:	81c2      	strh	r2, [r0, #14]
 8007ae2:	6183      	str	r3, [r0, #24]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	2208      	movs	r2, #8
 8007ae8:	305c      	adds	r0, #92	; 0x5c
 8007aea:	f7fb fdf3 	bl	80036d4 <memset>
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <std+0x38>)
 8007af0:	6224      	str	r4, [r4, #32]
 8007af2:	6263      	str	r3, [r4, #36]	; 0x24
 8007af4:	4b04      	ldr	r3, [pc, #16]	; (8007b08 <std+0x3c>)
 8007af6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007af8:	4b04      	ldr	r3, [pc, #16]	; (8007b0c <std+0x40>)
 8007afa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <std+0x44>)
 8007afe:	6323      	str	r3, [r4, #48]	; 0x30
 8007b00:	bd10      	pop	{r4, pc}
 8007b02:	bf00      	nop
 8007b04:	08007ebd 	.word	0x08007ebd
 8007b08:	08007edf 	.word	0x08007edf
 8007b0c:	08007f17 	.word	0x08007f17
 8007b10:	08007f3b 	.word	0x08007f3b

08007b14 <_cleanup_r>:
 8007b14:	4901      	ldr	r1, [pc, #4]	; (8007b1c <_cleanup_r+0x8>)
 8007b16:	f000 b8af 	b.w	8007c78 <_fwalk_reent>
 8007b1a:	bf00      	nop
 8007b1c:	08007a55 	.word	0x08007a55

08007b20 <__sfmoreglue>:
 8007b20:	2268      	movs	r2, #104	; 0x68
 8007b22:	b570      	push	{r4, r5, r6, lr}
 8007b24:	1e4d      	subs	r5, r1, #1
 8007b26:	4355      	muls	r5, r2
 8007b28:	460e      	mov	r6, r1
 8007b2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b2e:	f7ff fae7 	bl	8007100 <_malloc_r>
 8007b32:	4604      	mov	r4, r0
 8007b34:	b140      	cbz	r0, 8007b48 <__sfmoreglue+0x28>
 8007b36:	2100      	movs	r1, #0
 8007b38:	e9c0 1600 	strd	r1, r6, [r0]
 8007b3c:	300c      	adds	r0, #12
 8007b3e:	60a0      	str	r0, [r4, #8]
 8007b40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b44:	f7fb fdc6 	bl	80036d4 <memset>
 8007b48:	4620      	mov	r0, r4
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}

08007b4c <__sfp_lock_acquire>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	; (8007b54 <__sfp_lock_acquire+0x8>)
 8007b4e:	f000 b8b3 	b.w	8007cb8 <__retarget_lock_acquire_recursive>
 8007b52:	bf00      	nop
 8007b54:	20000555 	.word	0x20000555

08007b58 <__sfp_lock_release>:
 8007b58:	4801      	ldr	r0, [pc, #4]	; (8007b60 <__sfp_lock_release+0x8>)
 8007b5a:	f000 b8ae 	b.w	8007cba <__retarget_lock_release_recursive>
 8007b5e:	bf00      	nop
 8007b60:	20000555 	.word	0x20000555

08007b64 <__sinit_lock_acquire>:
 8007b64:	4801      	ldr	r0, [pc, #4]	; (8007b6c <__sinit_lock_acquire+0x8>)
 8007b66:	f000 b8a7 	b.w	8007cb8 <__retarget_lock_acquire_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	20000556 	.word	0x20000556

08007b70 <__sinit_lock_release>:
 8007b70:	4801      	ldr	r0, [pc, #4]	; (8007b78 <__sinit_lock_release+0x8>)
 8007b72:	f000 b8a2 	b.w	8007cba <__retarget_lock_release_recursive>
 8007b76:	bf00      	nop
 8007b78:	20000556 	.word	0x20000556

08007b7c <__sinit>:
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	4604      	mov	r4, r0
 8007b80:	f7ff fff0 	bl	8007b64 <__sinit_lock_acquire>
 8007b84:	69a3      	ldr	r3, [r4, #24]
 8007b86:	b11b      	cbz	r3, 8007b90 <__sinit+0x14>
 8007b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b8c:	f7ff bff0 	b.w	8007b70 <__sinit_lock_release>
 8007b90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b94:	6523      	str	r3, [r4, #80]	; 0x50
 8007b96:	4b13      	ldr	r3, [pc, #76]	; (8007be4 <__sinit+0x68>)
 8007b98:	4a13      	ldr	r2, [pc, #76]	; (8007be8 <__sinit+0x6c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b9e:	42a3      	cmp	r3, r4
 8007ba0:	bf08      	it	eq
 8007ba2:	2301      	moveq	r3, #1
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	bf08      	it	eq
 8007ba8:	61a3      	streq	r3, [r4, #24]
 8007baa:	f000 f81f 	bl	8007bec <__sfp>
 8007bae:	6060      	str	r0, [r4, #4]
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 f81b 	bl	8007bec <__sfp>
 8007bb6:	60a0      	str	r0, [r4, #8]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 f817 	bl	8007bec <__sfp>
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2104      	movs	r1, #4
 8007bc2:	60e0      	str	r0, [r4, #12]
 8007bc4:	6860      	ldr	r0, [r4, #4]
 8007bc6:	f7ff ff81 	bl	8007acc <std>
 8007bca:	2201      	movs	r2, #1
 8007bcc:	2109      	movs	r1, #9
 8007bce:	68a0      	ldr	r0, [r4, #8]
 8007bd0:	f7ff ff7c 	bl	8007acc <std>
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	2112      	movs	r1, #18
 8007bd8:	68e0      	ldr	r0, [r4, #12]
 8007bda:	f7ff ff77 	bl	8007acc <std>
 8007bde:	2301      	movs	r3, #1
 8007be0:	61a3      	str	r3, [r4, #24]
 8007be2:	e7d1      	b.n	8007b88 <__sinit+0xc>
 8007be4:	08008074 	.word	0x08008074
 8007be8:	08007b15 	.word	0x08007b15

08007bec <__sfp>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	4607      	mov	r7, r0
 8007bf0:	f7ff ffac 	bl	8007b4c <__sfp_lock_acquire>
 8007bf4:	4b1e      	ldr	r3, [pc, #120]	; (8007c70 <__sfp+0x84>)
 8007bf6:	681e      	ldr	r6, [r3, #0]
 8007bf8:	69b3      	ldr	r3, [r6, #24]
 8007bfa:	b913      	cbnz	r3, 8007c02 <__sfp+0x16>
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff ffbd 	bl	8007b7c <__sinit>
 8007c02:	3648      	adds	r6, #72	; 0x48
 8007c04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	d503      	bpl.n	8007c14 <__sfp+0x28>
 8007c0c:	6833      	ldr	r3, [r6, #0]
 8007c0e:	b30b      	cbz	r3, 8007c54 <__sfp+0x68>
 8007c10:	6836      	ldr	r6, [r6, #0]
 8007c12:	e7f7      	b.n	8007c04 <__sfp+0x18>
 8007c14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c18:	b9d5      	cbnz	r5, 8007c50 <__sfp+0x64>
 8007c1a:	4b16      	ldr	r3, [pc, #88]	; (8007c74 <__sfp+0x88>)
 8007c1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c20:	60e3      	str	r3, [r4, #12]
 8007c22:	6665      	str	r5, [r4, #100]	; 0x64
 8007c24:	f000 f847 	bl	8007cb6 <__retarget_lock_init_recursive>
 8007c28:	f7ff ff96 	bl	8007b58 <__sfp_lock_release>
 8007c2c:	2208      	movs	r2, #8
 8007c2e:	4629      	mov	r1, r5
 8007c30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c38:	6025      	str	r5, [r4, #0]
 8007c3a:	61a5      	str	r5, [r4, #24]
 8007c3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c40:	f7fb fd48 	bl	80036d4 <memset>
 8007c44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c50:	3468      	adds	r4, #104	; 0x68
 8007c52:	e7d9      	b.n	8007c08 <__sfp+0x1c>
 8007c54:	2104      	movs	r1, #4
 8007c56:	4638      	mov	r0, r7
 8007c58:	f7ff ff62 	bl	8007b20 <__sfmoreglue>
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	6030      	str	r0, [r6, #0]
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d1d5      	bne.n	8007c10 <__sfp+0x24>
 8007c64:	f7ff ff78 	bl	8007b58 <__sfp_lock_release>
 8007c68:	230c      	movs	r3, #12
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	e7ee      	b.n	8007c4c <__sfp+0x60>
 8007c6e:	bf00      	nop
 8007c70:	08008074 	.word	0x08008074
 8007c74:	ffff0001 	.word	0xffff0001

08007c78 <_fwalk_reent>:
 8007c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	4688      	mov	r8, r1
 8007c80:	2700      	movs	r7, #0
 8007c82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c8a:	f1b9 0901 	subs.w	r9, r9, #1
 8007c8e:	d505      	bpl.n	8007c9c <_fwalk_reent+0x24>
 8007c90:	6824      	ldr	r4, [r4, #0]
 8007c92:	2c00      	cmp	r4, #0
 8007c94:	d1f7      	bne.n	8007c86 <_fwalk_reent+0xe>
 8007c96:	4638      	mov	r0, r7
 8007c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9c:	89ab      	ldrh	r3, [r5, #12]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d907      	bls.n	8007cb2 <_fwalk_reent+0x3a>
 8007ca2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	d003      	beq.n	8007cb2 <_fwalk_reent+0x3a>
 8007caa:	4629      	mov	r1, r5
 8007cac:	4630      	mov	r0, r6
 8007cae:	47c0      	blx	r8
 8007cb0:	4307      	orrs	r7, r0
 8007cb2:	3568      	adds	r5, #104	; 0x68
 8007cb4:	e7e9      	b.n	8007c8a <_fwalk_reent+0x12>

08007cb6 <__retarget_lock_init_recursive>:
 8007cb6:	4770      	bx	lr

08007cb8 <__retarget_lock_acquire_recursive>:
 8007cb8:	4770      	bx	lr

08007cba <__retarget_lock_release_recursive>:
 8007cba:	4770      	bx	lr

08007cbc <__swhatbuf_r>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	460e      	mov	r6, r1
 8007cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	2900      	cmp	r1, #0
 8007cc8:	461d      	mov	r5, r3
 8007cca:	b096      	sub	sp, #88	; 0x58
 8007ccc:	da08      	bge.n	8007ce0 <__swhatbuf_r+0x24>
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	061a      	lsls	r2, r3, #24
 8007cd8:	d410      	bmi.n	8007cfc <__swhatbuf_r+0x40>
 8007cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cde:	e00e      	b.n	8007cfe <__swhatbuf_r+0x42>
 8007ce0:	466a      	mov	r2, sp
 8007ce2:	f000 f951 	bl	8007f88 <_fstat_r>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	dbf1      	blt.n	8007cce <__swhatbuf_r+0x12>
 8007cea:	9a01      	ldr	r2, [sp, #4]
 8007cec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cf4:	425a      	negs	r2, r3
 8007cf6:	415a      	adcs	r2, r3
 8007cf8:	602a      	str	r2, [r5, #0]
 8007cfa:	e7ee      	b.n	8007cda <__swhatbuf_r+0x1e>
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	2000      	movs	r0, #0
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	b016      	add	sp, #88	; 0x58
 8007d04:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d08 <__smakebuf_r>:
 8007d08:	898b      	ldrh	r3, [r1, #12]
 8007d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d0c:	079d      	lsls	r5, r3, #30
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460c      	mov	r4, r1
 8007d12:	d507      	bpl.n	8007d24 <__smakebuf_r+0x1c>
 8007d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	6123      	str	r3, [r4, #16]
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	6163      	str	r3, [r4, #20]
 8007d20:	b002      	add	sp, #8
 8007d22:	bd70      	pop	{r4, r5, r6, pc}
 8007d24:	466a      	mov	r2, sp
 8007d26:	ab01      	add	r3, sp, #4
 8007d28:	f7ff ffc8 	bl	8007cbc <__swhatbuf_r>
 8007d2c:	9900      	ldr	r1, [sp, #0]
 8007d2e:	4605      	mov	r5, r0
 8007d30:	4630      	mov	r0, r6
 8007d32:	f7ff f9e5 	bl	8007100 <_malloc_r>
 8007d36:	b948      	cbnz	r0, 8007d4c <__smakebuf_r+0x44>
 8007d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d3c:	059a      	lsls	r2, r3, #22
 8007d3e:	d4ef      	bmi.n	8007d20 <__smakebuf_r+0x18>
 8007d40:	f023 0303 	bic.w	r3, r3, #3
 8007d44:	f043 0302 	orr.w	r3, r3, #2
 8007d48:	81a3      	strh	r3, [r4, #12]
 8007d4a:	e7e3      	b.n	8007d14 <__smakebuf_r+0xc>
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <__smakebuf_r+0x7c>)
 8007d4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	6020      	str	r0, [r4, #0]
 8007d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d58:	81a3      	strh	r3, [r4, #12]
 8007d5a:	9b00      	ldr	r3, [sp, #0]
 8007d5c:	6120      	str	r0, [r4, #16]
 8007d5e:	6163      	str	r3, [r4, #20]
 8007d60:	9b01      	ldr	r3, [sp, #4]
 8007d62:	b15b      	cbz	r3, 8007d7c <__smakebuf_r+0x74>
 8007d64:	4630      	mov	r0, r6
 8007d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d6a:	f000 f91f 	bl	8007fac <_isatty_r>
 8007d6e:	b128      	cbz	r0, 8007d7c <__smakebuf_r+0x74>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	f043 0301 	orr.w	r3, r3, #1
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	89a0      	ldrh	r0, [r4, #12]
 8007d7e:	4305      	orrs	r5, r0
 8007d80:	81a5      	strh	r5, [r4, #12]
 8007d82:	e7cd      	b.n	8007d20 <__smakebuf_r+0x18>
 8007d84:	08007b15 	.word	0x08007b15

08007d88 <memmove>:
 8007d88:	4288      	cmp	r0, r1
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	eb01 0402 	add.w	r4, r1, r2
 8007d90:	d902      	bls.n	8007d98 <memmove+0x10>
 8007d92:	4284      	cmp	r4, r0
 8007d94:	4623      	mov	r3, r4
 8007d96:	d807      	bhi.n	8007da8 <memmove+0x20>
 8007d98:	1e43      	subs	r3, r0, #1
 8007d9a:	42a1      	cmp	r1, r4
 8007d9c:	d008      	beq.n	8007db0 <memmove+0x28>
 8007d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007da2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007da6:	e7f8      	b.n	8007d9a <memmove+0x12>
 8007da8:	4601      	mov	r1, r0
 8007daa:	4402      	add	r2, r0
 8007dac:	428a      	cmp	r2, r1
 8007dae:	d100      	bne.n	8007db2 <memmove+0x2a>
 8007db0:	bd10      	pop	{r4, pc}
 8007db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dba:	e7f7      	b.n	8007dac <memmove+0x24>

08007dbc <__malloc_lock>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	; (8007dc4 <__malloc_lock+0x8>)
 8007dbe:	f7ff bf7b 	b.w	8007cb8 <__retarget_lock_acquire_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	20000554 	.word	0x20000554

08007dc8 <__malloc_unlock>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	; (8007dd0 <__malloc_unlock+0x8>)
 8007dca:	f7ff bf76 	b.w	8007cba <__retarget_lock_release_recursive>
 8007dce:	bf00      	nop
 8007dd0:	20000554 	.word	0x20000554

08007dd4 <_realloc_r>:
 8007dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd8:	4680      	mov	r8, r0
 8007dda:	4614      	mov	r4, r2
 8007ddc:	460e      	mov	r6, r1
 8007dde:	b921      	cbnz	r1, 8007dea <_realloc_r+0x16>
 8007de0:	4611      	mov	r1, r2
 8007de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007de6:	f7ff b98b 	b.w	8007100 <_malloc_r>
 8007dea:	b92a      	cbnz	r2, 8007df8 <_realloc_r+0x24>
 8007dec:	f7ff f920 	bl	8007030 <_free_r>
 8007df0:	4625      	mov	r5, r4
 8007df2:	4628      	mov	r0, r5
 8007df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df8:	f000 f8fa 	bl	8007ff0 <_malloc_usable_size_r>
 8007dfc:	4284      	cmp	r4, r0
 8007dfe:	4607      	mov	r7, r0
 8007e00:	d802      	bhi.n	8007e08 <_realloc_r+0x34>
 8007e02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e06:	d812      	bhi.n	8007e2e <_realloc_r+0x5a>
 8007e08:	4621      	mov	r1, r4
 8007e0a:	4640      	mov	r0, r8
 8007e0c:	f7ff f978 	bl	8007100 <_malloc_r>
 8007e10:	4605      	mov	r5, r0
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d0ed      	beq.n	8007df2 <_realloc_r+0x1e>
 8007e16:	42bc      	cmp	r4, r7
 8007e18:	4622      	mov	r2, r4
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	bf28      	it	cs
 8007e1e:	463a      	movcs	r2, r7
 8007e20:	f7fe fc2c 	bl	800667c <memcpy>
 8007e24:	4631      	mov	r1, r6
 8007e26:	4640      	mov	r0, r8
 8007e28:	f7ff f902 	bl	8007030 <_free_r>
 8007e2c:	e7e1      	b.n	8007df2 <_realloc_r+0x1e>
 8007e2e:	4635      	mov	r5, r6
 8007e30:	e7df      	b.n	8007df2 <_realloc_r+0x1e>

08007e32 <_raise_r>:
 8007e32:	291f      	cmp	r1, #31
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4604      	mov	r4, r0
 8007e38:	460d      	mov	r5, r1
 8007e3a:	d904      	bls.n	8007e46 <_raise_r+0x14>
 8007e3c:	2316      	movs	r3, #22
 8007e3e:	6003      	str	r3, [r0, #0]
 8007e40:	f04f 30ff 	mov.w	r0, #4294967295
 8007e44:	bd38      	pop	{r3, r4, r5, pc}
 8007e46:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e48:	b112      	cbz	r2, 8007e50 <_raise_r+0x1e>
 8007e4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e4e:	b94b      	cbnz	r3, 8007e64 <_raise_r+0x32>
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 f831 	bl	8007eb8 <_getpid_r>
 8007e56:	462a      	mov	r2, r5
 8007e58:	4601      	mov	r1, r0
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e60:	f000 b818 	b.w	8007e94 <_kill_r>
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d00a      	beq.n	8007e7e <_raise_r+0x4c>
 8007e68:	1c59      	adds	r1, r3, #1
 8007e6a:	d103      	bne.n	8007e74 <_raise_r+0x42>
 8007e6c:	2316      	movs	r3, #22
 8007e6e:	6003      	str	r3, [r0, #0]
 8007e70:	2001      	movs	r0, #1
 8007e72:	e7e7      	b.n	8007e44 <_raise_r+0x12>
 8007e74:	2400      	movs	r4, #0
 8007e76:	4628      	mov	r0, r5
 8007e78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e7c:	4798      	blx	r3
 8007e7e:	2000      	movs	r0, #0
 8007e80:	e7e0      	b.n	8007e44 <_raise_r+0x12>
	...

08007e84 <raise>:
 8007e84:	4b02      	ldr	r3, [pc, #8]	; (8007e90 <raise+0xc>)
 8007e86:	4601      	mov	r1, r0
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	f7ff bfd2 	b.w	8007e32 <_raise_r>
 8007e8e:	bf00      	nop
 8007e90:	2000000c 	.word	0x2000000c

08007e94 <_kill_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	2300      	movs	r3, #0
 8007e98:	4d06      	ldr	r5, [pc, #24]	; (8007eb4 <_kill_r+0x20>)
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	4608      	mov	r0, r1
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	f7f9 fa09 	bl	80012b8 <_kill>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	d102      	bne.n	8007eb0 <_kill_r+0x1c>
 8007eaa:	682b      	ldr	r3, [r5, #0]
 8007eac:	b103      	cbz	r3, 8007eb0 <_kill_r+0x1c>
 8007eae:	6023      	str	r3, [r4, #0]
 8007eb0:	bd38      	pop	{r3, r4, r5, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000558 	.word	0x20000558

08007eb8 <_getpid_r>:
 8007eb8:	f7f9 b9fc 	b.w	80012b4 <_getpid>

08007ebc <__sread>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec4:	f000 f89c 	bl	8008000 <_read_r>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	bfab      	itete	ge
 8007ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ece:	89a3      	ldrhlt	r3, [r4, #12]
 8007ed0:	181b      	addge	r3, r3, r0
 8007ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ed6:	bfac      	ite	ge
 8007ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eda:	81a3      	strhlt	r3, [r4, #12]
 8007edc:	bd10      	pop	{r4, pc}

08007ede <__swrite>:
 8007ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee2:	461f      	mov	r7, r3
 8007ee4:	898b      	ldrh	r3, [r1, #12]
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	05db      	lsls	r3, r3, #23
 8007eea:	460c      	mov	r4, r1
 8007eec:	4616      	mov	r6, r2
 8007eee:	d505      	bpl.n	8007efc <__swrite+0x1e>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef8:	f000 f868 	bl	8007fcc <_lseek_r>
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	4632      	mov	r2, r6
 8007f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f04:	81a3      	strh	r3, [r4, #12]
 8007f06:	4628      	mov	r0, r5
 8007f08:	463b      	mov	r3, r7
 8007f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f12:	f000 b817 	b.w	8007f44 <_write_r>

08007f16 <__sseek>:
 8007f16:	b510      	push	{r4, lr}
 8007f18:	460c      	mov	r4, r1
 8007f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f1e:	f000 f855 	bl	8007fcc <_lseek_r>
 8007f22:	1c43      	adds	r3, r0, #1
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	bf15      	itete	ne
 8007f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f32:	81a3      	strheq	r3, [r4, #12]
 8007f34:	bf18      	it	ne
 8007f36:	81a3      	strhne	r3, [r4, #12]
 8007f38:	bd10      	pop	{r4, pc}

08007f3a <__sclose>:
 8007f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3e:	f000 b813 	b.w	8007f68 <_close_r>
	...

08007f44 <_write_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4d05      	ldr	r5, [pc, #20]	; (8007f64 <_write_r+0x20>)
 8007f50:	602a      	str	r2, [r5, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f7f9 f9cc 	bl	80012f0 <_write>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_write_r+0x1e>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_write_r+0x1e>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	20000558 	.word	0x20000558

08007f68 <_close_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	4d05      	ldr	r5, [pc, #20]	; (8007f84 <_close_r+0x1c>)
 8007f6e:	4604      	mov	r4, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	602b      	str	r3, [r5, #0]
 8007f74:	f7f9 f9ca 	bl	800130c <_close>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_close_r+0x1a>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_close_r+0x1a>
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	20000558 	.word	0x20000558

08007f88 <_fstat_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4d06      	ldr	r5, [pc, #24]	; (8007fa8 <_fstat_r+0x20>)
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	4611      	mov	r1, r2
 8007f94:	602b      	str	r3, [r5, #0]
 8007f96:	f7f9 f9bc 	bl	8001312 <_fstat>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	d102      	bne.n	8007fa4 <_fstat_r+0x1c>
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	b103      	cbz	r3, 8007fa4 <_fstat_r+0x1c>
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000558 	.word	0x20000558

08007fac <_isatty_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	2300      	movs	r3, #0
 8007fb0:	4d05      	ldr	r5, [pc, #20]	; (8007fc8 <_isatty_r+0x1c>)
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	f7f9 f9b0 	bl	800131c <_isatty>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_isatty_r+0x1a>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_isatty_r+0x1a>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20000558 	.word	0x20000558

08007fcc <_lseek_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4d05      	ldr	r5, [pc, #20]	; (8007fec <_lseek_r+0x20>)
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f7f9 f9a0 	bl	8001320 <_lseek>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_lseek_r+0x1e>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_lseek_r+0x1e>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	20000558 	.word	0x20000558

08007ff0 <_malloc_usable_size_r>:
 8007ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff4:	1f18      	subs	r0, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	bfbc      	itt	lt
 8007ffa:	580b      	ldrlt	r3, [r1, r0]
 8007ffc:	18c0      	addlt	r0, r0, r3
 8007ffe:	4770      	bx	lr

08008000 <_read_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	4611      	mov	r1, r2
 8008008:	2200      	movs	r2, #0
 800800a:	4d05      	ldr	r5, [pc, #20]	; (8008020 <_read_r+0x20>)
 800800c:	602a      	str	r2, [r5, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	f7f9 f960 	bl	80012d4 <_read>
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	d102      	bne.n	800801e <_read_r+0x1e>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	b103      	cbz	r3, 800801e <_read_r+0x1e>
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	bd38      	pop	{r3, r4, r5, pc}
 8008020:	20000558 	.word	0x20000558

08008024 <_init>:
 8008024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008026:	bf00      	nop
 8008028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802a:	bc08      	pop	{r3}
 800802c:	469e      	mov	lr, r3
 800802e:	4770      	bx	lr

08008030 <_fini>:
 8008030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008032:	bf00      	nop
 8008034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008036:	bc08      	pop	{r3}
 8008038:	469e      	mov	lr, r3
 800803a:	4770      	bx	lr
